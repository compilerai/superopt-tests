argv[0] = eq32
argv[1] = --check-safety
argv[2] = --unroll-factor
argv[3] = 3
argv[4] = emi1.c
argv[5] = emi1.fixed.s
argv[6] = --proof
argv[7] = emi1.fixed.cg
Query dir: /tmp/smt-solver-tmp-files/sbansal.1344095
argv[0] = /home/sbansal/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/sbansal/superopt-project/superopt-tests/soundness/emi1.c
argv[10] = -o
argv[11] = /home/sbansal/superopt-project/superopt-tests/soundness/emi1.c.bc.tmp
argv[12] = -m32

argv[0] = /home/sbansal/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = /home/sbansal/superopt-project/superopt-tests/soundness/emi1.c.bc
argv[9] = -o
argv[10] = emi1.c.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function main</MSG>


tfg_get_simplified_edge_cond_for_edge: num_starts 481 time spent: 0:0:0 [0.000734s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 264 time spent: 0:0:0 [0.000361s total; 0.000001 per start]
expr_label_memlabels_using_memlabel_map: num_starts 3236 time spent: 0:0:0 [0.013101s total; 0.000004 per start]
expr_simplify_solver: num_starts 961 time spent: 0:0:0 [0.040113s total; 0.000042 per start]
expr_simplify_syntactic: num_starts 961 time spent: 0:0:0 [0.292758s total; 0.000305 per start]
expr_simplify_select_on_store: num_starts 58 time spent: 0:0:0 [0.073639s total; 0.001270 per start]
expr_simplify_store_on_store: num_starts 246 time spent: 0:0:0 [0.014214s total; 0.000058 per start]
expr_simplify_using_lhs_set_helper: num_starts 397 time spent: 0:0:0 [0.350210s total; 0.000882 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 3496 time spent: 0:0:0 [0.347966s total; 0.000100 per start]
expr_evaluates_to_constant: num_starts 1693 time spent: 0:0:0 [0.007647s total; 0.000005 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 488 time spent: 0:0:0 [0.001043s total; 0.000002 per start]
expr_simplify_eq: num_starts 5 time spent: 0:0:0 [0.000053s total; 0.000011 per start]
expr_simplify_not: num_starts 7 time spent: 0:0:0 [0.000010s total; 0.000001 per start]
expr_simplify_ite: num_starts 4 time spent: 0:0:0 [0.000284s total; 0.000071 per start]
canonicalize_expr_tree: num_starts 264 time spent: 0:0:0 [0.004456s total; 0.000017 per start]
expr_simplify_memalloc_using_memlabel: num_starts 194 time spent: 0:0:0 [0.000571s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 93 time spent: 0:0:0 [0.072451s total; 0.000779 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 32 time spent: 0:0:0 [0.014487s total; 0.000453 per start]
memlabel_contains_only_readonly_symbols: num_starts 32 time spent: 0:0:0 [0.000008s total; 0.000000 per start]
memlabels_are_independent: num_starts 250 time spent: 0:0:0 [0.000487s total; 0.000002 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 16 time spent: 0:0:0 [0.004581s total; 0.000286 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 16 time spent: 0:0:0 [0.004509s total; 0.000282 per start]
is_overlapping_atoms_pair_syntactic: num_starts 16 time spent: 0:0:0 [0.004137s total; 0.000259 per start]
is_overlapping_considering_type_constraints: num_starts 16 time spent: 0:0:0 [0.000065s total; 0.000004 per start]
find_offset_wrt_typed_variable_pointer: num_starts 32 time spent: 0:0:0 [0.000062s total; 0.000002 per start]
is_gep_inbounds_offset: num_starts 32 time spent: 0:0:0 [0.000002s total; 0.000000 per start]
get_arithmetic_addsub_atoms: num_starts 1020 time spent: 0:0:0 [0.001062s total; 0.000001 per start]
expr_is_variable_start: num_starts 16 time spent: 0:0:0 [0.000002s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 482 time spent: 0:0:0 [0.004215s total; 0.000009 per start]
expr_is_consts_struct_constant: num_starts 6283 time spent: 0:0:0 [0.002959s total; 0.000000 per start]
expr_do_simplify_helper: num_starts 7956 time spent: 0:0:0 [0.358132s total; 0.000045 per start]
expr_do_simplify_helper_cache: num_starts 7956 time spent: 0:0:0 [0.005189s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 8 time spent: 0:0:0 [0.000001s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 8 time spent: 0:0:0 [0.000016s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 436 time spent: 0:0:0 [0.631985s total; 0.001450 per start]
alias_val_xfer_and_meet: num_starts 436 time spent: 0:0:0 [0.248790s total; 0.000571 per start]
get_sprel_map_from_avail_exprs: num_starts 494 time spent: 0:0:0 [0.061021s total; 0.000124 per start]
update_memlabels_for_memslot_locs: num_starts 57 time spent: 0:0:0 [0.002244s total; 0.000039 per start]
populate_gen_and_kill_sets_for_edge: num_starts 872 time spent: 0:0:0 [0.046174s total; 0.000053 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1983 time spent: 0:0:0 [0.402911s total; 0.000203 per start]
compute_locs_definitely_written_on_edge: num_starts 872 time spent: 0:0:0 [0.000327s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 239 time spent: 0:0:0 [0.109489s total; 0.000458 per start]
edge_update_memlabel_map_for_mlvars: num_starts 436 time spent: 0:0:0 [0.006589s total; 0.000015 per start]
add_new_locs_based_on_edge: num_starts 436 time spent: 0:0:0 [0.057685s total; 0.000132 per start]
alias_val_meet: num_starts 436 time spent: 0:0:0 [0.052307s total; 0.000120 per start]
expand_locset_to_include_slots_for_memmask: num_starts 420 time spent: 0:0:0 [0.002775s total; 0.000007 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
set_symbol_map_for_touched_symbols.: 4e-06s (num_starts 1; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::conservative_dfa_val_for_newly_defined_loc.: 1e-05s (num_starts 1; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::conservative_dfa_val_for_newly_defined_loc.: 1e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 3.4e-05s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 4.1e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 5.1e-05s (num_starts 1; 0.0001s/start)
add_extra_node_at_start_pc.: 7.4e-05s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 9.4e-05s (num_starts 144; 0.0000s/start)
expr_is_callee_save_const.: 0.000124s (num_starts 148; 0.0000s/start)
populate_locid2expr_map.: 0.00014s (num_starts 1; 0.0001s/start)
compute_sprel_relations.: 0.000141s (num_starts 1; 0.0001s/start)
propagate_sprels.: 0.000148s (num_starts 1; 0.0001s/start)
determinize_value_expr_map.: 0.000155s (num_starts 267; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 0.000212s (num_starts 437; 0.0000s/start)
main.3.: 0.000277s (num_starts 1; 0.0003s/start)
graph_locs_add_exvregs_for_edge.: 0.000304s (num_starts 132; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000358s (num_starts 1; 0.0004s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000365s (num_starts 14; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000393s (num_starts 132; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.000398s (num_starts 4; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000445s (num_starts 58; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000451s (num_starts 1; 0.0005s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000568s (num_starts 2; 0.0003s/start)
graph_locs_add_all_llvmvars.: 0.000749s (num_starts 1; 0.0007s/start)
expr_represents_llvm_undef.: 0.00096s (num_starts 150; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.001163s (num_starts 17; 0.0001s/start)
canonicalize_llvm_nextpcs.: 0.001331s (num_starts 1; 0.0013s/start)
tfg::populate_loc_definedness.post_dfa.: 0.001356s (num_starts 2; 0.0007s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.001417s (num_starts 436; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.001733s (num_starts 264; 0.0000s/start)
graph_locs_map_update_memlabels_for_memslot_locs_with_memalloc.calling.compute_lr_status_for_expr.: 0.001926s (num_starts 37; 0.0001s/start)
sp_version_relations_val_t::meet.: 0.001992s (num_starts 5748; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.002111s (num_starts 1; 0.0021s/start)
def_analysis::xfer_and_meet.: 0.00295s (num_starts 294; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.003302s (num_starts 199; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.003567s (num_starts 1; 0.0036s/start)
expr_substitute_using_available_exprs_submap.: 0.00525s (num_starts 207; 0.0000s/start)
populate_exit_return_values_for_llvm_method.: 0.005404s (num_starts 1; 0.0054s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.005432s (num_starts 436; 0.0000s/start)
create_closure_matrix.: 0.005553s (num_starts 493; 0.0000s/start)
graph_visit_exprs.: 0.005907s (num_starts 4; 0.0015s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.006155s (num_starts 436; 0.0000s/start)
query:convert_from_z3.: 0.008318s (num_starts 264; 0.0000s/start)
query:convert_to_z3.: 0.00843s (num_starts 264; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.012647s (num_starts 1; 0.0126s/start)
populate_dominator_and_postdominator_relations.: 0.015954s (num_starts 1; 0.0160s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.018343s (num_starts 3236; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.020648s (num_starts 11302; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.02119s (num_starts 362; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.023001s (num_starts 177; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.023238s (num_starts 177; 0.0001s/start)
query:simplify-z3.: 0.02332s (num_starts 528; 0.0000s/start)
graph_to_stream.: 0.023548s (num_starts 1; 0.0235s/start)
compute_lr_status_for_expr.: 0.025631s (num_starts 249; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.028371s (num_starts 2; 0.0142s/start)
populate_simplified_to_state.: 0.028925s (num_starts 2; 0.0145s/start)
tfg::populate_loc_definedness.before_initialize.: 0.029089s (num_starts 2; 0.0145s/start)
tfg::populate_loc_definedness.: 0.029808s (num_starts 2; 0.0149s/start)
graph_identify_back_edges.: 0.029853s (num_starts 4; 0.0075s/start)
create_sp_version_relations_lattice_at_pc.: 0.030396s (num_starts 493; 0.0001s/start)
graph_identify_natural_loops.: 0.031271s (num_starts 4; 0.0078s/start)
lr_status_meet.: 0.033042s (num_starts 27472; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.033156s (num_starts 436; 0.0001s/start)
populate_simplified_assets.: 0.035461s (num_starts 4; 0.0089s/start)
find_dominators.: 0.044076s (num_starts 6; 0.0073s/start)
compute_regions.: 0.045621s (num_starts 4; 0.0114s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.049706s (num_starts 1; 0.0497s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.050045s (num_starts 1; 0.0500s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.050852s (num_starts 1; 0.0509s/start)
tfg_preprocess.src.llvm.main.: 0.070208s (num_starts 1; 0.0702s/start)
tfg::tfg_preprocess.: 0.07021s (num_starts 1; 0.0702s/start)
populate_branch_affecting_locs.: 0.073006s (num_starts 2; 0.0365s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.078337s (num_starts 3236; 0.0000s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.079105s (num_starts 436; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.081463s (num_starts 3236; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.092414s (num_starts 1; 0.0924s/start)
get_tfg.: 0.096109s (num_starts 1; 0.0961s/start)
get_function_tfg_map.main.: 0.096173s (num_starts 1; 0.0962s/start)
get_function_tfg_map.: 0.096175s (num_starts 1; 0.0962s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.098163s (num_starts 3236; 0.0000s/start)
main.2.: 0.107285s (num_starts 1; 0.1073s/start)
populate_locs_potentially_modified_on_edge.: 0.107648s (num_starts 2; 0.0538s/start)
compute_new_lr_status_on_locs.: 0.11897s (num_starts 436; 0.0003s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.134962s (num_starts 436; 0.0003s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.143116s (num_starts 2; 0.0716s/start)
avail_exprs_create_submap.: 0.200484s (num_starts 1308; 0.0002s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.242273s (num_starts 436; 0.0006s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.25099s (num_starts 436; 0.0006s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.29186s (num_starts 411; 0.0007s/start)
populate_loc_liveness.: 0.331868s (num_starts 2; 0.1659s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.350668s (num_starts 397; 0.0009s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.632328s (num_starts 436; 0.0015s/start)
tfg_postprocess_after_pointsto_analysis.: 0.637233s (num_starts 1; 0.6372s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.811227s (num_starts 1; 0.8112s/start)
ftmap_run_pointsto_analysis.: 1.52213s (num_starts 1; 1.5221s/start)
parse_consts_db.: 3.90751s (num_starts 1; 3.9075s/start)
main.: 5.63815s (num_starts 1; 5.6382s/start)

counters:

flags:

info:


 /home/sbansal/superopt-project/usr/local/bin/harvest32 -functions_only -live_callee_save -allow_unsupported -no_canonicalize_imms -no_eliminate_unreachable_bbls -no_eliminate_duplicates -f ALL -o /home/sbansal/superopt-project/superopt-tests/soundness/emi1.fixed.s.o.harvest -l /home/sbansal/superopt-project/superopt-tests/soundness/emi1.fixed.s.o.harvest.log /home/sbansal/superopt-project/superopt-tests/soundness/emi1.fixed.s.o
Printing stats::get():
timers:
i386_init_costfns.: 1e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 4e-06s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 3e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 3.7e-05s (num_starts 1; 0.0000s/start)
src_iseq_fetch.: 7.1e-05s (num_starts 2; 0.0000s/start)
obtain_live_outs.: 0.000102s (num_starts 1; 0.0001s/start)
src_iseq_copy.: 0.000149s (num_starts 49; 0.0000s/start)
i386_insn_init_constants.: 0.00115s (num_starts 1; 0.0011s/start)
gas_init.: 0.001891s (num_starts 1; 0.0019s/start)
regset_diff.: 0.002251s (num_starts 216; 0.0000s/start)
opctable_init.: 0.005723s (num_starts 1; 0.0057s/start)
imm_vt_map_copy.: 0.009879s (num_starts 30024; 0.0000s/start)
regset_rename.: 0.025159s (num_starts 3336; 0.0000s/start)
src_iseq_get_usedef.: 0.076367s (num_starts 2; 0.0382s/start)
src_iseq_get_usedef_regs.: 0.076374s (num_starts 2; 0.0382s/start)
init_input_file.: 0.248327s (num_starts 1; 0.2483s/start)
insn_db_list_get_all_matches.: 0.265582s (num_starts 209; 0.0013s/start)
insn_db_get_all_matches.: 0.266121s (num_starts 209; 0.0013s/start)
src_insn_get_usedef.: 0.305625s (num_starts 209; 0.0015s/start)
src_iseq_deserialize.: 3.04475s (num_starts 44336; 0.0001s/start)
opc_init.: 3.2691s (num_starts 1; 3.2691s/start)
i386_init.: 3.271s (num_starts 2; 1.6355s/start)
parse_consts_db.: 3.77795s (num_starts 1; 3.7780s/start)
src_usedef_tab_read_from_file.: 6.71347s (num_starts 1; 6.7135s/start)
src_usedef_tab_init.: 6.71347s (num_starts 1; 6.7135s/start)
usedef_init.: 6.71348s (num_starts 1; 6.7135s/start)

counters:

flags:

info:


Mem-stats:

 /home/sbansal/superopt-project/usr/local/bin/eqgen32 -tfg_llvm emi1.c.etfg -l /home/sbansal/superopt-project/superopt-tests/soundness/emi1.fixed.s.o.harvest.log -o /home/sbansal/superopt-project/superopt-tests/soundness/emi1.fixed.s.o.tfg -e /home/sbansal/superopt-project/superopt-tests/soundness/emi1.fixed.s.o -f ALL /home/sbansal/superopt-project/superopt-tests/soundness/emi1.fixed.s.o.harvest
Setting max_stack_push_delta = 2147483648
dst_tfg_add_stack_pointer_translation_at_function_entry 2562: out_e = L0%1%d=>L1%1%d
Executing: /home/sbansal/superopt-project/usr/local/bin/harvest-dwarf /home/sbansal/superopt-project/superopt-tests/soundness/emi1.fixed.s.o
main 469:Printing stats:

tfg_get_simplified_edge_cond_for_edge: num_starts 72 time spent: 0:0:0 [0.000115s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 184 time spent: 0:0:0 [0.000241s total; 0.000001 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2602 time spent: 0:0:0 [0.053609s total; 0.000021 per start]
expr_simplify_solver: num_starts 10653 time spent: 0:0:0 [0.426441s total; 0.000040 per start]
expr_simplify_syntactic: num_starts 10653 time spent: 0:0:0 [0.437364s total; 0.000041 per start]
expr_simplify_select_on_store: num_starts 108 time spent: 0:0:0 [0.120787s total; 0.001118 per start]
expr_simplify_store_on_store: num_starts 184 time spent: 0:0:0 [0.008959s total; 0.000049 per start]
expr_simplify_using_lhs_set_helper: num_starts 1247 time spent: 0:0:1 [1.003886s total; 0.000805 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 18048 time spent: 0:0:0 [0.991808s total; 0.000055 per start]
expr_evaluates_to_constant: num_starts 13230 time spent: 0:0:0 [0.049603s total; 0.000004 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 3873 time spent: 0:0:0 [0.007313s total; 0.000002 per start]
expr_simplify_eq: num_starts 1279 time spent: 0:0:0 [0.009999s total; 0.000008 per start]
expr_simplify_iff: num_starts 39 time spent: 0:0:0 [0.000015s total; 0.000000 per start]
expr_simplify_or: num_starts 29 time spent: 0:0:0 [0.000029s total; 0.000001 per start]
expr_simplify_and: num_starts 86 time spent: 0:0:0 [0.000363s total; 0.000004 per start]
expr_simplify_andnot1: num_starts 10 time spent: 0:0:0 [0.000115s total; 0.000012 per start]
expr_simplify_andnot2: num_starts 10 time spent: 0:0:0 [0.000109s total; 0.000011 per start]
expr_simplify_not: num_starts 250 time spent: 0:0:0 [0.000337s total; 0.000001 per start]
expr_simplify_implies: num_starts 9 time spent: 0:0:0 [0.000065s total; 0.000007 per start]
expr_simplify_ite: num_starts 912 time spent: 0:0:0 [0.018955s total; 0.000021 per start]
canonicalize_expr_tree: num_starts 1822 time spent: 0:0:0 [0.044479s total; 0.000024 per start]
expr_simplify_memalloc_using_memlabel: num_starts 174 time spent: 0:0:0 [0.000465s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 137 time spent: 0:0:0 [0.118798s total; 0.000867 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 28 time spent: 0:0:0 [0.011311s total; 0.000404 per start]
memlabel_contains_only_readonly_symbols: num_starts 28 time spent: 0:0:0 [0.000004s total; 0.000000 per start]
memlabels_are_independent: num_starts 191 time spent: 0:0:0 [0.000443s total; 0.000002 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 16 time spent: 0:0:0 [0.003341s total; 0.000209 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 16 time spent: 0:0:0 [0.003299s total; 0.000206 per start]
is_overlapping_atoms_pair_syntactic: num_starts 16 time spent: 0:0:0 [0.002944s total; 0.000184 per start]
is_overlapping_considering_type_constraints: num_starts 16 time spent: 0:0:0 [0.000035s total; 0.000002 per start]
find_offset_wrt_typed_variable_pointer: num_starts 16 time spent: 0:0:0 [0.000033s total; 0.000002 per start]
is_gep_inbounds_offset: num_starts 16 time spent: 0:0:0 [0.000005s total; 0.000000 per start]
get_arithmetic_addsub_atoms: num_starts 8739 time spent: 0:0:0 [0.003362s total; 0.000000 per start]
expr_is_variable_start: num_starts 16 time spent: 0:0:0 [0.000001s total; 0.000000 per start]
insn_md_assemble: num_starts 48 time spent: 0:0:0 [0.000066s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 983 time spent: 0:0:0 [0.005067s total; 0.000005 per start]
expr_is_consts_struct_constant: num_starts 1286 time spent: 0:0:0 [0.000584s total; 0.000000 per start]
expr_do_simplify_helper: num_starts 9622 time spent: 0:0:1 [1.017159s total; 0.000106 per start]
expr_do_simplify_helper_cache: num_starts 9622 time spent: 0:0:0 [0.006281s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 174 time spent: 0:0:0 [0.000036s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 174 time spent: 0:0:0 [0.000378s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 81 time spent: 0:0:0 [0.574550s total; 0.007093 per start]
alias_val_xfer_and_meet: num_starts 81 time spent: 0:0:0 [0.374910s total; 0.004629 per start]
get_sprel_map_from_avail_exprs: num_starts 104 time spent: 0:0:0 [0.011905s total; 0.000114 per start]
update_memlabels_for_memslot_locs: num_starts 22 time spent: 0:0:0 [0.003136s total; 0.000143 per start]
populate_gen_and_kill_sets_for_edge: num_starts 162 time spent: 0:0:0 [0.039688s total; 0.000245 per start]
compute_simplified_loc_exprs_for_edge: num_starts 499 time spent: 0:0:0 [0.346320s total; 0.000694 per start]
compute_locs_definitely_written_on_edge: num_starts 162 time spent: 0:0:0 [0.000285s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 152 time spent: 0:0:0 [0.046348s total; 0.000305 per start]
edge_update_memlabel_map_for_mlvars: num_starts 81 time spent: 0:0:0 [0.006688s total; 0.000083 per start]
add_new_locs_based_on_edge: num_starts 81 time spent: 0:0:0 [0.267857s total; 0.003307 per start]
alias_val_meet: num_starts 81 time spent: 0:0:0 [0.011162s total; 0.000138 per start]
expand_locset_to_include_slots_for_memmask: num_starts 207 time spent: 0:0:0 [0.002376s total; 0.000011 per start]
total: num_starts 1 time spent: 0:0:22 [22.422607s total; 22.422607 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
etfg_init.: 0s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.llvm.main.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.llvm.main.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.llvm.main.: 1e-06s (num_starts 1; 0.0000s/start)
i386_init_costfns.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_constructor.src.llvm.main.before_tfg_llvm_populate_calls.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.llvm.main.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.llvm.main.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.llvm.main.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.llvm.main.: 3e-06s (num_starts 1; 0.0000s/start)
vconstants_alloc.: 5e-06s (num_starts 1; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::conservative_dfa_val_for_newly_defined_loc.: 2.3e-05s (num_starts 2; 0.0000s/start)
context_constructor.solver.: 2.6e-05s (num_starts 1; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::conservative_dfa_val_for_newly_defined_loc.: 2.6e-05s (num_starts 2; 0.0000s/start)
context_constructor.: 3.4e-05s (num_starts 1; 0.0000s/start)
i386_iseq_copy.: 3.4e-05s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 4.1e-05s (num_starts 82; 0.0000s/start)
expr_is_hidden_reg.: 4.7e-05s (num_starts 107; 0.0000s/start)
add_extra_node_at_start_pc.: 6.4e-05s (num_starts 1; 0.0001s/start)
expr_is_callee_save_const.: 9.5e-05s (num_starts 115; 0.0000s/start)
x86_assemble.: 9.7e-05s (num_starts 1; 0.0001s/start)
llptfg_constructor.: 9.9e-05s (num_starts 1; 0.0001s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000127s (num_starts 1; 0.0001s/start)
compute_sprel_relations.: 0.000148s (num_starts 1; 0.0001s/start)
propagate_sprels.: 0.000154s (num_starts 1; 0.0002s/start)
i386_infer_regcons_from_assembly.: 0.000177s (num_starts 1; 0.0002s/start)
dst_iseq_inv_rename.: 0.000187s (num_starts 1; 0.0002s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000205s (num_starts 30; 0.0000s/start)
peep_preprocess_using_regmap.: 0.000218s (num_starts 24; 0.0000s/start)
tfg_asm_prune_implausible_pc_local_sprel_expr_assumes.: 0.000219s (num_starts 1; 0.0002s/start)
populate_locid2expr_map.: 0.000255s (num_starts 2; 0.0001s/start)
regmap_assign_using_regcons.: 0.000291s (num_starts 1; 0.0003s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000345s (num_starts 1; 0.0003s/start)
tfg_eliminate_hidden_regs.: 0.000425s (num_starts 24; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000438s (num_starts 1; 0.0004s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.000445s (num_starts 3; 0.0001s/start)
dst_iseq_disassemble_with_bin_offsets.: 0.000454s (num_starts 1; 0.0005s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000572s (num_starts 197; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000597s (num_starts 1042; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.000613s (num_starts 197; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000614s (num_starts 81; 0.0000s/start)
determinize_value_expr_map.: 0.00064s (num_starts 494; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000849s (num_starts 22; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000946s (num_starts 55; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000986s (num_starts 1; 0.0010s/start)
expr_represents_llvm_undef.: 0.001046s (num_starts 158; 0.0000s/start)
i386_insn_init_constants.: 0.001159s (num_starts 1; 0.0012s/start)
graph_locs_add_local_vars_for_edge.: 0.001167s (num_starts 52; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.00119s (num_starts 1; 0.0012s/start)
imm_vt_map_copy.: 0.001249s (num_starts 3672; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.00135s (num_starts 184; 0.0000s/start)
dst_iseq_from_string.: 0.001491s (num_starts 1; 0.0015s/start)
graph_locs_add_exvregs_for_edge.: 0.001625s (num_starts 52; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.001654s (num_starts 1; 0.0017s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.001834s (num_starts 81; 0.0000s/start)
gas_init.: 0.001859s (num_starts 1; 0.0019s/start)
tighten_mem_access_ml.cache_miss.: 0.001896s (num_starts 33; 0.0001s/start)
tighten_mem_access_ml.: 0.001955s (num_starts 33; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.002026s (num_starts 197; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.002421s (num_starts 12; 0.0002s/start)
identify_address_taken_local_variables.: 0.00253s (num_starts 1; 0.0025s/start)
graph_locs_map_update_memlabels_for_memslot_locs_with_memalloc.calling.compute_lr_status_for_expr.: 0.002959s (num_starts 34; 0.0001s/start)
expr_linear_relation_holds::visit.var.: 0.003108s (num_starts 172; 0.0000s/start)
tfg::populate_loc_definedness.before_solve.: 0.003206s (num_starts 1; 0.0032s/start)
tfg::populate_loc_definedness.before_initialize.: 0.00368s (num_starts 1; 0.0037s/start)
graph_with_aliasing_constructor.src.llvm.main.: 0.003694s (num_starts 1; 0.0037s/start)
tfg::populate_loc_definedness.: 0.003852s (num_starts 1; 0.0039s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.004178s (num_starts 1570; 0.0000s/start)
graph_with_locs_constructor.src.llvm.main.: 0.004268s (num_starts 1; 0.0043s/start)
opctable_init.: 0.004686s (num_starts 1; 0.0047s/start)
expr_substitute_using_available_exprs_submap.: 0.005231s (num_starts 214; 0.0000s/start)
graph_with_edge_structures_constructor.src.llvm.main.: 0.005926s (num_starts 1; 0.0059s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.006595s (num_starts 81; 0.0001s/start)
lr_status_meet.: 0.006981s (num_starts 3794; 0.0000s/start)
graph_with_simplified_assets_constructor.src.llvm.main.: 0.011135s (num_starts 1; 0.0111s/start)
find_dominators.: 0.011756s (num_starts 32; 0.0004s/start)
graph_identify_back_edges.: 0.011934s (num_starts 29; 0.0004s/start)
graph_identify_natural_loops.: 0.012449s (num_starts 29; 0.0004s/start)
graph_visit_exprs_const.const.: 0.014033s (num_starts 2; 0.0070s/start)
populate_branch_affecting_locs.: 0.014206s (num_starts 1; 0.0142s/start)
graph_with_predicates_constructor.src.llvm.main.: 0.01522s (num_starts 1; 0.0152s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.015407s (num_starts 81; 0.0002s/start)
compute_regions.: 0.018869s (num_starts 29; 0.0007s/start)
tfg_preprocess.dst.: 0.020617s (num_starts 1; 0.0206s/start)
tfg::tfg_preprocess.: 0.02062s (num_starts 1; 0.0206s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.023013s (num_starts 1; 0.0230s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.023783s (num_starts 210; 0.0001s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.024004s (num_starts 81; 0.0003s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.024058s (num_starts 210; 0.0001s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.024099s (num_starts 81; 0.0003s/start)
populate_simplified_to_state.: 0.025275s (num_starts 2; 0.0126s/start)
compute_lr_status_for_expr.: 0.027206s (num_starts 281; 0.0001s/start)
avail_exprs_create_submap.: 0.032097s (num_starts 243; 0.0001s/start)
populate_simplified_assets.: 0.034736s (num_starts 4; 0.0087s/start)
insn_db_list_get_all_matches.: 0.038615s (num_starts 24; 0.0016s/start)
insn_db_get_all_matches.: 0.038864s (num_starts 24; 0.0016s/start)
graph_visit_exprs.: 0.039133s (num_starts 31; 0.0013s/start)
graph_to_stream.: 0.053154s (num_starts 1; 0.0532s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.054803s (num_starts 2405; 0.0000s/start)
populate_transitive_closure.: 0.057422s (num_starts 26; 0.0022s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.060782s (num_starts 81; 0.0008s/start)
create_closure_matrix.: 0.08401s (num_starts 103; 0.0008s/start)
query:convert_to_z3.: 0.084915s (num_starts 1813; 0.0000s/start)
compute_new_lr_status_on_locs.: 0.086759s (num_starts 81; 0.0011s/start)
create_sp_version_relations_lattice_at_pc.: 0.096965s (num_starts 103; 0.0009s/start)
query:convert_from_z3.: 0.109171s (num_starts 1813; 0.0001s/start)
tfg_constructor.src.llvm.main.after_transitive_closure.: 0.138652s (num_starts 1; 0.1387s/start)
tfg_constructor.src.llvm.main.post_parsing.: 0.138656s (num_starts 1; 0.1387s/start)
tfg_constructor.src.llvm.main.after_string_contents.: 0.138659s (num_starts 1; 0.1387s/start)
tfg_constructor.src.llvm.main.after_compute_max_memlabel_varnum.: 0.138663s (num_starts 1; 0.1387s/start)
tfg_constructor.src.llvm.main.: 0.138667s (num_starts 1; 0.1387s/start)
dst_insn_get_tfg.: 0.154443s (num_starts 24; 0.0064s/start)
populate_locs_potentially_modified_on_edge.: 0.172259s (num_starts 2; 0.0861s/start)
tfg_llvm_constructor.src.llvm.main.before_parsing_potential_scev_relations.: 0.199417s (num_starts 1; 0.1994s/start)
tfg_llvm_constructor.src.llvm.main.before_parsing_PC_to_line_and_column.: 0.199558s (num_starts 1; 0.1996s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.207005s (num_starts 2; 0.1035s/start)
query:simplify-z3.: 0.261892s (num_starts 3626; 0.0001s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.29853s (num_starts 2602; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.300383s (num_starts 2405; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.356503s (num_starts 2405; 0.0001s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.375328s (num_starts 81; 0.0046s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.574629s (num_starts 81; 0.0071s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.752385s (num_starts 72; 0.0104s/start)
populate_loc_liveness.: 0.757776s (num_starts 1; 0.7578s/start)
tfg_postprocess_after_pointsto_analysis.: 0.848243s (num_starts 1; 0.8482s/start)
tfg_asm_t::tfg_postprocess_after_pointsto_analysis.: 0.856809s (num_starts 1; 0.8568s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.00531s (num_starts 1247; 0.0008s/start)
ftmap_run_pointsto_analysis.: 1.45232s (num_starts 1; 1.4523s/start)
tfg_run_pointsto_analysis_asm.: 1.4524s (num_starts 1; 1.4524s/start)
dst_parse_sym_exec_db.: 2.46343s (num_starts 1; 2.4634s/start)
read_local_sprel_mapping_data.: 3.48942s (num_starts 1; 3.4894s/start)
opc_init.: 3.66986s (num_starts 1; 3.6699s/start)
i386_init.: 3.67177s (num_starts 1; 3.6718s/start)
parse_consts_db.: 4.14539s (num_starts 1; 4.1454s/start)
dst_iseq_deserialize.: 4.56511s (num_starts 88672; 0.0001s/start)
gen_tfg_for_dst_iseq-main.: 5.82651s (num_starts 1; 5.8265s/start)
dst_usedef_tab_read_from_file.: 6.29047s (num_starts 1; 6.2905s/start)
dst_usedef_tab_init.: 6.29048s (num_starts 1; 6.2905s/start)
usedef_init.: 6.29048s (num_starts 1; 6.2905s/start)

counters:

flags:

info:

Context stats:
exprs: count: 145210
sorts: count: 179
num_proof_queries: 0
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	9622
	        hit ratio:	0.870401
m_simplify_solver:
	----------- total:	10653
	        hit ratio:	0.828968
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	1998
	        hit ratio:	0.828829
m_z3_solver_substitution:
	----------- total:	1813
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	1822
	        hit ratio:	0
m_expr_size:
	----------- total:	21930
	        hit ratio:	0.906703
m_contains_only_constants_or_sp_versions:
	----------- total:	23
	        hit ratio:	0.782609
m_expr_evaluates_to_constant_visitor:
	----------- total:	22455
	        hit ratio:	0.780806

z3_solver expr_query_cache entry size: 0

<MSG>0:00 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:03 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:09 : Converting assembly code to object file...</MSG>
<MSG>0:09 : Harvesting object code to obtain harvested assembly...</MSG>
<MSG>0:23 : Converting harvested assembly to Transfer Function Graph (TFG)...</MSG>
<MSG>0:46 : Searching for equivalence at unroll factor 3</MSG>
<MSG>0:47 : Computing equivalence for function: main...</MSG>
Computing equivalence for function: main...
remove_node_and_make_composite_edges 609: Warning : removing Lfor.cond%2%d, pdt.size() = 2 (> 1), incoming.size 1, outgoing.size 2
, max_expr_size = 38
remove_node_and_make_composite_edges 609: Warning : removing Lfor.cond2%2%d, pdt.size() = 2 (> 1), incoming.size 1, outgoing.size 2
, max_expr_size = 38
remove_node_and_make_composite_edges 609: Warning : removing Lfor.cond8%2%d, pdt.size() = 2 (> 1), incoming.size 1, outgoing.size 2
, max_expr_size = 38
remove_node_and_make_composite_edges 609: Warning : removing L16%1%d, pdt.size() = 2 (> 1), incoming.size 1, outgoing.size 2
, max_expr_size = 86
<MSG>0:47 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:48 : Constructing SSA for Assembly TFG...</MSG>
<MSG>0:52 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:52 : Computing equivalence of the two TFGs (LLVM IR and x86 assembly)...</MSG>
<MSG>0:52 : Chose (after CE propagation) product-TFG main (d:0, s:0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:53 : product-TFG main: Enumerating correlations for L0%0%d=>L9%1%bbentry[mu 1, delta 1] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Considering 3 paths to src pc Lfor.cond%1%bbentry as correlation candidates for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Attempting correlation of src pathset L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Attempting correlation of src pathset L0%0%d=>Lfor.cond%1%bbentry[mu 2, delta 2] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Attempting correlation of src pathset L0%0%d=>Lfor.cond%1%bbentry[mu 3, delta 2] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Found 18 feasible correlations for paths to src pc Lfor.cond%1%bbentry as correlation candidates for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Considering 3 paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Attempting correlation of src pathset L0%0%d=>Lfor.cond2%1%bbentry[mu 1, delta 1] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Attempting correlation of src pathset L0%0%d=>Lfor.cond2%1%bbentry[mu 2, delta 2] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Attempting correlation of src pathset L0%0%d=>Lfor.cond2%1%bbentry[mu 3, delta 3] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Found 18 feasible correlations for paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Considering 3 paths to src pc Lfor.cond8%1%bbentry as correlation candidates for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Attempting correlation of src pathset L0%0%d=>Lfor.cond8%1%bbentry[mu 1, delta 1] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Attempting correlation of src pathset L0%0%d=>Lfor.cond8%1%bbentry[mu 2, delta 2] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Attempting correlation of src pathset L0%0%d=>Lfor.cond8%1%bbentry[mu 3, delta 3] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : Found 18 feasible correlations for paths to src pc Lfor.cond8%1%bbentry as correlation candidates for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : product-TFG main: Found 54 correlations for L0%0%d=>L9%1%bbentry[mu 1, delta 1] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:53 : product-TFG main created 54 possibilities in group main.A...</MSG>
<MSG>0:53 : Chose (for CE propagation) product-TFG main.A1 (d:0, s:0) from a frontier of size 54...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>0:53 : Finished adding lsprel-assumes for allocation to the product-TFG main.A1...</MSG>
<MSG>0:53 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A1...</MSG>
<MSG>0:54 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>0:54 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>0:54 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>0:54 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>0:54 : main.A1: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:54 : main.A1: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:54 : main.A1: Adding node Lentry%1%allocaI3_L0%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
<MSG>0:54 : main.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:54 : main.A1: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:54 : main.A1: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>0:54 : main.A1: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>0:54 : main.A1: Adding node Lentry%1%allocaI4_L0%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
<MSG>0:54 : main.A1: Getting alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>0:54 : main.A1: Found no alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
<MSG>0:54 : main.A1: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:54 : main.A1: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:54 : main.A1: Adding node Lfor.cond%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
<MSG>0:54 : main.A1: Getting alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:54 : main.A1: Found no alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:54 : main.A1: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:54 : main.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:54 : main.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:54 : main.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:54 : main.A1: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1</MSG>
<MSG>0:54 : main.A1: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L0%1%allocaI1 and propagated further.
</MSG>
<MSG>0:54 : main.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:54 : main.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:54 : main.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:54 : main.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:54 : main.A1: Adding edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>0:54 : main.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
<MSG>0:54 : main.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:54 : main.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:54 : main.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:54 : main.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:54 : main.A1: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>0:54 : main.A1: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>0:54 : main.A1: Adding edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:54 : main.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:54 : main.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:54 : main.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:54 : main.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:54 : main.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:54 : main.A1: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:54 : main.A1: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:54 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>0:54 : Added correlation to the product-TFG main.A1 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>0:54 : Chose (after CE propagation) product-TFG main.A1 (d:0, s:0) from a frontier of size 54...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 12 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 28 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>0:54 : main.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:54 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1, Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2, Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:54 : main.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>0:54 : main.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: unchanged</MSG>
<MSG>0:54 : main.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:54 : main.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>0:54 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:54 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:54 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:54 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:54 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:55 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:55 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:55 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:55 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:55 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:55 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:55 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:55 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:58 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht11-prove_trivial4-prove7...</MSG>
<MSG>0:58 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:58 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:58 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed ...</MSG>
<MSG>0:59 : main.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>0:59 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>0:59 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed</MSG>
<MSG>0:59 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>1:00 : main.A1: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:00 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:00 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:00 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:00 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:00 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:00 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:00 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:00 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:00 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:00 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:00 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:00 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:00 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:00 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:00 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:00 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:00 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht13-prove_trivial5-prove8...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:06 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:06 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:06 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : main.A1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:06 : main.A1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:06 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:06 : main.A1: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed ...</MSG>
<MSG>1:06 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:06 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:06 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed</MSG>
<MSG>1:06 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>1:06 : main.A1: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:06 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:06 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:06 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:06 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:06 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:06 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:06 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:06 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:07 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:07 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 28 exprs and 10 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht24-prove_trivial12-prove12...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:10 : main.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>1:10 : main.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:10 : main.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:10 : main.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:10 : main.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 6 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed ...</MSG>
<MSG>1:11 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed( 1, 1 ) ...</MSG>
<MSG>1:11 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:12 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed</MSG>
<MSG>1:12 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>1:12 : main.A1: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 28 exprs and 12 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht19-prove_trivial9-prove10...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 6 exprs and 3 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>1:14 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed( 1, 0 ) ...</MSG>
<MSG>1:14 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:14 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: unchanged</MSG>
<MSG>1:14 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>1:14 : main.A1: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 10 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht7-prove_trivial5-prove2...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: unchanged ...</MSG>
<MSG>1:15 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:15 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:16 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>1:16 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>1:16 : main.A1: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 28 exprs and 12 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht19-prove_trivial9-prove10...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 6 exprs and 3 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>1:16 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:16 : main.A1 (d:0, s:0): checked newly added edge and inferred invariants...</MSG>
<MSG>1:16 : main.A1 (d:0, s:0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:17 : product-TFG main.A1: Enumerating correlations for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] starting at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:17 : Considering 4 paths to src pc Lfor.cond%1%bbentry as correlation candidates for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:17 : Attempting correlation of src pathset Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 0, delta 0] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:17 : Attempting correlation of src pathset Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:17 : Attempting correlation of src pathset Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 2, delta 2] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:17 : Attempting correlation of src pathset Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 3, delta 3] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:17 : Found 4 feasible correlations for paths to src pc Lfor.cond%1%bbentry as correlation candidates for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:17 : product-TFG main.A1: Found 4 correlations for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] starting at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:17 : product-TFG main.A1 created 4 possibilities in group main.A1.B...</MSG>
<MSG>1:17 : Chose (for CE propagation) product-TFG main.A1.B1 (d:0, s:0) from a frontier of size 57...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 10 counterexamples (for correlating 12 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 21 counterexamples (for correlating 28 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 0, delta 0]
<MSG>1:17 : Finished adding lsprel-assumes for allocation to the product-TFG main.A1.B1...</MSG>
<MSG>1:17 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A1.B1...</MSG>
<MSG>1:17 : Creating ssa-path for the src-tfg path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:17 : Adding a CG edge composition using the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>1:17 : Identifying common alloc-deallocs in the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>1:17 : Identified no common alloc-deallocs in the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>1:17 : Adding new edge to the product-TFG main.A1.B1 for fromPC Lfor.cond%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L9%1%bbentry, src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>1:17 : main.A1.B1: Getting alloca-ptrs on edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:17 : main.A1.B1: Found no alloca-ptrs on edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:17 : main.A1.B1: Adding edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:17 : main.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:17 : main.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:17 : main.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:17 : main.A1.B1: Propagated 16 out of 21 counter-examples across edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry</MSG>
<MSG>1:17 : main.A1.B1: Added the 16 propagated CEs at PC Lfor.cond%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>1:17 : main.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:18 : main.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>1:18 : main.A1.B1: Computing CG regions after the addition of the edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:18 : main.A1.B1: Done computing CG regions after the addition of the edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:18 : Done adding new edge to the product-TFG main.A1.B1 for fromPC Lfor.cond%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L9%1%bbentry, src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>1:18 : Done adding a CG edge composition using the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>1:18 : Added correlation to the product-TFG main.A1.B1 (d:1, s:1) and created a correlation entry...</MSG>
<MSG>1:18 : Chose (for CE propagation) product-TFG main.A1.B2 (d:0, s:0) from a frontier of size 57...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 10 counterexamples (for correlating 12 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 21 counterexamples (for correlating 28 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:18 : Finished adding lsprel-assumes for allocation to the product-TFG main.A1.B2...</MSG>
<MSG>1:18 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A1.B2...</MSG>
<MSG>1:18 : Creating ssa-path for the src-tfg path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:18 : Adding a CG edge composition using the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>1:18 : Identifying common alloc-deallocs in the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>1:18 : Identified no common alloc-deallocs in the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>1:18 : Adding new edge to the product-TFG main.A1.B2 for fromPC Lfor.cond%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L9%1%bbentry, src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>1:18 : main.A1.B2: Getting alloca-ptrs on edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:18 : main.A1.B2: Found no alloca-ptrs on edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:18 : main.A1.B2: Adding edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:18 : main.A1.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:18 : main.A1.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:18 : main.A1.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:18 : main.A1.B2: marking unstable at Lfor.cond%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L9%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 3
160078 : eq(140296, 142462) : BOOL                 : false
160079 : not(160078) : BOOL                        : true
160086 : andnot1(143697, 160079) : BOOL            : true
160831 : not(160086) : BOOL                        : false

ce =
=counter_example_begin yices.ce1404.fuzzed 518ebf42822b529416fe7f9e1e3b17
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 3758096391 { 0xe0000007 -536870905 -1.83e65 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 3758096391 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 3758096392; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 3758096391 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 3758096392; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3356477661
=counter_example_end


failcond-expr = not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), not(eq(1, input.dst.exreg.0.0.L9%1%bbentry)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : not(7) : BOOL
9 : andnot1(4, 8) : BOOL
10 : not(9) : BOOL
</MSG>
<MSG>1:18 : main.A1.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:18 : main.A1.B2: Finished executing CG's add edge function...</MSG>
<MSG>1:18 : main.A1.B2: Computing CG regions after the addition of the edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:18 : main.A1.B2: Done computing CG regions after the addition of the edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:18 : Done adding new edge to the product-TFG main.A1.B2 for fromPC Lfor.cond%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L9%1%bbentry, src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>1:18 : Done adding a CG edge composition using the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>1:18 : Failed correlation of src pathset Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L9%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 3
160078 : eq(140296, 142462) : BOOL                 : false
160079 : not(160078) : BOOL                        : true
160086 : andnot1(143697, 160079) : BOOL            : true
160831 : not(160086) : BOOL                        : false

ce =
=counter_example_begin yices.ce1404.fuzzed 518ebf42822b529416fe7f9e1e3b17
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 3758096391 { 0xe0000007 -536870905 -1.83e65 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 3758096391 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 3758096392; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 3758096391 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 3758096392; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 76), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3356477661
=counter_example_end


</MSG>
<MSG>1:18 : Discovered that the correlation was useless for the product-TFG main.A1.B2 (d:0, s:0)...</MSG>
<MSG>1:18 : Chose (for CE propagation) product-TFG main.A2 (d:0, s:0) from a frontier of size 54...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:18 : Finished adding lsprel-assumes for allocation to the product-TFG main.A2...</MSG>
<MSG>1:18 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A2...</MSG>
<MSG>1:19 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:19 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:19 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>1:19 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:19 : main.A2: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:19 : main.A2: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:19 : main.A2: Adding node Lentry%1%allocaI3_L1%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%1%d=
<MSG>1:19 : main.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:19 : main.A2: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:19 : main.A2: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
<MSG>1:19 : main.A2: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
<MSG>1:19 : main.A2: Adding node Lentry%1%allocaI4_L1%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%1%d=
<MSG>1:19 : main.A2: Getting alloca-ptrs on edge Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
<MSG>1:19 : main.A2: Found no alloca-ptrs on edge Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%1%d=
<MSG>1:19 : main.A2: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:19 : main.A2: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:19 : main.A2: Adding node Lfor.cond%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%1%d=
<MSG>1:19 : main.A2: Getting alloca-ptrs on edge Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:19 : main.A2: Found no alloca-ptrs on edge Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:19 : main.A2: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:19 : main.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:19 : main.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:19 : main.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:19 : main.A2: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1</MSG>
<MSG>1:19 : main.A2: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L1%1%allocaI1 and propagated further.
</MSG>
<MSG>1:19 : main.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:19 : main.A2: Finished executing CG's add edge function...</MSG>
<MSG>1:19 : main.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:19 : main.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:19 : main.A2: Adding edge Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
<MSG>1:19 : main.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%1%d=
<MSG>1:19 : main.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:19 : main.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:19 : main.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:19 : main.A2: Finished executing CG's add edge function...</MSG>
<MSG>1:19 : main.A2: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
<MSG>1:19 : main.A2: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
<MSG>1:19 : main.A2: Adding edge Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:19 : main.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:19 : main.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:19 : main.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:19 : main.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:19 : main.A2: Finished executing CG's add edge function...</MSG>
<MSG>1:19 : main.A2: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:19 : main.A2: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:19 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:19 : Added correlation to the product-TFG main.A2 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:19 : Chose (after CE propagation) product-TFG main.A2 (d:0, s:0) from a frontier of size 54...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 24 at mu 1 delta 1)
            Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 24 => A line 24 at mu 1 delta 1)
            Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 24 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L1%1%allocaI1 (C line 14, A line 24)
                Lentry%1%allocaI3_L1%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 17 bv exprs)
            Lentry%1%allocaI4_L1%1%allocaI2 (C line 14, A line 24)
                Lentry%1%allocaI4_L1%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 17 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 27 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L1%1%spver:
  	  local.=Lentry%1%d= == input.dst.sp=L1%1%spver=sp.L1%1%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:19 : main.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:19 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1, Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2, Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:19 : main.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1) ...</MSG>
<MSG>1:19 : main.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1), result: unchanged</MSG>
<MSG>1:19 : main.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:19 : main.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1) ...</MSG>
<MSG>1:19 : main.A2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:19 : main.A2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:19 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:19 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:19 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:19 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:19 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:19 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:19 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:19 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:19 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:20 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:20 : main.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:20 : main.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:20 : main.A2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:20 : main.A2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:20 : main.A2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:20 : main.A2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:20 : main.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 17 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:26 : main.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 1 proof-stats=dht15-prove_trivial2-prove13...</MSG>
<MSG>1:26 : main.A2: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:26 : main.A2: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:26 : main.A2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:26 : main.A2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:26 : main.A2: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:26 : main.A2: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:26 : main.A2: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:26 : main.A2: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:26 : main.A2: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:26 : main.A2: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:26 : main.A2: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:26 : main.A2: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:26 : main.A2: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:26 : main.A2: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:26 : main.A2: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:26 : main.A2: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:26 : main.A2: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:26 : main.A2: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:26 : main.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1), result: changed ...</MSG>
<MSG>1:26 : main.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>1:26 : main.A2: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2) ...</MSG>
<MSG>1:26 : main.A2: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2), result: changed</MSG>
<MSG>1:26 : main.A2: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L1%1%allocaI1 ...</MSG>
<MSG>1:27 : main.A2: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2) ...</MSG>
<MSG>1:27 : main.A2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:27 : main.A2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:27 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:27 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:27 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:27 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:27 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:27 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:27 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:27 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:27 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:27 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:27 : main.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:27 : main.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:27 : main.A2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:27 : main.A2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:27 : main.A2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:27 : main.A2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:27 : main.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 17 exprs and 9 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:28 : main.A2: marking unstable at Lfor.cond%1%bbentry_L9%1%bbentry due to failing condition:
memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.stability-failure
failcond-expr = memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/):
1 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
3 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
4 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
6 : memmasks_are_equal(1, 2, 3, 4, 5) : BOOL
</MSG>
<MSG>1:28 : main.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:28 : main.A2: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2), result: changed ...</MSG>
<MSG>1:28 : main.A2: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:28 : main.A2: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)*((Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)*(Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))) became unstable after invariant inference</MSG>
<MSG>1:28 : Chosen product-TFG main.A2 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)*((Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)*(Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))))
</MSG>
<MSG>1:28 : Chose (for CE propagation) product-TFG main.A6 (d:0, s:0) from a frontier of size 53...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:28 : Finished adding lsprel-assumes for allocation to the product-TFG main.A6...</MSG>
<MSG>1:28 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A6...</MSG>
<MSG>1:29 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:29 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:29 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>1:29 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:29 : main.A6: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:29 : main.A6: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:29 : main.A6: Adding node Lentry%1%allocaI3_L7%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A6: returning 0 for =Lentry%1%d=
<MSG>1:29 : main.A6: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:29 : main.A6: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:29 : main.A6: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
<MSG>1:29 : main.A6: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
<MSG>1:29 : main.A6: Adding node Lentry%1%allocaI4_L7%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A6: returning 0 for =Lentry%1%d=
<MSG>1:29 : main.A6: Getting alloca-ptrs on edge Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
<MSG>1:29 : main.A6: Found no alloca-ptrs on edge Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A6: returning 0 for =Lentry%1%d=
<MSG>1:29 : main.A6: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:29 : main.A6: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:29 : main.A6: Adding node Lfor.cond%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A6: returning 0 for =Lentry%1%d=
<MSG>1:29 : main.A6: Getting alloca-ptrs on edge Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:29 : main.A6: Found no alloca-ptrs on edge Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:29 : main.A6: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:29 : main.A6: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:29 : main.A6: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:29 : main.A6: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:29 : main.A6: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1</MSG>
<MSG>1:29 : main.A6: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L7%1%allocaI1 and propagated further.
</MSG>
<MSG>1:29 : main.A6: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:29 : main.A6: Finished executing CG's add edge function...</MSG>
<MSG>1:29 : main.A6: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:29 : main.A6: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:29 : main.A6: Adding edge Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
<MSG>1:29 : main.A6: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A6: returning 0 for =Lentry%1%d=
<MSG>1:29 : main.A6: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:29 : main.A6: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:29 : main.A6: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:29 : main.A6: Finished executing CG's add edge function...</MSG>
<MSG>1:29 : main.A6: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
<MSG>1:29 : main.A6: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
<MSG>1:29 : main.A6: Adding edge Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:29 : main.A6: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:29 : main.A6: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:29 : main.A6: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:29 : main.A6: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:29 : main.A6: Finished executing CG's add edge function...</MSG>
<MSG>1:29 : main.A6: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:29 : main.A6: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:29 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:29 : Added correlation to the product-TFG main.A6 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:29 : Chose (after CE propagation) product-TFG main.A6 (d:0, s:0) from a frontier of size 53...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 32 at mu 1 delta 1)
            Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 32 => A line 32 at mu 1 delta 1)
            Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 32 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L7%1%allocaI1 (C line 14, A line 32)
                Lentry%1%allocaI3_L7%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 26 bv exprs)
            Lentry%1%allocaI4_L7%1%allocaI2 (C line 14, A line 32)
                Lentry%1%allocaI4_L7%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 25 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L7%1%spver:
  	  local.=Lentry%1%d= == input.dst.sp=L7%1%spver=sp.L7%1%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:29 : main.A6: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:29 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1, Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2, Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:29 : main.A6: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1) ...</MSG>
<MSG>1:29 : main.A6: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1), result: unchanged</MSG>
<MSG>1:29 : main.A6: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:29 : main.A6: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1) ...</MSG>
<MSG>1:29 : main.A6: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:30 : main.A6: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:30 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:30 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:30 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:30 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:30 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:30 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:30 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:30 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:30 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:30 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:30 : main.A6: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:30 : main.A6: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:30 : main.A6: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:30 : main.A6: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:30 : main.A6: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:30 : main.A6: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:30 : main.A6: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 26 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:34 : main.A6: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 1 proof-stats=dht24-prove_trivial3-prove21...</MSG>
<MSG>1:34 : main.A6: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 6 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:35 : main.A6: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht6-prove_trivial0-prove6...</MSG>
<MSG>1:35 : main.A6: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:35 : main.A6: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:35 : main.A6: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:35 : main.A6: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:35 : main.A6: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:35 : main.A6: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:35 : main.A6: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:35 : main.A6: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:35 : main.A6: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:35 : main.A6: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:35 : main.A6: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:35 : main.A6: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:35 : main.A6: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:35 : main.A6: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:35 : main.A6: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:35 : main.A6: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:35 : main.A6: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1), result: changed ...</MSG>
<MSG>1:35 : main.A6: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>1:35 : main.A6: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2) ...</MSG>
<MSG>1:35 : main.A6: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2), result: changed</MSG>
<MSG>1:35 : main.A6: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L7%1%allocaI1 ...</MSG>
<MSG>1:36 : main.A6: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2) ...</MSG>
<MSG>1:36 : main.A6: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:36 : main.A6: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:36 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:36 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:36 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:36 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:36 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:36 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:36 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:36 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:36 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:36 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:36 : main.A6: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:36 : main.A6: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:36 : main.A6: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:36 : main.A6: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:36 : main.A6: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:36 : main.A6: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:36 : main.A6: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 25 exprs and 8 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:37 : main.A6: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht17-prove_trivial14-prove3...</MSG>
<MSG>1:37 : main.A6: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 6 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:37 : main.A6: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:37 : main.A6: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:37 : main.A6: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:37 : main.A6: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:37 : main.A6: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:37 : main.A6: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:37 : main.A6: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:37 : main.A6: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:38 : main.A6: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:38 : main.A6: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:38 : main.A6: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:38 : main.A6: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:38 : main.A6: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:38 : main.A6: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:38 : main.A6: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:38 : main.A6: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:38 : main.A6: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:38 : main.A6: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:38 : main.A6: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:38 : main.A6: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2), result: changed ...</MSG>
<MSG>1:38 : main.A6: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:38 : main.A6: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:38 : main.A6: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed</MSG>
<MSG>1:38 : main.A6: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L7%1%allocaI2 ...</MSG>
<MSG>1:38 : main.A6: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:38 : main.A6: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:38 : main.A6: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:38 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:38 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:38 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:38 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:38 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:38 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:38 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:38 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:38 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:39 : main.A6: marking unstable at Lfor.cond%1%bbentry_L9%1%bbentry due to failing condition:
memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.stability-failure
failcond-expr = memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/):
1 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
3 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
4 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
6 : memmasks_are_equal(1, 2, 3, 4, 5) : BOOL
</MSG>
<MSG>1:39 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:39 : main.A6: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed ...</MSG>
<MSG>1:39 : main.A6: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed( 1, 1 ) ...</MSG>
<MSG>1:39 : main.A6: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)*((Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)*(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))) became unstable after invariant inference</MSG>
<MSG>1:39 : Chosen product-TFG main.A6 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)*((Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)*(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))))
</MSG>
<MSG>1:39 : Chose (for CE propagation) product-TFG main.A3 (d:0, s:0) from a frontier of size 52...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:39 : Finished adding lsprel-assumes for allocation to the product-TFG main.A3...</MSG>
<MSG>1:39 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A3...</MSG>
<MSG>1:39 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:39 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:39 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>1:39 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:39 : main.A3: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:39 : main.A3: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:39 : main.A3: Adding node Lentry%1%allocaI3_L3%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A3: returning 0 for =Lentry%1%d=
<MSG>1:39 : main.A3: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:39 : main.A3: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:39 : main.A3: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
<MSG>1:39 : main.A3: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
<MSG>1:39 : main.A3: Adding node Lentry%1%allocaI4_L3%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A3: returning 0 for =Lentry%1%d=
<MSG>1:39 : main.A3: Getting alloca-ptrs on edge Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
<MSG>1:39 : main.A3: Found no alloca-ptrs on edge Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A3: returning 0 for =Lentry%1%d=
<MSG>1:39 : main.A3: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:40 : main.A3: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:40 : main.A3: Adding node Lfor.cond%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A3: returning 0 for =Lentry%1%d=
<MSG>1:40 : main.A3: Getting alloca-ptrs on edge Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:40 : main.A3: Found no alloca-ptrs on edge Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:40 : main.A3: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:40 : main.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:40 : main.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:40 : main.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:40 : main.A3: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1</MSG>
<MSG>1:40 : main.A3: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L3%1%allocaI1 and propagated further.
</MSG>
<MSG>1:40 : main.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:40 : main.A3: Finished executing CG's add edge function...</MSG>
<MSG>1:40 : main.A3: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:40 : main.A3: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:40 : main.A3: Adding edge Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
<MSG>1:40 : main.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A3: returning 0 for =Lentry%1%d=
<MSG>1:40 : main.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:40 : main.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:40 : main.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:40 : main.A3: Finished executing CG's add edge function...</MSG>
<MSG>1:40 : main.A3: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
<MSG>1:40 : main.A3: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
<MSG>1:40 : main.A3: Adding edge Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:40 : main.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:40 : main.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:40 : main.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:40 : main.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:40 : main.A3: Finished executing CG's add edge function...</MSG>
<MSG>1:40 : main.A3: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:40 : main.A3: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:40 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:40 : Added correlation to the product-TFG main.A3 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:40 : Chose (after CE propagation) product-TFG main.A3 (d:0, s:0) from a frontier of size 52...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 26 at mu 1 delta 1)
            Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 26 => A line 26 at mu 1 delta 1)
            Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 26 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L3%1%allocaI1 (C line 14, A line 26)
                Lentry%1%allocaI3_L3%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 20 bv exprs)
            Lentry%1%allocaI4_L3%1%allocaI2 (C line 14, A line 26)
                Lentry%1%allocaI4_L3%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 19 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 27 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L3%1%spver:
  	  local.=Lentry%1%d= == input.dst.sp=L3%1%spver=sp.L3%1%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:40 : main.A3: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:40 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1, Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2, Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:40 : main.A3: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1) ...</MSG>
<MSG>1:40 : main.A3: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1), result: unchanged</MSG>
<MSG>1:40 : main.A3: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:40 : main.A3: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1) ...</MSG>
<MSG>1:40 : main.A3: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:40 : main.A3: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:40 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:40 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:40 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:40 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:40 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:40 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:40 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:40 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:40 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:40 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:40 : main.A3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:41 : main.A3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:41 : main.A3: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:41 : main.A3: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:41 : main.A3: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:41 : main.A3: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:41 : main.A3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:46 : main.A3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 1 proof-stats=dht17-prove_trivial3-prove14...</MSG>
<MSG>1:46 : main.A3: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 4 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:46 : main.A3: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:46 : main.A3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:46 : main.A3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:46 : main.A3: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:46 : main.A3: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:46 : main.A3: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:46 : main.A3: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:46 : main.A3: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:46 : main.A3: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:46 : main.A3: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:47 : main.A3: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:47 : main.A3: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:47 : main.A3: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:47 : main.A3: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:47 : main.A3: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:47 : main.A3: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:47 : main.A3: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:47 : main.A3: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1), result: changed ...</MSG>
<MSG>1:47 : main.A3: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>1:47 : main.A3: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2) ...</MSG>
<MSG>1:47 : main.A3: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2), result: changed</MSG>
<MSG>1:47 : main.A3: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L3%1%allocaI1 ...</MSG>
<MSG>1:48 : main.A3: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2) ...</MSG>
<MSG>1:48 : main.A3: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:48 : main.A3: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:48 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:48 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:48 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:48 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:48 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:48 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:48 : main.A3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:48 : main.A3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : main.A3: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:48 : main.A3: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : main.A3: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:48 : main.A3: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:48 : main.A3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 8 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:48 : main.A3: marking unstable at Lfor.cond%1%bbentry_L9%1%bbentry due to failing condition:
memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.stability-failure
failcond-expr = memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/):
1 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
3 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
4 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
6 : memmasks_are_equal(1, 2, 3, 4, 5) : BOOL
</MSG>
<MSG>1:49 : main.A3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>1:49 : main.A3: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2), result: changed ...</MSG>
<MSG>1:49 : main.A3: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:49 : main.A3: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)*((Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)*(Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))) became unstable after invariant inference</MSG>
<MSG>1:49 : Chosen product-TFG main.A3 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)*((Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)*(Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))))
</MSG>
<MSG>1:49 : Chose (for CE propagation) product-TFG main.A4 (d:0, s:0) from a frontier of size 51...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:49 : Finished adding lsprel-assumes for allocation to the product-TFG main.A4...</MSG>
<MSG>1:49 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A4...</MSG>
<MSG>1:49 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:49 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:49 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>1:49 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:49 : main.A4: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:49 : main.A4: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:49 : main.A4: Adding node Lentry%1%allocaI3_L4%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A4: returning 0 for =Lentry%1%d=
<MSG>1:49 : main.A4: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:49 : main.A4: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:49 : main.A4: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
<MSG>1:49 : main.A4: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
<MSG>1:49 : main.A4: Adding node Lentry%1%allocaI4_L4%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A4: returning 0 for =Lentry%1%d=
<MSG>1:50 : main.A4: Getting alloca-ptrs on edge Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
<MSG>1:50 : main.A4: Found no alloca-ptrs on edge Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A4: returning 0 for =Lentry%1%d=
<MSG>1:50 : main.A4: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:50 : main.A4: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:50 : main.A4: Adding node Lfor.cond%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A4: returning 0 for =Lentry%1%d=
<MSG>1:50 : main.A4: Getting alloca-ptrs on edge Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:50 : main.A4: Found no alloca-ptrs on edge Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:50 : main.A4: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:50 : main.A4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:50 : main.A4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:50 : main.A4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:50 : main.A4: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1</MSG>
<MSG>1:50 : main.A4: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L4%1%allocaI1 and propagated further.
</MSG>
<MSG>1:50 : main.A4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:50 : main.A4: Finished executing CG's add edge function...</MSG>
<MSG>1:50 : main.A4: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:50 : main.A4: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:50 : main.A4: Adding edge Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
<MSG>1:50 : main.A4: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A4: returning 0 for =Lentry%1%d=
<MSG>1:50 : main.A4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:50 : main.A4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:50 : main.A4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:50 : main.A4: Finished executing CG's add edge function...</MSG>
<MSG>1:50 : main.A4: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
<MSG>1:50 : main.A4: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
<MSG>1:50 : main.A4: Adding edge Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:50 : main.A4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:50 : main.A4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:50 : main.A4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:50 : main.A4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:50 : main.A4: Finished executing CG's add edge function...</MSG>
<MSG>1:50 : main.A4: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:50 : main.A4: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:50 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:50 : Added correlation to the product-TFG main.A4 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:50 : Chose (after CE propagation) product-TFG main.A4 (d:0, s:0) from a frontier of size 51...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 27 at mu 1 delta 1)
            Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 27 => A line 27 at mu 1 delta 1)
            Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 27 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L4%1%allocaI1 (C line 14, A line 27)
                Lentry%1%allocaI3_L4%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 20 bv exprs)
            Lentry%1%allocaI4_L4%1%allocaI2 (C line 14, A line 27)
                Lentry%1%allocaI4_L4%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 19 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 27 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L4%1%spver:
  	  local.=Lentry%1%d= == input.dst.sp=L4%1%spver=sp.L4%1%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:50 : main.A4: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:50 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1, Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2, Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:50 : main.A4: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1) ...</MSG>
<MSG>1:50 : main.A4: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1), result: unchanged</MSG>
<MSG>1:50 : main.A4: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:50 : main.A4: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1) ...</MSG>
<MSG>1:50 : main.A4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:50 : main.A4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:50 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:50 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:50 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:50 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:50 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:50 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:50 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:50 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:50 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:51 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:51 : main.A4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:51 : main.A4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:51 : main.A4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:51 : main.A4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:51 : main.A4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:51 : main.A4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:51 : main.A4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:56 : main.A4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 1 proof-stats=dht27-prove_trivial6-prove21...</MSG>
<MSG>1:56 : main.A4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 5 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:56 : main.A4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>1:56 : main.A4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:56 : main.A4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:56 : main.A4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:56 : main.A4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:56 : main.A4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:57 : main.A4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:57 : main.A4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:57 : main.A4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:57 : main.A4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:57 : main.A4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:57 : main.A4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:57 : main.A4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:57 : main.A4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:57 : main.A4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:57 : main.A4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:57 : main.A4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:57 : main.A4: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1), result: changed ...</MSG>
<MSG>1:57 : main.A4: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>1:57 : main.A4: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2) ...</MSG>
<MSG>1:57 : main.A4: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2), result: changed</MSG>
<MSG>1:57 : main.A4: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L4%1%allocaI1 ...</MSG>
<MSG>1:58 : main.A4: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2) ...</MSG>
<MSG>1:58 : main.A4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>1:58 : main.A4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:58 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>1:58 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:58 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>1:58 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:58 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>1:58 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:58 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>1:58 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:58 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>1:58 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:58 : main.A4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>1:58 : main.A4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:58 : main.A4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>1:58 : main.A4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:58 : main.A4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>1:58 : main.A4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:58 : main.A4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 9 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>1:58 : main.A4: marking unstable at Lfor.cond%1%bbentry_L9%1%bbentry due to failing condition:
memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.stability-failure
failcond-expr = memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/):
1 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
3 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
4 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
6 : memmasks_are_equal(1, 2, 3, 4, 5) : BOOL
</MSG>
<MSG>1:59 : main.A4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:59 : main.A4: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2), result: changed ...</MSG>
<MSG>1:59 : main.A4: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:59 : main.A4: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)*((Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)*(Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))) became unstable after invariant inference</MSG>
<MSG>1:59 : Chosen product-TFG main.A4 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)*((Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)*(Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))))
</MSG>
<MSG>1:59 : Chose (for CE propagation) product-TFG main.A5 (d:0, s:0) from a frontier of size 50...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:59 : Finished adding lsprel-assumes for allocation to the product-TFG main.A5...</MSG>
<MSG>1:59 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A5...</MSG>
<MSG>1:59 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:59 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:59 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>1:59 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:59 : main.A5: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:00 : main.A5: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:00 : main.A5: Adding node Lentry%1%allocaI3_L6%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%1%d=
<MSG>2:00 : main.A5: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:00 : main.A5: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:00 : main.A5: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
<MSG>2:00 : main.A5: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
<MSG>2:00 : main.A5: Adding node Lentry%1%allocaI4_L6%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%1%d=
<MSG>2:00 : main.A5: Getting alloca-ptrs on edge Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
<MSG>2:00 : main.A5: Found no alloca-ptrs on edge Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%1%d=
<MSG>2:00 : main.A5: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:00 : main.A5: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:00 : main.A5: Adding node Lfor.cond%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%1%d=
<MSG>2:00 : main.A5: Getting alloca-ptrs on edge Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:00 : main.A5: Found no alloca-ptrs on edge Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:00 : main.A5: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:00 : main.A5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:00 : main.A5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:00 : main.A5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:00 : main.A5: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1</MSG>
<MSG>2:00 : main.A5: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L6%1%allocaI1 and propagated further.
</MSG>
<MSG>2:00 : main.A5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:00 : main.A5: Finished executing CG's add edge function...</MSG>
<MSG>2:00 : main.A5: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:00 : main.A5: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:00 : main.A5: Adding edge Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
<MSG>2:00 : main.A5: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%1%d=
<MSG>2:00 : main.A5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:00 : main.A5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:00 : main.A5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:00 : main.A5: Finished executing CG's add edge function...</MSG>
<MSG>2:00 : main.A5: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
<MSG>2:00 : main.A5: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
<MSG>2:00 : main.A5: Adding edge Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:00 : main.A5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:00 : main.A5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:00 : main.A5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:00 : main.A5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:00 : main.A5: Finished executing CG's add edge function...</MSG>
<MSG>2:00 : main.A5: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:00 : main.A5: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:00 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>2:00 : Added correlation to the product-TFG main.A5 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>2:00 : Chose (after CE propagation) product-TFG main.A5 (d:0, s:0) from a frontier of size 50...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 30 at mu 1 delta 1)
            Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 30 => A line 30 at mu 1 delta 1)
            Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 30 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L6%1%allocaI1 (C line 14, A line 30)
                Lentry%1%allocaI3_L6%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 21 bv exprs)
            Lentry%1%allocaI4_L6%1%allocaI2 (C line 14, A line 30)
                Lentry%1%allocaI4_L6%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 20 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 28 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L6%1%spver:
  	  local.=Lentry%1%d= == input.dst.sp=L6%1%spver=sp.L6%1%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>2:00 : main.A5: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:00 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1, Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2, Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:00 : main.A5: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1) ...</MSG>
<MSG>2:00 : main.A5: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1), result: unchanged</MSG>
<MSG>2:00 : main.A5: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>2:00 : main.A5: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1) ...</MSG>
<MSG>2:00 : main.A5: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:00 : main.A5: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:00 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:00 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:00 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:00 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:00 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:01 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:01 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:01 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:01 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:01 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:01 : main.A5: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:01 : main.A5: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:01 : main.A5: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:01 : main.A5: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:01 : main.A5: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:01 : main.A5: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:01 : main.A5: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 21 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:06 : main.A5: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 1 proof-stats=dht27-prove_trivial4-prove23...</MSG>
<MSG>2:06 : main.A5: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 6 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:06 : main.A5: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht6-prove_trivial0-prove6...</MSG>
<MSG>2:06 : main.A5: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:06 : main.A5: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:06 : main.A5: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:06 : main.A5: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:06 : main.A5: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:06 : main.A5: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:06 : main.A5: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:06 : main.A5: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:06 : main.A5: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1), result: changed ...</MSG>
<MSG>2:07 : main.A5: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>2:07 : main.A5: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2) ...</MSG>
<MSG>2:07 : main.A5: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2), result: changed</MSG>
<MSG>2:07 : main.A5: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L6%1%allocaI1 ...</MSG>
<MSG>2:07 : main.A5: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2) ...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:07 : main.A5: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:07 : main.A5: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:09 : main.A5: marking unstable at Lfor.cond%1%bbentry_L9%1%bbentry due to failing condition:
memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.stability-failure
failcond-expr = memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/):
1 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
3 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
4 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
6 : memmasks_are_equal(1, 2, 3, 4, 5) : BOOL
</MSG>
<MSG>2:09 : main.A5: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 1 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>2:09 : main.A5: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2), result: changed ...</MSG>
<MSG>2:09 : main.A5: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>2:09 : main.A5: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)*((Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)*(Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))) became unstable after invariant inference</MSG>
<MSG>2:09 : Chosen product-TFG main.A5 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)*((Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)*(Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))))
</MSG>
<MSG>2:09 : Chose (for CE propagation) product-TFG main.A19 (d:0, s:0) from a frontier of size 49...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>2:09 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19...</MSG>
<MSG>2:09 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19...</MSG>
<MSG>2:10 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:10 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond2%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>2:10 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond2%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>2:10 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond2%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>2:10 : main.A19: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:10 : main.A19: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:10 : main.A19: Adding node Lentry%1%allocaI3_L0%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19: returning 1 for =Lentry%1%d=
<MSG>2:10 : main.A19: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:10 : main.A19: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:10 : main.A19: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:10 : main.A19: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:10 : main.A19: Adding node Lentry%1%allocaI4_L0%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19: returning 1 for =Lentry%1%d=
<MSG>2:10 : main.A19: Getting alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:10 : main.A19: Found no alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A19: returning 1 for =Lentry%1%d=
<MSG>2:10 : main.A19: Computing loop hoisting select expressions at toPC Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:10 : main.A19: Computing loop hoisting non-linear expressions at toPC Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:10 : main.A19: Adding node Lfor.cond2%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19: returning 1 for =Lentry%1%d=
<MSG>2:10 : main.A19: Getting alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:10 : main.A19: Found no alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:10 : main.A19: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:10 : main.A19: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:10 : main.A19: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:10 : main.A19: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:10 : main.A19: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1</MSG>
<MSG>2:10 : main.A19: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L0%1%allocaI1 and propagated further.
</MSG>
<MSG>2:10 : main.A19: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:10 : main.A19: Finished executing CG's add edge function...</MSG>
<MSG>2:10 : main.A19: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:10 : main.A19: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:10 : main.A19: Adding edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:10 : main.A19: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A19: returning 1 for =Lentry%1%d=
<MSG>2:10 : main.A19: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:10 : main.A19: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:10 : main.A19: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:10 : main.A19: Finished executing CG's add edge function...</MSG>
<MSG>2:10 : main.A19: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:10 : main.A19: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:10 : main.A19: Adding edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:10 : main.A19: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:10 : main.A19: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:10 : main.A19: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:10 : main.A19: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:10 : main.A19: Finished executing CG's add edge function...</MSG>
<MSG>2:10 : main.A19: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:10 : main.A19: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:10 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond2%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>2:10 : Added correlation to the product-TFG main.A19 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>2:10 : Chose (after CE propagation) product-TFG main.A19 (d:0, s:0) from a frontier of size 49...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>2:10 : main.A19: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:10 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1, Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2, Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:10 : main.A19: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>2:10 : main.A19: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: unchanged</MSG>
<MSG>2:10 : main.A19: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>2:10 : main.A19: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>2:10 : main.A19: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:10 : main.A19: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:10 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:10 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:10 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:10 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:10 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:10 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:10 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:10 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:10 : main.A19: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:10 : main.A19: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:10 : main.A19: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:10 : main.A19: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:10 : main.A19: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:10 : main.A19: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:10 : main.A19: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:19 : main.A19: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht16-prove_trivial6-prove10...</MSG>
<MSG>2:19 : main.A19: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:19 : main.A19: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:19 : main.A19: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:19 : main.A19: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:19 : main.A19: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:19 : main.A19: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:19 : main.A19: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:19 : main.A19: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:19 : main.A19: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:19 : main.A19: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:19 : main.A19: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:20 : main.A19: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:20 : main.A19: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:20 : main.A19: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:20 : main.A19: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:20 : main.A19: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:20 : main.A19: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:20 : main.A19: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:20 : main.A19: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed ...</MSG>
<MSG>2:20 : main.A19: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>2:20 : main.A19: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:20 : main.A19: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed</MSG>
<MSG>2:20 : main.A19: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>2:21 : main.A19: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:21 : main.A19: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:21 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:21 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:21 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:21 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:21 : main.A19: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:21 : main.A19: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:21 : main.A19: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:21 : main.A19: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 2 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:28 : main.A19: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht15-prove_trivial6-prove9...</MSG>
<MSG>2:28 : main.A19: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:28 : main.A19: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:28 : main.A19: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:28 : main.A19: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:28 : main.A19: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:28 : main.A19: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:28 : main.A19: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:28 : main.A19: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:28 : main.A19: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:28 : main.A19: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:28 : main.A19: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:28 : main.A19: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:28 : main.A19: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:28 : main.A19: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:28 : main.A19: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:28 : main.A19: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:28 : main.A19: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:28 : main.A19: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:28 : main.A19: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:28 : main.A19: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:28 : main.A19: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed ...</MSG>
<MSG>2:28 : main.A19: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>2:28 : main.A19: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:29 : main.A19: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: changed</MSG>
<MSG>2:29 : main.A19: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>2:29 : main.A19: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:29 : main.A19: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:29 : main.A19: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:29 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:29 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:29 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:29 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:29 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:29 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:29 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:29 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:29 : main.A19: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:29 : main.A19: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:29 : main.A19: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:29 : main.A19: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:29 : main.A19: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:29 : main.A19: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:29 : main.A19: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 11 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht23-prove_trivial11-prove12...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:31 : main.A19: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>2:31 : main.A19: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:31 : main.A19: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:31 : main.A19: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:31 : main.A19: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:31 : main.A19: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:31 : main.A19: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial1-prove4...</MSG>
<MSG>2:31 : main.A19: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:31 : main.A19: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:31 : main.A19: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:31 : main.A19: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:31 : main.A19: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:31 : main.A19: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:31 : main.A19: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:31 : main.A19: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:31 : main.A19: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:31 : main.A19: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:31 : main.A19: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: changed ...</MSG>
<MSG>2:32 : main.A19: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: changed( 1, 1 ) ...</MSG>
<MSG>2:32 : main.A19: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:32 : main.A19: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: changed</MSG>
<MSG>2:32 : main.A19: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>2:32 : main.A19: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 12 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht22-prove_trivial11-prove11...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>2:33 : main.A19: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: changed( 1, 0 ) ...</MSG>
<MSG>2:33 : main.A19: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:33 : main.A19: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: unchanged</MSG>
<MSG>2:33 : main.A19: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>2:33 : main.A19: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 11 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht7-prove_trivial5-prove2...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: unchanged ...</MSG>
<MSG>2:34 : main.A19: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:34 : main.A19: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:35 : main.A19: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>2:35 : main.A19: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>2:35 : main.A19: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 12 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht22-prove_trivial11-prove11...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>2:35 : main.A19: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:35 : main.A19 (d:0, s:0): checked newly added edge and inferred invariants...</MSG>
<MSG>2:35 : main.A19 (d:0, s:0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:36 : product-TFG main.A19: Enumerating correlations for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:36 : Considering 4 paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:36 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:36 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:36 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:36 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:36 : Found 4 feasible correlations for paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:36 : product-TFG main.A19: Found 4 correlations for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:36 : product-TFG main.A19 created 4 possibilities in group main.A19.B...</MSG>
<MSG>2:36 : Chose (for CE propagation) product-TFG main.A19.B1 (d:0, s:0) from a frontier of size 52...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 22 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0]
<MSG>2:36 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B1...</MSG>
<MSG>2:36 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B1...</MSG>
<MSG>2:36 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:36 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:36 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>2:36 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:36 : Adding new edge to the product-TFG main.A19.B1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:36 : main.A19.B1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:36 : main.A19.B1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:36 : main.A19.B1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:36 : main.A19.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:36 : main.A19.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:36 : main.A19.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:36 : main.A19.B1: Propagated 17 out of 22 counter-examples across edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>2:36 : main.A19.B1: Added the 17 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>2:36 : main.A19.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:37 : main.A19.B1: Finished executing CG's add edge function...</MSG>
<MSG>2:37 : main.A19.B1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:37 : main.A19.B1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:37 : Done adding new edge to the product-TFG main.A19.B1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:37 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:37 : Added correlation to the product-TFG main.A19.B1 (d:1, s:1) and created a correlation entry...</MSG>
<MSG>2:37 : Chose (for CE propagation) product-TFG main.A19.B2 (d:0, s:0) from a frontier of size 52...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 22 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>2:37 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2...</MSG>
<MSG>2:37 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2...</MSG>
<MSG>2:37 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:37 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:37 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>2:37 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:37 : Adding new edge to the product-TFG main.A19.B2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:37 : main.A19.B2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:37 : main.A19.B2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:37 : main.A19.B2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:37 : main.A19.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:37 : main.A19.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:37 : main.A19.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:37 : main.A19.B2: Propagated 17 out of 22 counter-examples across edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>2:37 : main.A19.B2: Added the 17 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>2:37 : main.A19.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:38 : main.A19.B2: Finished executing CG's add edge function...</MSG>
<MSG>2:38 : main.A19.B2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:38 : main.A19.B2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:38 : Done adding new edge to the product-TFG main.A19.B2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:38 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:38 : Added correlation to the product-TFG main.A19.B2 (d:0, s:1) and created a correlation entry...</MSG>
<MSG>2:38 : Chose (after CE propagation) product-TFG main.A19.B2 (d:0, s:1) from a frontier of size 52...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 43 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>2:38 : main.A19.B2: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:38 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:38 : main.A19.B2: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:38 : main.A19.B2: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>2:38 : main.A19.B2: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L9%1%bbentry ...</MSG>
<MSG>2:38 : main.A19.B2: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:38 : main.A19.B2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:38 : main.A19.B2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:38 : main.A19.B2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:38 : main.A19.B2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:38 : main.A19.B2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:38 : main.A19.B2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:38 : main.A19.B2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:38 : main.A19.B2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:38 : main.A19.B2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:38 : main.A19.B2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:38 : main.A19.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:38 : main.A19.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:38 : main.A19.B2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:38 : main.A19.B2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:38 : main.A19.B2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:38 : main.A19.B2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:38 : main.A19.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 16 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht20-prove_trivial17-prove3...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:39 : main.A19.B2: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>2:39 : main.A19.B2: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:39 : main.A19.B2 (d:0, s:1): checked newly added edge and inferred invariants...</MSG>
<MSG>2:39 : main.A19.B2 (d:0, s:1): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:40 : product-TFG main.A19.B2: Enumerating correlations for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Considering 3 paths to src pc Lfor.cond%1%bbentry as correlation candidates for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 2, delta 2] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 3, delta 3] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Found 3 feasible correlations for paths to src pc Lfor.cond%1%bbentry as correlation candidates for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Considering 4 paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Found 4 feasible correlations for paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Considering 3 paths to src pc Lfor.cond8%1%bbentry as correlation candidates for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond8%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond8%1%bbentry[mu 2, delta 2] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond8%1%bbentry[mu 3, delta 3] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : Found 3 feasible correlations for paths to src pc Lfor.cond8%1%bbentry as correlation candidates for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : product-TFG main.A19.B2: Found 10 correlations for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:40 : product-TFG main.A19.B2 created 10 possibilities in group main.A19.B2.C...</MSG>
<MSG>2:40 : Chose (for CE propagation) product-TFG main.A19.B2.C4 (d:0, s:1) from a frontier of size 61...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0]
<MSG>2:40 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4...</MSG>
<MSG>2:40 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4...</MSG>
<MSG>2:40 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:40 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>2:40 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry
</MSG>
<MSG>2:40 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>2:40 : Adding new edge to the product-TFG main.A19.B2.C4 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>2:40 : main.A19.B2.C4: Computing loop hoisting select expressions at toPC Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:40 : main.A19.B2.C4: Computing loop hoisting non-linear expressions at toPC Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:40 : main.A19.B2.C4: Adding node Lfor.cond2%1%bbentry_L14%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19.B2.C4: returning 1 for =Lentry%1%d=
<MSG>2:40 : main.A19.B2.C4: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:40 : main.A19.B2.C4: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:40 : main.A19.B2.C4: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:40 : main.A19.B2.C4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:40 : main.A19.B2.C4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:40 : main.A19.B2.C4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:40 : main.A19.B2.C4: Propagated 8 out of 46 counter-examples across edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry</MSG>
<MSG>2:40 : main.A19.B2.C4: Added the 8 propagated CEs at PC Lfor.cond2%1%bbentry_L14%1%bbentry and propagated further.
</MSG>
<MSG>2:40 : main.A19.B2.C4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:40 : main.A19.B2.C4: Finished executing CG's add edge function...</MSG>
<MSG>2:40 : main.A19.B2.C4: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:40 : main.A19.B2.C4: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:40 : Done adding new edge to the product-TFG main.A19.B2.C4 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>2:40 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>2:40 : Added correlation to the product-TFG main.A19.B2.C4 (d:0, s:1) and created a correlation entry...</MSG>
<MSG>2:40 : Chose (after CE propagation) product-TFG main.A19.B2.C4 (d:0, s:1) from a frontier of size 61...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0]
<MSG>2:40 : main.A19.B2.C4: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:40 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:40 : main.A19.B2.C4: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry) ...</MSG>
<MSG>2:40 : main.A19.B2.C4: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged</MSG>
<MSG>2:40 : main.A19.B2.C4: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L9%1%bbentry ...</MSG>
<MSG>2:40 : main.A19.B2.C4: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry) ...</MSG>
<MSG>2:40 : main.A19.B2.C4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2.C4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2.C4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2.C4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2.C4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2.C4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2.C4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2.C4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2.C4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2.C4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2.C4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2.C4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2.C4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2.C4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2.C4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2.C4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2.C4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 26 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:45 : main.A19.B2.C4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 1 proof-stats=dht34-prove_trivial14-prove20...</MSG>
<MSG>2:45 : main.A19.B2.C4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:45 : main.A19.B2.C4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:45 : main.A19.B2.C4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:45 : main.A19.B2.C4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:45 : main.A19.B2.C4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 1 proof-stats=dht6-prove_trivial0-prove6...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial3-prove3...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: changed ...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>2:46 : main.A19.B2.C4 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>2:46 : main.A19.B2.C4 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:47 : product-TFG main.A19.B2.C4: Enumerating correlations for L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:47 : Considering 4 paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:47 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0] as correlation candidate for L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:47 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1] as correlation candidate for L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:47 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2] as correlation candidate for L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:47 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3] as correlation candidate for L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:47 : Found 4 feasible correlations for paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:47 : product-TFG main.A19.B2.C4: Found 4 correlations for L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:47 : product-TFG main.A19.B2.C4 created 4 possibilities in group main.A19.B2.C4.D...</MSG>
<MSG>2:47 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D1 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0]
<MSG>2:47 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D1...</MSG>
<MSG>2:47 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D1...</MSG>
<MSG>2:47 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:47 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:47 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>2:47 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:47 : Adding new edge to the product-TFG main.A19.B2.C4.D1 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: Propagated 21 out of 38 counter-examples across edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>2:48 : main.A19.B2.C4.D1: Added the 21 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>2:48 : main.A19.B2.C4.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:49 : main.A19.B2.C4.D1: Finished executing CG's add edge function...</MSG>
<MSG>2:49 : main.A19.B2.C4.D1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:49 : main.A19.B2.C4.D1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:49 : Done adding new edge to the product-TFG main.A19.B2.C4.D1 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:49 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:49 : Added correlation to the product-TFG main.A19.B2.C4.D1 (d:2, s:4) and created a correlation entry...</MSG>
<MSG>2:49 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>2:49 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2...</MSG>
<MSG>2:49 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2...</MSG>
<MSG>2:49 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:49 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:49 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>2:49 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:49 : Adding new edge to the product-TFG main.A19.B2.C4.D2 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Propagated 0 out of 38 counter-examples across edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Added the 0 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Finished executing CG's add edge function...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:49 : Done adding new edge to the product-TFG main.A19.B2.C4.D2 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:49 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:49 : Added correlation to the product-TFG main.A19.B2.C4.D2 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>2:49 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>2:49 : main.A19.B2.C4.D2: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:49 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L14%1%bbentry ...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 16 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht20-prove_trivial10-prove10...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:52 : product-TFG main.A19.B2.C4.D2: Enumerating correlations for L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:52 : Considering 4 paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:52 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0] as correlation candidate for L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:52 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1] as correlation candidate for L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:52 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2] as correlation candidate for L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:52 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3] as correlation candidate for L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:52 : Found 4 feasible correlations for paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:52 : product-TFG main.A19.B2.C4.D2: Found 4 correlations for L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:52 : product-TFG main.A19.B2.C4.D2 created 4 possibilities in group main.A19.B2.C4.D2.E...</MSG>
<MSG>2:52 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0]
<MSG>2:52 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1...</MSG>
<MSG>2:52 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1...</MSG>
<MSG>2:52 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:52 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry</MSG>
<MSG>2:52 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry
</MSG>
<MSG>2:52 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry</MSG>
<MSG>2:52 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Propagated 15 out of 41 counter-examples across edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Added the 15 propagated CEs at PC Lfor.cond2%1%bbentry_L14%1%bbentry and propagated further.
</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Finished executing CG's add edge function...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:52 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>2:52 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry</MSG>
<MSG>2:52 : Added correlation to the product-TFG main.A19.B2.C4.D2.E1 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>2:52 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2.E1 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0]
<MSG>2:52 : main.A19.B2.C4.D2.E1: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:52 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry) ...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L14%1%bbentry ...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry) ...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 26 exprs and 26 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial6-prove0...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged ...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:53 : product-TFG main.A19.B2.C4.D2.E1: Enumerating correlations for L14%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:53 : Considering 3 paths to src pc E0%0%d as correlation candidates for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:53 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:53 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:53 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:53 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:53 : product-TFG main.A19.B2.C4.D2.E1: Found 3 correlations for L14%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>2:53 : product-TFG main.A19.B2.C4.D2.E1 created 3 possibilities in group main.A19.B2.C4.D2.E1.F...</MSG>
<MSG>2:53 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1.F1 (d:0, s:2) from a frontier of size 69...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 56 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>2:53 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1.F1...</MSG>
<MSG>2:53 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1.F1...</MSG>
<MSG>2:53 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>2:53 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>2:53 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d
</MSG>
<MSG>2:53 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>2:53 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F1 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: marking unstable at Lfor.cond2%1%bbentry_L14%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L14%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142033 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8] : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), )
142034 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, )
140782 : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp : MEMLABEL : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
140269 : input.dst.sp=L0%0%d=sp : BV:32            : 1073741836
140789 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32 : 4294967288
141258 : bvand(140269, 140789) : BV:32             : 1073741832
144102 : 262116 { 0x3ffe4 +1.3124666e129 } : BV:32 : 262116
144132 : bvadd(141258, 144102) : BV:32             : 1074003948
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
195422 : select(142033, 142034, 140782, 144132, 140349, 140295) : BV:32 : 0
195431 : eq(140284, 195422) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142475 : input.dst.exreg.0.0.L14%1%bbentry : BV:32 : 1
195490 : eq(140296, 142475) : BOOL                 : true
196688 : and(195431, 195490) : BOOL                : true
196806 : not(196688) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
196807 : or(196806, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce13073.fuzzed 3a51120416b2ac97304a3e303a28e9
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 1107165191 { 0x41fe0007 +1.98437583e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741840 { 0x40000010 +1.190e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=stack.size
1 : 1048576000 { 0x3e800000 +1.0e254 } : BV:32
=input.dst.exreg.0.0.L14%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 58720256 { 0x3800000 +1.0e136 } : BV:32
=input.memlabel-mem--esp_end
1 : 1107296255 { 0x41ffffff +1.99999988e4 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741828; 1073741828 ] -> 0, [ 1073741829; 1073741829 ] -> 0, [ 1073741830; 1073741830 ] -> 0, [ 1073741831; 1073741831 ] -> 0, [ 1073741836; 1073741836 ] -> 0, [ 1073741837; 1073741837 ] -> 0, [ 1073741838; 1073741838 ] -> 0, [ 1073741839; 1073741839 ] -> 0, [ 1074003948; 1074003948 ] -> 0, [ 1074003949; 1074003949 ] -> 0, [ 1074003950; 1074003950 ] -> 0, [ 1074003951; 1074003951 ] -> 0, [ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4071658301
=counter_example_end


failcond-expr = or(not(and(eq(0, select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp, bvadd(bvand(input.dst.sp=L0%0%d=sp, 4294967288), 262116), 4, false)), eq(1, input.dst.exreg.0.0.L14%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
3 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp : MEMLABEL
5 : input.dst.sp=L0%0%d=sp : BV:32
6 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
7 : bvand(5, 6) : BV:32
8 : 262116 { 0x3ffe4 +1.3124666e129 } : BV:32
9 : bvadd(7, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : eq(1, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : input.dst.exreg.0.0.L14%1%bbentry : BV:32
16 : eq(14, 15) : BOOL
17 : and(13, 16) : BOOL
18 : not(17) : BOOL
19 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvslt(19, 20) : BOOL
22 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
23 : bvadd(14, 22) : BV:32
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : bvslt(23, 24) : BOOL
26 : not(25) : BOOL
27 : andnot1(21, 26) : BOOL
28 : or(18, 27) : BOOL
</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F1: Finished executing CG's add edge function...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F1 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d...</MSG>
<MSG>2:55 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>2:55 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L14%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142033 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8] : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), )
142034 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, )
140782 : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp : MEMLABEL : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
140269 : input.dst.sp=L0%0%d=sp : BV:32            : 1073741836
140789 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32 : 4294967288
141258 : bvand(140269, 140789) : BV:32             : 1073741832
144102 : 262116 { 0x3ffe4 +1.3124666e129 } : BV:32 : 262116
144132 : bvadd(141258, 144102) : BV:32             : 1074003948
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
195422 : select(142033, 142034, 140782, 144132, 140349, 140295) : BV:32 : 0
195431 : eq(140284, 195422) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142475 : input.dst.exreg.0.0.L14%1%bbentry : BV:32 : 1
195490 : eq(140296, 142475) : BOOL                 : true
196688 : and(195431, 195490) : BOOL                : true
196806 : not(196688) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
196807 : or(196806, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce13073.fuzzed 3a51120416b2ac97304a3e303a28e9
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 1107165191 { 0x41fe0007 +1.98437583e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741840 { 0x40000010 +1.190e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=stack.size
1 : 1048576000 { 0x3e800000 +1.0e254 } : BV:32
=input.dst.exreg.0.0.L14%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 58720256 { 0x3800000 +1.0e136 } : BV:32
=input.memlabel-mem--esp_end
1 : 1107296255 { 0x41ffffff +1.99999988e4 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741828; 1073741828 ] -> 0, [ 1073741829; 1073741829 ] -> 0, [ 1073741830; 1073741830 ] -> 0, [ 1073741831; 1073741831 ] -> 0, [ 1073741836; 1073741836 ] -> 0, [ 1073741837; 1073741837 ] -> 0, [ 1073741838; 1073741838 ] -> 0, [ 1073741839; 1073741839 ] -> 0, [ 1074003948; 1074003948 ] -> 0, [ 1074003949; 1074003949 ] -> 0, [ 1074003950; 1074003950 ] -> 0, [ 1074003951; 1074003951 ] -> 0, [ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4071658301
=counter_example_end


</MSG>
<MSG>2:55 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E1.F1 (d:0, s:2)...</MSG>
<MSG>2:55 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1.F2 (d:0, s:2) from a frontier of size 68...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 56 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>2:55 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1.F2...</MSG>
<MSG>2:55 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1.F2...</MSG>
<MSG>2:55 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>2:55 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>2:55 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d
</MSG>
<MSG>2:55 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>2:55 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F2 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F2: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F2: marking unstable at Lfor.cond2%1%bbentry_L14%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L14%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142033 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8] : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), )
142034 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, )
140782 : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp : MEMLABEL : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
140269 : input.dst.sp=L0%0%d=sp : BV:32            : 1073741836
140789 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32 : 4294967288
141258 : bvand(140269, 140789) : BV:32             : 1073741832
144102 : 262116 { 0x3ffe4 +1.3124666e129 } : BV:32 : 262116
144132 : bvadd(141258, 144102) : BV:32             : 1074003948
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
195422 : select(142033, 142034, 140782, 144132, 140349, 140295) : BV:32 : 0
195431 : eq(140284, 195422) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142475 : input.dst.exreg.0.0.L14%1%bbentry : BV:32 : 1
195490 : eq(140296, 142475) : BOOL                 : true
196688 : and(195431, 195490) : BOOL                : true
196806 : not(196688) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 2147483648
141516 : bvslt(141514, 140284) : BOOL              : true
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 1107165184
141535 : bvadd(140467, 140542) : BV:32             : 1107427324
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : and(true, andnot1(eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)), false))
196996 : or(196994, 196995) : BOOL                 : or(false, and(true, andnot1(eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)), false)))
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197127 : or(196806, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce13073.fuzzed 3a51120416b2ac97304a3e303a28e9
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 1107165191 { 0x41fe0007 +1.98437583e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741840 { 0x40000010 +1.190e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=stack.size
1 : 1048576000 { 0x3e800000 +1.0e254 } : BV:32
=input.dst.exreg.0.0.L14%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 58720256 { 0x3800000 +1.0e136 } : BV:32
=input.memlabel-mem--esp_end
1 : 1107296255 { 0x41ffffff +1.99999988e4 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741828; 1073741828 ] -> 0, [ 1073741829; 1073741829 ] -> 0, [ 1073741830; 1073741830 ] -> 0, [ 1073741831; 1073741831 ] -> 0, [ 1073741836; 1073741836 ] -> 0, [ 1073741837; 1073741837 ] -> 0, [ 1073741838; 1073741838 ] -> 0, [ 1073741839; 1073741839 ] -> 0, [ 1074003948; 1074003948 ] -> 0, [ 1074003949; 1074003949 ] -> 0, [ 1074003950; 1074003950 ] -> 0, [ 1074003951; 1074003951 ] -> 0, [ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4071658301
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[197127](not(and(eq(0, select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp, bvadd(bvand(input.dst.sp=L0%0%d=sp, 4294967288), 262116), 4, false)), eq(1, input.dst.exreg.0.0.L14%1%bbentry))), or[197119](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
3 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp : MEMLABEL
5 : input.dst.sp=L0%0%d=sp : BV:32
6 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
7 : bvand(5, 6) : BV:32
8 : 262116 { 0x3ffe4 +1.3124666e129 } : BV:32
9 : bvadd(7, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : eq(1, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : input.dst.exreg.0.0.L14%1%bbentry : BV:32
16 : eq(14, 15) : BOOL
17 : and(13, 16) : BOOL
18 : not(17) : BOOL
19 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvslt(19, 20) : BOOL
22 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
23 : bvadd(14, 22) : BV:32
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : bvslt(23, 24) : BOOL
26 : not(25) : BOOL
27 : andnot1(21, 26) : BOOL
28 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
29 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
30 : memlabel-mem--symbol.1.0 : MEMLABEL
31 : symbol.1 : BV:32
32 : select(28, 29, 30, 31, 10, 11) : BV:32
33 : bvslt(32, 1) : BOOL
34 : bvadd(14, 19) : BV:32
35 : bvslt(34, 20) : BOOL
36 : andnot1(35, 26) : BOOL
37 : andnot1(33, 36) : BOOL
38 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
39 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
40 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
41 : bvadd(39, 40) : BV:32
42 : select(28, 29, 38, 41, 10, 11) : BV:32
43 : eq(1, 42) : BOOL
44 : andnot1(43, 11) : BOOL
45 : and(33, 44) : BOOL
46 : or(37, 45) : BOOL
47 : and(21, 46) : BOOL
48 : or(27, 47) : BOOL
49 : or(18, 48) : BOOL
</MSG>
<MSG>2:55 : main.A19.B2.C4.D2.E1.F2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>2:58 : main.A19.B2.C4.D2.E1.F2: Finished executing CG's add edge function...</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F2 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d...</MSG>
<MSG>2:58 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>2:58 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L14%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142033 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8] : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), )
142034 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, )
140782 : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp : MEMLABEL : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
140269 : input.dst.sp=L0%0%d=sp : BV:32            : 1073741836
140789 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32 : 4294967288
141258 : bvand(140269, 140789) : BV:32             : 1073741832
144102 : 262116 { 0x3ffe4 +1.3124666e129 } : BV:32 : 262116
144132 : bvadd(141258, 144102) : BV:32             : 1074003948
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
195422 : select(142033, 142034, 140782, 144132, 140349, 140295) : BV:32 : 0
195431 : eq(140284, 195422) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142475 : input.dst.exreg.0.0.L14%1%bbentry : BV:32 : 1
195490 : eq(140296, 142475) : BOOL                 : true
196688 : and(195431, 195490) : BOOL                : true
196806 : not(196688) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 2147483648
141516 : bvslt(141514, 140284) : BOOL              : true
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 1107165184
141535 : bvadd(140467, 140542) : BV:32             : 1107427324
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : and(true, andnot1(eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)), false))
196996 : or(196994, 196995) : BOOL                 : or(false, and(true, andnot1(eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)), false)))
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197127 : or(196806, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce13073.fuzzed 3a51120416b2ac97304a3e303a28e9
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 1107165191 { 0x41fe0007 +1.98437583e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741840 { 0x40000010 +1.190e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=stack.size
1 : 1048576000 { 0x3e800000 +1.0e254 } : BV:32
=input.dst.exreg.0.0.L14%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 58720256 { 0x3800000 +1.0e136 } : BV:32
=input.memlabel-mem--esp_end
1 : 1107296255 { 0x41ffffff +1.99999988e4 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741828; 1073741828 ] -> 0, [ 1073741829; 1073741829 ] -> 0, [ 1073741830; 1073741830 ] -> 0, [ 1073741831; 1073741831 ] -> 0, [ 1073741836; 1073741836 ] -> 0, [ 1073741837; 1073741837 ] -> 0, [ 1073741838; 1073741838 ] -> 0, [ 1073741839; 1073741839 ] -> 0, [ 1074003948; 1074003948 ] -> 0, [ 1074003949; 1074003949 ] -> 0, [ 1074003950; 1074003950 ] -> 0, [ 1074003951; 1074003951 ] -> 0, [ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 94 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4071658301
=counter_example_end


</MSG>
<MSG>2:58 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E1.F2 (d:0, s:2)...</MSG>
<MSG>2:58 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1.F3 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 56 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>2:58 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1.F3...</MSG>
<MSG>2:58 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1.F3...</MSG>
<MSG>2:58 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>2:58 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>2:58 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d
</MSG>
<MSG>2:58 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>2:58 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d...</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F3: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F3: Propagated 0 out of 56 counter-examples across edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F3: Added the 0 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>2:58 : main.A19.B2.C4.D2.E1.F3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:01 : main.A19.B2.C4.D2.E1.F3: Finished executing CG's add edge function...</MSG>
<MSG>3:01 : main.A19.B2.C4.D2.E1.F3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:01 : main.A19.B2.C4.D2.E1.F3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:01 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d...</MSG>
<MSG>3:01 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>3:01 : Added correlation to the product-TFG main.A19.B2.C4.D2.E1.F3 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>3:01 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2.E1.F3 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 61 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 61 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 56 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:01 : main.A19.B2.C4.D2.E1.F3: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>3:01 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:01 : main.A19.B2.C4.D2.E1.F3: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>3:01 : main.A19.B2.C4.D2.E1.F3: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d), result: changed</MSG>
<MSG>3:01 : main.A19.B2.C4.D2.E1.F3: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L14%1%bbentry ...</MSG>
<MSG>3:02 : main.A19.B2.C4.D2.E1.F3: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d), result: changed( 1, 0 ) ...</MSG>
<MSG>3:02 : main.A19.B2.C4.D2.E1.F3 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>3:02 : main.A19.B2.C4.D2.E1.F3 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:03 : product-TFG main.A19.B2.C4.D2.E1.F3: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:03 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:03 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:03 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:03 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:03 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:03 : product-TFG main.A19.B2.C4.D2.E1.F3: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:03 : product-TFG main.A19.B2.C4.D2.E1.F3 created 3 possibilities in group main.A19.B2.C4.D2.E1.F3.G...</MSG>
<MSG>3:03 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1.F3.G1 (d:0, s:2) from a frontier of size 69...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 61 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 61 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 56 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>3:03 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1.F3.G1...</MSG>
<MSG>3:03 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1.F3.G1...</MSG>
<MSG>3:03 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:03 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:03 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:03 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:03 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3.G1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce13834.fuzzed 1a99998d2f3ddda3feffb79a62363fd
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
393626482
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:04 : main.A19.B2.C4.D2.E1.F3.G1: Finished executing CG's add edge function...</MSG>
<MSG>3:04 : main.A19.B2.C4.D2.E1.F3.G1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:04 : main.A19.B2.C4.D2.E1.F3.G1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:04 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3.G1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:04 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:04 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce13834.fuzzed 1a99998d2f3ddda3feffb79a62363fd
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
393626482
=counter_example_end


</MSG>
<MSG>3:04 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E1.F3.G1 (d:0, s:2)...</MSG>
<MSG>3:04 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1.F3.G2 (d:0, s:2) from a frontier of size 68...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 61 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 61 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 56 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>3:04 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1.F3.G2...</MSG>
<MSG>3:04 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1.F3.G2...</MSG>
<MSG>3:04 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:04 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:04 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:04 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:04 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3.G2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:04 : main.A19.B2.C4.D2.E1.F3.G2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:04 : main.A19.B2.C4.D2.E1.F3.G2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:04 : main.A19.B2.C4.D2.E1.F3.G2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:04 : main.A19.B2.C4.D2.E1.F3.G2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:04 : main.A19.B2.C4.D2.E1.F3.G2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:04 : main.A19.B2.C4.D2.E1.F3.G2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:04 : main.A19.B2.C4.D2.E1.F3.G2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce13834.fuzzed 1a99998d2f3ddda3feffb79a62363fd
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
393626482
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[197909](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197119](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>3:04 : main.A19.B2.C4.D2.E1.F3.G2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:08 : main.A19.B2.C4.D2.E1.F3.G2: Finished executing CG's add edge function...</MSG>
<MSG>3:08 : main.A19.B2.C4.D2.E1.F3.G2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:08 : main.A19.B2.C4.D2.E1.F3.G2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:08 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3.G2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:08 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:08 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce13834.fuzzed 1a99998d2f3ddda3feffb79a62363fd
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
393626482
=counter_example_end


</MSG>
<MSG>3:08 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E1.F3.G2 (d:0, s:2)...</MSG>
<MSG>3:08 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1.F3.G3 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 61 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 61 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 56 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:08 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1.F3.G3...</MSG>
<MSG>3:08 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1.F3.G3...</MSG>
<MSG>3:08 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:08 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:08 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:08 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:08 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3.G3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:08 : main.A19.B2.C4.D2.E1.F3.G3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:08 : main.A19.B2.C4.D2.E1.F3.G3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:08 : main.A19.B2.C4.D2.E1.F3.G3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:08 : main.A19.B2.C4.D2.E1.F3.G3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:08 : main.A19.B2.C4.D2.E1.F3.G3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:08 : main.A19.B2.C4.D2.E1.F3.G3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:08 : main.A19.B2.C4.D2.E1.F3.G3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce13834.fuzzed 1a99998d2f3ddda3feffb79a62363fd
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
393626482
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141552 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[197936](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197469](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1[196981](141552, false)))), and[197405](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[197396](andnot1[197394](141516, and[197274](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[197273](and[196995](141516, andnot1[196981](141552, false)), andnot1[197272](141516, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[197395](141516, andnot1[197377](141552, or[197365](and[196995](141516, andnot1[196981](141552, false)), andnot1[197363](141516, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[197443](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[197436](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[197418](and[196995](141516, andnot1[196981](141552, false)), andnot1[197415](141516, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>3:08 : main.A19.B2.C4.D2.E1.F3.G3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:11 : main.A19.B2.C4.D2.E1.F3.G3: Finished executing CG's add edge function...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E1.F3.G3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E1.F3.G3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:11 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3.G3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:11 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:11 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce13834.fuzzed 1a99998d2f3ddda3feffb79a62363fd
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 61 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
393626482
=counter_example_end


</MSG>
<MSG>3:11 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E1.F3.G3 (d:0, s:2)...</MSG>
<MSG>3:11 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>3:11 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2...</MSG>
<MSG>3:11 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2...</MSG>
<MSG>3:11 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>3:11 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry</MSG>
<MSG>3:11 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry
</MSG>
<MSG>3:11 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry</MSG>
<MSG>3:11 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Propagated 7 out of 41 counter-examples across edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Added the 7 propagated CEs at PC Lfor.cond2%1%bbentry_L14%1%bbentry and propagated further.
</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Finished executing CG's add edge function...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:12 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>3:12 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry</MSG>
<MSG>3:12 : Added correlation to the product-TFG main.A19.B2.C4.D2.E2 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>3:12 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2.E2 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>3:12 : main.A19.B2.C4.D2.E2: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:12 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L14%1%bbentry ...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 16 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht20-prove_trivial10-prove10...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry) ...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L14%1%bbentry ...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry) ...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 26 exprs and 27 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht13-prove_trivial12-prove1...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial6-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged ...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:15 : product-TFG main.A19.B2.C4.D2.E2: Enumerating correlations for L14%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>3:15 : Considering 3 paths to src pc E0%0%d as correlation candidates for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>3:15 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>3:15 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>3:15 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>3:15 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>3:15 : product-TFG main.A19.B2.C4.D2.E2: Found 3 correlations for L14%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>3:15 : product-TFG main.A19.B2.C4.D2.E2 created 3 possibilities in group main.A19.B2.C4.D2.E2.F...</MSG>
<MSG>3:15 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2.F1 (d:0, s:2) from a frontier of size 68...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>3:15 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2.F1...</MSG>
<MSG>3:15 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2.F1...</MSG>
<MSG>3:15 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:15 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>3:15 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d
</MSG>
<MSG>3:15 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>3:15 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F1 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: marking unstable at Lfor.cond2%1%bbentry_L14%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L14%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142033 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8] : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), )
142034 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, )
140782 : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp : MEMLABEL : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
140269 : input.dst.sp=L0%0%d=sp : BV:32            : 1073741836
140789 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32 : 4294967288
141258 : bvand(140269, 140789) : BV:32             : 1073741832
144102 : 262116 { 0x3ffe4 +1.3124666e129 } : BV:32 : 262116
144132 : bvadd(141258, 144102) : BV:32             : 1074003948
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
195422 : select(142033, 142034, 140782, 144132, 140349, 140295) : BV:32 : 0
195431 : eq(140284, 195422) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142475 : input.dst.exreg.0.0.L14%1%bbentry : BV:32 : 1
195490 : eq(140296, 142475) : BOOL                 : true
196688 : and(195431, 195490) : BOOL                : true
196806 : not(196688) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
196807 : or(196806, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce14423.fuzzed 9475c6f3aec7786957b371f33bdc09e
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 1107165191 { 0x41fe0007 +1.98437583e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741840 { 0x40000010 +1.190e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=stack.size
1 : 1048576000 { 0x3e800000 +1.0e254 } : BV:32
=input.dst.exreg.0.0.L14%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 58720256 { 0x3800000 +1.0e136 } : BV:32
=input.memlabel-mem--esp_end
1 : 1107296255 { 0x41ffffff +1.99999988e4 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741828; 1073741828 ] -> 0, [ 1073741829; 1073741829 ] -> 0, [ 1073741830; 1073741830 ] -> 0, [ 1073741831; 1073741831 ] -> 0, [ 1073741836; 1073741836 ] -> 0, [ 1073741837; 1073741837 ] -> 0, [ 1073741838; 1073741838 ] -> 0, [ 1073741839; 1073741839 ] -> 0, [ 1074003948; 1074003948 ] -> 0, [ 1074003949; 1074003949 ] -> 0, [ 1074003950; 1074003950 ] -> 0, [ 1074003951; 1074003951 ] -> 0, [ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
20605945
=counter_example_end


failcond-expr = or(not(and(eq(0, select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp, bvadd(bvand(input.dst.sp=L0%0%d=sp, 4294967288), 262116), 4, false)), eq(1, input.dst.exreg.0.0.L14%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
3 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp : MEMLABEL
5 : input.dst.sp=L0%0%d=sp : BV:32
6 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
7 : bvand(5, 6) : BV:32
8 : 262116 { 0x3ffe4 +1.3124666e129 } : BV:32
9 : bvadd(7, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : eq(1, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : input.dst.exreg.0.0.L14%1%bbentry : BV:32
16 : eq(14, 15) : BOOL
17 : and(13, 16) : BOOL
18 : not(17) : BOOL
19 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvslt(19, 20) : BOOL
22 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
23 : bvadd(14, 22) : BV:32
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : bvslt(23, 24) : BOOL
26 : not(25) : BOOL
27 : andnot1(21, 26) : BOOL
28 : or(18, 27) : BOOL
</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F1: Finished executing CG's add edge function...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:16 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F1 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d...</MSG>
<MSG>3:16 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>3:16 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L14%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142033 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8] : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), )
142034 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, )
140782 : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp : MEMLABEL : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
140269 : input.dst.sp=L0%0%d=sp : BV:32            : 1073741836
140789 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32 : 4294967288
141258 : bvand(140269, 140789) : BV:32             : 1073741832
144102 : 262116 { 0x3ffe4 +1.3124666e129 } : BV:32 : 262116
144132 : bvadd(141258, 144102) : BV:32             : 1074003948
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
195422 : select(142033, 142034, 140782, 144132, 140349, 140295) : BV:32 : 0
195431 : eq(140284, 195422) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142475 : input.dst.exreg.0.0.L14%1%bbentry : BV:32 : 1
195490 : eq(140296, 142475) : BOOL                 : true
196688 : and(195431, 195490) : BOOL                : true
196806 : not(196688) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
196807 : or(196806, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce14423.fuzzed 9475c6f3aec7786957b371f33bdc09e
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 1107165191 { 0x41fe0007 +1.98437583e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741840 { 0x40000010 +1.190e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=stack.size
1 : 1048576000 { 0x3e800000 +1.0e254 } : BV:32
=input.dst.exreg.0.0.L14%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 58720256 { 0x3800000 +1.0e136 } : BV:32
=input.memlabel-mem--esp_end
1 : 1107296255 { 0x41ffffff +1.99999988e4 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741828; 1073741828 ] -> 0, [ 1073741829; 1073741829 ] -> 0, [ 1073741830; 1073741830 ] -> 0, [ 1073741831; 1073741831 ] -> 0, [ 1073741836; 1073741836 ] -> 0, [ 1073741837; 1073741837 ] -> 0, [ 1073741838; 1073741838 ] -> 0, [ 1073741839; 1073741839 ] -> 0, [ 1074003948; 1074003948 ] -> 0, [ 1074003949; 1074003949 ] -> 0, [ 1074003950; 1074003950 ] -> 0, [ 1074003951; 1074003951 ] -> 0, [ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
20605945
=counter_example_end


</MSG>
<MSG>3:16 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E2.F1 (d:0, s:2)...</MSG>
<MSG>3:16 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2.F2 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>3:16 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2.F2...</MSG>
<MSG>3:16 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2.F2...</MSG>
<MSG>3:16 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:16 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>3:16 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d
</MSG>
<MSG>3:16 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>3:16 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F2 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: marking unstable at Lfor.cond2%1%bbentry_L14%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L14%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142033 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8] : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), )
142034 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, )
140782 : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp : MEMLABEL : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
140269 : input.dst.sp=L0%0%d=sp : BV:32            : 1073741836
140789 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32 : 4294967288
141258 : bvand(140269, 140789) : BV:32             : 1073741832
144102 : 262116 { 0x3ffe4 +1.3124666e129 } : BV:32 : 262116
144132 : bvadd(141258, 144102) : BV:32             : 1074003948
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
195422 : select(142033, 142034, 140782, 144132, 140349, 140295) : BV:32 : 0
195431 : eq(140284, 195422) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142475 : input.dst.exreg.0.0.L14%1%bbentry : BV:32 : 1
195490 : eq(140296, 142475) : BOOL                 : true
196688 : and(195431, 195490) : BOOL                : true
196806 : not(196688) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 2147483648
141516 : bvslt(141514, 140284) : BOOL              : true
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 1107165184
141535 : bvadd(140467, 140542) : BV:32             : 1107427324
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : and(true, andnot1(eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)), false))
196996 : or(196994, 196995) : BOOL                 : or(false, and(true, andnot1(eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)), false)))
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197127 : or(196806, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce14423.fuzzed 9475c6f3aec7786957b371f33bdc09e
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 1107165191 { 0x41fe0007 +1.98437583e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741840 { 0x40000010 +1.190e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=stack.size
1 : 1048576000 { 0x3e800000 +1.0e254 } : BV:32
=input.dst.exreg.0.0.L14%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 58720256 { 0x3800000 +1.0e136 } : BV:32
=input.memlabel-mem--esp_end
1 : 1107296255 { 0x41ffffff +1.99999988e4 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741828; 1073741828 ] -> 0, [ 1073741829; 1073741829 ] -> 0, [ 1073741830; 1073741830 ] -> 0, [ 1073741831; 1073741831 ] -> 0, [ 1073741836; 1073741836 ] -> 0, [ 1073741837; 1073741837 ] -> 0, [ 1073741838; 1073741838 ] -> 0, [ 1073741839; 1073741839 ] -> 0, [ 1074003948; 1074003948 ] -> 0, [ 1074003949; 1074003949 ] -> 0, [ 1074003950; 1074003950 ] -> 0, [ 1074003951; 1074003951 ] -> 0, [ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
20605945
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[197127](not(and(eq(0, select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp, bvadd(bvand(input.dst.sp=L0%0%d=sp, 4294967288), 262116), 4, false)), eq(1, input.dst.exreg.0.0.L14%1%bbentry))), or[197119](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
3 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp : MEMLABEL
5 : input.dst.sp=L0%0%d=sp : BV:32
6 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
7 : bvand(5, 6) : BV:32
8 : 262116 { 0x3ffe4 +1.3124666e129 } : BV:32
9 : bvadd(7, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(2, 3, 4, 9, 10, 11) : BV:32
13 : eq(1, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : input.dst.exreg.0.0.L14%1%bbentry : BV:32
16 : eq(14, 15) : BOOL
17 : and(13, 16) : BOOL
18 : not(17) : BOOL
19 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvslt(19, 20) : BOOL
22 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
23 : bvadd(14, 22) : BV:32
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : bvslt(23, 24) : BOOL
26 : not(25) : BOOL
27 : andnot1(21, 26) : BOOL
28 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
29 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
30 : memlabel-mem--symbol.1.0 : MEMLABEL
31 : symbol.1 : BV:32
32 : select(28, 29, 30, 31, 10, 11) : BV:32
33 : bvslt(32, 1) : BOOL
34 : bvadd(14, 19) : BV:32
35 : bvslt(34, 20) : BOOL
36 : andnot1(35, 26) : BOOL
37 : andnot1(33, 36) : BOOL
38 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
39 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
40 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
41 : bvadd(39, 40) : BV:32
42 : select(28, 29, 38, 41, 10, 11) : BV:32
43 : eq(1, 42) : BOOL
44 : andnot1(43, 11) : BOOL
45 : and(33, 44) : BOOL
46 : or(37, 45) : BOOL
47 : and(21, 46) : BOOL
48 : or(27, 47) : BOOL
49 : or(18, 48) : BOOL
</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:19 : main.A19.B2.C4.D2.E2.F2: Finished executing CG's add edge function...</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:19 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F2 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d...</MSG>
<MSG>3:19 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>3:19 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L14%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L14%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L14%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142033 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8] : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), )
142034 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, )
140782 : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp : MEMLABEL : memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
140269 : input.dst.sp=L0%0%d=sp : BV:32            : 1073741836
140789 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32 : 4294967288
141258 : bvand(140269, 140789) : BV:32             : 1073741832
144102 : 262116 { 0x3ffe4 +1.3124666e129 } : BV:32 : 262116
144132 : bvadd(141258, 144102) : BV:32             : 1074003948
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
195422 : select(142033, 142034, 140782, 144132, 140349, 140295) : BV:32 : 0
195431 : eq(140284, 195422) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142475 : input.dst.exreg.0.0.L14%1%bbentry : BV:32 : 1
195490 : eq(140296, 142475) : BOOL                 : true
196688 : and(195431, 195490) : BOOL                : true
196806 : not(196688) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 2147483648
141516 : bvslt(141514, 140284) : BOOL              : true
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 1107165184
141535 : bvadd(140467, 140542) : BV:32             : 1107427324
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : and(true, andnot1(eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)), false))
196996 : or(196994, 196995) : BOOL                 : or(false, and(true, andnot1(eq(0, select(([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 1107427324, 4, false)), false)))
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197127 : or(196806, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce14423.fuzzed 9475c6f3aec7786957b371f33bdc09e
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 1107165191 { 0x41fe0007 +1.98437583e4 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 1107165184 { 0x41fe0000 +1.98437500e4 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741836 { 0x4000000c +1.143e1 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741840 { 0x40000010 +1.190e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1073741820; 1073741823 ] -> 0, [ 1073741828; 1073741831 ] -> 0, [ 1073741836; 1073741839 ] -> 0, [ 1074003948; 1074003951 ] -> 0, [ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 58720255 ] -> memlabel-mem--heap, [ 58720256; 1107165183 ] -> memlabel-mem--esp, [ 1107165184; 1107165191 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1107165192; 1107296255 ] -> memlabel-mem--esp, [ 1107296256; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=stack.size
1 : 1048576000 { 0x3e800000 +1.0e254 } : BV:32
=input.dst.exreg.0.0.L14%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 58720256 { 0x3800000 +1.0e136 } : BV:32
=input.memlabel-mem--esp_end
1 : 1107296255 { 0x41ffffff +1.99999988e4 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741828; 1073741828 ] -> 0, [ 1073741829; 1073741829 ] -> 0, [ 1073741830; 1073741830 ] -> 0, [ 1073741831; 1073741831 ] -> 0, [ 1073741836; 1073741836 ] -> 0, [ 1073741837; 1073741837 ] -> 0, [ 1073741838; 1073741838 ] -> 0, [ 1073741839; 1073741839 ] -> 0, [ 1074003948; 1074003948 ] -> 0, [ 1074003949; 1074003949 ] -> 0, [ 1074003950; 1074003950 ] -> 0, [ 1074003951; 1074003951 ] -> 0, [ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 1073741819 ], [ 1073741824; 1073741827 ], [ 1073741832; 1073741835 ], [ 1073741840; 1074003947 ], [ 1074003952; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 181 , m_adder -> 171), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
20605945
=counter_example_end


</MSG>
<MSG>3:19 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E2.F2 (d:0, s:2)...</MSG>
<MSG>3:19 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2.F3 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:19 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2.F3...</MSG>
<MSG>3:19 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2.F3...</MSG>
<MSG>3:19 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:19 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>3:19 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d
</MSG>
<MSG>3:19 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>3:19 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d...</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F3: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:20 : main.A19.B2.C4.D2.E2.F3: Propagated 0 out of 49 counter-examples across edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>3:20 : main.A19.B2.C4.D2.E2.F3: Added the 0 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>3:20 : main.A19.B2.C4.D2.E2.F3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:22 : main.A19.B2.C4.D2.E2.F3: Finished executing CG's add edge function...</MSG>
<MSG>3:22 : main.A19.B2.C4.D2.E2.F3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:22 : main.A19.B2.C4.D2.E2.F3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:22 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d...</MSG>
<MSG>3:22 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L14%1%bbentry --> E0%0%d</MSG>
<MSG>3:22 : Added correlation to the product-TFG main.A19.B2.C4.D2.E2.F3 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>3:22 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2.E2.F3 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 61 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:22 : main.A19.B2.C4.D2.E2.F3: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>3:22 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:22 : main.A19.B2.C4.D2.E2.F3: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L14%1%bbentry ...</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:24 : product-TFG main.A19.B2.C4.D2.E2.F3: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:24 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:24 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:24 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:24 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:24 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:24 : product-TFG main.A19.B2.C4.D2.E2.F3: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:24 : product-TFG main.A19.B2.C4.D2.E2.F3 created 3 possibilities in group main.A19.B2.C4.D2.E2.F3.G...</MSG>
<MSG>3:24 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2.F3.G1 (d:0, s:2) from a frontier of size 68...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 61 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>3:24 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2.F3.G1...</MSG>
<MSG>3:24 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2.F3.G1...</MSG>
<MSG>3:24 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:24 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:24 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:24 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:24 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3.G1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce15168.fuzzed 2c7ec5685fdbf5a32e74fe5682375c
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531830; 4026531830 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
76931765
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:26 : main.A19.B2.C4.D2.E2.F3.G1: Finished executing CG's add edge function...</MSG>
<MSG>3:26 : main.A19.B2.C4.D2.E2.F3.G1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:26 : main.A19.B2.C4.D2.E2.F3.G1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:26 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3.G1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:26 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:26 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce15168.fuzzed 2c7ec5685fdbf5a32e74fe5682375c
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531830; 4026531830 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
76931765
=counter_example_end


</MSG>
<MSG>3:26 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E2.F3.G1 (d:0, s:2)...</MSG>
<MSG>3:26 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2.F3.G2 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 61 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>3:26 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2.F3.G2...</MSG>
<MSG>3:26 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2.F3.G2...</MSG>
<MSG>3:26 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:26 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:26 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:26 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:26 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3.G2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:26 : main.A19.B2.C4.D2.E2.F3.G2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:26 : main.A19.B2.C4.D2.E2.F3.G2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:26 : main.A19.B2.C4.D2.E2.F3.G2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:26 : main.A19.B2.C4.D2.E2.F3.G2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:26 : main.A19.B2.C4.D2.E2.F3.G2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:26 : main.A19.B2.C4.D2.E2.F3.G2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:26 : main.A19.B2.C4.D2.E2.F3.G2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce15168.fuzzed 2c7ec5685fdbf5a32e74fe5682375c
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531830; 4026531830 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
76931765
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[197909](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197119](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>3:26 : main.A19.B2.C4.D2.E2.F3.G2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:29 : main.A19.B2.C4.D2.E2.F3.G2: Finished executing CG's add edge function...</MSG>
<MSG>3:29 : main.A19.B2.C4.D2.E2.F3.G2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:29 : main.A19.B2.C4.D2.E2.F3.G2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:29 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3.G2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:29 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:29 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce15168.fuzzed 2c7ec5685fdbf5a32e74fe5682375c
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531830; 4026531830 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
76931765
=counter_example_end


</MSG>
<MSG>3:29 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E2.F3.G2 (d:0, s:2)...</MSG>
<MSG>3:29 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2.F3.G3 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 61 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:29 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2.F3.G3...</MSG>
<MSG>3:29 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2.F3.G3...</MSG>
<MSG>3:29 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:29 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:29 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:29 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:29 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3.G3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:29 : main.A19.B2.C4.D2.E2.F3.G3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:29 : main.A19.B2.C4.D2.E2.F3.G3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:29 : main.A19.B2.C4.D2.E2.F3.G3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:29 : main.A19.B2.C4.D2.E2.F3.G3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:29 : main.A19.B2.C4.D2.E2.F3.G3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:29 : main.A19.B2.C4.D2.E2.F3.G3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:29 : main.A19.B2.C4.D2.E2.F3.G3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce15168.fuzzed 2c7ec5685fdbf5a32e74fe5682375c
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531830; 4026531830 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
76931765
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141552 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[197936](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197469](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1[196981](141552, false)))), and[197405](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[197396](andnot1[197394](141516, and[197274](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[197273](and[196995](141516, andnot1[196981](141552, false)), andnot1[197272](141516, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[197395](141516, andnot1[197377](141552, or[197365](and[196995](141516, andnot1[196981](141552, false)), andnot1[197363](141516, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[197443](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[197436](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[197418](and[196995](141516, andnot1[196981](141552, false)), andnot1[197415](141516, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>3:29 : main.A19.B2.C4.D2.E2.F3.G3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:33 : main.A19.B2.C4.D2.E2.F3.G3: Finished executing CG's add edge function...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E2.F3.G3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E2.F3.G3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:33 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3.G3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:33 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:33 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce15168.fuzzed 2c7ec5685fdbf5a32e74fe5682375c
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531830; 4026531830 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 140), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
76931765
=counter_example_end


</MSG>
<MSG>3:33 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E2.F3.G3 (d:0, s:2)...</MSG>
<MSG>3:33 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E3 (d:0, s:2) from a frontier of size 65...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2]
<MSG>3:33 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E3...</MSG>
<MSG>3:33 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E3...</MSG>
<MSG>3:33 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>3:33 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry</MSG>
<MSG>3:33 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry
</MSG>
<MSG>3:33 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry</MSG>
<MSG>3:33 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E3 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Propagated 0 out of 41 counter-examples across edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Added the 0 propagated CEs at PC Lfor.cond2%1%bbentry_L14%1%bbentry and propagated further.
</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>3:33 : main.A19.B2.C4.D2.E3: Finished executing CG's add edge function...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:33 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E3 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>3:33 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry</MSG>
<MSG>3:33 : Added correlation to the product-TFG main.A19.B2.C4.D2.E3 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>3:33 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2.E3 (d:0, s:2) from a frontier of size 65...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2]
<MSG>3:33 : main.A19.B2.C4.D2.E3: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:33 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry) ...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L14%1%bbentry ...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry) ...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 26 exprs and 26 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial12-prove2...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial6-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged ...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:36 : product-TFG main.A19.B2.C4.D2.E3: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:36 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:36 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:36 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:36 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:36 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:36 : product-TFG main.A19.B2.C4.D2.E3: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:36 : product-TFG main.A19.B2.C4.D2.E3 created 3 possibilities in group main.A19.B2.C4.D2.E3.F...</MSG>
<MSG>3:36 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E3.F1 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>3:36 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E3.F1...</MSG>
<MSG>3:36 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E3.F1...</MSG>
<MSG>3:36 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:36 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:36 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:36 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:36 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E3.F1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce15626.fuzzed b7f37077aa69ed18ce53fe59b176f142
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2591518981
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F1: Finished executing CG's add edge function...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:37 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E3.F1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:37 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:37 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce15626.fuzzed b7f37077aa69ed18ce53fe59b176f142
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2591518981
=counter_example_end


</MSG>
<MSG>3:37 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E3.F1 (d:0, s:2)...</MSG>
<MSG>3:37 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E3.F2 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>3:37 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E3.F2...</MSG>
<MSG>3:37 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E3.F2...</MSG>
<MSG>3:37 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:37 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:37 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:37 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:37 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E3.F2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce15626.fuzzed b7f37077aa69ed18ce53fe59b176f142
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2591518981
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[197909](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197119](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>3:37 : main.A19.B2.C4.D2.E3.F2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:41 : main.A19.B2.C4.D2.E3.F2: Finished executing CG's add edge function...</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:41 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E3.F2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:41 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:41 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce15626.fuzzed b7f37077aa69ed18ce53fe59b176f142
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2591518981
=counter_example_end


</MSG>
<MSG>3:41 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E3.F2 (d:0, s:2)...</MSG>
<MSG>3:41 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E3.F3 (d:0, s:2) from a frontier of size 65...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:41 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E3.F3...</MSG>
<MSG>3:41 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E3.F3...</MSG>
<MSG>3:41 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:41 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:41 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:41 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:41 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E3.F3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce15626.fuzzed b7f37077aa69ed18ce53fe59b176f142
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2591518981
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141552 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[197936](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197469](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1[196981](141552, false)))), and[197405](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[197396](andnot1[197394](141516, and[197274](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[197273](and[196995](141516, andnot1[196981](141552, false)), andnot1[197272](141516, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[197395](141516, andnot1[197377](141552, or[197365](and[196995](141516, andnot1[196981](141552, false)), andnot1[197363](141516, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[197443](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[197436](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[197418](and[196995](141516, andnot1[196981](141552, false)), andnot1[197415](141516, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>3:41 : main.A19.B2.C4.D2.E3.F3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:45 : main.A19.B2.C4.D2.E3.F3: Finished executing CG's add edge function...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E3.F3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E3.F3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:45 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E3.F3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:45 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:45 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce15626.fuzzed b7f37077aa69ed18ce53fe59b176f142
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 252), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2591518981
=counter_example_end


</MSG>
<MSG>3:45 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E3.F3 (d:0, s:2)...</MSG>
<MSG>3:45 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E4 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3]
<MSG>3:45 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E4...</MSG>
<MSG>3:45 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E4...</MSG>
<MSG>3:45 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L14%1%bbentry
</MSG>
<MSG>3:45 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry</MSG>
<MSG>3:45 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry
</MSG>
<MSG>3:45 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry</MSG>
<MSG>3:45 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E4 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Propagated 0 out of 41 counter-examples across edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Added the 0 propagated CEs at PC Lfor.cond2%1%bbentry_L14%1%bbentry and propagated further.
</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>3:45 : main.A19.B2.C4.D2.E4: Finished executing CG's add edge function...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:45 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E4 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>3:45 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L14%1%bbentry</MSG>
<MSG>3:45 : Added correlation to the product-TFG main.A19.B2.C4.D2.E4 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>3:45 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2.E4 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3]
<MSG>3:45 : main.A19.B2.C4.D2.E4: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:45 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry) ...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L14%1%bbentry ...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry) ...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 26 exprs and 26 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial12-prove2...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial6-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry)...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged ...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>3:47 : main.A19.B2.C4.D2.E4 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:48 : product-TFG main.A19.B2.C4.D2.E4: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:48 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:48 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:48 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:48 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:48 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:48 : product-TFG main.A19.B2.C4.D2.E4: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:48 : product-TFG main.A19.B2.C4.D2.E4 created 3 possibilities in group main.A19.B2.C4.D2.E4.F...</MSG>
<MSG>3:48 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E4.F1 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>3:48 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E4.F1...</MSG>
<MSG>3:48 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E4.F1...</MSG>
<MSG>3:48 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:48 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:48 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:48 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:48 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E4.F1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce16084.fuzzed 923f11bb8e9add62763644aa6b3df8b
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3596053637
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F1: Finished executing CG's add edge function...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:50 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E4.F1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:50 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:50 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce16084.fuzzed 923f11bb8e9add62763644aa6b3df8b
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3596053637
=counter_example_end


</MSG>
<MSG>3:50 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E4.F1 (d:0, s:2)...</MSG>
<MSG>3:50 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E4.F2 (d:0, s:2) from a frontier of size 65...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>3:50 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E4.F2...</MSG>
<MSG>3:50 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E4.F2...</MSG>
<MSG>3:50 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:50 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:50 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:50 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:50 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E4.F2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce16084.fuzzed 923f11bb8e9add62763644aa6b3df8b
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3596053637
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[197909](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197119](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>3:50 : main.A19.B2.C4.D2.E4.F2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:53 : main.A19.B2.C4.D2.E4.F2: Finished executing CG's add edge function...</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:53 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E4.F2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:53 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:53 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce16084.fuzzed 923f11bb8e9add62763644aa6b3df8b
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3596053637
=counter_example_end


</MSG>
<MSG>3:53 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E4.F2 (d:0, s:2)...</MSG>
<MSG>3:53 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E4.F3 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 61 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 61 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:53 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E4.F3...</MSG>
<MSG>3:53 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E4.F3...</MSG>
<MSG>3:53 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:53 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:53 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:53 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:53 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E4.F3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce16084.fuzzed 923f11bb8e9add62763644aa6b3df8b
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3596053637
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141552 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[197936](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197469](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1[196981](141552, false)))), and[197405](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[197396](andnot1[197394](141516, and[197274](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[197273](and[196995](141516, andnot1[196981](141552, false)), andnot1[197272](141516, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[197395](141516, andnot1[197377](141552, or[197365](and[196995](141516, andnot1[196981](141552, false)), andnot1[197363](141516, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[197443](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[197436](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[197418](and[196995](141516, andnot1[196981](141552, false)), andnot1[197415](141516, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>3:53 : main.A19.B2.C4.D2.E4.F3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:57 : main.A19.B2.C4.D2.E4.F3: Finished executing CG's add edge function...</MSG>
<MSG>3:57 : main.A19.B2.C4.D2.E4.F3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:57 : main.A19.B2.C4.D2.E4.F3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:57 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E4.F3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:57 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:57 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce16084.fuzzed 923f11bb8e9add62763644aa6b3df8b
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 229), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3596053637
=counter_example_end


</MSG>
<MSG>3:57 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E4.F3 (d:0, s:2)...</MSG>
<MSG>3:57 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D3 (d:0, s:2) from a frontier of size 63...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2]
<MSG>3:57 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D3...</MSG>
<MSG>3:57 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D3...</MSG>
<MSG>3:57 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:57 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry</MSG>
<MSG>3:57 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>3:57 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry</MSG>
<MSG>3:57 : Adding new edge to the product-TFG main.A19.B2.C4.D3 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Propagated 0 out of 38 counter-examples across edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Added the 0 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>3:58 : main.A19.B2.C4.D3: Finished executing CG's add edge function...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>3:58 : Done adding new edge to the product-TFG main.A19.B2.C4.D3 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>3:58 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry</MSG>
<MSG>3:58 : Added correlation to the product-TFG main.A19.B2.C4.D3 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>3:58 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D3 (d:0, s:2) from a frontier of size 63...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2]
<MSG>3:58 : main.A19.B2.C4.D3: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:58 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L14%1%bbentry ...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:58 : main.A19.B2.C4.D3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 16 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht20-prove_trivial10-prove10...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:01 : product-TFG main.A19.B2.C4.D3: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:01 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:01 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:01 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:01 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:01 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:01 : product-TFG main.A19.B2.C4.D3: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:01 : product-TFG main.A19.B2.C4.D3 created 3 possibilities in group main.A19.B2.C4.D3.E...</MSG>
<MSG>4:01 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D3.E1 (d:0, s:2) from a frontier of size 65...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>4:01 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D3.E1...</MSG>
<MSG>4:01 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D3.E1...</MSG>
<MSG>4:01 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:01 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:01 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:01 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:01 : Adding new edge to the product-TFG main.A19.B2.C4.D3.E1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:01 : main.A19.B2.C4.D3.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:01 : main.A19.B2.C4.D3.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:01 : main.A19.B2.C4.D3.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:01 : main.A19.B2.C4.D3.E1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:01 : main.A19.B2.C4.D3.E1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:01 : main.A19.B2.C4.D3.E1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:01 : main.A19.B2.C4.D3.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:01 : main.A19.B2.C4.D3.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:01 : main.A19.B2.C4.D3.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:01 : main.A19.B2.C4.D3.E1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce16604.fuzzed e4acdf46c863388071785c37569a533a
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3127747293
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>4:01 : main.A19.B2.C4.D3.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E1: Finished executing CG's add edge function...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:02 : Done adding new edge to the product-TFG main.A19.B2.C4.D3.E1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:02 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:02 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce16604.fuzzed e4acdf46c863388071785c37569a533a
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3127747293
=counter_example_end


</MSG>
<MSG>4:02 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D3.E1 (d:0, s:2)...</MSG>
<MSG>4:02 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D3.E2 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>4:02 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D3.E2...</MSG>
<MSG>4:02 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D3.E2...</MSG>
<MSG>4:02 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:02 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:02 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:02 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:02 : Adding new edge to the product-TFG main.A19.B2.C4.D3.E2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce16604.fuzzed e4acdf46c863388071785c37569a533a
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3127747293
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[197909](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197119](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>4:02 : main.A19.B2.C4.D3.E2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:06 : main.A19.B2.C4.D3.E2: Finished executing CG's add edge function...</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:06 : Done adding new edge to the product-TFG main.A19.B2.C4.D3.E2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:06 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:06 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce16604.fuzzed e4acdf46c863388071785c37569a533a
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3127747293
=counter_example_end


</MSG>
<MSG>4:06 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D3.E2 (d:0, s:2)...</MSG>
<MSG>4:06 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D3.E3 (d:0, s:2) from a frontier of size 63...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>4:06 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D3.E3...</MSG>
<MSG>4:06 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D3.E3...</MSG>
<MSG>4:06 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:06 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:06 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:06 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:06 : Adding new edge to the product-TFG main.A19.B2.C4.D3.E3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce16604.fuzzed e4acdf46c863388071785c37569a533a
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3127747293
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141552 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[197936](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197469](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1[196981](141552, false)))), and[197405](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[197396](andnot1[197394](141516, and[197274](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[197273](and[196995](141516, andnot1[196981](141552, false)), andnot1[197272](141516, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[197395](141516, andnot1[197377](141552, or[197365](and[196995](141516, andnot1[196981](141552, false)), andnot1[197363](141516, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[197443](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[197436](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[197418](and[196995](141516, andnot1[196981](141552, false)), andnot1[197415](141516, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>4:06 : main.A19.B2.C4.D3.E3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:10 : main.A19.B2.C4.D3.E3: Finished executing CG's add edge function...</MSG>
<MSG>4:10 : main.A19.B2.C4.D3.E3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:10 : main.A19.B2.C4.D3.E3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:10 : Done adding new edge to the product-TFG main.A19.B2.C4.D3.E3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:10 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:10 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce16604.fuzzed e4acdf46c863388071785c37569a533a
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 202 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3127747293
=counter_example_end


</MSG>
<MSG>4:10 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D3.E3 (d:0, s:2)...</MSG>
<MSG>4:10 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D4 (d:0, s:2) from a frontier of size 62...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3]
<MSG>4:10 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D4...</MSG>
<MSG>4:10 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D4...</MSG>
<MSG>4:10 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:10 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:10 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>4:10 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:10 : Adding new edge to the product-TFG main.A19.B2.C4.D4 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Adding edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Propagated 0 out of 38 counter-examples across edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Added the 0 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>4:11 : main.A19.B2.C4.D4: Finished executing CG's add edge function...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:11 : Done adding new edge to the product-TFG main.A19.B2.C4.D4 for fromPC Lfor.cond2%1%bbentry_L14%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>4:11 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L14%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:11 : Added correlation to the product-TFG main.A19.B2.C4.D4 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>4:11 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D4 (d:0, s:2) from a frontier of size 62...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L14%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3]
<MSG>4:11 : main.A19.B2.C4.D4: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:11 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L14%1%bbentry ...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 16 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:12 : main.A19.B2.C4.D4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht20-prove_trivial10-prove10...</MSG>
<MSG>4:12 : main.A19.B2.C4.D4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:12 : main.A19.B2.C4.D4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:12 : main.A19.B2.C4.D4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:15 : product-TFG main.A19.B2.C4.D4: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:15 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:15 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:15 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:15 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:15 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:15 : product-TFG main.A19.B2.C4.D4: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:15 : product-TFG main.A19.B2.C4.D4 created 3 possibilities in group main.A19.B2.C4.D4.E...</MSG>
<MSG>4:15 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D4.E1 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>4:15 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D4.E1...</MSG>
<MSG>4:15 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D4.E1...</MSG>
<MSG>4:15 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:15 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:15 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:15 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:15 : Adding new edge to the product-TFG main.A19.B2.C4.D4.E1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:15 : main.A19.B2.C4.D4.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:15 : main.A19.B2.C4.D4.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:15 : main.A19.B2.C4.D4.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:15 : main.A19.B2.C4.D4.E1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:15 : main.A19.B2.C4.D4.E1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:15 : main.A19.B2.C4.D4.E1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:15 : main.A19.B2.C4.D4.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:15 : main.A19.B2.C4.D4.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:15 : main.A19.B2.C4.D4.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:15 : main.A19.B2.C4.D4.E1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce17124.fuzzed 505fd2dec6801b70c1d83eb329a8934a
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3974419817
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>4:15 : main.A19.B2.C4.D4.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E1: Finished executing CG's add edge function...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:16 : Done adding new edge to the product-TFG main.A19.B2.C4.D4.E1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:16 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:16 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce17124.fuzzed 505fd2dec6801b70c1d83eb329a8934a
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3974419817
=counter_example_end


</MSG>
<MSG>4:16 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D4.E1 (d:0, s:2)...</MSG>
<MSG>4:16 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D4.E2 (d:0, s:2) from a frontier of size 63...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>4:16 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D4.E2...</MSG>
<MSG>4:16 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D4.E2...</MSG>
<MSG>4:16 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:16 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:16 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:16 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:16 : Adding new edge to the product-TFG main.A19.B2.C4.D4.E2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce17124.fuzzed 505fd2dec6801b70c1d83eb329a8934a
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3974419817
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[197909](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197119](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>4:16 : main.A19.B2.C4.D4.E2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:20 : main.A19.B2.C4.D4.E2: Finished executing CG's add edge function...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:20 : Done adding new edge to the product-TFG main.A19.B2.C4.D4.E2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:20 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:20 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce17124.fuzzed 505fd2dec6801b70c1d83eb329a8934a
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3974419817
=counter_example_end


</MSG>
<MSG>4:20 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D4.E2 (d:0, s:2)...</MSG>
<MSG>4:20 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D4.E3 (d:0, s:2) from a frontier of size 62...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 61 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 61 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L14%1%bbentry (C (line 18 at column 19), A line 61)
                Lfor.cond2%1%bbentry_L14%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 26 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 49 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>4:20 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D4.E3...</MSG>
<MSG>4:20 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D4.E3...</MSG>
<MSG>4:20 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:20 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:20 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:20 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:20 : Adding new edge to the product-TFG main.A19.B2.C4.D4.E3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce17124.fuzzed 505fd2dec6801b70c1d83eb329a8934a
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3974419817
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141552 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[197936](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197469](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1[196981](141552, false)))), and[197405](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[197396](andnot1[197394](141516, and[197274](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[197273](and[196995](141516, andnot1[196981](141552, false)), andnot1[197272](141516, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[197395](141516, andnot1[197377](141552, or[197365](and[196995](141516, andnot1[196981](141552, false)), andnot1[197363](141516, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[197443](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[197436](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[197418](and[196995](141516, andnot1[196981](141552, false)), andnot1[197415](141516, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:23 : main.A19.B2.C4.D4.E3: Finished executing CG's add edge function...</MSG>
<MSG>4:23 : main.A19.B2.C4.D4.E3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:23 : main.A19.B2.C4.D4.E3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:23 : Done adding new edge to the product-TFG main.A19.B2.C4.D4.E3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:23 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:23 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce17124.fuzzed 505fd2dec6801b70c1d83eb329a8934a
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 158 , m_adder -> 220), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3974419817
=counter_example_end


</MSG>
<MSG>4:23 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D4.E3 (d:0, s:2)...</MSG>
<MSG>4:23 : Chose (for CE propagation) product-TFG main.A19.B2.C8 (d:0, s:1) from a frontier of size 61...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond8%1%bbentry[mu 1, delta 1]
<MSG>4:23 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C8...</MSG>
<MSG>4:23 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C8...</MSG>
<MSG>4:23 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry ending at Lfor.cond8%1%bbentry_L14%1%bbentry
</MSG>
<MSG>4:23 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>4:23 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry
</MSG>
<MSG>4:23 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>4:23 : Adding new edge to the product-TFG main.A19.B2.C8 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond8%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>4:23 : main.A19.B2.C8: Computing loop hoisting select expressions at toPC Lfor.cond8%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:23 : main.A19.B2.C8: Computing loop hoisting non-linear expressions at toPC Lfor.cond8%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:23 : main.A19.B2.C8: Adding node Lfor.cond8%1%bbentry_L14%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19.B2.C8: returning 1 for =Lentry%1%d=
<MSG>4:23 : main.A19.B2.C8: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond8%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:23 : main.A19.B2.C8: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond8%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:23 : main.A19.B2.C8: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond8%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:23 : main.A19.B2.C8: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:23 : main.A19.B2.C8: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:23 : main.A19.B2.C8: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:23 : main.A19.B2.C8: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond8%1%bbentry_L14%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 2147483648
143694 : bvsign(142273) : BV:1                     : 1
143697 : eq(140809, 143694) : BOOL                 : true
143700 : not(143697) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 2147483648
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : true
190793 : and(140583, 141516) : BOOL                : false
203553 : or(143700, 190793) : BOOL                 : false

ce =
=counter_example_begin yices.ce9421.fuzzed 5b4993d2666c80c3518d46a3f3e51c
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4126408711 { 0xf5f40007 -168558585 -1.90625083e108 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1373392434
=counter_example_end


failcond-expr = or(not(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry))), and(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : not(4) : BOOL
6 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvslt(6, 7) : BOOL
9 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-mem--symbol.1.0 : MEMLABEL
12 : symbol.1 : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(9, 10, 11, 12, 13, 14) : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : bvslt(15, 16) : BOOL
18 : and(8, 17) : BOOL
19 : or(5, 18) : BOOL
</MSG>
<MSG>4:23 : main.A19.B2.C8: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:24 : main.A19.B2.C8: Finished executing CG's add edge function...</MSG>
<MSG>4:24 : main.A19.B2.C8: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond8%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C8: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond8%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : Done adding new edge to the product-TFG main.A19.B2.C8 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond8%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>4:24 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>4:24 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond8%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond8%1%bbentry_L14%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 2147483648
143694 : bvsign(142273) : BV:1                     : 1
143697 : eq(140809, 143694) : BOOL                 : true
143700 : not(143697) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 2147483648
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : true
190793 : and(140583, 141516) : BOOL                : false
203553 : or(143700, 190793) : BOOL                 : false

ce =
=counter_example_begin yices.ce9421.fuzzed 5b4993d2666c80c3518d46a3f3e51c
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4126408711 { 0xf5f40007 -168558585 -1.90625083e108 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1373392434
=counter_example_end


</MSG>
<MSG>4:24 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C8 (d:0, s:1)...</MSG>
<MSG>4:24 : Chose (for CE propagation) product-TFG main.A19.B2.C1 (d:0, s:1) from a frontier of size 60...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>4:24 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C1...</MSG>
<MSG>4:24 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C1...</MSG>
<MSG>4:24 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L14%1%bbentry
</MSG>
<MSG>4:24 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>4:24 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry
</MSG>
<MSG>4:24 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>4:24 : Adding new edge to the product-TFG main.A19.B2.C1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C1: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C1: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C1: Adding node Lfor.cond%1%bbentry_L14%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19.B2.C1: returning 1 for =Lentry%1%d=
<MSG>4:24 : main.A19.B2.C1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:24 : main.A19.B2.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:24 : main.A19.B2.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:24 : main.A19.B2.C1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L14%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 4294967295
143694 : bvsign(142273) : BV:1                     : 1
143697 : eq(140809, 143694) : BOOL                 : true
143700 : not(143697) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 0
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : true
140584 : not(140583) : BOOL                        : false
203559 : or(143700, 140584) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce7644 d0fc39e3c79dfd639fdb5a51cb88c1
=input.dst.exreg.0.2
1 : 742465472 { 0x2c411fc0 +1.50878143e217 } : BV:32
=input.dst.exreg.0.4
1 : 572669959 { 0x22224007 +1.26757895e197 } : BV:32
=input.dst.exreg.6.0
1 : 945459132 { 0x385a8fbc +1.70751142e241 } : BV:32
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 735461404 { 0x2bd6401c +1.67383146e216 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 935526400 { 0x37c30000 +1.52343750e240 } : BV:32
=input.src.local_alloc_count.=L0%0%d=
1 : 1414522599 { 0x544fe6e7 +1.62423408e41 } : COUNT
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 935526400 { 0x37c30000 +1.52343750e240 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 935526407 { 0x37c30007 +1.52343833e240 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.Lentry%1%allocaI4
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%cmp3.Lfor.inc17%1%d
1 : 1 { 0x1 } : BOOL
=input.src.llvm-%0.Lfor.cond%1%bbentry
1 : 935526400 { 0x37c30000 +1.52343750e240 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 935526400 { 0x37c30000 +1.52343750e240 } : BV:32
=input.src.llvm-%e.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%cmp3.Lfor.cond2%1%bbentry
1 : 1 { 0x1 } : BOOL
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.src.llvm-%d.0.phi.tmpvar.for.body.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local_alloc_count.Lfor.cond%1%bbentry
1 : 1414522600 { 0x544fe6e8 +1.62423419e41 } : COUNT
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 735461404 { 0x2bd6401c +1.67383146e216 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.5.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 735461400 { 0x2bd64018 +1.67383098e216 } : BV:32
=input.dst.exreg.0.4.L3%1%spver
1 : 735461396 { 0x2bd64014 +1.67383050e216 } : BV:32
=input.dst.exreg.0.4.L4%1%spver
1 : 735461392 { 0x2bd64010 +1.67383003e216 } : BV:32
=input.dst.exreg.0.4.L6%1%spver
1 : 735461388 { 0x2bd6400c +1.67382955e216 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 735461404 { 0x2bd6401c +1.67383146e216 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 735461404 { 0x2bd6401c +1.67383146e216 } : BV:32
=input.dst.mem.L0%2%d
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%2%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L0%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%2%d
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%2%d
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L0%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.1.L1%1%spver
1 : 735461408 { 0x2bd64020 +1.67383193e216 } : BV:32
=input.dst.exreg.0.4.L7%1%spver
1 : 735461376 { 0x2bd64000 +1.67382812e216 } : BV:32
=input.dst.exreg.6.0.L1%1%spver
1 : 945456936 { 0x385a8728 +1.70724964e241 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 735461400 { 0x2bd64018 +1.67383098e216 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 735461400 { 0x2bd64018 +1.67383098e216 } : BV:32
=input.dst.mem.L2%1%d
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L2%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L2%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L2%1%d
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L2%1%d
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L2%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.0.L3%1%spver
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.mem.L3%1%spver
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.sp=L3%1%spver=sp.L3%1%spver
1 : 735461396 { 0x2bd64014 +1.67383050e216 } : BV:32
=input.dst.exreg.0.4.L4%1%d
1 : 735461396 { 0x2bd64014 +1.67383050e216 } : BV:32
=input.dst.mem.L4%1%d
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L4%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L4%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L4%1%d
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L4%1%d
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L4%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.mem.L4%1%spver
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.sp=L4%1%spver=sp.L4%1%spver
1 : 735461392 { 0x2bd64010 +1.67383003e216 } : BV:32
=input.dst.exreg.0.4.L5%1%d
1 : 735461392 { 0x2bd64010 +1.67383003e216 } : BV:32
=input.dst.mem.L5%1%d
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L5%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L5%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L5%1%d
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L5%1%d
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L5%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.5.L6%1%spver
1 : 735461392 { 0x2bd64010 +1.67383003e216 } : BV:32
=input.dst.mem.L6%1%spver
1 : ([ 0; 735461387 ] -> 0, [ 735461388; 735461388 ] -> 32, [ 735461389; 735461389 ] -> 64, [ 735461390; 735461390 ] -> 214, [ 735461391; 735461391 ] -> 43, [ 735461392; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.sp=L6%1%spver=sp.L6%1%spver
1 : 735461388 { 0x2bd6400c +1.67382955e216 } : BV:32
=input.dst.exreg.0.4.L7%1%d
1 : 735461388 { 0x2bd6400c +1.67382955e216 } : BV:32
=input.dst.mem.L7%1%d
1 : ([ 0; 735461387 ] -> 0, [ 735461388; 735461388 ] -> 32, [ 735461389; 735461389 ] -> 64, [ 735461390; 735461390 ] -> 214, [ 735461391; 735461391 ] -> 43, [ 735461392; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L7%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L7%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L7%1%d
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L7%1%d
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L7%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.6.0.L7%1%spver
1 : 945456936 { 0x385a8728 +1.70724964e241 } : BV:32
=input.dst.exreg.7.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.10.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.11.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.12.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.13.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.15.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.sp=L7%1%spver=sp.L7%1%spver
1 : 735461376 { 0x2bd64000 +1.67382812e216 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 735461376 { 0x2bd64000 +1.67382812e216 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 0; 735461387 ] -> 0, [ 735461388; 735461388 ] -> 32, [ 735461389; 735461389 ] -> 64, [ 735461390; 735461390 ] -> 214, [ 735461391; 735461391 ] -> 43, [ 735461392; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L8%1%d
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L8%1%d
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L8%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.1.L9%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.exreg.0.2.L9%1%bbentry
1 : 742465472 { 0x2c411fc0 +1.50878143e217 } : BV:32
=input.dst.exreg.6.0.L9%1%bbentry
1 : 945456936 { 0x385a8728 +1.70724964e241 } : BV:32
=input.dst.exreg.10.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.11.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.12.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.13.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.15.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.7.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.ghostvar.itervar.2.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=stack.size
1 : 534904832 { 0x1fe20000 +1.76562500e192 } : BV:32
=input.dst.exreg.10.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.11.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.12.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.13.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.15.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.7.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.9.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 538968064 { 0x20200000 +1.25000000e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 1073872895 { 0x4001ffff +1.1562488e1 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 935526400 { 0x37c30000 +1.52343750e240 } : BV:32
=input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.mem.L0%1%allocaI2
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%1%allocaI2
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%1%allocaI2
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%1%allocaI2
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.mem.L0%1%allocaI2.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lentry%1%allocaI4.mem.L0%1%allocaI2.cluster.memlabel-mem--symbol.1.0
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=unaliased_memslot.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
1700346929
=counter_example_end


failcond-expr = or(not(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry))), not(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : not(4) : BOOL
6 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvslt(6, 7) : BOOL
9 : not(8) : BOOL
10 : or(5, 9) : BOOL
</MSG>
<MSG>4:24 : main.A19.B2.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:24 : main.A19.B2.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:24 : main.A19.B2.C1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : Done adding new edge to the product-TFG main.A19.B2.C1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>4:24 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>4:24 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L14%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 4294967295
143694 : bvsign(142273) : BV:1                     : 1
143697 : eq(140809, 143694) : BOOL                 : true
143700 : not(143697) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 0
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : true
140584 : not(140583) : BOOL                        : false
203559 : or(143700, 140584) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce7644 d0fc39e3c79dfd639fdb5a51cb88c1
=input.dst.exreg.0.2
1 : 742465472 { 0x2c411fc0 +1.50878143e217 } : BV:32
=input.dst.exreg.0.4
1 : 572669959 { 0x22224007 +1.26757895e197 } : BV:32
=input.dst.exreg.6.0
1 : 945459132 { 0x385a8fbc +1.70751142e241 } : BV:32
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 735461404 { 0x2bd6401c +1.67383146e216 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 935526400 { 0x37c30000 +1.52343750e240 } : BV:32
=input.src.local_alloc_count.=L0%0%d=
1 : 1414522599 { 0x544fe6e7 +1.62423408e41 } : COUNT
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 935526400 { 0x37c30000 +1.52343750e240 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 935526407 { 0x37c30007 +1.52343833e240 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.Lentry%1%allocaI4
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%cmp3.Lfor.inc17%1%d
1 : 1 { 0x1 } : BOOL
=input.src.llvm-%0.Lfor.cond%1%bbentry
1 : 935526400 { 0x37c30000 +1.52343750e240 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 935526400 { 0x37c30000 +1.52343750e240 } : BV:32
=input.src.llvm-%e.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%cmp3.Lfor.cond2%1%bbentry
1 : 1 { 0x1 } : BOOL
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.src.llvm-%d.0.phi.tmpvar.for.body.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local_alloc_count.Lfor.cond%1%bbentry
1 : 1414522600 { 0x544fe6e8 +1.62423419e41 } : COUNT
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 735461404 { 0x2bd6401c +1.67383146e216 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.5.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 735461400 { 0x2bd64018 +1.67383098e216 } : BV:32
=input.dst.exreg.0.4.L3%1%spver
1 : 735461396 { 0x2bd64014 +1.67383050e216 } : BV:32
=input.dst.exreg.0.4.L4%1%spver
1 : 735461392 { 0x2bd64010 +1.67383003e216 } : BV:32
=input.dst.exreg.0.4.L6%1%spver
1 : 735461388 { 0x2bd6400c +1.67382955e216 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 735461404 { 0x2bd6401c +1.67383146e216 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 735461404 { 0x2bd6401c +1.67383146e216 } : BV:32
=input.dst.mem.L0%2%d
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%2%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L0%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%2%d
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%2%d
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L0%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.1.L1%1%spver
1 : 735461408 { 0x2bd64020 +1.67383193e216 } : BV:32
=input.dst.exreg.0.4.L7%1%spver
1 : 735461376 { 0x2bd64000 +1.67382812e216 } : BV:32
=input.dst.exreg.6.0.L1%1%spver
1 : 945456936 { 0x385a8728 +1.70724964e241 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 735461400 { 0x2bd64018 +1.67383098e216 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 735461400 { 0x2bd64018 +1.67383098e216 } : BV:32
=input.dst.mem.L2%1%d
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L2%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L2%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L2%1%d
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L2%1%d
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L2%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.0.L3%1%spver
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.mem.L3%1%spver
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.sp=L3%1%spver=sp.L3%1%spver
1 : 735461396 { 0x2bd64014 +1.67383050e216 } : BV:32
=input.dst.exreg.0.4.L4%1%d
1 : 735461396 { 0x2bd64014 +1.67383050e216 } : BV:32
=input.dst.mem.L4%1%d
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L4%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L4%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L4%1%d
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L4%1%d
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L4%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.mem.L4%1%spver
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.sp=L4%1%spver=sp.L4%1%spver
1 : 735461392 { 0x2bd64010 +1.67383003e216 } : BV:32
=input.dst.exreg.0.4.L5%1%d
1 : 735461392 { 0x2bd64010 +1.67383003e216 } : BV:32
=input.dst.mem.L5%1%d
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L5%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L5%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L5%1%d
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L5%1%d
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L5%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.5.L6%1%spver
1 : 735461392 { 0x2bd64010 +1.67383003e216 } : BV:32
=input.dst.mem.L6%1%spver
1 : ([ 0; 735461387 ] -> 0, [ 735461388; 735461388 ] -> 32, [ 735461389; 735461389 ] -> 64, [ 735461390; 735461390 ] -> 214, [ 735461391; 735461391 ] -> 43, [ 735461392; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.sp=L6%1%spver=sp.L6%1%spver
1 : 735461388 { 0x2bd6400c +1.67382955e216 } : BV:32
=input.dst.exreg.0.4.L7%1%d
1 : 735461388 { 0x2bd6400c +1.67382955e216 } : BV:32
=input.dst.mem.L7%1%d
1 : ([ 0; 735461387 ] -> 0, [ 735461388; 735461388 ] -> 32, [ 735461389; 735461389 ] -> 64, [ 735461390; 735461390 ] -> 214, [ 735461391; 735461391 ] -> 43, [ 735461392; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L7%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L7%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L7%1%d
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L7%1%d
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L7%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.6.0.L7%1%spver
1 : 945456936 { 0x385a8728 +1.70724964e241 } : BV:32
=input.dst.exreg.7.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.10.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.11.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.12.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.13.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.15.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.sp=L7%1%spver=sp.L7%1%spver
1 : 735461376 { 0x2bd64000 +1.67382812e216 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 735461376 { 0x2bd64000 +1.67382812e216 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 0; 735461387 ] -> 0, [ 735461388; 735461388 ] -> 32, [ 735461389; 735461389 ] -> 64, [ 735461390; 735461390 ] -> 214, [ 735461391; 735461391 ] -> 43, [ 735461392; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L8%1%d
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L8%1%d
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L8%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.1.L9%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.exreg.0.2.L9%1%bbentry
1 : 742465472 { 0x2c411fc0 +1.50878143e217 } : BV:32
=input.dst.exreg.6.0.L9%1%bbentry
1 : 945456936 { 0x385a8728 +1.70724964e241 } : BV:32
=input.dst.exreg.10.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.11.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.12.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.13.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.15.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.7.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.ghostvar.itervar.2.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=stack.size
1 : 534904832 { 0x1fe20000 +1.76562500e192 } : BV:32
=input.dst.exreg.10.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.11.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.12.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.13.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.15.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.7.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.9.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 538968064 { 0x20200000 +1.25000000e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 1073872895 { 0x4001ffff +1.1562488e1 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 935526400 { 0x37c30000 +1.52343750e240 } : BV:32
=input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.mem.L0%1%allocaI2
1 : ([ 0; 3758096379 ] -> 0, [ 3758096380; 3758096383 ] -> 255, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%1%allocaI2
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 538968063 ] -> memlabel-mem--heap, [ 538968064; 935526399 ] -> memlabel-mem--esp, [ 935526400; 935526407 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 935526408; 1073872895 ] -> memlabel-mem--esp, [ 1073872896; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%1%allocaI2
1 : 2043689628 { 0x79d03a9c +1.62678861e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%1%allocaI2
1 : 841645137 { 0x322a7c51 +1.33191883e229 } : BV:32
=input.dst.mem.L0%1%allocaI2.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lentry%1%allocaI4.mem.L0%1%allocaI2.cluster.memlabel-mem--symbol.1.0
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=unaliased_memslot.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
1700346929
=counter_example_end


</MSG>
<MSG>4:24 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C1 (d:0, s:1)...</MSG>
<MSG>4:24 : Chose (for CE propagation) product-TFG main.A19.B2.C2 (d:0, s:1) from a frontier of size 54...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 2, delta 2]
<MSG>4:24 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C2...</MSG>
<MSG>4:24 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C2...</MSG>
<MSG>4:24 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L14%1%bbentry
</MSG>
<MSG>4:24 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>4:24 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry
</MSG>
<MSG>4:24 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>4:24 : Adding new edge to the product-TFG main.A19.B2.C2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C2: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C2: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C2: Adding node Lfor.cond%1%bbentry_L14%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19.B2.C2: returning 1 for =Lentry%1%d=
<MSG>4:24 : main.A19.B2.C2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:24 : main.A19.B2.C2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:24 : main.A19.B2.C2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:24 : main.A19.B2.C2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L14%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 2147483648
143694 : bvsign(142273) : BV:1                     : 1
143697 : eq(140809, 143694) : BOOL                 : true
143700 : not(143697) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 2147483648
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
203568 : not(196818) : BOOL                        : true
203675 : andnot1(141516, 203568) : BOOL            : false
203679 : and(140583, 203675) : BOOL                : false
203973 : or(143700, 203679) : BOOL                 : false

ce =
=counter_example_begin yices.ce9421.fuzzed 5b4993d2666c80c3518d46a3f3e51c
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4126408711 { 0xf5f40007 -168558585 -1.90625083e108 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1373392434
=counter_example_end


failcond-expr = or(not(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry))), and(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), andnot1(bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0), not(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : not(4) : BOOL
6 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvslt(6, 7) : BOOL
9 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-mem--symbol.1.0 : MEMLABEL
12 : symbol.1 : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(9, 10, 11, 12, 13, 14) : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : bvslt(15, 16) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6) : BV:32
20 : bvslt(19, 7) : BOOL
21 : not(20) : BOOL
22 : andnot1(17, 21) : BOOL
23 : and(8, 22) : BOOL
24 : or(5, 23) : BOOL
</MSG>
<MSG>4:24 : main.A19.B2.C2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:24 : main.A19.B2.C2: Finished executing CG's add edge function...</MSG>
<MSG>4:24 : main.A19.B2.C2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : Done adding new edge to the product-TFG main.A19.B2.C2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>4:24 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>4:24 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 2, delta 2] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L14%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 2147483648
143694 : bvsign(142273) : BV:1                     : 1
143697 : eq(140809, 143694) : BOOL                 : true
143700 : not(143697) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 2147483648
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
203568 : not(196818) : BOOL                        : true
203675 : andnot1(141516, 203568) : BOOL            : false
203679 : and(140583, 203675) : BOOL                : false
203973 : or(143700, 203679) : BOOL                 : false

ce =
=counter_example_begin yices.ce9421.fuzzed 5b4993d2666c80c3518d46a3f3e51c
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4126408711 { 0xf5f40007 -168558585 -1.90625083e108 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1373392434
=counter_example_end


</MSG>
<MSG>4:24 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C2 (d:0, s:1)...</MSG>
<MSG>4:24 : Chose (for CE propagation) product-TFG main.A19.B2.C3 (d:0, s:1) from a frontier of size 53...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 3, delta 3]
<MSG>4:24 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C3...</MSG>
<MSG>4:24 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C3...</MSG>
<MSG>4:24 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L14%1%bbentry
</MSG>
<MSG>4:24 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>4:24 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry
</MSG>
<MSG>4:24 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>4:24 : Adding new edge to the product-TFG main.A19.B2.C3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C3: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C3: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C3: Adding node Lfor.cond%1%bbentry_L14%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19.B2.C3: returning 1 for =Lentry%1%d=
<MSG>4:24 : main.A19.B2.C3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:24 : main.A19.B2.C3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:24 : main.A19.B2.C3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:24 : main.A19.B2.C3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L14%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 2147483648
143694 : bvsign(142273) : BV:1                     : 1
143697 : eq(140809, 143694) : BOOL                 : true
143700 : not(143697) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 2147483648
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
204057 : not(197270) : BOOL                        : true
204058 : andnot1(141516, 204057) : BOOL            : false
204059 : and(196818, 204058) : BOOL                : false
204129 : andnot1(141516, 204059) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4126408704
141535 : bvadd(140467, 140542) : BV:32             : 4126670844
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4126670844, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4126670844, 4, false))
190672 : not(141516) : BOOL                        : false
204120 : andnot1(141552, 190672) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4126670844, 4, false)), false)
204130 : and(141516, 204120) : BOOL                : and(true, andnot1(eq(0, select(([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4126670844, 4, false)), false))
204131 : or(204129, 204130) : BOOL                 : or(false, and(true, andnot1(eq(0, select(([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4126670844, 4, false)), false)))
204140 : and(140583, 204131) : BOOL                : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
197415 : andnot1(141516, 140295) : BOOL            : false
204155 : and(190690, 197415) : BOOL                : false
204159 : andnot1(140583, 204155) : BOOL            : false
204161 : or(204140, 204159) : BOOL                 : false
204169 : or(143700, 204161) : BOOL                 : false

ce =
=counter_example_begin yices.ce9421.fuzzed 5b4993d2666c80c3518d46a3f3e51c
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4126408711 { 0xf5f40007 -168558585 -1.90625083e108 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1373392434
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[204169](not(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry))), or[204161](and[204140](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[204131](andnot1[204129](141516, and[204059](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), andnot1[204058](141516, not(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2))))), and[204130](141516, andnot1[204120](eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), not[190672](141516))))), andnot1[204159](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[204155](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), andnot1[197415](141516, false))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : not(4) : BOOL
6 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvslt(6, 7) : BOOL
9 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-mem--symbol.1.0 : MEMLABEL
12 : symbol.1 : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(9, 10, 11, 12, 13, 14) : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : bvslt(15, 16) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6) : BV:32
20 : bvslt(19, 7) : BOOL
21 : bvadd(7, 6) : BV:32
22 : bvslt(21, 7) : BOOL
23 : not(22) : BOOL
24 : andnot1(17, 23) : BOOL
25 : and(20, 24) : BOOL
26 : andnot1(17, 25) : BOOL
27 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
28 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
29 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
30 : bvadd(28, 29) : BV:32
31 : select(9, 10, 27, 30, 13, 14) : BV:32
32 : eq(16, 31) : BOOL
33 : not(17) : BOOL
34 : andnot1(32, 33) : BOOL
35 : and(17, 34) : BOOL
36 : or(26, 35) : BOOL
37 : and(8, 36) : BOOL
38 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
39 : bvadd(18, 38) : BV:32
40 : 3 { 0x3 +1.35e129 } : BV:32
41 : bvslt(39, 40) : BOOL
42 : andnot1(17, 14) : BOOL
43 : and(41, 42) : BOOL
44 : andnot1(8, 43) : BOOL
45 : or(37, 44) : BOOL
46 : or(5, 45) : BOOL
</MSG>
<MSG>4:24 : main.A19.B2.C3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>4:24 : main.A19.B2.C3: Finished executing CG's add edge function...</MSG>
<MSG>4:24 : main.A19.B2.C3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B2.C3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L14%1%bbentry...</MSG>
<MSG>4:24 : Done adding new edge to the product-TFG main.A19.B2.C3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L14%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry...</MSG>
<MSG>4:24 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L14%1%bbentry</MSG>
<MSG>4:24 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 3, delta 3] as correlation candidate for L9%1%bbentry=>L14%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L14%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 2147483648
143694 : bvsign(142273) : BV:1                     : 1
143697 : eq(140809, 143694) : BOOL                 : true
143700 : not(143697) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 2147483648
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
184716 : bvadd(140296, 140582) : BV:32             : 3
196818 : bvslt(184716, 140311) : BOOL              : false
197269 : bvadd(140311, 140582) : BV:32             : 4
197270 : bvslt(197269, 140311) : BOOL              : false
204057 : not(197270) : BOOL                        : true
204058 : andnot1(141516, 204057) : BOOL            : false
204059 : and(196818, 204058) : BOOL                : false
204129 : andnot1(141516, 204059) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4126408704
141535 : bvadd(140467, 140542) : BV:32             : 4126670844
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4126670844, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4126670844, 4, false))
190672 : not(141516) : BOOL                        : false
204120 : andnot1(141552, 190672) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4126670844, 4, false)), false)
204130 : and(141516, 204120) : BOOL                : and(true, andnot1(eq(0, select(([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4126670844, 4, false)), false))
204131 : or(204129, 204130) : BOOL                 : or(false, and(true, andnot1(eq(0, select(([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4126670844, 4, false)), false)))
204140 : and(140583, 204131) : BOOL                : false
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141621 : bvadd(140296, 140579) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
197415 : andnot1(141516, 140295) : BOOL            : false
204155 : and(190690, 197415) : BOOL                : false
204159 : andnot1(140583, 204155) : BOOL            : false
204161 : or(204140, 204159) : BOOL                 : false
204169 : or(143700, 204161) : BOOL                 : false

ce =
=counter_example_begin yices.ce9421.fuzzed 5b4993d2666c80c3518d46a3f3e51c
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4126408711 { 0xf5f40007 -168558585 -1.90625083e108 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 3758096384; 4294967295 ] -> 0, { [ 0; 3758096379 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4126408704 { 0xf5f40000 -168558592 -1.90625000e108 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4126408703 ] -> memlabel-mem--esp, [ 4126408704; 4126408711 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4126408712; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 128, { [ 0; 3758096379 ], [ 3758096384; 4294967295 ], } -> (RAC: m_multiplier -> 43 , m_adder -> 232), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1373392434
=counter_example_end


</MSG>
<MSG>4:24 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C3 (d:0, s:1)...</MSG>
<MSG>4:24 : Chose (for CE propagation) product-TFG main.A19.B3 (d:0, s:0) from a frontier of size 52...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 22 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2]
<MSG>4:24 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B3...</MSG>
<MSG>4:24 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B3...</MSG>
<MSG>4:24 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:24 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:24 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>4:24 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:24 : Adding new edge to the product-TFG main.A19.B3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:24 : main.A19.B3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:24 : main.A19.B3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:24 : main.A19.B3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:25 : main.A19.B3: Propagated 17 out of 22 counter-examples across edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>4:25 : main.A19.B3: Added the 17 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>4:25 : main.A19.B3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>4:26 : main.A19.B3: Finished executing CG's add edge function...</MSG>
<MSG>4:26 : main.A19.B3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:26 : main.A19.B3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:26 : Done adding new edge to the product-TFG main.A19.B3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>4:26 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:26 : Added correlation to the product-TFG main.A19.B3 (d:0, s:1) and created a correlation entry...</MSG>
<MSG>4:26 : Chose (after CE propagation) product-TFG main.A19.B3 (d:0, s:1) from a frontier of size 52...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 44 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2]
<MSG>4:26 : main.A19.B3: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:26 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:26 : main.A19.B3: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>4:26 : main.A19.B3: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>4:26 : main.A19.B3: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L9%1%bbentry ...</MSG>
<MSG>4:26 : main.A19.B3: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>4:26 : main.A19.B3: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:26 : main.A19.B3: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:26 : main.A19.B3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:26 : main.A19.B3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:26 : main.A19.B3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:26 : main.A19.B3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:26 : main.A19.B3: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:26 : main.A19.B3: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:26 : main.A19.B3: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:26 : main.A19.B3: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:26 : main.A19.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:26 : main.A19.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:26 : main.A19.B3: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:26 : main.A19.B3: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:26 : main.A19.B3: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:26 : main.A19.B3: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:26 : main.A19.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 17 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht19-prove_trivial17-prove2...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:27 : main.A19.B3: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>4:27 : main.A19.B3: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:27 : main.A19.B3 (d:0, s:1): checked newly added edge and inferred invariants...</MSG>
<MSG>4:27 : main.A19.B3 (d:0, s:1): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:28 : product-TFG main.A19.B3: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:28 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:28 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:28 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:28 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:28 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:28 : product-TFG main.A19.B3: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:28 : product-TFG main.A19.B3 created 3 possibilities in group main.A19.B3.C...</MSG>
<MSG>4:28 : Chose (for CE propagation) product-TFG main.A19.B3.C1 (d:0, s:1) from a frontier of size 54...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>4:28 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B3.C1...</MSG>
<MSG>4:28 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B3.C1...</MSG>
<MSG>4:28 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:28 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:28 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:28 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:28 : Adding new edge to the product-TFG main.A19.B3.C1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:28 : main.A19.B3.C1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:28 : main.A19.B3.C1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:28 : main.A19.B3.C1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:28 : main.A19.B3.C1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:28 : main.A19.B3.C1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:28 : main.A19.B3.C1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:28 : main.A19.B3.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:28 : main.A19.B3.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:28 : main.A19.B3.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:28 : main.A19.B3.C1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 1
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : true
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 1
141621 : bvadd(140296, 140579) : BV:32             : 2
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce18640.fuzzed 45dc72fcdfa15ca4f928a39ad3754b3
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
684131422
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>4:28 : main.A19.B3.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:30 : main.A19.B3.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:30 : main.A19.B3.C1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : Done adding new edge to the product-TFG main.A19.B3.C1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:30 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:30 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 1
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : true
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 1
141621 : bvadd(140296, 140579) : BV:32             : 2
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce18640.fuzzed 45dc72fcdfa15ca4f928a39ad3754b3
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
684131422
=counter_example_end


</MSG>
<MSG>4:30 : Discovered that the correlation was useless for the product-TFG main.A19.B3.C1 (d:0, s:1)...</MSG>
<MSG>4:30 : Chose (for CE propagation) product-TFG main.A19.B3.C2 (d:0, s:1) from a frontier of size 53...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>4:30 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B3.C2...</MSG>
<MSG>4:30 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B3.C2...</MSG>
<MSG>4:30 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:30 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:30 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:30 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:30 : Adding new edge to the product-TFG main.A19.B3.C2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:30 : main.A19.B3.C2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:30 : main.A19.B3.C2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:30 : main.A19.B3.C2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:30 : main.A19.B3.C2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 1
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : true
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 1
141621 : bvadd(140296, 140579) : BV:32             : 2
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 2
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce18640.fuzzed 45dc72fcdfa15ca4f928a39ad3754b3
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
684131422
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[197909](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197119](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>4:30 : main.A19.B3.C2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:33 : main.A19.B3.C2: Finished executing CG's add edge function...</MSG>
<MSG>4:33 : main.A19.B3.C2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:33 : main.A19.B3.C2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:33 : Done adding new edge to the product-TFG main.A19.B3.C2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:33 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:33 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 1
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : true
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 1
141621 : bvadd(140296, 140579) : BV:32             : 2
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 2
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce18640.fuzzed 45dc72fcdfa15ca4f928a39ad3754b3
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
684131422
=counter_example_end


</MSG>
<MSG>4:33 : Discovered that the correlation was useless for the product-TFG main.A19.B3.C2 (d:0, s:1)...</MSG>
<MSG>4:33 : Chose (for CE propagation) product-TFG main.A19.B3.C3 (d:0, s:1) from a frontier of size 52...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>4:33 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B3.C3...</MSG>
<MSG>4:33 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B3.C3...</MSG>
<MSG>4:33 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:33 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:33 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:33 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:33 : Adding new edge to the product-TFG main.A19.B3.C3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:33 : main.A19.B3.C3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:33 : main.A19.B3.C3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:33 : main.A19.B3.C3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:33 : main.A19.B3.C3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:33 : main.A19.B3.C3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:33 : main.A19.B3.C3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:33 : main.A19.B3.C3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:33 : main.A19.B3.C3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:33 : main.A19.B3.C3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:33 : main.A19.B3.C3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 1
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : true
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 1
141621 : bvadd(140296, 140579) : BV:32             : 2
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 2
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 3
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce18640.fuzzed 45dc72fcdfa15ca4f928a39ad3754b3
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
684131422
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141552 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[197936](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197469](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1[196981](141552, false)))), and[197405](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[197396](andnot1[197394](141516, and[197274](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[197273](and[196995](141516, andnot1[196981](141552, false)), andnot1[197272](141516, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[197395](141516, andnot1[197377](141552, or[197365](and[196995](141516, andnot1[196981](141552, false)), andnot1[197363](141516, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[197443](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[197436](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[197418](and[196995](141516, andnot1[196981](141552, false)), andnot1[197415](141516, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>4:33 : main.A19.B3.C3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:37 : main.A19.B3.C3: Finished executing CG's add edge function...</MSG>
<MSG>4:37 : main.A19.B3.C3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:37 : main.A19.B3.C3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:37 : Done adding new edge to the product-TFG main.A19.B3.C3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:37 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:37 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 1
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : true
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 1
141621 : bvadd(140296, 140579) : BV:32             : 2
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : true
196797 : not(190690) : BOOL                        : false
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 2
196818 : bvslt(184716, 140311) : BOOL              : false
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197269 : bvadd(140311, 140582) : BV:32             : 3
197270 : bvslt(197269, 140311) : BOOL              : false
197271 : andnot1(197270, 196797) : BOOL            : false
197272 : andnot1(141516, 197271) : BOOL            : false
197273 : or(196995, 197272) : BOOL                 : false
197274 : and(196818, 197273) : BOOL                : false
197394 : andnot1(141516, 197274) : BOOL            : false
197363 : andnot1(141516, 196797) : BOOL            : false
197365 : or(196995, 197363) : BOOL                 : false
197377 : andnot1(141552, 197365) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
197395 : and(141516, 197377) : BOOL                : false
197396 : or(197394, 197395) : BOOL                 : false
197405 : and(140583, 197396) : BOOL                : false
197415 : andnot1(141516, 140295) : BOOL            : false
197418 : or(196995, 197415) : BOOL                 : false
197436 : and(190690, 197418) : BOOL                : false
197443 : andnot1(140583, 197436) : BOOL            : false
197469 : or(196800, 197110, 197405, 197443) : BOOL : false
197936 : or(197904, 197469) : BOOL                 : false

ce =
=counter_example_begin yices.ce18640.fuzzed 45dc72fcdfa15ca4f928a39ad3754b3
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 62 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
684131422
=counter_example_end


</MSG>
<MSG>4:37 : Discovered that the correlation was useless for the product-TFG main.A19.B3.C3 (d:0, s:1)...</MSG>
<MSG>4:37 : Chose (for CE propagation) product-TFG main.A19.B4 (d:0, s:0) from a frontier of size 51...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 22 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3]
<MSG>4:37 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B4...</MSG>
<MSG>4:37 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B4...</MSG>
<MSG>4:37 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:37 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:37 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>4:37 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:37 : Adding new edge to the product-TFG main.A19.B4 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>4:37 : main.A19.B4: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:37 : main.A19.B4: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:37 : main.A19.B4: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:37 : main.A19.B4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:37 : main.A19.B4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:37 : main.A19.B4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:37 : main.A19.B4: Propagated 17 out of 22 counter-examples across edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>4:38 : main.A19.B4: Added the 17 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>4:38 : main.A19.B4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>4:39 : main.A19.B4: Finished executing CG's add edge function...</MSG>
<MSG>4:39 : main.A19.B4: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:39 : main.A19.B4: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:39 : Done adding new edge to the product-TFG main.A19.B4 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>4:39 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:39 : Added correlation to the product-TFG main.A19.B4 (d:0, s:1) and created a correlation entry...</MSG>
<MSG>4:39 : Chose (after CE propagation) product-TFG main.A19.B4 (d:0, s:1) from a frontier of size 51...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 43 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3]
<MSG>4:39 : main.A19.B4: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:39 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:39 : main.A19.B4: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>4:39 : main.A19.B4: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>4:39 : main.A19.B4: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L9%1%bbentry ...</MSG>
<MSG>4:39 : main.A19.B4: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>4:39 : main.A19.B4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:39 : main.A19.B4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:39 : main.A19.B4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:39 : main.A19.B4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:39 : main.A19.B4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:39 : main.A19.B4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:39 : main.A19.B4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:39 : main.A19.B4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:39 : main.A19.B4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:39 : main.A19.B4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:39 : main.A19.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:39 : main.A19.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:39 : main.A19.B4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:39 : main.A19.B4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:39 : main.A19.B4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:39 : main.A19.B4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:39 : main.A19.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 15 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:39 : main.A19.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht20-prove_trivial17-prove3...</MSG>
<MSG>4:39 : main.A19.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:40 : main.A19.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:40 : main.A19.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:40 : main.A19.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:40 : main.A19.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:40 : main.A19.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:40 : main.A19.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:41 : main.A19.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:41 : main.A19.B4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:41 : main.A19.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:41 : main.A19.B4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:41 : main.A19.B4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:41 : main.A19.B4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:41 : main.A19.B4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:41 : main.A19.B4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:41 : main.A19.B4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:41 : main.A19.B4: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:41 : main.A19.B4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>4:41 : main.A19.B4: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:41 : main.A19.B4 (d:0, s:1): checked newly added edge and inferred invariants...</MSG>
<MSG>4:41 : main.A19.B4 (d:0, s:1): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:42 : product-TFG main.A19.B4: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:42 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:42 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:42 : product-TFG main.A19.B4: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:42 : product-TFG main.A19.B4 created 3 possibilities in group main.A19.B4.C...</MSG>
<MSG>4:42 : Chose (for CE propagation) product-TFG main.A19.B4.C1 (d:0, s:1) from a frontier of size 53...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>4:42 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B4.C1...</MSG>
<MSG>4:42 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B4.C1...</MSG>
<MSG>4:42 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:42 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:42 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:42 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:42 : Adding new edge to the product-TFG main.A19.B4.C1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:42 : main.A19.B4.C1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:42 : main.A19.B4.C1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:42 : main.A19.B4.C1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:42 : main.A19.B4.C1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:42 : main.A19.B4.C1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:42 : main.A19.B4.C1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:42 : main.A19.B4.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:42 : main.A19.B4.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:42 : main.A19.B4.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:42 : main.A19.B4.C1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 0
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : true
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 2
141621 : bvadd(140296, 140579) : BV:32             : 3
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : false
196797 : not(190690) : BOOL                        : true
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce20052.fuzzed 2e36bfe977e5597ca41b6adc559d91
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1393344839
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>4:42 : main.A19.B4.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:43 : main.A19.B4.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:43 : main.A19.B4.C1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : Done adding new edge to the product-TFG main.A19.B4.C1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:43 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:43 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 0
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : true
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 2
141621 : bvadd(140296, 140579) : BV:32             : 3
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : false
196797 : not(190690) : BOOL                        : true
196800 : andnot1(140583, 196797) : BOOL            : false
197905 : or(197904, 196800) : BOOL                 : false

ce =
=counter_example_begin yices.ce20052.fuzzed 2e36bfe977e5597ca41b6adc559d91
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1393344839
=counter_example_end


</MSG>
<MSG>4:43 : Discovered that the correlation was useless for the product-TFG main.A19.B4.C1 (d:0, s:1)...</MSG>
<MSG>4:43 : Chose (for CE propagation) product-TFG main.A19.B4.C2 (d:0, s:1) from a frontier of size 52...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>4:43 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B4.C2...</MSG>
<MSG>4:43 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B4.C2...</MSG>
<MSG>4:43 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:43 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:43 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:43 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:43 : Adding new edge to the product-TFG main.A19.B4.C2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:43 : main.A19.B4.C2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:43 : main.A19.B4.C2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:43 : main.A19.B4.C2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:43 : main.A19.B4.C2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 0
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : true
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 2
141621 : bvadd(140296, 140579) : BV:32             : 3
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : false
196797 : not(190690) : BOOL                        : true
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 1
196818 : bvslt(184716, 140311) : BOOL              : true
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce20052.fuzzed 2e36bfe977e5597ca41b6adc559d91
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1393344839
=counter_example_end


failcond-expr = 141516 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[197909](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[197119](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[197110](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[196996](andnot1[196994](141516, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[196995](141516, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>4:43 : main.A19.B4.C2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:47 : main.A19.B4.C2: Finished executing CG's add edge function...</MSG>
<MSG>4:47 : main.A19.B4.C2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:47 : main.A19.B4.C2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:47 : Done adding new edge to the product-TFG main.A19.B4.C2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:47 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:47 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142273 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143694 : bvsign(142273) : BV:1                     : 0
143697 : eq(140809, 143694) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142462 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
160078 : eq(140296, 142462) : BOOL                 : true
197892 : andnot1(143697, 160078) : BOOL            : true
197904 : not(197892) : BOOL                        : false
140582 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 0
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140583 : bvslt(140582, 140311) : BOOL              : true
140579 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 2
141621 : bvadd(140296, 140579) : BV:32             : 3
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
190690 : bvslt(141621, 140315) : BOOL              : false
196797 : not(190690) : BOOL                        : true
196800 : andnot1(140583, 196797) : BOOL            : false
140555 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), )
140556 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 3758096380
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141514 : select(140555, 140556, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141516 : bvslt(141514, 140284) : BOOL              : false
184716 : bvadd(140296, 140582) : BV:32             : 1
196818 : bvslt(184716, 140311) : BOOL              : true
196819 : andnot1(196818, 196797) : BOOL            : false
196994 : andnot1(141516, 196819) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140542 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 4294705152
141535 : bvadd(140467, 140542) : BV:32             : 4294967292
141541 : select(140555, 140556, 140291, 141535, 140349, 140295) : BV:32 : select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)
141552 : eq(140284, 141541) : BOOL                 : eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false))
196981 : andnot1(141552, 140295) : BOOL            : andnot1(eq(0, select(([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ), ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 4294967292, 4, false)), false)
196995 : and(141516, 196981) : BOOL                : false
196996 : or(196994, 196995) : BOOL                 : false
197110 : and(140583, 196996) : BOOL                : false
197119 : or(196800, 197110) : BOOL                 : false
197909 : or(197904, 197119) : BOOL                 : false

ce =
=counter_example_begin yices.ce20052.fuzzed 2e36bfe977e5597ca41b6adc559d91
=symbol.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=symbol.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=dst_symbol_addr.1
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=dst_symbol_addr.2
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 4294705159 { 0xfffc0007 -262137 -1.96875083e128 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 4294705152 { 0xfffc0000 -262144 -1.96875000e128 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 4026531836 { 0xeffffffc -268435460 -1.99999952e96 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 4026531840 { 0xf0000000 -268435456 -1.0e97 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 4026531832 { 0xeffffff8 -268435464 -1.99999904e96 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 4026531824 { 0xeffffff0 -268435472 -1.99999809e96 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 4026531808 { 0xefffffe0 -268435488 -1.99999618e96 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 3758096380; 3758096383 ] -> 0, [ 4026531820; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531831 ] -> 0, [ 4026531836; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 977 ] -> memlabel-mem--heap, [ 978; 1027 ] -> memlabel-mem--symbol.2.0, [ 1028; 1124073474 ] -> memlabel-mem--heap, [ 1124073475; 3266961409 ] -> memlabel-mem--rodata, [ 3266961410; 3758096379 ] -> memlabel-mem--heap, [ 3758096380; 3758096383 ] -> memlabel-mem--symbol.1.0, [ 3758096384; 4294705151 ] -> memlabel-mem--esp, [ 4294705152; 4294705159 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 4294705160; 4294967295 ] -> memlabel-mem--esp, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 3758096380 { 0xdffffffc -536870916 -1.99999952e64 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 978 { 0x3d2 +1.11658e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.memlabel-mem--esp_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=rodata.size
1 : 2142887935 { 0x7fb9dfff +1.45214831e128 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 1124073475 { 0x43000003 +1.35e7 } : BV:32
=input.memlabel-mem--rodata_end
1 : 3266961409 { 0xc2b9e001 -1028005887 -1.45214855e6 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 3758096380; 3758096380 ] -> 0, [ 3758096381; 3758096381 ] -> 0, [ 3758096382; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 0, [ 4026531820; 4026531820 ] -> 0, [ 4026531821; 4026531821 ] -> 0, [ 4026531822; 4026531822 ] -> 0, [ 4026531823; 4026531823 ] -> 240, [ 4026531828; 4026531828 ] -> 0, [ 4026531829; 4026531829 ] -> 0, [ 4026531830; 4026531830 ] -> 0, [ 4026531831; 4026531831 ] -> 0, [ 4026531836; 4026531836 ] -> 0, [ 4026531837; 4026531837 ] -> 0, [ 4026531838; 4026531838 ] -> 0, [ 4026531839; 4026531839 ] -> 0, { [ 0; 3758096379 ], [ 3758096384; 4026531819 ], [ 4026531824; 4026531827 ], [ 4026531832; 4026531835 ], [ 4026531840; 4294967295 ], } -> (RAC: m_multiplier -> 76 , m_adder -> 127), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1393344839
=counter_example_end


</MSG>
<MSG>4:47 : Discovered that the correlation was useless for the product-TFG main.A19.B4.C2 (d:0, s:1)...</MSG>
<MSG>4:47 : Chose (for CE propagation) product-TFG main.A19.B4.C3 (d:0, s:1) from a frontier of size 51...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>4:47 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B4.C3...</MSG>
<MSG>4:47 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B4.C3...</MSG>
<MSG>4:47 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:47 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:47 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:47 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:47 : Adding new edge to the product-TFG main.A19.B4.C3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:47 : main.A19.B4.C3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:47 : main.A19.B4.C3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:47 : main.A19.B4.C3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:47 : main.A19.B4.C3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:47 : main.A19.B4.C3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:47 : main.A19.B4.C3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:47 : main.A19.B4.C3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:47 : main.A19.B4.C3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:47 : main.A19.B4.C3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:48 : main.A19.B4.C3: Propagated 7 out of 46 counter-examples across edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>4:48 : main.A19.B4.C3: Added the 7 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>4:48 : main.A19.B4.C3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:52 : main.A19.B4.C3: Finished executing CG's add edge function...</MSG>
<MSG>4:52 : main.A19.B4.C3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:52 : main.A19.B4.C3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:52 : Done adding new edge to the product-TFG main.A19.B4.C3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:52 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:52 : Added correlation to the product-TFG main.A19.B4.C3 (d:0, s:1) and created a correlation entry...</MSG>
<MSG>4:52 : Chose (after CE propagation) product-TFG main.A19.B4.C3 (d:0, s:1) from a frontier of size 51...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 36 => A E0%0%d at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 1 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>4:52 : main.A19.B4.C3: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>4:52 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:52 : main.A19.B4.C3: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>4:52 : main.A19.B4.C3: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>4:52 : main.A19.B4.C3: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L9%1%bbentry ...</MSG>
<MSG>4:53 : main.A19.B4.C3: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:53 : main.A19.B4.C3 (d:0, s:1): checked newly added edge and inferred invariants...</MSG>
<MSG>4:53 : main.A19.B4.C3 (d:0, s:1): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:53 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>4:53 : Checking equivalence proof...</MSG>
<MSG>5:01 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d:
  Invariant state (0 classes):

Lentry%1%allocaI3_L0%1%allocaI1:
  Invariant state (18 classes):
    eqclass 0:
    smallest point cover name mem-allocs-equality, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->eq(input.src.llvm-mem.alloc, input.dst.mem.alloc) ; 
    1 preds:
      0.: eq(input.src.llvm-mem.alloc, input.dst.mem.alloc)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 1:
    smallest point cover name memory-equality-memlabel-mem--symbol.1.0, type ARR_EQ, exprs [2]: 2-->memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--symbol.1.0) ; 3-->memmask(input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--symbol.1.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem, input.src.llvm-mem.alloc, input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--symbol.1.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 2:
    smallest point cover name memory-equality-memlabel-mem--symbol.2.0, type ARR_EQ, exprs [2]: 4-->memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--symbol.2.0) ; 5-->memmask(input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--symbol.2.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem, input.src.llvm-mem.alloc, input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--symbol.2.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 3:
    smallest point cover name memory-equality-memlabel-mem--heap, type ARR_EQ, exprs [2]: 6-->memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--heap) ; 7-->memmask(input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--heap) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem, input.src.llvm-mem.alloc, input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--heap)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 4:
    smallest point cover name memory-equality-memlabel-mem--rodata, type ARR_EQ, exprs [2]: 8-->memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--rodata) ; 9-->memmask(input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--rodata) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem, input.src.llvm-mem.alloc, input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--rodata)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 5:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 10-->and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--symbol.1.0_end), eq(input.memlabel-mem--symbol.1.0_end, bvadd(input.memlabel-mem--symbol.1.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(50, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end)), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_end)))), andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end)))))), eq(bvand(symbol.1, 3), 0)), and(eq(symbol.1, input.memlabel-mem--symbol.1.0_begin), eq(symbol.2, input.memlabel-mem--symbol.2.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--symbol.1.0_end), eq(input.memlabel-mem--symbol.1.0_end, bvadd(input.memlabel-mem--symbol.1.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(50, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end)), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_end)))), andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end)))))), eq(bvand(symbol.1, 3), 0)), and(eq(symbol.1, input.memlabel-mem--symbol.1.0_begin), eq(symbol.2, input.memlabel-mem--symbol.2.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)))  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 6:
    smallest point cover name memlabel-is-absent, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 11-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, memlabel_is_absent(input.src.llvm-mem.alloc, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, memlabel_is_absent(input.src.llvm-mem.alloc, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 7:
    smallest point cover name sp-below-isp, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 12-->bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp) ; 
    1 preds:
      0.: bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 8:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [12]: 13-->input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 ; 14-->retaddr_const ; 15-->input.dst.sp=L0%0%d=sp ; 16-->input.dst.sp=L0%1%spver=sp.L0%1%spver ; 17-->input.dst.exreg.0.5.L0%1%spver ; 18-->input.dst.exreg.0.3.L0%1%spver ; 19-->input.dst.exreg.0.4.L0%1%spver ; 20-->input.dst.exreg.0.6.L0%1%spver ; 21-->input.dst.exreg.0.7.L0%1%spver ; 22-->input.dst.local./*___y___main__x__=Lentry%1%d=/ ; 23-->input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1 ; 24-->select(input.dst.mem.L0%1%spver, input.dst.mem.alloc, mlvar.dst.2, input.dst.sp=L0%0%d=sp, 4, false) ; 
    6 preds:
      0.: retaddr_const         ==  select(input.dst.mem.L0%1%spver, input.dst.mem.alloc, mlvar.dst.2, input.dst.sp=L0%0%d=sp, 4, false)
      1.: 8                     ==  input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1
      2.: input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3  ==  input.dst.local./*___y___main__x__=Lentry%1%d=/
      3.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.exreg.0.4.L0%1%spver)
      4.: 12                    ==  bvextract(input.dst.sp=L0%0%d=sp, 3, 0)
      5.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.sp=L0%1%spver=sp.L0%1%spver)
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3v487.ce6292      1.:z3v487.ce6390      2.:z3.ce6293      3.:z3v487.ce6250      4.:z3.ce6251      5.:z3v487.ce6667      6.:z3.ce6391      7.:z3.ce6433      8.:z3v487.ce6582      9.:z3.ce6626      10.:z3v487.ce6625      11.:z3v487.ce6432      12.:z3v487.ce6474      13.:z3.ce6475
    eqclass 9:
    smallest point cover name expr-group-region_agrees_with_memlabel, type HOUDINI, exprs [3]: 25-->region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%0%d=sp, 4, memlabel-mem--esp) ; 26-->region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 27-->region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 
    3 preds:
      0.: region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
      1.: region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
      2.: region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%0%d=sp, 4, memlabel-mem--esp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [1]: 28-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 11:
    smallest point cover name nonarg-locals-iscontiguous, type HOUDINI, exprs [1]: 29-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, iscontiguous_memlabel(input.src.llvm-mem.alloc, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6250
    eqclass 12:
    smallest point cover name nonarg-locals-isprobably-contiguous, type HOUDINI, exprs [1]: 30-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 13:
    smallest point cover name sp-ml-lb-ineq, type HOUDINI, exprs [2]: 31-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin)) ; 32-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1))) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1)))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 14:
    smallest point cover name ml-lb-ub-eq, type HOUDINI, exprs [1]: 33-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6708
    eqclass 15:
    smallest point cover name ml-lb-ub-ineq, type HOUDINI, exprs [1]: 34-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 16:
    smallest point cover name ml-lb-addr-eq, type HOUDINI, exprs [1]: 35-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 17:
    smallest point cover name local-eq-lsprel-guess, type HOUDINI, exprs [1]: 36-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces

Lentry%1%allocaI4_L0%1%allocaI2:
  Invariant state (19 classes):
    eqclass 0:
    smallest point cover name mem-allocs-equality, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 37-->eq(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI2) ; 
    1 preds:
      0.: eq(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI2)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name memory-equality-memlabel-mem--symbol.1.0, type ARR_EQ, exprs [2]: 38-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0) ; 39-->memmask(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--symbol.1.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--symbol.1.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 2:
    smallest point cover name memory-equality-memlabel-mem--symbol.2.0, type ARR_EQ, exprs [2]: 40-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.2.0) ; 41-->memmask(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--symbol.2.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--symbol.2.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 3:
    smallest point cover name memory-equality-memlabel-mem--heap, type ARR_EQ, exprs [2]: 42-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--heap) ; 43-->memmask(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--heap) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--heap)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 4:
    smallest point cover name memory-equality-memlabel-mem--rodata, type ARR_EQ, exprs [2]: 44-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--rodata) ; 45-->memmask(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--rodata) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--rodata)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 5:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 10-->and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--symbol.1.0_end), eq(input.memlabel-mem--symbol.1.0_end, bvadd(input.memlabel-mem--symbol.1.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(50, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end)), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_end)))), andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end)))))), eq(bvand(symbol.1, 3), 0)), and(eq(symbol.1, input.memlabel-mem--symbol.1.0_begin), eq(symbol.2, input.memlabel-mem--symbol.2.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--symbol.1.0_end), eq(input.memlabel-mem--symbol.1.0_end, bvadd(input.memlabel-mem--symbol.1.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(50, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end)), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_end)))), andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end)))))), eq(bvand(symbol.1, 3), 0)), and(eq(symbol.1, input.memlabel-mem--symbol.1.0_begin), eq(symbol.2, input.memlabel-mem--symbol.2.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)))  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 6:
    smallest point cover name memlabel-is-absent, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 46-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 7:
    smallest point cover name sp-below-isp, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 12-->bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp) ; 
    1 preds:
      0.: bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 8:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [12]: 13-->input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 ; 14-->retaddr_const ; 15-->input.dst.sp=L0%0%d=sp ; 16-->input.dst.sp=L0%1%spver=sp.L0%1%spver ; 17-->input.dst.exreg.0.5.L0%1%spver ; 18-->input.dst.exreg.0.3.L0%1%spver ; 19-->input.dst.exreg.0.4.L0%1%spver ; 20-->input.dst.exreg.0.6.L0%1%spver ; 21-->input.dst.exreg.0.7.L0%1%spver ; 22-->input.dst.local./*___y___main__x__=Lentry%1%d=/ ; 23-->input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1 ; 47-->select(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, mlloc.dst.51, input.dst.sp=L0%0%d=sp, 4, false) ; 
    7 preds:
      0.: retaddr_const         ==  select(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, mlloc.dst.51, input.dst.sp=L0%0%d=sp, 4, false)
      1.: 8                     ==  input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1
      2.: input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3  ==  input.dst.local./*___y___main__x__=Lentry%1%d=/
      3.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.exreg.0.4.L0%1%spver)
      4.: 12                    ==  bvextract(input.dst.sp=L0%0%d=sp, 3, 0)
      5.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.sp=L0%1%spver=sp.L0%1%spver)
      6.: 0                     ==  bvextract(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, 1, 0)
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3v487.ce6292      1.:z3v487.ce7162      2.:z3v487.ce7085      3.:z3.ce6974      4.:z3v487.ce6474      5.:z3v487.ce6861      6.:z3v487.ce6749      7.:z3.ce6750      8.:z3.ce7163      9.:z3.ce6862      10.:z3v487.ce6973
    eqclass 9:
    smallest point cover name expr-group-region_agrees_with_memlabel, type HOUDINI, exprs [3]: 48-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%0%d=sp, 4, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 49-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 50-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 
    3 preds:
      0.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
      1.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
      2.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%0%d=sp, 4, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [1]: 51-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 11:
    smallest point cover name nonarg-locals-iscontiguous, type HOUDINI, exprs [1]: 52-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 12:
    smallest point cover name nonarg-locals-isprobably-contiguous, type HOUDINI, exprs [1]: 53-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 13:
    smallest point cover name sp-ml-lb-ineq, type HOUDINI, exprs [2]: 54-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4)) ; 55-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6292
    eqclass 14:
    smallest point cover name ml-lb-ub-eq, type HOUDINI, exprs [1]: 56-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 
    1 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 15:
    smallest point cover name ml-lb-ub-ineq, type HOUDINI, exprs [1]: 57-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 16:
    smallest point cover name ml-lb-addr-eq, type HOUDINI, exprs [1]: 58-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 17:
    smallest point cover name locals-ub-upper-bound, type HOUDINI, exprs [1]: 59-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvult(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, input.dst.sp=L0%0%d=sp)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6973
    eqclass 18:
    smallest point cover name local-eq-lsprel-guess, type HOUDINI, exprs [1]: 60-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces

Lfor.cond2%1%bbentry_L9%1%bbentry:
  Invariant state (24 classes):
    eqclass 0:
    smallest point cover name mem-allocs-equality, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 61-->eq(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.alloc.L8%1%d) ; 
    1 preds:
      0.: eq(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.alloc.L8%1%d)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name memory-equality-memlabel-mem--symbol.1.0, type ARR_EQ, exprs [2]: 62-->memmask(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0) ; 63-->memmask(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--symbol.1.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--symbol.1.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 2:
    smallest point cover name memory-equality-memlabel-mem--symbol.2.0, type ARR_EQ, exprs [2]: 64-->memmask(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.2.0) ; 65-->memmask(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--symbol.2.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--symbol.2.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 3:
    smallest point cover name memory-equality-memlabel-mem--heap, type ARR_EQ, exprs [2]: 66-->memmask(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--heap) ; 67-->memmask(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--heap) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--heap)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 4:
    smallest point cover name memory-equality-memlabel-mem--rodata, type ARR_EQ, exprs [2]: 68-->memmask(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--rodata) ; 69-->memmask(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--rodata) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--rodata)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 5:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 10-->and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--symbol.1.0_end), eq(input.memlabel-mem--symbol.1.0_end, bvadd(input.memlabel-mem--symbol.1.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(50, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end)), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_end)))), andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end)))))), eq(bvand(symbol.1, 3), 0)), and(eq(symbol.1, input.memlabel-mem--symbol.1.0_begin), eq(symbol.2, input.memlabel-mem--symbol.2.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--symbol.1.0_end), eq(input.memlabel-mem--symbol.1.0_end, bvadd(input.memlabel-mem--symbol.1.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(50, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end)), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_end)))), andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end)))))), eq(bvand(symbol.1, 3), 0)), and(eq(symbol.1, input.memlabel-mem--symbol.1.0_begin), eq(symbol.2, input.memlabel-mem--symbol.2.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)))  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 6:
    smallest point cover name memlabel-is-absent, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 46-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 7:
    smallest point cover name sp-below-isp, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 70-->bvule(input.dst.exreg.0.4.L8%1%d, input.dst.sp=L0%0%d=sp) ; 
    1 preds:
      0.: bvule(input.dst.exreg.0.4.L8%1%d, input.dst.sp=L0%0%d=sp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 8:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [32]: 13-->input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 ; 14-->retaddr_const ; 15-->input.dst.sp=L0%0%d=sp ; 18-->input.dst.exreg.0.3.L0%1%spver ; 20-->input.dst.exreg.0.6.L0%1%spver ; 21-->input.dst.exreg.0.7.L0%1%spver ; 22-->input.dst.local./*___y___main__x__=Lentry%1%d=/ ; 71-->input.src.llvm-%cmp.Lfor.body%1%intermediateVal0 ; 72-->input.src.llvm-%cmp3.Lfor.cond2%1%bbentry ; 73-->input.src.llvm-%d.0.Lfor.cond2%1%bbentry ; 74-->input.src.llvm-%e.0.Lfor.cond%1%bbentry ; 75-->0 ; 76-->1 ; 77-->input.dst.local_size.=Lentry%1%d=.L8%1%d ; 78-->input.dst.exreg.0.4.L8%1%d ; 79-->input.dst.exreg.0.1.L9%1%bbentry ; 80-->input.dst.exreg.0.5.L6%1%spver ; 81-->input.dst.exreg.0.0.L9%1%bbentry ; 82-->select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.9, dst_symbol_addr.1, 4, false) ; 83-->select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--symbol.1.0, symbol.1, 4, false) ; 84-->bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver) ; 85-->bvuge(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 12) ; 86-->not(bvuge(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 12)) ; 87-->ite(not(bvuge(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 12)), 1, 0) ; 88-->xor(eq(1, bvextract(bvadd(4294967272, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4)), eq(1, bvextract(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4))) ; 89-->ite(xor(eq(1, bvextract(bvadd(4294967272, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4)), eq(1, bvextract(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4))), 1, 0) ; 90-->ite(eq(1, bvextract(bvadd(4294967272, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 31, 31)), 1, 0) ; 91-->ite(eq(3, bvextract(input.dst.sp=L0%1%spver=sp.L0%1%spver, 31, 3)), 1, 0) ; 92-->select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.4, bvadd(4294967292, bvand(input.dst.sp=L0%0%d=sp, 4294967288)), 4, false) ; 93-->select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.5, bvadd(4294967288, bvand(input.dst.sp=L0%0%d=sp, 4294967288)), 4, false) ; 94-->select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.6, bvadd(4294967284, bvand(input.dst.sp=L0%0%d=sp, 4294967288)), 4, false) ; 95-->select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlloc.dst.24, input.dst.sp=L0%0%d=sp, 4, false) ; 
    20 preds:
      0.: retaddr_const         ==  select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlloc.dst.24, input.dst.sp=L0%0%d=sp, 4, false)
      1.: 4                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.6, bvadd(bvand(input.dst.sp=L0%0%d=sp, 4294967288), 4294967284), 4, false))
      2.: retaddr_const         ==  select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.4, bvadd(4294967292, bvand(input.dst.sp=L0%0%d=sp, 4294967288)), 4, false)
      3.: 0                     ==  bvzero_ext(ite(eq(3, bvextract(input.dst.sp=L0%1%spver=sp.L0%1%spver, 31, 3)), 1, 0), 31)
      4.: 0                     ==  bvconcat(0, bool_to_bv(xor(eq(1, bvextract(bvadd(4294967272, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4)), eq(1, bvextract(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4)))))
      5.: 0                     ==  bvconcat(0, ite(not(bvuge(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 12)), 1, 0))
      6.: 0                     ==  bvconcat(0, ite(xor(eq(1, bvextract(bvadd(4294967272, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4)), eq(1, bvextract(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4))), 1, 0))
      7.: 0                     ==  bvextract(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, 1, 0)
      8.: 4294967268            ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.exreg.0.4.L8%1%d)
      9.: 12                    ==  bvextract(input.dst.sp=L0%0%d=sp, 3, 0)
      10.: bvadd(3, bvneg(input.src.llvm-%e.0.Lfor.cond%1%bbentry))  ==  input.dst.exreg.0.0.L9%1%bbentry
      11.: 1                     ==  bvconcat(0, bool_to_bv(input.src.llvm-%cmp.Lfor.body%1%intermediateVal0))
      12.: 8                     ==  input.dst.local_size.=Lentry%1%d=.L8%1%d
      13.: 0                     ==  input.src.llvm-%d.0.Lfor.cond2%1%bbentry
      14.: 4294967284            ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.exreg.0.5.L6%1%spver)
      15.: 0                     ==  bvadd(select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.9, dst_symbol_addr.1, 4, false), bvmul(4294967295, input.dst.exreg.0.1.L9%1%bbentry))
      16.: 0                     ==  bvadd(select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--symbol.1.0, symbol.1, 4, false), bvmul(4294967295, input.dst.exreg.0.1.L9%1%bbentry))
      17.: 4294967292            ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver))
      18.: 1                     ==  bvconcat(0, bool_to_bv(bvuge(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 12)))
      19.: 0                     ==  bvconcat(0, bool_to_bv(not(bvuge(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 12))))
     is_assumed_eqclass : 0
    15 visited ces:
      0.:z3v487.ce6292      1.:z3v487.ce7162      2.:z3v487.ce7085      3.:z3.ce6974      4.:z3v487.ce6474      5.:z3v487.ce7274      6.:z3v487.ce6861      7.:z3v487.ce6749      8.:z3.ce6750      9.:z3.ce7163      10.:z3.ce6862      11.:z3v487.ce6973      12.:yices.ce18839      13.:z3v487.ce18862      14.:cvc4.ce18885
    eqclass 9:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 74-->input.src.llvm-%e.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.src.llvm-%e.0.Lfor.cond%1%bbentry, 2)  ==  true
      1.: bvsle(input.src.llvm-%e.0.Lfor.cond%1%bbentry, 2)  ==  true
      2.: bvsge(input.src.llvm-%e.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce6292      1.:cvc4.ce18885      2.:z3v487.ce19397
    eqclass 10:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 73-->input.src.llvm-%d.0.Lfor.cond2%1%bbentry ; 
    3 preds:
      0.: bvule(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 0)  ==  true
      1.: bvsle(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 0)  ==  true
      2.: bvsge(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6292
    eqclass 11:
    smallest point cover name dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry, type BV_CONST_INEQ, exprs [1]: 79-->input.dst.exreg.0.1.L9%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3v487.ce7570      1.:z3v487.ce6292      2.:z3v487.ce7644      3.:z3v487.ce7422      4.:z3v487.ce6474      5.:z3v487.ce7348      6.:z3v487.ce7496
    eqclass 12:
    smallest point cover name dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry, type BV_CONST_INEQ, exprs [1]: 81-->input.dst.exreg.0.0.L9%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.exreg.0.0.L9%1%bbentry, 3)  ==  true
      1.: bvuge(input.dst.exreg.0.0.L9%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.exreg.0.0.L9%1%bbentry, 3)  ==  true
      3.: bvsge(input.dst.exreg.0.0.L9%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce6292      1.:cvc4.ce18885      2.:z3v487.ce19397
    eqclass 13:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 96-->bvslt(input.dst.exreg.0.1.L9%1%bbentry, input.dst.exreg.0.0.L9%1%bbentry) ; 97-->bvult(input.dst.exreg.0.1.L9%1%bbentry, input.dst.exreg.0.0.L9%1%bbentry) ; 98-->bvslt(input.dst.exreg.0.0.L9%1%bbentry, input.dst.exreg.0.1.L9%1%bbentry) ; 99-->bvult(input.dst.exreg.0.0.L9%1%bbentry, input.dst.exreg.0.1.L9%1%bbentry) ; 100-->bvsle(input.dst.exreg.0.1.L9%1%bbentry, input.dst.exreg.0.0.L9%1%bbentry) ; 101-->bvule(input.dst.exreg.0.1.L9%1%bbentry, input.dst.exreg.0.0.L9%1%bbentry) ; 102-->bvsle(input.dst.exreg.0.0.L9%1%bbentry, input.dst.exreg.0.1.L9%1%bbentry) ; 103-->bvule(input.dst.exreg.0.0.L9%1%bbentry, input.dst.exreg.0.1.L9%1%bbentry) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce6292      1.:z3v487.ce6474
    eqclass 14:
    smallest point cover name expr-group-region_agrees_with_memlabel, type HOUDINI, exprs [7]: 104-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, dst_symbol_addr.1, 4, memlabel-mem--symbol.1.0) ; 105-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, symbol.1, 4, memlabel-mem--symbol.1.0) ; 106-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, bvadd(4294967292, bvand(input.dst.sp=L0%0%d=sp, 4294967288)), 4, memlabel-mem--esp) ; 107-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, bvadd(4294967288, bvand(input.dst.sp=L0%0%d=sp, 4294967288)), 4, memlabel-mem--esp) ; 108-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, bvadd(bvand(input.dst.sp=L0%0%d=sp, 4294967288), 4294967284), 4, memlabel-mem--esp) ; 109-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, input.dst.sp=L0%0%d=sp, 4, memlabel-mem--esp) ; 110-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 
    3 preds:
      0.: region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
      1.: region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, symbol.1, 4, memlabel-mem--symbol.1.0)  ==  true
      2.: region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, dst_symbol_addr.1, 4, memlabel-mem--symbol.1.0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7718      1.:z3v487.ce7496      2.:z3.ce7790
    eqclass 15:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [1]: 111-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L8%1%d)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L8%1%d))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 16:
    smallest point cover name nonarg-locals-iscontiguous, type HOUDINI, exprs [1]: 52-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 17:
    smallest point cover name nonarg-locals-isprobably-contiguous, type HOUDINI, exprs [1]: 53-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 18:
    smallest point cover name sp-ml-lb-ineq, type HOUDINI, exprs [2]: 112-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L8%1%d, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4)) ; 113-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L8%1%d, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L8%1%d))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6292
    eqclass 19:
    smallest point cover name ml-lb-ub-eq, type HOUDINI, exprs [1]: 114-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L8%1%d, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 
    1 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L8%1%d, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 20:
    smallest point cover name ml-lb-ub-ineq, type HOUDINI, exprs [1]: 115-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L8%1%d, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L8%1%d, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 21:
    smallest point cover name ml-lb-addr-eq, type HOUDINI, exprs [1]: 58-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 22:
    smallest point cover name locals-ub-upper-bound, type HOUDINI, exprs [1]: 59-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvult(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, input.dst.sp=L0%0%d=sp)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6973
    eqclass 23:
    smallest point cover name local-eq-lsprel-guess, type HOUDINI, exprs [1]: 60-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:cvc4.ce18885

E0%0%d_E0%0%d:
  Invariant state (0 classes):


<MSG>5:01 : Checking safety of the product-CFG...</MSG>
check_safety 381: checking safety for zero divisors
check_safety_for 337: Solving src_must_be_unsafe dfa
check_safety_for 339: Done src_must_be_unsafe dfa
check_safety_for 343: Solving dst_may_be_unsafe dfa
check_safety_for 345: Done dst_may_be_unsafe dfa
check_safety 386: safety check passed for zero divisors
check_safety 387: checking safety for unsafe heap accesses
check_safety_for 337: Solving src_must_be_unsafe dfa
check_safety_for 339: Done src_must_be_unsafe dfa
check_safety_for 343: Solving dst_may_be_unsafe dfa
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
check_safety_for 345: Done dst_may_be_unsafe dfa
check_safety 392: safety check passed for unsafe heap accesses
<MSG>5:02 : Safety check passed on product-CFG...</MSG>
check_safety_for 337: Solving src_must_be_unsafe dfa
check_safety_for 339: Done src_must_be_unsafe dfa
check_safety_for 343: Solving dst_may_be_unsafe dfa
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for unsafety-cond
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for unsafety-cond
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for unsafety-cond
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for unsafety-cond
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for unsafety-cond
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for unsafety-cond
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for unsafety-cond
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for unsafety-cond
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
check_safety_for 345: Done dst_may_be_unsafe dfa
<MSG>5:07 : DST Memlabel check passed on product-CFG...</MSG>
Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 36 => A E0%0%d at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 15 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 1 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function main. 260.75s, query:smt.: 46.7286s (num_starts 676; 0.0691s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 83.6764s (num_starts 1686; 0.0496s/start)ftmap_run_pointsto_analysis.: 4.79045s (num_starts 2; 2.3952s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
check_wfconds_on_edge.Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry.: 2.6e-05s (num_starts 1; 0.0000s/start)
check_wfconds_on_edge.Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry.: 3.6e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 3.6e-05s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 3.9e-05s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 4.1e-05s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.: 6.6e-05s (num_starts 6; 0.0000s/start)
compute_tfg_pred_eqclass.: 6.8e-05s (num_starts 26; 0.0000s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 7e-05s (num_starts 8; 0.0000s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.: 7.1e-05s (num_starts 6; 0.0000s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 7.9e-05s (num_starts 8; 0.0000s/start)
get_paths_with_matching_to_pc.: 8e-05s (num_starts 20; 0.0000s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 8.1e-05s (num_starts 8; 0.0000s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.000102s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.000104s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.000106s (num_starts 6; 0.0000s/start)
check_wfconds_on_edge.Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.000173s (num_starts 4; 0.0000s/start)
check_wfconds_on_edge.Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry.: 0.000177s (num_starts 3; 0.0001s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.000211s (num_starts 24; 0.0000s/start)
remove_complex_bv_exprs.: 0.000306s (num_starts 26; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000414s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000415s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000418s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00043s (num_starts 1; 0.0004s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000443s (num_starts 26; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000488s (num_starts 1; 0.0005s/start)
add_fresh_counterexample_at_pc_and_propagate.Lfor.cond%1%bbentry_L9%1%bbentry.inductive-invariants.: 0.000511s (num_starts 3; 0.0002s/start)
src_tfg_counter_example_translate_on_edge_composition.delta0.: 0.000643s (num_starts 209; 0.0000s/start)
determinize_value_expr_map.: 0.00066s (num_starts 187; 0.0000s/start)
prove_trivial.: 0.000736s (num_starts 889; 0.0000s/start)
graph_visit_exprs_const.const.: 0.000835s (num_starts 4; 0.0002s/start)
get_memlabel_set_from_mlvarnames.: 0.000889s (num_starts 188; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 0.000943s (num_starts 1523; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.001071s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.001075s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001079s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.001083s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001098s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001101s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001105s (num_starts 1; 0.0011s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::conservative_dfa_val_for_newly_defined_loc.: 0.001105s (num_starts 68; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001109s (num_starts 1; 0.0011s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::conservative_dfa_val_for_newly_defined_loc.: 0.001109s (num_starts 68; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001112s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001114s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001125s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.001129s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001132s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.001135s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.001137s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.001141s (num_starts 1; 0.0011s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001235s (num_starts 1; 0.0012s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.001283s (num_starts 222; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001296s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);-trivial.: 0.001296s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001298s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001303s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001313s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.00133s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001334s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001371s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-addr-eq-houdini-guess;-trivial.: 0.001373s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001376s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001381s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-addr-eq-houdini-guess.: 0.001383s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001388s (num_starts 1; 0.0014s/start)
prune_dst_memslots.: 0.001468s (num_starts 26; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001501s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001502s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001503s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.001507s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-eq-lsprel-guess-houdini-guess.: 0.001511s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.001516s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001553s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001555s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001556s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.00156s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-ineq-houdini-guess.: 0.001564s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.001568s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001571s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001575s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;sp-below-isp-houdini-guess;-trivial.: 0.001575s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);sp-below-isp-houdini-guess.: 0.001585s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);sp-below-isp-houdini-guess.: 0.001594s (num_starts 1; 0.0016s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.001634s (num_starts 26; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001657s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.001661s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001661s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-below-isp-houdini-guess;-trivial.: 0.001665s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001666s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);sp-below-isp-houdini-guess.: 0.001679s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);sp-below-isp-houdini-guess.: 0.001687s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001693s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;ml-lb-addr-eq-houdini-guess;-trivial.: 0.001696s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001698s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001702s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;ml-lb-addr-eq-houdini-guess.: 0.001705s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001709s (num_starts 1; 0.0017s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.001768s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001774s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;sp-below-isp-houdini-guess;-trivial.: 0.001777s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001778s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-below-isp-houdini-guess.: 0.00179s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-below-isp-houdini-guess.: 0.001798s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001816s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001818s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001819s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ml-lb-addr-eq-houdini-guess;-trivial.: 0.00182s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001822s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.001823s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;ml-lb-ub-ineq-houdini-guess.: 0.001827s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.001831s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.001831s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.001832s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;memlabel-is-absent-houdini-guess;-trivial.: 0.001833s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.001833s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.001834s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ml-lb-addr-eq-houdini-guess.: 0.001834s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ml-lb-ub-eq-houdini-guess;-trivial.: 0.001838s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.001839s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.001841s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess.: 0.001843s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001844s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001845s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;nonarg-locals-iscontiguous-houdini-guess.: 0.001845s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;local-sizes-are-equal-houdini-guess;-trivial.: 0.001846s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;memlabel-is-absent-houdini-guess.: 0.001846s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.001847s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.001847s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.001848s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.001848s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ml-lb-ub-eq-houdini-guess.: 0.001851s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.001854s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.001857s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.001857s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ml-lb-ub-ineq-houdini-guess.: 0.001858s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;local-sizes-are-equal-houdini-guess.: 0.00186s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.00186s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.001872s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;sp-below-isp-houdini-guess;-trivial.: 0.001872s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.001874s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.001877s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess.: 0.001882s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;sp-below-isp-houdini-guess.: 0.001885s (num_starts 1; 0.0019s/start)
graph_edge_contains_unknown_function_call.: 0.001891s (num_starts 385; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.001901s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.001906s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;mem-allocs-equality;-trivial.: 0.001909s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality;-trivial.: 0.00191s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality.: 0.001919s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;mem-allocs-equality.: 0.001922s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001945s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.00195s (num_starts 1; 0.0019s/start)
graph_locs_add_all_local_vars.: 0.001955s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.001956s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001958s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;memlabel-is-absent-houdini-guess;-trivial.: 0.001959s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.00196s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.00196s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001962s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.001966s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess.: 0.001968s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;local-eq-lsprel-guess-houdini-guess.: 0.001969s (num_starts 1; 0.0020s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.00197s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;memlabel-is-absent-houdini-guess.: 0.001971s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001971s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.001974s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess.: 0.001976s (num_starts 1; 0.0020s/start)
populate_suffixpaths.: 0.001976s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-addr-eq-houdini-guess;-trivial.: 0.001986s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001987s (num_starts 1; 0.0020s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.001988s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001991s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.001993s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-addr-eq-houdini-guess.: 0.001995s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;sp-below-isp-houdini-guess;-trivial.: 0.001996s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.001997s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.002s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess.: 0.002005s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;sp-below-isp-houdini-guess.: 0.002008s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess.: 0.002013s (num_starts 1; 0.0020s/start)
graph_locs_add_all_llvmvars.: 0.002051s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality;-trivial.: 0.002062s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;mem-allocs-equality;-trivial.: 0.002063s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality;-trivial.: 0.002064s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002066s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002071s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality.: 0.002073s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;mem-allocs-equality.: 0.002075s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.00208s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality.: 0.002082s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.002088s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002098s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.0021s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002101s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002102s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002103s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002104s (num_starts 1; 0.0021s/start)
graph_with_paths::path_modifies_memalloc.: 0.002108s (num_starts 141; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002113s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.002114s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002116s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ml-lb-ub-ineq-houdini-guess.: 0.002117s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002122s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.002123s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.002149s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ml-lb-addr-eq-houdini-guess;-trivial.: 0.002152s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.002163s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.002173s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ml-lb-addr-eq-houdini-guess.: 0.002177s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.002183s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.002208s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002209s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ml-lb-ub-eq-houdini-guess;-trivial.: 0.002211s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.002212s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002212s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002214s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.002218s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.002222s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-eq-lsprel-guess-houdini-guess.: 0.002222s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.002224s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ml-lb-ub-eq-houdini-guess.: 0.002226s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-addr-eq-houdini-guess;-trivial.: 0.002226s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.002227s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.002228s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.002231s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.002232s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-addr-eq-houdini-guess.: 0.002235s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.00224s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002253s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002255s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.002261s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.002269s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.002271s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.002278s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;sp-ml-lb-ineq-houdini-guess.: 0.002283s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002291s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002291s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002291s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.002295s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-ineq-houdini-guess.: 0.002301s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.002309s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.002312s (num_starts 1; 0.0023s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.002315s (num_starts 1686; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.002319s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.00234s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002342s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002343s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.002347s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-ineq-houdini-guess.: 0.002351s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.002357s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002378s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002383s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002387s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002394s (num_starts 1; 0.0024s/start)
populate_locid2expr_map.: 0.002395s (num_starts 23; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002399s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002408s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002435s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002437s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002438s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.002442s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-eq-lsprel-guess-houdini-guess.: 0.002446s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.002451s (num_starts 1; 0.0025s/start)
graph_locs_add_local_vars_for_edge.: 0.002459s (num_starts 77; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.002551s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-below-isp-houdini-guess;-trivial.: 0.002551s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.002551s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);sp-below-isp-houdini-guess.: 0.002562s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);sp-below-isp-houdini-guess.: 0.002575s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.002625s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-sizes-are-equal-houdini-guess;-trivial.: 0.002627s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.002629s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.002636s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-sizes-are-equal-houdini-guess.: 0.002642s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.002652s (num_starts 1; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002699s (num_starts 1; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002705s (num_starts 1; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002808s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002809s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.002809s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;outgoing_edges_cover_all_possibilities.;-trivial.: 0.002812s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002818s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;abstract-memlabel-asserts-houdini-guess.: 0.002821s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.002827s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess.: 0.002835s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.002841s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess.: 0.00285s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.002868s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;lb-signed;-trivial.: 0.002875s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed;-trivial.: 0.002876s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.002877s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002894s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002897s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002898s (num_starts 1; 0.0029s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.0029s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002907s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;abstract-memlabel-asserts-houdini-guess.: 0.00291s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.002912s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002914s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002918s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002919s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002919s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002923s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.002931s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002931s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002941s (num_starts 1; 0.0029s/start)
expr_is_hidden_reg.: 0.002956s (num_starts 3621; 0.0000s/start)
compute_sprel_relations.: 0.002962s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002964s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002973s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.002997s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003001s (num_starts 1; 0.0030s/start)
propagate_sprels.: 0.003002s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.003006s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.00301s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003023s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003033s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.003034s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.003042s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.003043s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.003052s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.003068s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-below-isp-houdini-guess;-trivial.: 0.003075s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.003078s (num_starts 1; 0.0031s/start)
tfg::collect_assumes_around_edge.: 0.003098s (num_starts 243; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);sp-below-isp-houdini-guess.: 0.003102s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);sp-below-isp-houdini-guess.: 0.003117s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003127s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003133s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memlabel-is-absent-houdini-guess;-trivial.: 0.003134s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003139s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memlabel-is-absent-houdini-guess;-trivial.: 0.003139s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003143s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.003154s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.00316s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.003165s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003167s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003174s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003177s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003182s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003201s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003203s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003204s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;memlabel-is-absent-houdini-guess;-trivial.: 0.003205s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003214s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003227s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned;-trivial.: 0.003227s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.003231s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;lb-unsigned;-trivial.: 0.003232s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned;-trivial.: 0.003236s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.00324s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.003243s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.003252s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003259s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);mem-allocs-equality;-trivial.: 0.00326s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;mem-allocs-equality;-trivial.: 0.003264s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);mem-allocs-equality;-trivial.: 0.003267s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.003269s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.003276s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.00328s (num_starts 1; 0.0033s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.003288s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.003289s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);mem-allocs-equality.: 0.00329s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003295s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.003302s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003304s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);mem-allocs-equality.: 0.003305s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003317s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003322s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.003328s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.003338s (num_starts 1; 0.0033s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.00334s (num_starts 1; 0.0033s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.00335s (num_starts 1; 0.0034s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.003352s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.00336s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.003369s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.003384s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003388s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003392s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.003393s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003393s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.003395s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.003398s (num_starts 1; 0.0034s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.003398s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.003405s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;sp-below-isp-houdini-guess;-trivial.: 0.003405s (num_starts 1; 0.0034s/start)
pth_collect_preds_using_atom_func.: 0.003405s (num_starts 132; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.003409s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003418s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.003418s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.003431s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;sp-below-isp-houdini-guess.: 0.003436s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.003439s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003456s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memlabel-is-absent-houdini-guess;-trivial.: 0.003464s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003468s (num_starts 1; 0.0035s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.003469s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.00348s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003491s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.0035s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003507s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;local-sizes-are-equal-houdini-guess;-trivial.: 0.00351s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.003511s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.003521s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;sp-below-isp-houdini-guess;-trivial.: 0.003523s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.003525s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;local-sizes-are-equal-houdini-guess.: 0.003525s (num_starts 1; 0.0035s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.003528s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.003534s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ml-lb-addr-eq-houdini-guess;-trivial.: 0.003534s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003535s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;sp-below-isp-houdini-guess.: 0.003537s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.003544s (num_starts 1; 0.0035s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.003547s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ml-lb-addr-eq-houdini-guess.: 0.003548s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.00355s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.00355s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.003562s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;nonarg-locals-iscontiguous-houdini-guess.: 0.003566s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003569s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003574s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003577s (num_starts 1; 0.0036s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.003579s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.003583s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003585s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.003589s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003592s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.003598s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003602s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;lb-unsigned;-trivial.: 0.003604s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.003605s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned;-trivial.: 0.003606s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.003609s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;local-sizes-are-equal-houdini-guess;-trivial.: 0.003609s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;memlabel-is-absent-houdini-guess;-trivial.: 0.00361s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.003611s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.003619s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.00362s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned.: 0.003623s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;local-sizes-are-equal-houdini-guess.: 0.003623s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;memlabel-is-absent-houdini-guess.: 0.003624s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.003626s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;lb-unsigned.: 0.003629s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;local-sizes-are-equal-houdini-guess;-trivial.: 0.003631s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.003632s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.003632s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.003635s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003636s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003636s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.00364s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.003641s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.003643s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;mem-allocs-equality;-trivial.: 0.003643s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.003645s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;nonarg-locals-iscontiguous-houdini-guess.: 0.003645s (num_starts 1; 0.0036s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.003646s (num_starts 5; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003646s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.003646s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.003648s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.003649s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.00365s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;local-sizes-are-equal-houdini-guess.: 0.00365s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003652s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003653s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.003654s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ml-lb-ub-eq-houdini-guess;-trivial.: 0.00366s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.00366s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.003663s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003663s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.003666s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003667s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.003672s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003674s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.003676s (num_starts 1; 0.0037s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.003678s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ml-lb-ub-eq-houdini-guess.: 0.003679s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.003683s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003687s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003688s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ml-lb-ub-eq-houdini-guess;-trivial.: 0.003691s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.003693s (num_starts 1; 0.0037s/start)
get_mask_ranges_for_memlabel.: 0.003697s (num_starts 258; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.003698s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003699s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.003702s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ml-lb-ub-ineq-houdini-guess.: 0.003702s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ml-lb-ub-eq-houdini-guess.: 0.003705s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003724s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003725s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003725s (num_starts 1; 0.0037s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.003725s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003731s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;memlabel-is-absent-houdini-guess;-trivial.: 0.003746s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003747s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.003748s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.003759s (num_starts 1; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;memlabel-is-absent-houdini-guess.: 0.003762s (num_starts 1; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ml-lb-addr-eq-houdini-guess;-trivial.: 0.003769s (num_starts 1; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.00377s (num_starts 1; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.00378s (num_starts 1; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ml-lb-addr-eq-houdini-guess.: 0.003784s (num_starts 1; 0.0038s/start)
expr_is_callee_save_const.: 0.003829s (num_starts 3987; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;lb-signed;-trivial.: 0.003871s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed;-trivial.: 0.003874s (num_starts 1; 0.0039s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.003885s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;sp-below-isp-houdini-guess;-trivial.: 0.003895s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.003896s (num_starts 1; 0.0039s/start)
graph_locs_add_all_exvregs.: 0.003897s (num_starts 2; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess.: 0.003905s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;sp-below-isp-houdini-guess.: 0.003909s (num_starts 1; 0.0039s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.003923s (num_starts 1; 0.0039s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L7%1%allocaI2.: 0.00393s (num_starts 1; 0.0039s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.003941s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ml-lb-addr-eq-houdini-guess;-trivial.: 0.003955s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003956s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.003965s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;memlabel-is-absent-houdini-guess;-trivial.: 0.003967s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.003968s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;local-sizes-are-equal-houdini-guess;-trivial.: 0.003969s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ml-lb-addr-eq-houdini-guess.: 0.003969s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.003971s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess.: 0.003976s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003979s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.00398s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;memlabel-is-absent-houdini-guess.: 0.00398s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003981s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;local-sizes-are-equal-houdini-guess.: 0.003984s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.003992s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ml-lb-ub-ineq-houdini-guess.: 0.003996s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004071s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004074s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004075s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.004081s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004084s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004086s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004091s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;nonarg-locals-iscontiguous-houdini-guess.: 0.004099s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ml-lb-ub-eq-houdini-guess;-trivial.: 0.004105s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.004107s (num_starts 1; 0.0041s/start)
simplify_bv_add_atomic.: 0.004112s (num_starts 168; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;mem-allocs-equality;-trivial.: 0.004113s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality;-trivial.: 0.004114s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.004116s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ml-lb-ub-eq-houdini-guess.: 0.004119s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality.: 0.004123s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;mem-allocs-equality.: 0.004127s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.004131s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.004132s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;memlabel-is-absent-houdini-guess;-trivial.: 0.004133s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.004144s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;sp-below-isp-houdini-guess;-trivial.: 0.004146s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.004148s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.004148s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.004149s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.004157s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.004157s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.004158s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;sp-below-isp-houdini-guess.: 0.004161s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ml-lb-ub-ineq-houdini-guess.: 0.004162s (num_starts 1; 0.0042s/start)
tfg_edge_composition_get_assumes.: 0.004202s (num_starts 132; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004226s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.00424s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004243s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004246s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.00425s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.004256s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.004261s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;nonarg-locals-iscontiguous-houdini-guess.: 0.004262s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);linear;-trivial.: 0.004267s (num_starts 1; 0.0043s/start)
graph_locs_add_exvregs_for_edge.: 0.004272s (num_starts 77; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.004273s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;sp-ml-lb-ineq-houdini-guess.: 0.004274s (num_starts 2; 0.0021s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.004276s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);linear;-trivial.: 0.004282s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;local-sizes-are-equal-houdini-guess;-trivial.: 0.004289s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.004291s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;memlabel-is-absent-houdini-guess;-trivial.: 0.004297s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.004299s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.004301s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;local-sizes-are-equal-houdini-guess.: 0.004303s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ml-lb-addr-eq-houdini-guess;-trivial.: 0.004307s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.004308s (num_starts 1; 0.0043s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.004308s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.00431s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;memlabel-is-absent-houdini-guess.: 0.004312s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.004319s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ml-lb-addr-eq-houdini-guess.: 0.004322s (num_starts 1; 0.0043s/start)
identify_address_taken_local_variables.: 0.004329s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.00433s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004332s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004334s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-sizes-are-equal-houdini-guess;-trivial.: 0.004339s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.004341s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004343s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;nonarg-locals-iscontiguous-houdini-guess.: 0.004345s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004351s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.004351s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-sizes-are-equal-houdini-guess.: 0.004358s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.00436s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004371s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004373s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004373s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004383s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.004385s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004388s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.0044s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-trivial.: 0.004403s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-trivial.: 0.004405s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.004408s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-trivial.: 0.004442s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-trivial.: 0.004445s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.004445s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.004449s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ml-lb-ub-eq-houdini-guess;-trivial.: 0.004455s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.004457s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.004458s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;local-sizes-are-equal-houdini-guess;-trivial.: 0.004463s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.004465s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.004467s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ml-lb-ub-eq-houdini-guess.: 0.00447s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004474s (num_starts 2; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;mem-allocs-equality;-trivial.: 0.004476s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.004478s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004478s (num_starts 2; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.004485s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.004489s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.004489s (num_starts 2; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.00449s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;local-sizes-are-equal-houdini-guess.: 0.004493s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;mem-allocs-equality.: 0.004494s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-ml-lb-ineq-houdini-guess.: 0.004495s (num_starts 2; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.004498s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.004503s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.004505s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.004507s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ub-unsigned;-trivial.: 0.004513s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-trivial.: 0.004516s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.004516s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.00452s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.004525s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ub-unsigned;-trivial.: 0.004526s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-trivial.: 0.004527s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.004528s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.004539s (num_starts 1; 0.0045s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.004541s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ml-lb-ub-ineq-houdini-guess.: 0.004542s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.00457s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004571s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.00458s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004629s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004634s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004637s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004646s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004655s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ml-lb-addr-eq-houdini-guess;-trivial.: 0.004659s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.00466s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.00466s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.00466s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004661s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004663s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004666s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.00467s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.00467s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004673s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ml-lb-addr-eq-houdini-guess.: 0.004674s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;nonarg-locals-iscontiguous-houdini-guess.: 0.004674s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004675s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004697s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;local-sizes-are-equal-houdini-guess;-trivial.: 0.0047s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.004702s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004702s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004704s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.004709s (num_starts 3; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.004712s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.004712s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;local-sizes-are-equal-houdini-guess.: 0.004714s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-ml-lb-ineq-houdini-guess.: 0.00472s (num_starts 2; 0.0024s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.004728s (num_starts 65; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.004731s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.004775s (num_starts 3; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004788s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-sizes-are-equal-houdini-guess;-trivial.: 0.004794s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004797s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ml-lb-ub-eq-houdini-guess;-trivial.: 0.004799s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.004801s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.004804s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004805s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.004808s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.004811s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-sizes-are-equal-houdini-guess.: 0.004813s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ml-lb-ub-eq-houdini-guess.: 0.004814s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate;-trivial.: 0.00482s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;false-predicate;-trivial.: 0.004823s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004823s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.004823s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate;-trivial.: 0.004825s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;sp-below-isp-houdini-guess;-trivial.: 0.004828s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.00483s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate.: 0.004832s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;false-predicate.: 0.004835s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess.: 0.004839s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;sp-below-isp-houdini-guess.: 0.004843s (num_starts 1; 0.0048s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.004852s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;lb-signed;-trivial.: 0.004882s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed;-trivial.: 0.004884s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;sp-below-isp-houdini-guess;-trivial.: 0.004892s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.004897s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.004898s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ub-unsigned;-trivial.: 0.0049s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-trivial.: 0.004903s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.004908s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.004909s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ml-lb-ub-ineq-houdini-guess.: 0.004912s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.00492s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;sp-below-isp-houdini-guess.: 0.004923s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;memlabel-is-absent-houdini-guess;-trivial.: 0.004925s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.004929s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.004939s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;memlabel-is-absent-houdini-guess.: 0.004943s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004974s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;local-sizes-are-equal-houdini-guess;-trivial.: 0.004977s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004979s (num_starts 1; 0.0050s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.004984s (num_starts 132; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004986s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;local-sizes-are-equal-houdini-guess;-trivial.: 0.005s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-trivial.: 0.005s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.005003s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-trivial.: 0.005003s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.005003s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.00501s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.005013s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;local-sizes-are-equal-houdini-guess.: 0.005016s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;memlabel-is-absent-houdini-guess;-trivial.: 0.005038s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.005039s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.00504s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.005041s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess.: 0.005049s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.005051s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;memlabel-is-absent-houdini-guess.: 0.005053s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;nonarg-locals-iscontiguous-houdini-guess.: 0.005054s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005098s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005099s (num_starts 1; 0.0051s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.005103s (num_starts 10; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005108s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005112s (num_starts 1; 0.0051s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.005124s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality;-trivial.: 0.005163s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;mem-allocs-equality;-trivial.: 0.005163s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality.: 0.005172s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;mem-allocs-equality.: 0.005177s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;sp-below-isp-houdini-guess;-trivial.: 0.005218s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.005219s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ml-lb-ub-eq-houdini-guess;-trivial.: 0.005223s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.005226s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.005229s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;sp-below-isp-houdini-guess.: 0.005233s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.005236s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ml-lb-ub-eq-houdini-guess.: 0.005239s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;mem-allocs-equality;-trivial.: 0.005255s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.005256s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality;-trivial.: 0.005259s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.005266s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality.: 0.005267s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;mem-allocs-equality.: 0.00527s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ml-lb-addr-eq-houdini-guess;-trivial.: 0.005286s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.005288s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;memlabel-is-absent-houdini-guess;-trivial.: 0.005295s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.005297s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.005298s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ml-lb-addr-eq-houdini-guess.: 0.005302s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.005306s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;memlabel-is-absent-houdini-guess.: 0.00531s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.005328s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.005332s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.005338s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ml-lb-addr-eq-houdini-guess;-trivial.: 0.005341s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.005355s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;local-sizes-are-equal-houdini-guess;-trivial.: 0.005355s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.005356s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ml-lb-addr-eq-houdini-guess.: 0.005356s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.005366s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;local-sizes-are-equal-houdini-guess.: 0.005369s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.005391s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.005411s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.005417s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.005419s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.005429s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ml-lb-ub-ineq-houdini-guess.: 0.005433s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;mem-allocs-equality;-trivial.: 0.005466s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.005467s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.005467s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.005468s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;sp-below-isp-houdini-guess;-trivial.: 0.005472s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.005474s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.005476s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.005478s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.005479s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;mem-allocs-equality.: 0.00548s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;nonarg-locals-iscontiguous-houdini-guess.: 0.005481s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.005484s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ub-unsigned;-trivial.: 0.005484s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-trivial.: 0.005486s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.005487s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;sp-below-isp-houdini-guess.: 0.005488s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned.: 0.005513s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ub-unsigned.: 0.005522s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;lb-signed;-trivial.: 0.005581s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed;-trivial.: 0.005585s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.005597s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.005605s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005607s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005609s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ml-lb-ub-eq-houdini-guess;-trivial.: 0.005609s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.005611s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed.: 0.005612s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005619s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;lb-signed.: 0.005619s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.005621s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005622s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ml-lb-ub-eq-houdini-guess.: 0.005624s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.005636s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.005644s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;local-sizes-are-equal-houdini-guess;-trivial.: 0.005689s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.00569s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.0057s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;local-sizes-are-equal-houdini-guess.: 0.005704s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;memlabel-is-absent-houdini-guess;-trivial.: 0.005722s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.005724s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;mem-allocs-equality;-trivial.: 0.005729s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.00573s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.005731s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.005733s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.005734s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.005736s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;memlabel-is-absent-houdini-guess.: 0.00574s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.005741s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.005743s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.005744s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;mem-allocs-equality.: 0.005744s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ml-lb-ub-ineq-houdini-guess.: 0.005746s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;mem-allocs-equality;-trivial.: 0.005749s (num_starts 1; 0.0057s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.005752s (num_starts 21; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;mem-allocs-equality.: 0.005765s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ml-lb-addr-eq-houdini-guess;-trivial.: 0.005811s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.005813s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005815s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005817s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.005823s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005825s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ml-lb-addr-eq-houdini-guess.: 0.005827s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005828s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.00583s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005838s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005848s (num_starts 1; 0.0058s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.00586s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005902s (num_starts 3; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.005921s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.005921s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.005925s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.005926s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.005931s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;nonarg-locals-iscontiguous-houdini-guess.: 0.005935s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.005937s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ml-lb-ub-ineq-houdini-guess.: 0.005942s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;sp-below-isp-houdini-guess;-trivial.: 0.005989s (num_starts 2; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.006s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-ub-eq-houdini-guess;-trivial.: 0.006001s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.006002s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.006008s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.00601s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;sp-below-isp-houdini-guess.: 0.006023s (num_starts 2; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ml-lb-ub-eq-houdini-guess;-trivial.: 0.006032s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.006034s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.006044s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ml-lb-ub-eq-houdini-guess.: 0.006047s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;memlabel-is-absent-houdini-guess;-trivial.: 0.006054s (num_starts 2; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.006082s (num_starts 2; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;memlabel-is-absent-houdini-guess.: 0.006083s (num_starts 2; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.006089s (num_starts 2; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.006092s (num_starts 2; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.006102s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006108s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-ml-lb-ineq-houdini-guess.: 0.006111s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006114s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006115s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.006123s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006138s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.00614s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.006143s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006148s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00615s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.006157s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.00617s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;nonarg-locals-iscontiguous-houdini-guess.: 0.006172s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.006185s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.006187s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.006191s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.006193s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.006201s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;sp-ml-lb-ineq-houdini-guess.: 0.00621s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.006222s (num_starts 2; 0.0031s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.006225s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;local-sizes-are-equal-houdini-guess;-trivial.: 0.006238s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ml-lb-addr-eq-houdini-guess;-trivial.: 0.006256s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.006256s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;local-sizes-are-equal-houdini-guess.: 0.006266s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006271s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.006285s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ml-lb-addr-eq-houdini-guess.: 0.006286s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.006296s (num_starts 2; 0.0031s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.00631s (num_starts 19; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006384s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.006389s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;mem-allocs-equality;-trivial.: 0.006405s (num_starts 1; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.006407s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.006408s (num_starts 1; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ml-lb-ub-ineq-houdini-guess.: 0.006418s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ml-lb-ub-eq-houdini-guess;-trivial.: 0.006422s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.006426s (num_starts 1; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;mem-allocs-equality.: 0.00643s (num_starts 1; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ml-lb-ub-eq-houdini-guess.: 0.006451s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006535s (num_starts 1; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006543s (num_starts 1; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006545s (num_starts 1; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.006568s (num_starts 1; 0.0066s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.006585s (num_starts 1; 0.0066s/start)
guarded_predicate_set_eliminate_axpreds.: 0.006585s (num_starts 797; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;lb-unsigned;-trivial.: 0.006647s (num_starts 1; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-trivial.: 0.00665s (num_starts 1; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.006663s (num_starts 1; 0.0067s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.006665s (num_starts 2; 0.0033s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.006684s (num_starts 222; 0.0000s/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 0.006712s (num_starts 50; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006908s (num_starts 1; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006916s (num_starts 1; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006918s (num_starts 1; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.006936s (num_starts 4; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.006941s (num_starts 1; 0.0069s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.006957s (num_starts 1; 0.0070s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.006973s (num_starts 1; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.006976s (num_starts 2; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.007025s (num_starts 2; 0.0035s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.007045s (num_starts 1; 0.0070s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.007072s (num_starts 1; 0.0071s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.007126s (num_starts 1; 0.0071s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.007256s (num_starts 1; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;dst-ineq-houdini-guess;-trivial.: 0.007287s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.00729s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ub-signed;-trivial.: 0.007315s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-trivial.: 0.007319s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess.: 0.007327s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;dst-ineq-houdini-guess.: 0.007337s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed.: 0.007355s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;memeq-;-trivial.: 0.007356s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-;-trivial.: 0.00736s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ub-signed.: 0.007365s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-.: 0.007398s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.007401s (num_starts 1; 0.0074s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.007401s (num_starts 1; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;lb-unsigned;-trivial.: 0.007402s (num_starts 2; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.007405s (num_starts 1; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;memeq-.: 0.007405s (num_starts 4; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned;-trivial.: 0.007407s (num_starts 2; 0.0037s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.007409s (num_starts 1; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned.: 0.007434s (num_starts 2; 0.0037s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.00749s (num_starts 4; 0.0019s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.007521s (num_starts 1; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;local-sizes-are-equal-houdini-guess;-trivial.: 0.007534s (num_starts 2; 0.0038s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.007606s (num_starts 2; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.007608s (num_starts 2; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.00761s (num_starts 2; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.007619s (num_starts 2; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-ml-lb-ineq-houdini-guess.: 0.007627s (num_starts 2; 0.0038s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed;-trivial.: 0.007631s (num_starts 3; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.007639s (num_starts 2; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;lb-signed;-trivial.: 0.007641s (num_starts 3; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed;-trivial.: 0.007646s (num_starts 3; 0.0025s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.00766s (num_starts 126; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-addr-eq-houdini-guess;-trivial.: 0.007675s (num_starts 2; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed.: 0.007681s (num_starts 3; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;lb-signed.: 0.00769s (num_starts 3; 0.0026s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.007692s (num_starts 4; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed.: 0.007707s (num_starts 3; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-addr-eq-houdini-guess.: 0.007723s (num_starts 2; 0.0039s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L7%1%allocaI2.: 0.007769s (num_starts 1; 0.0078s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L7%1%allocaI2.: 0.007784s (num_starts 1; 0.0078s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L7%1%allocaI2.: 0.007795s (num_starts 1; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.007803s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.007813s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.007828s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);linear;-trivial.: 0.007853s (num_starts 2; 0.0039s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.007858s (num_starts 1; 0.0079s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI4_L7%1%allocaI2.: 0.007858s (num_starts 1; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);linear;-trivial.: 0.007876s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-;-trivial.: 0.007902s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.007907s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;memeq-;-trivial.: 0.007914s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-;-trivial.: 0.007918s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ub-signed;-trivial.: 0.007924s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-trivial.: 0.007931s (num_starts 2; 0.0040s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.007934s (num_starts 1; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-.: 0.007952s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;memeq-.: 0.007961s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-.: 0.007978s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007994s (num_starts 1; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008002s (num_starts 1; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008004s (num_starts 1; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.008032s (num_starts 1; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.008052s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.008052s (num_starts 1; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.008105s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.008234s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.008242s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.008248s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.008258s (num_starts 2; 0.0041s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 0.008273s (num_starts 70; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.008274s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-trivial.: 0.008291s (num_starts 3; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ub-signed;-trivial.: 0.0083s (num_starts 3; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-trivial.: 0.008328s (num_starts 3; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.008331s (num_starts 2; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.008339s (num_starts 2; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.008342s (num_starts 2; 0.0042s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.008451s (num_starts 1; 0.0085s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.008471s (num_starts 1456; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.008552s (num_starts 1; 0.0086s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ub-signed;-trivial.: 0.008553s (num_starts 2; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-trivial.: 0.008559s (num_starts 2; 0.0043s/start)
proof_query_is_trivial_helper.: 0.008564s (num_starts 1832; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.008582s (num_starts 2; 0.0043s/start)
sp_version_relations_val_t::meet.: 0.008703s (num_starts 13960; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.008761s (num_starts 1; 0.0088s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008762s (num_starts 1; 0.0088s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.008765s (num_starts 1; 0.0088s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008774s (num_starts 1; 0.0088s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.008777s (num_starts 1; 0.0088s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-trivial.: 0.008803s (num_starts 3; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ub-unsigned;-trivial.: 0.008812s (num_starts 3; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-trivial.: 0.008815s (num_starts 3; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;mem-allocs-equality;-trivial.: 0.008851s (num_starts 2; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;mem-allocs-equality.: 0.00888s (num_starts 2; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.009137s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.009149s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;sp-below-isp-houdini-guess;-trivial.: 0.009176s (num_starts 2; 0.0046s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.009488s (num_starts 222; 0.0000s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.009638s (num_starts 1; 0.0096s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.009777s (num_starts 1; 0.0098s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;lb-unsigned;-trivial.: 0.009779s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-unsigned;-trivial.: 0.009781s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-unsigned;-trivial.: 0.009784s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.00979s (num_starts 1; 0.0098s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.009804s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;lb-unsigned;-trivial.: 0.00981s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;lb-unsigned.: 0.009813s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-trivial.: 0.009816s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.009837s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.009837s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;lb-unsigned.: 0.009844s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.009928s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.009948s (num_starts 1; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.009949s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.009959s (num_starts 1; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.010102s (num_starts 1; 0.0101s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.010116s (num_starts 1; 0.0101s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.010153s (num_starts 1915; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.010217s (num_starts 5; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;lb-unsigned;-trivial.: 0.010277s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned;-trivial.: 0.010282s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned.: 0.010305s (num_starts 2; 0.0052s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.010308s (num_starts 5; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;lb-unsigned.: 0.010311s (num_starts 2; 0.0052s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.010369s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.010379s (num_starts 5; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.010394s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.010395s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.010397s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess.: 0.01042s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.010426s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.010444s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.010448s (num_starts 5; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess.: 0.010448s (num_starts 3; 0.0035s/start)
tfg_suffixpath_get_expr_helper.: 0.010496s (num_starts 19; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.010509s (num_starts 1; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.010518s (num_starts 1; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.010568s (num_starts 2; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.010592s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.010606s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.010615s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.010629s (num_starts 3; 0.0035s/start)
tfg::populate_loc_definedness.post_dfa.: 0.010807s (num_starts 10; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.010965s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.01097s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.010981s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.011035s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.01105s (num_starts 6; 0.0018s/start)
compute_ssa_vars_renaming_map.: 0.0111s (num_starts 2; 0.0056s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.0111s (num_starts 6; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011274s (num_starts 1; 0.0113s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.011283s (num_starts 1; 0.0113s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.0114s (num_starts 177; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;dst-ineq-houdini-guess;-trivial.: 0.011466s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.011472s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.011473s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess.: 0.011508s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;dst-ineq-houdini-guess.: 0.011518s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-;-trivial.: 0.01164s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ub-signed;-trivial.: 0.011659s (num_starts 2; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.011659s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-trivial.: 0.011663s (num_starts 2; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-.: 0.011689s (num_starts 4; 0.0029s/start)
set_result_and_counter_example.: 0.011831s (num_starts 676; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.011887s (num_starts 2; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012091s (num_starts 1; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012093s (num_starts 1; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.012112s (num_starts 1; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;abstract-memlabel-asserts-houdini-guess.: 0.012116s (num_starts 1; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012199s (num_starts 1; 0.0122s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.0122s (num_starts 1; 0.0122s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.01221s (num_starts 1; 0.0122s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;abstract-memlabel-asserts-houdini-guess.: 0.012212s (num_starts 1; 0.0122s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.012337s (num_starts 1; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.012343s (num_starts 1; 0.0123s/start)
graph_with_paths::collect_writable_memlabels_for_path.: 0.012438s (num_starts 188; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.012482s (num_starts 1; 0.0125s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-eq-houdini-guess;-trivial.: 0.012483s (num_starts 1; 0.0125s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.012485s (num_starts 1; 0.0125s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.012939s (num_starts 4; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;lb-unsigned;-trivial.: 0.012967s (num_starts 2; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.012972s (num_starts 4; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned;-trivial.: 0.012973s (num_starts 2; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned.: 0.012998s (num_starts 2; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;lb-unsigned.: 0.013005s (num_starts 2; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.013224s (num_starts 1; 0.0132s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.013278s (num_starts 3; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.01329s (num_starts 3; 0.0044s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.013356s (num_starts 1; 0.0134s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.013421s (num_starts 25; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.013423s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ub-signed;-trivial.: 0.013424s (num_starts 3; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-trivial.: 0.01343s (num_starts 3; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.013458s (num_starts 3; 0.0045s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.013479s (num_starts 464; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.013496s (num_starts 3; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);sp-below-isp-houdini-guess.: 0.013517s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.013525s (num_starts 3; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.013535s (num_starts 3; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.013625s (num_starts 3; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.013627s (num_starts 3; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.013648s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.013651s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.013663s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memlabel-is-absent-houdini-guess.: 0.013741s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.013742s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess.: 0.013766s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;memeq-;-trivial.: 0.013787s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.013793s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.013799s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.0138s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.01381s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.013833s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;memeq-.: 0.013841s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess.: 0.013858s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.01389s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.013892s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.013898s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.013905s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.013916s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.01392s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.01393s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.013956s (num_starts 3; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.013958s (num_starts 3; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.013965s (num_starts 3; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.013965s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.013995s (num_starts 2; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.014046s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memlabel-is-absent-houdini-guess;-trivial.: 0.014062s (num_starts 5; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.014064s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.014066s (num_starts 3; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.014066s (num_starts 3; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.014091s (num_starts 3; 0.0047s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.014092s (num_starts 1915; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.01414s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.014195s (num_starts 4; 0.0035s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI4_L7%1%allocaI2.inductive-invariants.: 0.014214s (num_starts 1; 0.0142s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;lb-signed;-trivial.: 0.014272s (num_starts 3; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-trivial.: 0.014278s (num_starts 3; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.014291s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.014309s (num_starts 3; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.014399s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.014428s (num_starts 4; 0.0036s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.L0%0%d_L0%0%d.: 0.014431s (num_starts 7; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.01448s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.01452s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.014595s (num_starts 1; 0.0146s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.014625s (num_starts 1; 0.0146s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.014636s (num_starts 3; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.014645s (num_starts 3; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.014667s (num_starts 3; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.014682s (num_starts 3; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.014697s (num_starts 3; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.014713s (num_starts 3; 0.0049s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.014811s (num_starts 4; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.014875s (num_starts 4; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.015096s (num_starts 1; 0.0151s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.015103s (num_starts 1; 0.0151s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;memeq-;-trivial.: 0.015332s (num_starts 4; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.015335s (num_starts 4; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.015373s (num_starts 4; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;memeq-.: 0.015385s (num_starts 4; 0.0038s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.015413s (num_starts 1; 0.0154s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.L0%0%d_L0%0%d.: 0.015423s (num_starts 7; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;dst-ineq-houdini-guess;-trivial.: 0.015428s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.015435s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess.: 0.015471s (num_starts 4; 0.0039s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.01548s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;dst-ineq-houdini-guess.: 0.015482s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015663s (num_starts 5; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.015781s (num_starts 5; 0.0032s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.L0%0%d_L0%0%d.: 0.015786s (num_starts 7; 0.0023s/start)
graph_visit_exprs.: 0.015821s (num_starts 5; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.015905s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;memeq-;-trivial.: 0.015908s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-;-trivial.: 0.015913s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-.: 0.015951s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;memeq-.: 0.015962s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.015983s (num_starts 5; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.016025s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.016063s (num_starts 5; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.016179s (num_starts 3; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.016215s (num_starts 3; 0.0054s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.016309s (num_starts 5; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.016388s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.016416s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality;-trivial.: 0.016442s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-trivial.: 0.016449s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.016484s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.016503s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);mem-allocs-equality.: 0.016536s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.016541s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.016556s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.016614s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.016651s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.016659s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.016675s (num_starts 3; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.016679s (num_starts 3; 0.0056s/start)
invariant_inference_xfer.sp-below-isp.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.016693s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.016712s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.016714s (num_starts 3; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.016729s (num_starts 3; 0.0056s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.016756s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ub-unsigned;-trivial.: 0.016821s (num_starts 3; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-trivial.: 0.016828s (num_starts 3; 0.0056s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.016841s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.016861s (num_starts 3; 0.0056s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.016866s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.016907s (num_starts 4; 0.0042s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.01694s (num_starts 4; 0.0042s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.016944s (num_starts 4; 0.0042s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.016963s (num_starts 4; 0.0042s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.016987s (num_starts 4; 0.0042s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.016989s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.017008s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;memeq-;-trivial.: 0.017077s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.017077s (num_starts 1; 0.0171s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.017078s (num_starts 1; 0.0171s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(epsilon);pred-type-unknown.: 0.01708s (num_starts 1; 0.0171s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.017085s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);pred-type-unknown.: 0.017093s (num_starts 1; 0.0171s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.017094s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.017121s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;memeq-.: 0.017131s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;mem-allocs-equality;-trivial.: 0.017146s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.017148s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.017171s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed;-trivial.: 0.017183s (num_starts 6; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.017194s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.017343s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memeq-;-trivial.: 0.017347s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memeq-;-trivial.: 0.017367s (num_starts 4; 0.0043s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.017386s (num_starts 4; 0.0043s/start)
graph_visit_exprs_and_keys.: 0.017408s (num_starts 2; 0.0087s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.017515s (num_starts 4; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.017575s (num_starts 4; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memeq-;-trivial.: 0.017612s (num_starts 4; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memeq-;-trivial.: 0.017627s (num_starts 4; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memeq-;-trivial.: 0.017632s (num_starts 4; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.017682s (num_starts 4; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.0177s (num_starts 6; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.017756s (num_starts 6; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01788s (num_starts 1; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.017881s (num_starts 1; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.01789s (num_starts 1; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;abstract-memlabel-asserts-houdini-guess.: 0.017894s (num_starts 1; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;memlabel-is-absent-houdini-guess;-trivial.: 0.017902s (num_starts 6; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memeq-;-trivial.: 0.017946s (num_starts 4; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.017952s (num_starts 3; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memeq-;-trivial.: 0.017963s (num_starts 4; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.017968s (num_starts 3; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;memlabel-is-absent-houdini-guess.: 0.017975s (num_starts 6; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.017982s (num_starts 3; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memeq-;-trivial.: 0.017986s (num_starts 4; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.018001s (num_starts 3; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.018018s (num_starts 3; 0.0060s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memeq-;-trivial.: 0.018018s (num_starts 4; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;memeq-;-trivial.: 0.01803s (num_starts 4; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memeq-;-trivial.: 0.018036s (num_starts 4; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.018068s (num_starts 3; 0.0060s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.018142s (num_starts 4; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-below-isp-houdini-guess;-trivial.: 0.018357s (num_starts 3; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.018376s (num_starts 5; 0.0037s/start)
populate_dominator_and_postdominator_relations.: 0.018389s (num_starts 16; 0.0011s/start)
proof_query_is_trivial.: 0.018461s (num_starts 1686; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.018621s (num_starts 4; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.018642s (num_starts 5; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.018712s (num_starts 4; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018815s (num_starts 1; 0.0188s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018817s (num_starts 1; 0.0188s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.018826s (num_starts 1; 0.0188s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;abstract-memlabel-asserts-houdini-guess.: 0.01883s (num_starts 1; 0.0188s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-addr-eq-houdini-guess;-trivial.: 0.01913s (num_starts 4; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.019166s (num_starts 4; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-addr-eq-houdini-guess.: 0.019226s (num_starts 4; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.01927s (num_starts 4; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.019281s (num_starts 4; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.019341s (num_starts 3; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.019342s (num_starts 3; 0.0064s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.019351s (num_starts 4; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.019375s (num_starts 3; 0.0065s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.019382s (num_starts 4; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-trivial.: 0.0194s (num_starts 6; 0.0032s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.019409s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.019422s (num_starts 3; 0.0065s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-signed;-trivial.: 0.019433s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;lb-signed;-trivial.: 0.019443s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-signed;-trivial.: 0.019453s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.019455s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.019456s (num_starts 4; 0.0049s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.019456s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.019473s (num_starts 3; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.019479s (num_starts 3; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;dst-ineq-houdini-guess;-trivial.: 0.01949s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-signed.: 0.019497s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.019499s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;lb-signed.: 0.019512s (num_starts 6; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.019518s (num_starts 3; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.019528s (num_starts 3; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess.: 0.019536s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-signed.: 0.019536s (num_starts 6; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;dst-ineq-houdini-guess.: 0.019546s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.019581s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;memlabel-is-absent-houdini-guess;-trivial.: 0.019608s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.019625s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-signed;-trivial.: 0.019628s (num_starts 6; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ub-signed;-trivial.: 0.019629s (num_starts 6; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-signed;-trivial.: 0.019645s (num_starts 6; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;memeq-;-trivial.: 0.019671s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-signed.: 0.019672s (num_starts 6; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.019678s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ub-signed.: 0.019693s (num_starts 6; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;memlabel-is-absent-houdini-guess.: 0.019698s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.019715s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.01972s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;memeq-.: 0.01973s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-signed.: 0.019747s (num_starts 6; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.019875s (num_starts 3; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.01988s (num_starts 3; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.019908s (num_starts 3; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.019918s (num_starts 3; 0.0066s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.020204s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.020297s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;mem-allocs-equality;-trivial.: 0.020362s (num_starts 6; 0.0034s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.020396s (num_starts 625; 0.0000s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.020437s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;mem-allocs-equality.: 0.020449s (num_starts 6; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;memeq-;-trivial.: 0.020458s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-;-trivial.: 0.020465s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-.: 0.020501s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.02051s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;memeq-.: 0.020511s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.020605s (num_starts 4; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ub-unsigned;-trivial.: 0.020868s (num_starts 6; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-unsigned;-trivial.: 0.020872s (num_starts 6; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-unsigned;-trivial.: 0.020917s (num_starts 6; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.021087s (num_starts 1; 0.0211s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.021089s (num_starts 1; 0.0211s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.021103s (num_starts 1; 0.0211s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;abstract-memlabel-asserts-houdini-guess.: 0.021107s (num_starts 1; 0.0211s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.021122s (num_starts 1; 0.0211s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;mem-allocs-equality;-trivial.: 0.021322s (num_starts 5; 0.0043s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.021427s (num_starts 1; 0.0214s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;memeq-;-trivial.: 0.021487s (num_starts 4; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.021494s (num_starts 4; 0.0054s/start)
def_analysis::xfer_and_meet.: 0.021495s (num_starts 326; 0.0001s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.021523s (num_starts 6; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.021532s (num_starts 4; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;memeq-.: 0.021542s (num_starts 4; 0.0054s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-trivial.: 0.021701s (num_starts 4; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-trivial.: 0.021716s (num_starts 4; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-.: 0.021731s (num_starts 4; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.021778s (num_starts 2; 0.0109s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;abstract-memlabel-asserts-houdini-guess.: 0.02181s (num_starts 2; 0.0109s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.021876s (num_starts 1001; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.0219s (num_starts 1; 0.0219s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.021902s (num_starts 1; 0.0219s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.022156s (num_starts 4; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.022165s (num_starts 4; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.022204s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.022206s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;exit.memeq;-trivial.: 0.022223s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.memeq;-trivial.: 0.022227s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.022237s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;exit.memeq;-trivial.: 0.022246s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.022247s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.memeq;-trivial.: 0.02225s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.memeq.: 0.022279s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.memeq.: 0.022283s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;exit.memeq.: 0.022287s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;exit.memeq.: 0.022291s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.022492s (num_starts 1; 0.0225s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.022523s (num_starts 1; 0.0225s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-addr-eq-houdini-guess;-trivial.: 0.022753s (num_starts 6; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;memeq-;-trivial.: 0.022776s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.022788s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.022832s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;memeq-.: 0.022842s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.02286s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-addr-eq-houdini-guess.: 0.022876s (num_starts 6; 0.0038s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.02297s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-trivial.: 0.023s (num_starts 2; 0.0115s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.023124s (num_starts 4; 0.0058s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.023231s (num_starts 4; 0.0058s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.L0%0%d_L0%0%d.: 0.023482s (num_starts 7; 0.0034s/start)
wp_pred.apply_trans_funs_simplified.: 0.023866s (num_starts 45; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.024016s (num_starts 4; 0.0060s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.02413s (num_starts 4; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.024166s (num_starts 6; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.024178s (num_starts 6; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.024187s (num_starts 2; 0.0121s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.024194s (num_starts 4; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.024195s (num_starts 2; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.024249s (num_starts 6; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.024263s (num_starts 6; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.024304s (num_starts 4; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.024447s (num_starts 4; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.024547s (num_starts 4; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;memeq-;-trivial.: 0.024578s (num_starts 8; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;memeq-.: 0.024696s (num_starts 8; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);linear;-trivial.: 0.024699s (num_starts 4; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;linear;-trivial.: 0.024724s (num_starts 4; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);linear;-trivial.: 0.024741s (num_starts 4; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.024773s (num_starts 2; 0.0124s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.024778s (num_starts 2; 0.0124s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.024796s (num_starts 2; 0.0124s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.024805s (num_starts 2; 0.0124s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-sizes-are-equal-houdini-guess;-trivial.: 0.024811s (num_starts 2; 0.0124s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.02511s (num_starts 10; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;local-sizes-are-equal-houdini-guess;-trivial.: 0.025328s (num_starts 3; 0.0084s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.025448s (num_starts 1; 0.0254s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.025449s (num_starts 1; 0.0254s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.025458s (num_starts 1; 0.0255s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;abstract-memlabel-asserts-houdini-guess.: 0.025462s (num_starts 1; 0.0255s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.02571s (num_starts 6; 0.0043s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.025787s (num_starts 6; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.025924s (num_starts 3; 0.0086s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;linear;-trivial.: 0.025986s (num_starts 14; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-trivial.: 0.026004s (num_starts 14; 0.0019s/start)
graph_identify_back_edges.: 0.026121s (num_starts 156; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear.: 0.026126s (num_starts 14; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;linear.: 0.026169s (num_starts 14; 0.0019s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.026276s (num_starts 1026; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.026394s (num_starts 1; 0.0264s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.026396s (num_starts 1; 0.0264s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.026405s (num_starts 1; 0.0264s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;abstract-memlabel-asserts-houdini-guess.: 0.026409s (num_starts 1; 0.0264s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 0.026555s (num_starts 7; 0.0038s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.026709s (num_starts 6; 0.0045s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.027413s (num_starts 797; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.027421s (num_starts 1; 0.0274s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.027422s (num_starts 1; 0.0274s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.027432s (num_starts 1; 0.0274s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;abstract-memlabel-asserts-houdini-guess.: 0.027436s (num_starts 1; 0.0274s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.02747s (num_starts 4; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.027518s (num_starts 4; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.02765s (num_starts 4; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.027687s (num_starts 4; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.027709s (num_starts 1; 0.0277s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.027717s (num_starts 1; 0.0277s/start)
graph_identify_natural_loops.: 0.027843s (num_starts 156; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.028175s (num_starts 11; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.028691s (num_starts 2; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-addr-eq-houdini-guess;-trivial.: 0.028715s (num_starts 6; 0.0048s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);-trivial.: 0.028831s (num_starts 7; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-addr-eq-houdini-guess.: 0.028842s (num_starts 6; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-trivial.: 0.029109s (num_starts 14; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;linear;-trivial.: 0.029149s (num_starts 14; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-trivial.: 0.029171s (num_starts 14; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-dst-edgecond-implies-src-edgecond;-trivial.: 0.029304s (num_starts 2; 0.0147s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.029304s (num_starts 2; 0.0147s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;lb-signed;-trivial.: 0.029313s (num_starts 9; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ub-signed;-trivial.: 0.029316s (num_starts 9; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-trivial.: 0.029325s (num_starts 9; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-trivial.: 0.029327s (num_starts 9; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.02939s (num_starts 9; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.029391s (num_starts 9; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ub-signed.: 0.029412s (num_starts 9; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;lb-signed.: 0.029413s (num_starts 9; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-ub-eq-houdini-guess;-trivial.: 0.029777s (num_starts 3; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.030053s (num_starts 3; 0.0100s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.030055s (num_starts 3; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.030089s (num_starts 3; 0.0100s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.030106s (num_starts 4; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.030129s (num_starts 4; 0.0075s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.030136s (num_starts 3; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.03071s (num_starts 5; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.030804s (num_starts 6; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.030816s (num_starts 6; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.030872s (num_starts 6; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.030886s (num_starts 6; 0.0051s/start)
invariant_inference_xfer.sp-below-isp.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.030918s (num_starts 8; 0.0039s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.031419s (num_starts 8; 0.0039s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.031676s (num_starts 8; 0.0040s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.031714s (num_starts 8; 0.0040s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.031763s (num_starts 8; 0.0040s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.031843s (num_starts 8; 0.0040s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.031993s (num_starts 8; 0.0040s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.032046s (num_starts 8; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-trivial.: 0.032321s (num_starts 2; 0.0162s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.032332s (num_starts 8; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.032346s (num_starts 3; 0.0108s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.032367s (num_starts 3; 0.0108s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.032524s (num_starts 8; 0.0041s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.032966s (num_starts 8; 0.0041s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.03366s (num_starts 8; 0.0042s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);-trivial.: 0.033738s (num_starts 5; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.033859s (num_starts 9; 0.0038s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.033894s (num_starts 6; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.033998s (num_starts 9; 0.0038s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned;-trivial.: 0.034215s (num_starts 8; 0.0043s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);-trivial.: 0.034388s (num_starts 8; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned.: 0.034439s (num_starts 8; 0.0043s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.034632s (num_starts 126; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.035029s (num_starts 5; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-trivial.: 0.035418s (num_starts 10; 0.0035s/start)
sort_exprs_and_compute_bv_eqclass.: 0.035985s (num_starts 26; 0.0014s/start)
compute_bv_bool_eqclass.: 0.036253s (num_starts 26; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memeq-;-trivial.: 0.036257s (num_starts 2; 0.0181s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memeq-;-trivial.: 0.036261s (num_starts 2; 0.0181s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memeq-;-trivial.: 0.036265s (num_starts 2; 0.0181s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.036308s (num_starts 6; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.03644s (num_starts 5; 0.0073s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.036452s (num_starts 6; 0.0061s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.036567s (num_starts 6; 0.0061s/start)
expr_represents_llvm_undef.: 0.036597s (num_starts 7039; 0.0000s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.036634s (num_starts 6; 0.0061s/start)
graph_with_guessing_sync_preds.: 0.037144s (num_starts 1686; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L1%1%allocaI1.inductive-invariants.: 0.037288s (num_starts 1; 0.0373s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);-trivial.: 0.037531s (num_starts 9; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);linear;-trivial.: 0.037575s (num_starts 14; 0.0027s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L3%1%allocaI1.inductive-invariants.: 0.037601s (num_starts 1; 0.0376s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);linear;-trivial.: 0.037651s (num_starts 14; 0.0027s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.037796s (num_starts 8; 0.0047s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.038173s (num_starts 6; 0.0064s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L4%1%allocaI1.inductive-invariants.: 0.038246s (num_starts 1; 0.0382s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.038448s (num_starts 3; 0.0128s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.038457s (num_starts 3; 0.0128s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.038478s (num_starts 3; 0.0128s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);-trivial.: 0.038792s (num_starts 11; 0.0035s/start)
compute_vars_reaching_definitions.: 0.038824s (num_starts 2; 0.0194s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.039732s (num_starts 18; 0.0022s/start)
collect_dst_to_src_submap_preds.: 0.039895s (num_starts 1686; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.040341s (num_starts 14; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);linear;-trivial.: 0.040627s (num_starts 6; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);linear;-trivial.: 0.040673s (num_starts 6; 0.0068s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.040694s (num_starts 1; 0.0407s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.04071s (num_starts 1; 0.0407s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.040719s (num_starts 1; 0.0407s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.040894s (num_starts 12; 0.0034s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.04126s (num_starts 8; 0.0052s/start)
tfg::populate_loc_definedness.before_solve.: 0.042053s (num_starts 10; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-trivial.: 0.042714s (num_starts 12; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.042948s (num_starts 12; 0.0036s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.L0%0%d_L0%0%d.: 0.043159s (num_starts 7; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-trivial.: 0.043249s (num_starts 12; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-trivial.: 0.043551s (num_starts 12; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.043786s (num_starts 12; 0.0036s/start)
decide_hoare_triple_helper;per-query-type;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.043801s (num_starts 16; 0.0027s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.044447s (num_starts 6; 0.0074s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.memeq;-trivial.: 0.044454s (num_starts 6; 0.0074s/start)
add_fresh_counterexample_at_pc_and_propagate.Lfor.cond2%1%bbentry_L14%1%bbentry.inductive-invariants.: 0.044571s (num_starts 12; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.044596s (num_starts 1; 0.0446s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.044603s (num_starts 1; 0.0446s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.044607s (num_starts 1; 0.0446s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.memeq.: 0.04461s (num_starts 6; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.044648s (num_starts 1; 0.0446s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.044654s (num_starts 1; 0.0447s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.04467s (num_starts 1; 0.0447s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;-dst-edgecond-implies-src-edgecond.: 0.044674s (num_starts 1; 0.0447s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.045326s (num_starts 3; 0.0151s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.046255s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.memeq;-trivial.: 0.04626s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;exit.memeq;-trivial.: 0.046277s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.memeq;-trivial.: 0.046287s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;sp-below-isp-houdini-guess;-trivial.: 0.04629s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;sp-below-isp-houdini-guess.: 0.046363s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.memeq.: 0.046376s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;exit.memeq.: 0.046391s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.memeq.: 0.046419s (num_starts 6; 0.0077s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.046522s (num_starts 38; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.046924s (num_starts 4; 0.0117s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.047028s (num_starts 4; 0.0118s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.047389s (num_starts 6; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;abstract-memlabel-asserts-houdini-guess.: 0.047462s (num_starts 6; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;memeq-;-trivial.: 0.047485s (num_starts 8; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned.: 0.047884s (num_starts 2; 0.0239s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;lb-unsigned.: 0.047894s (num_starts 2; 0.0239s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-unsigned.: 0.047912s (num_starts 2; 0.0240s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.047978s (num_starts 1; 0.0480s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.047983s (num_starts 1; 0.0480s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.048009s (num_starts 1; 0.0480s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;-dst-edgecond-implies-src-edgecond.: 0.048014s (num_starts 1; 0.0480s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.048311s (num_starts 1; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.048319s (num_starts 1; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.048327s (num_starts 1; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.048331s (num_starts 1; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.048338s (num_starts 1; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;-dst-edgecond-implies-src-edgecond.: 0.048342s (num_starts 1; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.048347s (num_starts 1; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;lb-unsigned.: 0.048353s (num_starts 1; 0.0484s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;linear;-trivial.: 0.048529s (num_starts 8; 0.0061s/start)
find_dominators.: 0.04899s (num_starts 203; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed.: 0.049115s (num_starts 4; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ub-signed.: 0.049129s (num_starts 4; 0.0123s/start)
tfg::populate_loc_definedness.before_initialize.: 0.049158s (num_starts 10; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed.: 0.04916s (num_starts 4; 0.0123s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L6%1%allocaI1.inductive-invariants.: 0.049484s (num_starts 1; 0.0495s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.04966s (num_starts 4; 0.0124s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.050443s (num_starts 10; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.050488s (num_starts 1; 0.0505s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.050495s (num_starts 1; 0.0505s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.050508s (num_starts 1; 0.0505s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-dst-edgecond-implies-src-edgecond.: 0.050577s (num_starts 1; 0.0506s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.05087s (num_starts 1; 0.0509s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.050878s (num_starts 1; 0.0509s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.051448s (num_starts 1; 0.0514s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.051454s (num_starts 1; 0.0515s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.051464s (num_starts 1; 0.0515s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-dst-edgecond-implies-src-edgecond.: 0.051469s (num_starts 1; 0.0515s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.051698s (num_starts 1; 0.0517s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.051703s (num_starts 1; 0.0517s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.05172s (num_starts 1; 0.0517s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;dst_edge_composition_proves_false.: 0.051726s (num_starts 1; 0.0517s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);-trivial.: 0.05181s (num_starts 6; 0.0086s/start)
tfg::populate_loc_definedness.: 0.051812s (num_starts 10; 0.0052s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);linear;-trivial.: 0.053232s (num_starts 7; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);linear;-trivial.: 0.053261s (num_starts 7; 0.0076s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.053525s (num_starts 65; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.053621s (num_starts 16; 0.0034s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 0.053642s (num_starts 16; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess.: 0.053957s (num_starts 16; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054502s (num_starts 1; 0.0545s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054509s (num_starts 1; 0.0545s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.054516s (num_starts 1; 0.0545s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054524s (num_starts 1; 0.0545s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054529s (num_starts 1; 0.0545s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.054544s (num_starts 1; 0.0545s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-dst-edgecond-implies-src-edgecond.: 0.054548s (num_starts 1; 0.0545s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054629s (num_starts 1; 0.0546s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054635s (num_starts 1; 0.0546s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.054644s (num_starts 1; 0.0546s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-dst-edgecond-implies-src-edgecond.: 0.054649s (num_starts 1; 0.0546s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;linear;-trivial.: 0.054722s (num_starts 10; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.054746s (num_starts 10; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054996s (num_starts 1; 0.0550s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.055s (num_starts 1; 0.0550s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.055016s (num_starts 1; 0.0550s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.055152s (num_starts 1; 0.0552s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.055162s (num_starts 1; 0.0552s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-;-trivial.: 0.055319s (num_starts 16; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.055655s (num_starts 1; 0.0557s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.05566s (num_starts 1; 0.0557s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);memeq-.: 0.05566s (num_starts 16; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.055669s (num_starts 1; 0.0557s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-dst-edgecond-implies-src-edgecond.: 0.055675s (num_starts 1; 0.0557s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1.: 0.056478s (num_starts 1; 0.0565s/start)
invariant_inference_xfer.dst-ineq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.05651s (num_starts 8; 0.0071s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.056631s (num_starts 4; 0.0142s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.056725s (num_starts 4; 0.0142s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-trivial.: 0.057014s (num_starts 4; 0.0143s/start)
compute_regions.: 0.057597s (num_starts 156; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.058013s (num_starts 1; 0.0580s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.05802s (num_starts 1; 0.0580s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.059054s (num_starts 6; 0.0098s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.059054s (num_starts 1; 0.0591s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.059064s (num_starts 1; 0.0591s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.059068s (num_starts 1; 0.0591s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);nonarg-locals-iscontiguous-houdini-guess.: 0.059079s (num_starts 1; 0.0591s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;nonarg-locals-iscontiguous-houdini-guess.: 0.059088s (num_starts 1; 0.0591s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);nonarg-locals-iscontiguous-houdini-guess.: 0.059101s (num_starts 1; 0.0591s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1.: 0.059144s (num_starts 1; 0.0591s/start)
operator().computeWP_for_pred_across_ec.: 0.059152s (num_starts 529; 0.0001s/start)
get_unrolled_loop_paths_from.: 0.059258s (num_starts 19; 0.0031s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1.: 0.05938s (num_starts 1; 0.0594s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);-trivial.: 0.059451s (num_starts 13; 0.0046s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.L0%0%d_L0%0%d.: 0.059622s (num_starts 7; 0.0085s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.059759s (num_starts 4; 0.0149s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.059787s (num_starts 1; 0.0598s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.059791s (num_starts 1; 0.0598s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.059808s (num_starts 1; 0.0598s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;lb-unsigned.: 0.059813s (num_starts 1; 0.0598s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.060318s (num_starts 1; 0.0603s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.060323s (num_starts 1; 0.0603s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.060345s (num_starts 1; 0.0603s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;-dst-edgecond-implies-src-edgecond.: 0.060349s (num_starts 1; 0.0603s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06084s (num_starts 1; 0.0608s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.060843s (num_starts 1; 0.0608s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.060875s (num_starts 1; 0.0609s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;lb-unsigned.: 0.060882s (num_starts 1; 0.0609s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.060889s (num_starts 9; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.06131s (num_starts 12; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.061322s (num_starts 1; 0.0613s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.061326s (num_starts 1; 0.0613s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.061345s (num_starts 1; 0.0613s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;-dst-edgecond-implies-src-edgecond.: 0.06135s (num_starts 1; 0.0614s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.06141s (num_starts 12; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.061433s (num_starts 1; 0.0614s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.061439s (num_starts 1; 0.0614s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.061459s (num_starts 1; 0.0615s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;-dst-edgecond-implies-src-edgecond.: 0.061464s (num_starts 1; 0.0615s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.061838s (num_starts 1; 0.0618s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.061843s (num_starts 1; 0.0618s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.06185s (num_starts 1; 0.0619s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.061865s (num_starts 1; 0.0619s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.061872s (num_starts 1; 0.0619s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.061877s (num_starts 1; 0.0619s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.061887s (num_starts 1; 0.0619s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);linear;-trivial.: 0.06231s (num_starts 11; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;linear;-trivial.: 0.062362s (num_starts 11; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);linear;-trivial.: 0.062398s (num_starts 11; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.062438s (num_starts 1; 0.0624s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.062441s (num_starts 1; 0.0624s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1.: 0.062454s (num_starts 1; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;lb-unsigned.: 0.062466s (num_starts 3; 0.0208s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.062468s (num_starts 1; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;-dst-edgecond-implies-src-edgecond.: 0.062473s (num_starts 1; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;linear;-trivial.: 0.062496s (num_starts 12; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-trivial.: 0.062514s (num_starts 12; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;linear;-trivial.: 0.062618s (num_starts 10; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.062641s (num_starts 10; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-trivial.: 0.062986s (num_starts 4; 0.0157s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063123s (num_starts 1; 0.0631s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063131s (num_starts 1; 0.0631s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063136s (num_starts 1; 0.0631s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.063146s (num_starts 1; 0.0631s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063148s (num_starts 1; 0.0631s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063157s (num_starts 1; 0.0632s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063162s (num_starts 1; 0.0632s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.063165s (num_starts 1; 0.0632s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.063172s (num_starts 1; 0.0632s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.063189s (num_starts 1; 0.0632s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063225s (num_starts 1; 0.0632s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063231s (num_starts 1; 0.0632s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.06324s (num_starts 1; 0.0632s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063338s (num_starts 1; 0.0633s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063342s (num_starts 1; 0.0633s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.06336s (num_starts 1; 0.0634s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;-dst-edgecond-implies-src-edgecond.: 0.063366s (num_starts 1; 0.0634s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.063692s (num_starts 16; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.064592s (num_starts 1; 0.0646s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.064601s (num_starts 1; 0.0646s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.064607s (num_starts 1; 0.0646s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.064618s (num_starts 1; 0.0646s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.064636s (num_starts 1; 0.0646s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.065126s (num_starts 1; 0.0651s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06513s (num_starts 1; 0.0651s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.065164s (num_starts 1; 0.0652s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.065246s (num_starts 16; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.065377s (num_starts 1; 0.0654s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.065402s (num_starts 1; 0.0654s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.065579s (num_starts 16; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.065612s (num_starts 1; 0.0656s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.065622s (num_starts 1; 0.0656s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06569s (num_starts 1; 0.0657s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.065695s (num_starts 1; 0.0657s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.065714s (num_starts 1; 0.0657s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;lb-unsigned.: 0.06572s (num_starts 1; 0.0657s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.066126s (num_starts 4; 0.0165s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.066194s (num_starts 6; 0.0110s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memlabel-is-absent-houdini-guess.: 0.066319s (num_starts 2; 0.0332s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;memlabel-is-absent-houdini-guess.: 0.066399s (num_starts 2; 0.0332s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066518s (num_starts 1; 0.0665s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066528s (num_starts 1; 0.0665s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066536s (num_starts 1; 0.0665s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.066548s (num_starts 1; 0.0665s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.066555s (num_starts 12; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.066567s (num_starts 1; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066897s (num_starts 1; 0.0669s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.066918s (num_starts 12; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.066922s (num_starts 1; 0.0669s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067075s (num_starts 1; 0.0671s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067084s (num_starts 1; 0.0671s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067089s (num_starts 1; 0.0671s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.067101s (num_starts 1; 0.0671s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.067121s (num_starts 1; 0.0671s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.067494s (num_starts 1; 0.0675s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067535s (num_starts 1; 0.0675s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067544s (num_starts 1; 0.0675s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067551s (num_starts 1; 0.0676s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.067564s (num_starts 1; 0.0676s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.06758s (num_starts 1; 0.0676s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.067627s (num_starts 2209; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067701s (num_starts 1; 0.0677s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.067739s (num_starts 1; 0.0677s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memlabel-is-absent-houdini-guess.: 0.0678s (num_starts 2; 0.0339s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068291s (num_starts 1; 0.0683s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068295s (num_starts 1; 0.0683s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.068333s (num_starts 1; 0.0683s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1.: 0.068477s (num_starts 1; 0.0685s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.068558s (num_starts 4; 0.0171s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.068616s (num_starts 3; 0.0229s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.068667s (num_starts 4; 0.0172s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06888s (num_starts 1; 0.0689s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06889s (num_starts 1; 0.0689s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);mem-allocs-equality.: 0.068919s (num_starts 1; 0.0689s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06892s (num_starts 1; 0.0689s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068928s (num_starts 1; 0.0689s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068933s (num_starts 1; 0.0689s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);mem-allocs-equality.: 0.068936s (num_starts 1; 0.0689s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.068942s (num_starts 1; 0.0689s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.06896s (num_starts 1; 0.0690s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069343s (num_starts 1; 0.0693s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.06938s (num_starts 1; 0.0694s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069463s (num_starts 1; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069468s (num_starts 1; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06947s (num_starts 1; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069476s (num_starts 1; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.069492s (num_starts 1; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;-dst-edgecond-implies-src-edgecond.: 0.069497s (num_starts 1; 0.0695s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070015s (num_starts 1; 0.0700s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070038s (num_starts 1; 0.0700s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memlabel-is-absent-houdini-guess.: 0.070054s (num_starts 2; 0.0350s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.0701s (num_starts 1; 0.0701s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070108s (num_starts 1; 0.0701s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070113s (num_starts 1; 0.0701s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.070124s (num_starts 1; 0.0701s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.070141s (num_starts 1; 0.0701s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.070327s (num_starts 1; 0.0703s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070369s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070378s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070383s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.070402s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-is-aligned.: 0.070408s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.070418s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070577s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.0706s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;local-eq-lsprel-guess-houdini-guess.: 0.070615s (num_starts 2; 0.0353s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070721s (num_starts 1; 0.0707s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.070757s (num_starts 1; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.070784s (num_starts 8; 0.0088s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.070897s (num_starts 1; 0.0709s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070932s (num_starts 1; 0.0709s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070952s (num_starts 1; 0.0710s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070956s (num_starts 1; 0.0710s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.070976s (num_starts 1; 0.0710s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-neq-zero.: 0.070982s (num_starts 1; 0.0710s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.07099s (num_starts 1; 0.0710s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;memlabel-is-absent-houdini-guess.: 0.071259s (num_starts 2; 0.0356s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.071322s (num_starts 1; 0.0713s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L7%1%allocaI1.inductive-invariants.: 0.071464s (num_starts 2; 0.0357s/start)
removeMostPromising.: 0.07162s (num_starts 94; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071725s (num_starts 1; 0.0717s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;mem-allocs-equality.: 0.071746s (num_starts 4; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07175s (num_starts 1; 0.0717s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072005s (num_starts 1; 0.0720s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072012s (num_starts 1; 0.0720s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.072031s (num_starts 1; 0.0720s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-addr-is-aligned.: 0.07204s (num_starts 1; 0.0720s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.072069s (num_starts 1; 0.0721s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072112s (num_starts 1; 0.0721s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072129s (num_starts 1; 0.0721s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.072168s (num_starts 1; 0.0722s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.072185s (num_starts 1; 0.0722s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072479s (num_starts 1; 0.0725s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072485s (num_starts 1; 0.0725s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.072519s (num_starts 1; 0.0725s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072522s (num_starts 1; 0.0725s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07253s (num_starts 1; 0.0725s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.07255s (num_starts 1; 0.0726s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-addr-neq-zero.: 0.072556s (num_starts 1; 0.0726s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072643s (num_starts 1; 0.0726s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072658s (num_starts 1; 0.0727s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);mem-allocs-equality.: 0.072694s (num_starts 1; 0.0727s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.072695s (num_starts 1; 0.0727s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.072703s (num_starts 12; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);mem-allocs-equality.: 0.072711s (num_starts 1; 0.0727s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072908s (num_starts 1; 0.0729s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07292s (num_starts 1; 0.0729s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072926s (num_starts 1; 0.0729s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.072964s (num_starts 1; 0.0730s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.072965s (num_starts 4; 0.0182s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.072981s (num_starts 1; 0.0730s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.072996s (num_starts 12; 0.0061s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.073174s (num_starts 1; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;linear;-trivial.: 0.073204s (num_starts 10; 0.0073s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073212s (num_starts 1; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.073221s (num_starts 10; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073226s (num_starts 1; 0.0732s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073402s (num_starts 1; 0.0734s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073413s (num_starts 1; 0.0734s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073419s (num_starts 1; 0.0734s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.07343s (num_starts 1; 0.0734s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.073447s (num_starts 1; 0.0734s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.073474s (num_starts 1; 0.0735s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.073538s (num_starts 1; 0.0735s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;abstract-memlabel-asserts-houdini-guess.: 0.073719s (num_starts 2; 0.0369s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074237s (num_starts 1; 0.0742s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074244s (num_starts 1; 0.0742s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074244s (num_starts 1; 0.0742s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074252s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074258s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.074267s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;-dst-edgecond-implies-src-edgecond.: 0.07427s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074289s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.074299s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074301s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;nonarg-locals-iscontiguous-houdini-guess.: 0.074306s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074309s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.074319s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.074334s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-neq-zero.: 0.074338s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.074347s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074348s (num_starts 1; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074362s (num_starts 1; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);mem-allocs-equality.: 0.074399s (num_starts 1; 0.0744s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);mem-allocs-equality.: 0.074419s (num_starts 1; 0.0744s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.074534s (num_starts 1; 0.0745s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.074846s (num_starts 1; 0.0748s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.074944s (num_starts 1; 0.0749s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075011s (num_starts 1; 0.0750s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075024s (num_starts 1; 0.0750s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075029s (num_starts 1; 0.0750s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075032s (num_starts 1; 0.0750s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075043s (num_starts 1; 0.0750s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075049s (num_starts 1; 0.0750s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.075064s (num_starts 1; 0.0751s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.075079s (num_starts 1; 0.0751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.07508s (num_starts 1; 0.0751s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-neq-zero.: 0.075085s (num_starts 1; 0.0751s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.075094s (num_starts 1; 0.0751s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;abstract-memlabel-asserts-houdini-guess.: 0.075126s (num_starts 2; 0.0376s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.075573s (num_starts 1; 0.0756s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;nonarg-locals-iscontiguous-houdini-guess.: 0.075774s (num_starts 3; 0.0253s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;linear;-trivial.: 0.075902s (num_starts 17; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.075935s (num_starts 17; 0.0045s/start)
cg_src_dst_tfg_copy.: 0.076005s (num_starts 7; 0.0109s/start)
get_sprel_map_pair.: 0.076009s (num_starts 1664; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memlabel-is-absent-houdini-guess.: 0.076031s (num_starts 6; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076254s (num_starts 1; 0.0763s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076534s (num_starts 1; 0.0765s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.076554s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076858s (num_starts 1; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;linear;-trivial.: 0.076862s (num_starts 12; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076872s (num_starts 1; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07688s (num_starts 1; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-trivial.: 0.076883s (num_starts 12; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.076918s (num_starts 1; 0.0769s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.076933s (num_starts 1; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;abstract-memlabel-asserts-houdini-guess.: 0.077077s (num_starts 2; 0.0385s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077307s (num_starts 1; 0.0773s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077311s (num_starts 1; 0.0773s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.077338s (num_starts 1; 0.0773s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.077349s (num_starts 1; 0.0773s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.0774s (num_starts 1; 0.0774s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077411s (num_starts 1; 0.0774s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077417s (num_starts 1; 0.0774s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.077436s (num_starts 1; 0.0774s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-region-was-stack.: 0.077441s (num_starts 1; 0.0774s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.077443s (num_starts 1; 0.0774s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.077447s (num_starts 1; 0.0774s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07758s (num_starts 1; 0.0776s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077589s (num_starts 1; 0.0776s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077595s (num_starts 1; 0.0776s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.077606s (num_starts 1; 0.0776s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.077625s (num_starts 1; 0.0776s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077676s (num_starts 1; 0.0777s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077687s (num_starts 1; 0.0777s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077693s (num_starts 1; 0.0777s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.077714s (num_starts 1; 0.0777s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-no-overflow.: 0.07772s (num_starts 1; 0.0777s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.077729s (num_starts 1; 0.0777s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077769s (num_starts 1; 0.0778s/start)
decide_hoare_triple_helper;per-query-type;sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077778s (num_starts 1; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077784s (num_starts 1; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077793s (num_starts 1; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-ml-lb-ineq-houdini-guess.: 0.077831s (num_starts 1; 0.0778s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-ml-lb-ineq-houdini-guess.: 0.077847s (num_starts 1; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;local-sizes-are-equal-houdini-guess.: 0.077964s (num_starts 2; 0.0390s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.078357s (num_starts 1; 0.0784s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078376s (num_starts 1; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078386s (num_starts 1; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078391s (num_starts 1; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.078411s (num_starts 1; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-geq-sp.: 0.078417s (num_starts 1; 0.0784s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.078428s (num_starts 1; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078595s (num_starts 1; 0.0786s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078636s (num_starts 1; 0.0786s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07865s (num_starts 1; 0.0786s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078656s (num_starts 1; 0.0787s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.078682s (num_starts 1; 0.0787s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-is-aligned.: 0.078686s (num_starts 1; 0.0787s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.078697s (num_starts 1; 0.0787s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.078808s (num_starts 2; 0.0394s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07915s (num_starts 1; 0.0791s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079167s (num_starts 1; 0.0792s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);mem-allocs-equality.: 0.0792s (num_starts 1; 0.0792s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);mem-allocs-equality.: 0.079217s (num_starts 1; 0.0792s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.079449s (num_starts 435; 0.0002s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.079644s (num_starts 1; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079888s (num_starts 1; 0.0799s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079896s (num_starts 1; 0.0799s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.079916s (num_starts 1; 0.0799s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-addr-no-overflow.: 0.079923s (num_starts 1; 0.0799s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079971s (num_starts 1; 0.0800s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.079999s (num_starts 1; 0.0800s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;abstract-memlabel-asserts-houdini-guess.: 0.080014s (num_starts 2; 0.0400s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080098s (num_starts 1; 0.0801s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08013s (num_starts 1; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080139s (num_starts 1; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080144s (num_starts 1; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.080168s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-neq-zero.: 0.080174s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.080184s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080226s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080236s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080237s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080241s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.080265s (num_starts 1; 0.0803s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-geq-sp.: 0.08027s (num_starts 1; 0.0803s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.08028s (num_starts 1; 0.0803s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-ub-ineq-houdini-guess.: 0.080327s (num_starts 2; 0.0402s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);-trivial.: 0.080454s (num_starts 14; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08056s (num_starts 1; 0.0806s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080568s (num_starts 1; 0.0806s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.080587s (num_starts 1; 0.0806s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-region-was-stack.: 0.080592s (num_starts 1; 0.0806s/start)
do_ssa_transformation.: 0.08075s (num_starts 2; 0.0404s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);-trivial.: 0.08154s (num_starts 24; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.081701s (num_starts 12; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.081793s (num_starts 12; 0.0068s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.081798s (num_starts 2081; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-.: 0.08193s (num_starts 12; 0.0068s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-.: 0.081985s (num_starts 12; 0.0068s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);-trivial.: 0.082065s (num_starts 18; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08252s (num_starts 1; 0.0825s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.082543s (num_starts 1; 0.0825s/start)
populate_simplified_to_state.: 0.082835s (num_starts 111; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.083555s (num_starts 24; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083575s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083586s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083593s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.083628s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.083639s (num_starts 1; 0.0836s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.083891s (num_starts 6; 0.0140s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.083952s (num_starts 1; 0.0840s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.084046s (num_starts 11; 0.0076s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.08408s (num_starts 24; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084848s (num_starts 1; 0.0848s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.08486s (num_starts 28; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084861s (num_starts 1; 0.0849s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084867s (num_starts 1; 0.0849s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.084895s (num_starts 1; 0.0849s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-neq-zero.: 0.084901s (num_starts 1; 0.0849s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.084912s (num_starts 1; 0.0849s/start)
aliasing_constraints.convert_to_expr.: 0.085161s (num_starts 797; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.085205s (num_starts 16; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08547s (num_starts 1; 0.0855s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085474s (num_starts 1; 0.0855s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.085488s (num_starts 1; 0.0855s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.085566s (num_starts 16; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;abstract-memlabel-asserts-houdini-guess.: 0.085654s (num_starts 2; 0.0428s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.08591s (num_starts 26; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;sp-ml-lb-ineq-houdini-guess.: 0.086102s (num_starts 3; 0.0287s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086975s (num_starts 1; 0.0870s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086997s (num_starts 1; 0.0870s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087s (num_starts 1; 0.0870s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.087025s (num_starts 1; 0.0870s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-is-aligned.: 0.087031s (num_starts 1; 0.0870s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.087041s (num_starts 1; 0.0870s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.087122s (num_starts 2081; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;local-eq-lsprel-guess-houdini-guess.: 0.087291s (num_starts 2; 0.0436s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;memeq-;-trivial.: 0.087426s (num_starts 10; 0.0087s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.087832s (num_starts 27; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memeq-.: 0.088161s (num_starts 5; 0.0176s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memeq-.: 0.088204s (num_starts 5; 0.0176s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.088403s (num_starts 4; 0.0221s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.088502s (num_starts 4; 0.0221s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memeq-.: 0.08868s (num_starts 5; 0.0177s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088692s (num_starts 1; 0.0887s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088705s (num_starts 1; 0.0887s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088712s (num_starts 1; 0.0887s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memeq-.: 0.088725s (num_starts 5; 0.0177s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.08874s (num_starts 1; 0.0887s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-geq-sp.: 0.088746s (num_starts 1; 0.0887s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.088755s (num_starts 1; 0.0888s/start)
corr_graph_enumerate_correlations.: 0.08883s (num_starts 20; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.088903s (num_starts 16; 0.0056s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089148s (num_starts 1; 0.0891s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089159s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089163s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08917s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089182s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089188s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.089195s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-geq-sp.: 0.089201s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.089212s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.089216s (num_starts 16; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.089219s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memeq-.: 0.08922s (num_starts 5; 0.0178s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-is-aligned.: 0.089226s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.089238s (num_starts 1; 0.0892s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memeq-.: 0.089265s (num_starts 5; 0.0179s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.0897s (num_starts 1; 0.0897s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089712s (num_starts 1; 0.0897s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089717s (num_starts 1; 0.0897s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.089747s (num_starts 1; 0.0897s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-geq-sp.: 0.089754s (num_starts 1; 0.0898s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.089764s (num_starts 1; 0.0898s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089813s (num_starts 1; 0.0898s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089818s (num_starts 1; 0.0898s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.089835s (num_starts 1; 0.0898s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;lb-unsigned.: 0.089842s (num_starts 1; 0.0898s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.090497s (num_starts 1; 0.0905s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.090509s (num_starts 1; 0.0905s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.090515s (num_starts 1; 0.0905s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.090548s (num_starts 1; 0.0905s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-is-aligned.: 0.090556s (num_starts 1; 0.0906s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.090568s (num_starts 1; 0.0906s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.090586s (num_starts 4; 0.0226s/start)
decide_hoare_triple_helper;per-query-type;exit.memeq;-trivial.: 0.090726s (num_starts 12; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;linear;-trivial.: 0.090866s (num_starts 21; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memeq-.: 0.090949s (num_starts 5; 0.0182s/start)
decide_hoare_triple_helper;per-query-type;exit.memeq.: 0.091s (num_starts 12; 0.0076s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memeq-.: 0.091008s (num_starts 5; 0.0182s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.0914s (num_starts 2; 0.0457s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.091461s (num_starts 20; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;lb-unsigned.: 0.092164s (num_starts 2; 0.0461s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;linear;-trivial.: 0.093644s (num_starts 22; 0.0043s/start)
invariant_inference_xfer.src-branches-const-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.094203s (num_starts 9; 0.0105s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.095243s (num_starts 1; 0.0952s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.095255s (num_starts 1; 0.0953s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.095262s (num_starts 1; 0.0953s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-below-isp-houdini-guess.: 0.095273s (num_starts 1; 0.0953s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-below-isp-houdini-guess.: 0.09529s (num_starts 1; 0.0953s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-eq-houdini-guess;-trivial.: 0.096281s (num_starts 17; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;sp-below-isp-houdini-guess.: 0.096868s (num_starts 2; 0.0484s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097173s (num_starts 1; 0.0972s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097191s (num_starts 1; 0.0972s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);mem-allocs-equality.: 0.097201s (num_starts 1; 0.0972s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);mem-allocs-equality.: 0.097214s (num_starts 1; 0.0972s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098764s (num_starts 1; 0.0988s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.09877s (num_starts 1; 0.0988s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;outgoing_edges_cover_all_possibilities.;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098776s (num_starts 1; 0.0988s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098783s (num_starts 1; 0.0988s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.098809s (num_starts 1; 0.0988s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-dst-edgecond-implies-src-edgecond.: 0.098819s (num_starts 3; 0.0329s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.098825s (num_starts 1; 0.0988s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;linear;-trivial.: 0.099032s (num_starts 17; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.09906s (num_starts 17; 0.0058s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.099432s (num_starts 10; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.099558s (num_starts 1; 0.0996s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.099562s (num_starts 1; 0.0996s/start)
construct_linear_combination_exprs.: 0.099566s (num_starts 5929; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.099582s (num_starts 1; 0.0996s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;lb-unsigned.: 0.09959s (num_starts 1; 0.0996s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;abstract-memlabel-asserts-houdini-guess.: 0.099771s (num_starts 6; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.101096s (num_starts 3; 0.0337s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);linear;-trivial.: 0.101429s (num_starts 13; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);linear;-trivial.: 0.101524s (num_starts 13; 0.0078s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101607s (num_starts 1; 0.1016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101633s (num_starts 1; 0.1016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101641s (num_starts 1; 0.1016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-below-isp-houdini-guess.: 0.101652s (num_starts 1; 0.1017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;outgoing_edges_cover_all_possibilities..: 0.101655s (num_starts 4; 0.0254s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-below-isp-houdini-guess.: 0.101669s (num_starts 1; 0.1017s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.101669s (num_starts 4; 0.0254s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.102242s (num_starts 1; 0.1022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.102252s (num_starts 1; 0.1023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);mem-allocs-equality.: 0.102261s (num_starts 1; 0.1023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);mem-allocs-equality.: 0.102277s (num_starts 1; 0.1023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.102827s (num_starts 3; 0.0343s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-below-isp-houdini-guess.: 0.103342s (num_starts 2; 0.0517s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);-trivial.: 0.104646s (num_starts 41; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.104911s (num_starts 3; 0.0350s/start)
populate_transitive_closure.: 0.105728s (num_starts 278; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;linear;-trivial.: 0.105765s (num_starts 14; 0.0076s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.105932s (num_starts 1; 0.1059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.10595s (num_starts 1; 0.1060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);mem-allocs-equality.: 0.10597s (num_starts 1; 0.1060s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);mem-allocs-equality.: 0.105986s (num_starts 1; 0.1060s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.106092s (num_starts 31; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;abstract-memlabel-asserts-houdini-guess.: 0.107254s (num_starts 4; 0.0268s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.107358s (num_starts 1; 0.1074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.107365s (num_starts 1; 0.1074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.107369s (num_starts 1; 0.1074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);mem-allocs-equality.: 0.107379s (num_starts 1; 0.1074s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);mem-allocs-equality.: 0.107393s (num_starts 1; 0.1074s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.107606s (num_starts 1; 0.1076s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.107618s (num_starts 1; 0.1076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.107625s (num_starts 1; 0.1076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.107654s (num_starts 1; 0.1077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-region-was-stack.: 0.10766s (num_starts 1; 0.1077s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.107668s (num_starts 1; 0.1077s/start)
generate_aliasing_constraints_from_expr.: 0.107888s (num_starts 23203; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.108438s (num_starts 1; 0.1084s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.108451s (num_starts 1; 0.1085s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.108458s (num_starts 1; 0.1085s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.108486s (num_starts 1; 0.1085s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-no-overflow.: 0.108492s (num_starts 1; 0.1085s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.1085s (num_starts 1; 0.1085s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.108682s (num_starts 1; 0.1087s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.108698s (num_starts 1; 0.1087s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.108705s (num_starts 1; 0.1087s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.10871s (num_starts 1; 0.1087s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.108732s (num_starts 1; 0.1087s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.108735s (num_starts 1; 0.1087s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-region-was-stack.: 0.10874s (num_starts 1; 0.1087s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);mem-allocs-equality.: 0.108744s (num_starts 1; 0.1087s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.108748s (num_starts 1; 0.1087s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);mem-allocs-equality.: 0.108756s (num_starts 1; 0.1088s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.108977s (num_starts 3; 0.0363s/start)
create_closure_matrix.: 0.109527s (num_starts 819; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;mem-allocs-equality.: 0.110681s (num_starts 2; 0.0553s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.111311s (num_starts 28; 0.0040s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.11181s (num_starts 24; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.112474s (num_starts 2; 0.0562s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear.: 0.112735s (num_starts 13; 0.0087s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113222s (num_starts 2; 0.0566s/start)
decide_hoare_triple_helper;per-query-type;memlabel-is-absent-houdini-guess;-trivial.: 0.115013s (num_starts 32; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.115151s (num_starts 1; 0.1152s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.11516s (num_starts 1; 0.1152s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.115165s (num_starts 1; 0.1152s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.115188s (num_starts 1; 0.1152s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-region-was-stack.: 0.115191s (num_starts 1; 0.1152s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.115198s (num_starts 1; 0.1152s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.115251s (num_starts 2; 0.0576s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed.: 0.115391s (num_starts 3; 0.0385s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.115601s (num_starts 2151; 0.0001s/start)
populate_simplified_assets.: 0.116597s (num_starts 222; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.116937s (num_starts 1; 0.1169s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.116945s (num_starts 1; 0.1169s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved.: 0.116991s (num_starts 1; 0.1170s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;exit.sp-preserved.: 0.116997s (num_starts 1; 0.1170s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.117541s (num_starts 2; 0.0588s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.11755s (num_starts 2; 0.0588s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.117592s (num_starts 2; 0.0588s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;-dst-edgecond-implies-src-edgecond.: 0.1176s (num_starts 2; 0.0588s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.117748s (num_starts 1; 0.1177s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.117752s (num_starts 1; 0.1178s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.117761s (num_starts 1; 0.1178s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned.: 0.1178s (num_starts 3; 0.0393s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1.: 0.120247s (num_starts 3; 0.0401s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.12058s (num_starts 2; 0.0603s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.120624s (num_starts 2; 0.0603s/start)
decide_hoare_triple_helper;per-query-type;mem-allocs-equality;-trivial.: 0.120895s (num_starts 28; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.12107s (num_starts 2; 0.0605s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;linear;-trivial.: 0.121408s (num_starts 17; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.121437s (num_starts 17; 0.0071s/start)
decide_hoare_triple_helper;per-query-type;sp-ml-lb-ineq-houdini-guess.: 0.121888s (num_starts 17; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.122562s (num_starts 2; 0.0613s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.122603s (num_starts 2; 0.0613s/start)
src_tfg_counter_example_translate_on_edge_composition.delta2.: 0.12279s (num_starts 70; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed.: 0.12324s (num_starts 4; 0.0308s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.12333s (num_starts 1; 0.1233s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.123367s (num_starts 1; 0.1234s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.123373s (num_starts 1; 0.1234s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-below-isp-houdini-guess.: 0.123385s (num_starts 1; 0.1234s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-below-isp-houdini-guess.: 0.123406s (num_starts 1; 0.1234s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.123587s (num_starts 2; 0.0618s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.124388s (num_starts 17; 0.0073s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.124589s (num_starts 1; 0.1246s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.124602s (num_starts 1; 0.1246s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.124608s (num_starts 1; 0.1246s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.124636s (num_starts 1; 0.1246s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.124642s (num_starts 1; 0.1246s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.124648s (num_starts 1; 0.1246s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-no-overflow.: 0.124648s (num_starts 1; 0.1246s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.124653s (num_starts 1; 0.1247s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.124658s (num_starts 1; 0.1247s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.124679s (num_starts 1; 0.1247s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-no-overflow.: 0.124684s (num_starts 1; 0.1247s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.124695s (num_starts 1; 0.1247s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.125045s (num_starts 2; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.12514s (num_starts 2; 0.0626s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);-trivial.: 0.125408s (num_starts 20; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-below-isp-houdini-guess.: 0.126503s (num_starts 2; 0.0633s/start)
decide_hoare_triple_helper;per-query-type;local-sizes-are-equal-houdini-guess;-trivial.: 0.126679s (num_starts 24; 0.0053s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.12689s (num_starts 1; 0.1269s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.126902s (num_starts 1; 0.1269s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.126907s (num_starts 1; 0.1269s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-below-isp-houdini-guess.: 0.126918s (num_starts 1; 0.1269s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-below-isp-houdini-guess.: 0.126938s (num_starts 1; 0.1269s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.127011s (num_starts 1; 0.1270s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.12702s (num_starts 1; 0.1270s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.12703s (num_starts 1; 0.1270s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.127391s (num_starts 2; 0.0637s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.128127s (num_starts 3; 0.0427s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.12848s (num_starts 1; 0.1285s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.128492s (num_starts 1; 0.1285s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.1285s (num_starts 1; 0.1285s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-below-isp-houdini-guess.: 0.128512s (num_starts 1; 0.1285s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-below-isp-houdini-guess.: 0.128531s (num_starts 1; 0.1285s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;sp-below-isp-houdini-guess.: 0.12872s (num_starts 2; 0.0644s/start)
decide_hoare_triple_helper;per-query-type;sp-below-isp-houdini-guess;-trivial.: 0.129642s (num_starts 28; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.12966s (num_starts 3; 0.0432s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.130175s (num_starts 8; 0.0163s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-below-isp-houdini-guess.: 0.131087s (num_starts 2; 0.0655s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.132057s (num_starts 2; 0.0660s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-addr-eq-houdini-guess;-trivial.: 0.132348s (num_starts 34; 0.0039s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-addr-eq-houdini-guess.: 0.133189s (num_starts 34; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.133913s (num_starts 3; 0.0446s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ub-unsigned;-trivial.: 0.136669s (num_starts 13; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-trivial.: 0.136681s (num_starts 13; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.136866s (num_starts 2; 0.0684s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.136877s (num_starts 2; 0.0684s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.136949s (num_starts 2; 0.0685s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.137204s (num_starts 2; 0.0686s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.138381s (num_starts 3; 0.0461s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.138856s (num_starts 2; 0.0694s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.138908s (num_starts 2; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.138932s (num_starts 2; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.138967s (num_starts 2; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.139042s (num_starts 2; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;mem-allocs-equality.: 0.139241s (num_starts 6; 0.0232s/start)
expr_linear_relation_holds::visit.var.: 0.139952s (num_starts 7388; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;memeq-;-trivial.: 0.140012s (num_starts 20; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.140143s (num_starts 2; 0.0701s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.140233s (num_starts 2; 0.0701s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.141145s (num_starts 1; 0.1411s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.141152s (num_starts 1; 0.1412s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.141155s (num_starts 1; 0.1412s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.141166s (num_starts 1; 0.1412s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-eq-houdini-guess.: 0.14117s (num_starts 1; 0.1412s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.141175s (num_starts 1; 0.1412s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.141233s (num_starts 2; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.141241s (num_starts 2; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.141329s (num_starts 2; 0.0707s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.141503s (num_starts 2; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.141518s (num_starts 2; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.141593s (num_starts 2; 0.0708s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.142568s (num_starts 625; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.143856s (num_starts 2; 0.0719s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.143864s (num_starts 2; 0.0719s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.1439s (num_starts 2; 0.0720s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-region-was-stack.: 0.143906s (num_starts 2; 0.0720s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144164s (num_starts 1; 0.1442s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144176s (num_starts 1; 0.1442s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.144188s (num_starts 1; 0.1442s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.144199s (num_starts 1; 0.1442s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144608s (num_starts 2; 0.0723s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.144679s (num_starts 2; 0.0723s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144737s (num_starts 1; 0.1447s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memeq-;-trivial.: 0.144747s (num_starts 16; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144749s (num_starts 1; 0.1447s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144754s (num_starts 1; 0.1448s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.144765s (num_starts 1; 0.1448s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-eq-houdini-guess.: 0.144769s (num_starts 1; 0.1448s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.144774s (num_starts 1; 0.1448s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear.: 0.145877s (num_starts 6; 0.0243s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146133s (num_starts 2; 0.0731s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146145s (num_starts 2; 0.0731s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.146225s (num_starts 2; 0.0731s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146722s (num_starts 2; 0.0734s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.14673s (num_starts 2; 0.0734s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.146769s (num_starts 2; 0.0734s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-region-was-stack.: 0.146778s (num_starts 2; 0.0734s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146897s (num_starts 1; 0.1469s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146898s (num_starts 1; 0.1469s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.1469s (num_starts 1; 0.1469s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);false-predicate.: 0.146909s (num_starts 1; 0.1469s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;false-predicate.: 0.146914s (num_starts 1; 0.1469s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);false-predicate.: 0.146923s (num_starts 1; 0.1469s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147538s (num_starts 2; 0.0738s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147547s (num_starts 2; 0.0738s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.147586s (num_starts 2; 0.0738s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-addr-neq-zero.: 0.147594s (num_starts 2; 0.0738s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147663s (num_starts 2; 0.0738s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147887s (num_starts 1; 0.1479s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.14789s (num_starts 1; 0.1479s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147892s (num_starts 1; 0.1479s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147911s (num_starts 2; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);false-predicate.: 0.147912s (num_starts 1; 0.1479s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147917s (num_starts 2; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;false-predicate.: 0.147919s (num_starts 1; 0.1479s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);false-predicate.: 0.14793s (num_starts 1; 0.1479s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.147958s (num_starts 2; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-neq-zero.: 0.147971s (num_starts 2; 0.0740s/start)
src_tfg_counter_example_translate_on_edge_composition.delta3.: 0.148471s (num_starts 70; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.148667s (num_starts 6; 0.0248s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.148793s (num_starts 2; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.148867s (num_starts 2; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149163s (num_starts 2; 0.0746s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149171s (num_starts 2; 0.0746s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.149213s (num_starts 2; 0.0746s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-addr-is-aligned.: 0.149224s (num_starts 2; 0.0746s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149317s (num_starts 2; 0.0747s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149325s (num_starts 2; 0.0747s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.149405s (num_starts 2; 0.0747s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.149439s (num_starts 162; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149774s (num_starts 2; 0.0749s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.149854s (num_starts 2; 0.0749s/start)
interesting_wp_exprs_apply_trans_funs.: 0.150148s (num_starts 162; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.150513s (num_starts 1; 0.1505s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.150524s (num_starts 1; 0.1505s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.150529s (num_starts 1; 0.1505s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.15056s (num_starts 1; 0.1506s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-no-overflow.: 0.150567s (num_starts 1; 0.1506s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.150578s (num_starts 1; 0.1506s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152122s (num_starts 3; 0.0507s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152129s (num_starts 3; 0.0507s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.152171s (num_starts 3; 0.0507s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;lb-signed.: 0.152184s (num_starts 3; 0.0507s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-trivial.: 0.152262s (num_starts 10; 0.0152s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152358s (num_starts 3; 0.0508s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152366s (num_starts 3; 0.0508s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.152412s (num_starts 3; 0.0508s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ub-unsigned.: 0.152422s (num_starts 3; 0.0508s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152587s (num_starts 1; 0.1526s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152589s (num_starts 1; 0.1526s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152591s (num_starts 1; 0.1526s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate.: 0.152603s (num_starts 1; 0.1526s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;false-predicate.: 0.152608s (num_starts 1; 0.1526s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152809s (num_starts 2; 0.0764s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.152849s (num_starts 2; 0.0764s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;local-eq-lsprel-guess-houdini-guess.: 0.152859s (num_starts 6; 0.0255s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153068s (num_starts 2; 0.0765s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153072s (num_starts 2; 0.0765s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153223s (num_starts 2; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.15341s (num_starts 2; 0.0767s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153422s (num_starts 2; 0.0767s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-trivial.: 0.153452s (num_starts 16; 0.0096s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.153505s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153513s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-ub-eq-houdini-guess.: 0.153783s (num_starts 3; 0.0513s/start)
smallest_point_cover_arr.recompute_preds_for_points.: 0.153818s (num_starts 2532; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.154559s (num_starts 3; 0.0515s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.15457s (num_starts 3; 0.0515s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.154597s (num_starts 2; 0.0773s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.155657s (num_starts 2; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.155667s (num_starts 2; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;nonarg-locals-iscontiguous-houdini-guess.: 0.155706s (num_starts 5; 0.0311s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.155711s (num_starts 2; 0.0779s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-no-overflow.: 0.15572s (num_starts 2; 0.0779s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156785s (num_starts 2; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156794s (num_starts 2; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.156833s (num_starts 2; 0.0784s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156839s (num_starts 2; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-addr-no-overflow.: 0.156843s (num_starts 2; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156888s (num_starts 2; 0.0784s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate.: 0.157458s (num_starts 2; 0.0787s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.157532s (num_starts 8; 0.0197s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157685s (num_starts 3; 0.0526s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157695s (num_starts 3; 0.0526s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.157747s (num_starts 3; 0.0526s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ub-signed.: 0.157758s (num_starts 3; 0.0526s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158297s (num_starts 1; 0.1583s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158305s (num_starts 1; 0.1583s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv.: 0.158336s (num_starts 1; 0.1583s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;exit.boolbv.: 0.15834s (num_starts 1; 0.1583s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158557s (num_starts 2; 0.0793s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158569s (num_starts 2; 0.0793s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159144s (num_starts 1; 0.1591s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159171s (num_starts 1; 0.1592s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.159198s (num_starts 1; 0.1592s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159469s (num_starts 2; 0.0797s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159478s (num_starts 2; 0.0797s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160024s (num_starts 2; 0.0800s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160274s (num_starts 2; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160287s (num_starts 2; 0.0801s/start)
tighten_mem_access_ml.cache_miss.: 0.160338s (num_starts 510; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160436s (num_starts 2; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160444s (num_starts 2; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.160484s (num_starts 2; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-is-aligned.: 0.160493s (num_starts 2; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;local-sizes-are-equal-houdini-guess.: 0.160887s (num_starts 4; 0.0402s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161078s (num_starts 2; 0.0805s/start)
identify_assumed_eqclasses.: 0.161124s (num_starts 70; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-eq-lsprel-guess-houdini-guess.: 0.16116s (num_starts 6; 0.0269s/start)
tighten_mem_access_ml.: 0.162051s (num_starts 836; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162385s (num_starts 2; 0.0812s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162397s (num_starts 2; 0.0812s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162404s (num_starts 1; 0.1624s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162405s (num_starts 1; 0.1624s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162405s (num_starts 1; 0.1624s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);false-predicate.: 0.162415s (num_starts 1; 0.1624s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;false-predicate.: 0.162421s (num_starts 1; 0.1624s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);false-predicate.: 0.162431s (num_starts 1; 0.1624s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);locals-ub-upper-bound-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.163036s (num_starts 1; 0.1630s/start)
decide_hoare_triple_helper;per-query-type;locals-ub-upper-bound-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.163037s (num_starts 1; 0.1630s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;locals-ub-upper-bound-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.163039s (num_starts 1; 0.1630s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);locals-ub-upper-bound-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.163042s (num_starts 1; 0.1630s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);locals-ub-upper-bound-houdini-guess.: 0.163086s (num_starts 1; 0.1631s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;locals-ub-upper-bound-houdini-guess.: 0.163094s (num_starts 1; 0.1631s/start)
decide_hoare_triple_helper;per-query-type;locals-ub-upper-bound-houdini-guess.: 0.163099s (num_starts 1; 0.1631s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);locals-ub-upper-bound-houdini-guess.: 0.163106s (num_starts 1; 0.1631s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned.: 0.164046s (num_starts 3; 0.0547s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ub-unsigned.: 0.16406s (num_starts 3; 0.0547s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed.: 0.164222s (num_starts 3; 0.0547s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;lb-signed.: 0.164234s (num_starts 3; 0.0547s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16607s (num_starts 2; 0.0830s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;mem-allocs-equality.: 0.166131s (num_starts 2; 0.0831s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);-trivial.: 0.166242s (num_starts 55; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166365s (num_starts 1; 0.1664s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166376s (num_starts 1; 0.1664s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166383s (num_starts 1; 0.1664s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.166411s (num_starts 1; 0.1664s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-region-was-stack.: 0.166415s (num_starts 1; 0.1664s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.166421s (num_starts 1; 0.1664s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-ub-ineq-houdini-guess.: 0.166628s (num_starts 4; 0.0417s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167132s (num_starts 3; 0.0557s/start)
decide_hoare_triple_helper;per-query-type;expr-group-region_agrees_with_memlabel-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167146s (num_starts 3; 0.0557s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;expr-group-region_agrees_with_memlabel-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167168s (num_starts 3; 0.0557s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed.: 0.167185s (num_starts 4; 0.0418s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167189s (num_starts 3; 0.0557s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ub-signed.: 0.167201s (num_starts 4; 0.0418s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-iscontiguous-houdini-guess.: 0.167452s (num_starts 5; 0.0335s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167715s (num_starts 2; 0.0839s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167839s (num_starts 2; 0.0839s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.169425s (num_starts 3; 0.0565s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.169456s (num_starts 3; 0.0565s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-.: 0.169618s (num_starts 4; 0.0424s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.17091s (num_starts 6; 0.0285s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.171989s (num_starts 3; 0.0573s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172002s (num_starts 3; 0.0573s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.172075s (num_starts 3; 0.0574s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172231s (num_starts 2; 0.0861s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.17227s (num_starts 3; 0.0574s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.172317s (num_starts 3; 0.0574s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172428s (num_starts 3; 0.0575s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.172479s (num_starts 3; 0.0575s/start)
graph_locs_map_update_memlabels_for_memslot_locs_with_memalloc.calling.compute_lr_status_for_expr.: 0.17248s (num_starts 523; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.174596s (num_starts 3; 0.0582s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.17465s (num_starts 3; 0.0582s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175371s (num_starts 1; 0.1754s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175379s (num_starts 1; 0.1754s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv.: 0.175412s (num_starts 1; 0.1754s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;exit.boolbv.: 0.175418s (num_starts 1; 0.1754s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175603s (num_starts 4; 0.0439s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.175606s (num_starts 3; 0.0585s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175617s (num_starts 4; 0.0439s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;dst-ineq-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175639s (num_starts 4; 0.0439s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175654s (num_starts 4; 0.0439s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.175705s (num_starts 3; 0.0586s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess.: 0.175753s (num_starts 4; 0.0439s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;dst-ineq-houdini-guess.: 0.175771s (num_starts 4; 0.0439s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);dst-ineq-houdini-guess.: 0.175799s (num_starts 4; 0.0439s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176684s (num_starts 1; 0.1767s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176687s (num_starts 1; 0.1767s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176687s (num_starts 1; 0.1767s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.176696s (num_starts 1; 0.1767s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main;dst_edge_composition_proves_false.: 0.176699s (num_starts 1; 0.1767s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.176702s (num_starts 1; 0.1767s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.17673s (num_starts 3; 0.0589s/start)
invariant_inference_xfer.dst-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.176994s (num_starts 4; 0.0442s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.178445s (num_starts 3; 0.0595s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.178454s (num_starts 3; 0.0595s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.178475s (num_starts 4; 0.0446s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.178551s (num_starts 3; 0.0595s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;lb-signed.: 0.178568s (num_starts 3; 0.0595s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.178594s (num_starts 2; 0.0893s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;mem-allocs-equality.: 0.178676s (num_starts 2; 0.0893s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.180254s (num_starts 3; 0.0601s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.180283s (num_starts 3; 0.0601s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.181001s (num_starts 6; 0.0302s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.181027s (num_starts 6; 0.0302s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.181078s (num_starts 6; 0.0302s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.181407s (num_starts 2; 0.0907s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.181418s (num_starts 1; 0.1814s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.181424s (num_starts 1; 0.1814s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved.: 0.181456s (num_starts 1; 0.1815s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;exit.sp-preserved.: 0.181462s (num_starts 1; 0.1815s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;mem-allocs-equality.: 0.181471s (num_starts 2; 0.0907s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.182733s (num_starts 2; 0.0914s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.182748s (num_starts 2; 0.0914s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.18308s (num_starts 2; 0.0915s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183681s (num_starts 3; 0.0612s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183697s (num_starts 3; 0.0612s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.183786s (num_starts 3; 0.0613s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ub-signed.: 0.183799s (num_starts 3; 0.0613s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.184959s (num_starts 4; 0.0462s/start)
ldr_decomposition.: 0.18535s (num_starts 464; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.185423s (num_starts 4; 0.0464s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.18588s (num_starts 3; 0.0620s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.185904s (num_starts 3; 0.0620s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.185991s (num_starts 3; 0.0620s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ub-unsigned.: 0.186007s (num_starts 3; 0.0620s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.18602s (num_starts 36710; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;mem-allocs-equality.: 0.186832s (num_starts 3; 0.0623s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.193761s (num_starts 2; 0.0969s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.197715s (num_starts 4; 0.0494s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.199743s (num_starts 3; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.199754s (num_starts 3; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.199803s (num_starts 3; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;lb-signed.: 0.199817s (num_starts 3; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.199842s (num_starts 3; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.199855s (num_starts 3; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.199905s (num_starts 3; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ub-unsigned.: 0.199915s (num_starts 3; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.202046s (num_starts 3; 0.0673s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.202055s (num_starts 3; 0.0674s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.202104s (num_starts 3; 0.0674s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ub-signed.: 0.202118s (num_starts 3; 0.0674s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.202591s (num_starts 31; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.207951s (num_starts 3; 0.0693s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-dst-edgecond-implies-src-edgecond.: 0.208026s (num_starts 3; 0.0693s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;linear;-trivial.: 0.208115s (num_starts 35; 0.0059s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-trivial.: 0.208406s (num_starts 50; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.212153s (num_starts 3; 0.0707s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.2122s (num_starts 3; 0.0707s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.212705s (num_starts 3; 0.0709s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.212717s (num_starts 3; 0.0709s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.212767s (num_starts 3; 0.0709s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;lb-signed.: 0.212783s (num_starts 3; 0.0709s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214601s (num_starts 3; 0.0715s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214614s (num_starts 3; 0.0715s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.214668s (num_starts 3; 0.0716s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ub-signed.: 0.214682s (num_starts 3; 0.0716s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.215185s (num_starts 3; 0.0717s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.215196s (num_starts 3; 0.0717s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.215205s (num_starts 3; 0.0717s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.215249s (num_starts 3; 0.0717s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ub-unsigned.: 0.215264s (num_starts 3; 0.0718s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.216294s (num_starts 2; 0.1081s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-ub-eq-houdini-guess.: 0.216367s (num_starts 2; 0.1082s/start)
check_safety.: 0.216599s (num_starts 1; 0.2166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.217165s (num_starts 2; 0.1086s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21894s (num_starts 3; 0.0730s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.221377s (num_starts 1; 0.2214s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.221381s (num_starts 1; 0.2214s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.221385s (num_starts 1; 0.2214s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.221395s (num_starts 1; 0.2214s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-eq-houdini-guess.: 0.221399s (num_starts 1; 0.2214s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.221404s (num_starts 1; 0.2214s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.223192s (num_starts 3; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;sp-below-isp-houdini-guess.: 0.226455s (num_starts 4; 0.0566s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228424s (num_starts 1; 0.2284s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228431s (num_starts 1; 0.2284s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228434s (num_starts 1; 0.2284s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 0.22971s (num_starts 20; 0.0115s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.230745s (num_starts 20; 0.0115s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;linear.: 0.230793s (num_starts 20; 0.0115s/start)
compute_expr_eqclasses_at_pc.: 0.232813s (num_starts 26; 0.0090s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.232867s (num_starts 1; 0.2329s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.232869s (num_starts 1; 0.2329s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.232869s (num_starts 1; 0.2329s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);false-predicate.: 0.232879s (num_starts 1; 0.2329s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;false-predicate.: 0.232884s (num_starts 1; 0.2329s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);false-predicate.: 0.232893s (num_starts 1; 0.2329s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.23426s (num_starts 1; 0.2343s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.234267s (num_starts 1; 0.2343s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.234269s (num_starts 1; 0.2343s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.234279s (num_starts 1; 0.2343s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;ml-lb-ub-eq-houdini-guess.: 0.234283s (num_starts 1; 0.2343s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.234289s (num_starts 1; 0.2343s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.235584s (num_starts 1; 0.2356s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.237954s (num_starts 4; 0.0595s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-.: 0.237983s (num_starts 4; 0.0595s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.23934s (num_starts 1; 0.2393s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.239343s (num_starts 1; 0.2393s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.239344s (num_starts 1; 0.2393s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);false-predicate.: 0.239353s (num_starts 1; 0.2394s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;false-predicate.: 0.239359s (num_starts 1; 0.2394s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);false-predicate.: 0.239367s (num_starts 1; 0.2394s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.240791s (num_starts 40; 0.0060s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.240886s (num_starts 4; 0.0602s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-ub-ineq-houdini-guess.: 0.241294s (num_starts 6; 0.0402s/start)
populate_locs_potentially_modified_on_edge.: 0.24182s (num_starts 111; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear.: 0.245429s (num_starts 14; 0.0175s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;linear.: 0.24547s (num_starts 14; 0.0175s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24615s (num_starts 4; 0.0615s/start)
check_node_stability_after_CE_addition.: 0.247543s (num_starts 646; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memeq-.: 0.248598s (num_starts 5; 0.0497s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memeq-.: 0.248643s (num_starts 5; 0.0497s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;local-sizes-are-equal-houdini-guess.: 0.248675s (num_starts 6; 0.0414s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-ub-eq-houdini-guess.: 0.248881s (num_starts 6; 0.0415s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.249092s (num_starts 51; 0.0049s/start)
parse_cvc4_model.: 0.249117s (num_starts 31; 0.0080s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250543s (num_starts 3; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250584s (num_starts 3; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.2506s (num_starts 3; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.250632s (num_starts 3; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.250645s (num_starts 3; 0.0835s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.250666s (num_starts 3; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250882s (num_starts 4; 0.0627s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-.: 0.250921s (num_starts 4; 0.0627s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lfor.cond%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.252957s (num_starts 1; 0.2530s/start)
decide_hoare_triple_helper;per-path;Lfor.cond%1%bbentry_L9%1%bbentry;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.252958s (num_starts 1; 0.2530s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.25296s (num_starts 1; 0.2530s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.252965s (num_starts 1; 0.2530s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lfor.cond%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.252989s (num_starts 1; 0.2530s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;dst_edge_composition_proves_false.: 0.253001s (num_starts 1; 0.2530s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.253006s (num_starts 1; 0.2530s/start)
decide_hoare_triple_helper;per-path;Lfor.cond%1%bbentry_L9%1%bbentry;(epsilon).: 0.253009s (num_starts 1; 0.2530s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.255902s (num_starts 5504; 0.0000s/start)
populate_branch_affecting_locs.: 0.257813s (num_starts 10; 0.0258s/start)
cg_add_node.: 0.260157s (num_starts 51; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.261706s (num_starts 19; 0.0138s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;linear.: 0.261753s (num_starts 19; 0.0138s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.267478s (num_starts 797; 0.0003s/start)
check_wfconds_on_edge.Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry.: 0.269805s (num_starts 4; 0.0675s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.273229s (num_starts 4; 0.0683s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.273247s (num_starts 4; 0.0683s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.273272s (num_starts 4; 0.0683s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.273315s (num_starts 4; 0.0683s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.273333s (num_starts 4; 0.0683s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.273385s (num_starts 4; 0.0683s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.27577s (num_starts 6; 0.0460s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.277096s (num_starts 2246; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.278101s (num_starts 4; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.278134s (num_starts 4; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.278193s (num_starts 2; 0.1391s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.278203s (num_starts 2; 0.1391s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.280645s (num_starts 6; 0.0468s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281058s (num_starts 4; 0.0703s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.281268s (num_starts 4; 0.0703s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.281413s (num_starts 4; 0.0704s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.281437s (num_starts 9; 0.0313s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281576s (num_starts 2; 0.1408s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281589s (num_starts 2; 0.1408s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed.: 0.283127s (num_starts 3; 0.0944s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;lb-signed.: 0.283139s (num_starts 3; 0.0944s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.28337s (num_starts 4; 0.0708s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.28343s (num_starts 6; 0.0472s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.283541s (num_starts 4; 0.0709s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.284407s (num_starts 2; 0.1422s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.284416s (num_starts 2; 0.1422s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.284884s (num_starts 5; 0.0570s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned.: 0.286538s (num_starts 3; 0.0955s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ub-unsigned.: 0.28655s (num_starts 3; 0.0955s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.287503s (num_starts 5; 0.0575s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.287798s (num_starts 5; 0.0576s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;lb-signed.: 0.287898s (num_starts 6; 0.0480s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.289388s (num_starts 4; 0.0723s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.290891s (num_starts 4; 0.0727s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ub-unsigned.: 0.292483s (num_starts 6; 0.0487s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.292493s (num_starts 4; 0.0731s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.292572s (num_starts 1; 0.2926s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.292575s (num_starts 1; 0.2926s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.292604s (num_starts 1; 0.2926s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;dst_edge_composition_proves_false.: 0.292607s (num_starts 1; 0.2926s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.292872s (num_starts 1; 0.2929s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.292875s (num_starts 1; 0.2929s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.29289s (num_starts 4; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.292901s (num_starts 1; 0.2929s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;dst_edge_composition_proves_false.: 0.292904s (num_starts 1; 0.2929s/start)
check_wfconds_on_edge.Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.294047s (num_starts 4; 0.0735s/start)
check_wfconds_on_edge.Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.29549s (num_starts 4; 0.0739s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.29558s (num_starts 4; 0.0739s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ub-signed.: 0.295592s (num_starts 7; 0.0422s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed.: 0.296132s (num_starts 4; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ub-signed.: 0.296147s (num_starts 4; 0.0740s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.29695s (num_starts 4; 0.0742s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.298198s (num_starts 4; 0.0745s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.298329s (num_starts 2; 0.1492s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved.: 0.298487s (num_starts 2; 0.1492s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.298746s (num_starts 2; 0.1494s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.298753s (num_starts 4; 0.0747s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-dst-edgecond-implies-src-edgecond.: 0.299537s (num_starts 5; 0.0599s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.300834s (num_starts 1; 0.3008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.300858s (num_starts 1; 0.3009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.301862s (num_starts 4; 0.0755s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.304121s (num_starts 3; 0.1014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.304232s (num_starts 3; 0.1014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.305206s (num_starts 1; 0.3052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.305209s (num_starts 1; 0.3052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.30523s (num_starts 1; 0.3052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;dst_edge_composition_proves_false.: 0.305233s (num_starts 1; 0.3052s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);-trivial.: 0.307622s (num_starts 63; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.307912s (num_starts 4; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.308227s (num_starts 1; 0.3082s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.308248s (num_starts 1; 0.3082s/start)
graph_to_stream.: 0.310548s (num_starts 6; 0.0518s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.312436s (num_starts 5; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.312507s (num_starts 5; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memeq-.: 0.312578s (num_starts 5; 0.0625s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memeq-.: 0.312633s (num_starts 5; 0.0625s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.312871s (num_starts 6; 0.0521s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.313164s (num_starts 6; 0.0522s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.313322s (num_starts 4; 0.0783s/start)
create_sp_version_relations_lattice_at_pc.: 0.313335s (num_starts 819; 0.0004s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.L0%0%d_L0%0%d.: 0.31393s (num_starts 5; 0.0628s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear.: 0.314928s (num_starts 7; 0.0450s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.320873s (num_starts 5; 0.0642s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.321394s (num_starts 1; 0.3214s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.321421s (num_starts 1; 0.3214s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-ineq-houdini-guess.: 0.322173s (num_starts 6; 0.0537s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.324445s (num_starts 1; 0.3244s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.324467s (num_starts 1; 0.3245s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.325107s (num_starts 1; 0.3251s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.325109s (num_starts 1; 0.3251s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.325134s (num_starts 1; 0.3251s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;dst_edge_composition_proves_false.: 0.325138s (num_starts 1; 0.3251s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.325921s (num_starts 5; 0.0652s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.326s (num_starts 5; 0.0652s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memeq-.: 0.326048s (num_starts 5; 0.0652s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memeq-.: 0.326104s (num_starts 5; 0.0652s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-sizes-are-equal-houdini-guess.: 0.326856s (num_starts 6; 0.0545s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.329432s (num_starts 5; 0.0659s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.329519s (num_starts 5; 0.0659s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memeq-.: 0.329566s (num_starts 5; 0.0659s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memeq-.: 0.329628s (num_starts 5; 0.0659s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.331226s (num_starts 1; 0.3312s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.331227s (num_starts 1; 0.3312s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.33126s (num_starts 1; 0.3313s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;dst_edge_composition_proves_false.: 0.331264s (num_starts 1; 0.3313s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.333623s (num_starts 2; 0.1668s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv.: 0.333774s (num_starts 2; 0.1669s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.335241s (num_starts 4; 0.0838s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.335246s (num_starts 4; 0.0838s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.335277s (num_starts 4; 0.0838s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);pred-type-unknown.: 0.33533s (num_starts 4; 0.0838s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-.: 0.335351s (num_starts 8; 0.0419s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);pred-type-unknown.: 0.335396s (num_starts 4; 0.0838s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.335421s (num_starts 41; 0.0082s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.335633s (num_starts 41; 0.0082s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.338025s (num_starts 3; 0.1127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.338039s (num_starts 3; 0.1127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.338094s (num_starts 3; 0.1127s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.339019s (num_starts 3; 0.1130s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.339032s (num_starts 3; 0.1130s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.339092s (num_starts 3; 0.1130s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.339261s (num_starts 3; 0.1131s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.339271s (num_starts 3; 0.1131s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.339325s (num_starts 3; 0.1131s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;lb-signed.: 0.339341s (num_starts 3; 0.1131s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.340479s (num_starts 5; 0.0681s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.340595s (num_starts 5; 0.0681s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memeq-.: 0.340648s (num_starts 5; 0.0681s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memeq-.: 0.340712s (num_starts 5; 0.0681s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.342617s (num_starts 3; 0.1142s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.342629s (num_starts 3; 0.1142s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.34268s (num_starts 3; 0.1142s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.349461s (num_starts 5; 0.0699s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.349541s (num_starts 5; 0.0699s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memeq-.: 0.349598s (num_starts 5; 0.0699s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memeq-.: 0.34966s (num_starts 5; 0.0699s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.349835s (num_starts 1; 0.3498s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.349837s (num_starts 1; 0.3498s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.349866s (num_starts 1; 0.3499s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;dst_edge_composition_proves_false.: 0.349869s (num_starts 1; 0.3499s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.351635s (num_starts 31; 0.0113s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.351848s (num_starts 2; 0.1759s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.351923s (num_starts 2; 0.1760s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;lb-signed.: 0.352428s (num_starts 6; 0.0587s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ub-signed.: 0.352581s (num_starts 6; 0.0588s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.353707s (num_starts 5; 0.0707s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.353764s (num_starts 5; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.353798s (num_starts 5; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.353854s (num_starts 5; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.353879s (num_starts 5; 0.0708s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.353919s (num_starts 5; 0.0708s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.355594s (num_starts 5; 0.0711s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.355899s (num_starts 5; 0.0712s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.355976s (num_starts 5; 0.0712s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.356255s (num_starts 5; 0.0713s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.356262s (num_starts 5; 0.0713s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.356286s (num_starts 5; 0.0713s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.356616s (num_starts 5; 0.0713s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.356701s (num_starts 5; 0.0713s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.357644s (num_starts 3; 0.1192s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.357656s (num_starts 3; 0.1192s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.357721s (num_starts 3; 0.1192s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ub-unsigned.: 0.357735s (num_starts 3; 0.1192s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.357926s (num_starts 3; 0.1193s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.357938s (num_starts 3; 0.1193s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.357991s (num_starts 3; 0.1193s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ub-signed.: 0.358008s (num_starts 3; 0.1193s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.358187s (num_starts 3; 0.1194s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.358198s (num_starts 3; 0.1194s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.35825s (num_starts 3; 0.1194s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;lb-signed.: 0.358265s (num_starts 3; 0.1194s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.358771s (num_starts 111; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ub-unsigned.: 0.359574s (num_starts 6; 0.0599s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.362682s (num_starts 5; 0.0725s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.362907s (num_starts 3; 0.1210s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.362922s (num_starts 3; 0.1210s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.362983s (num_starts 3; 0.1210s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ub-signed.: 0.362997s (num_starts 3; 0.1210s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.36305s (num_starts 5; 0.0726s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363841s (num_starts 3; 0.1213s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363854s (num_starts 3; 0.1213s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.363915s (num_starts 3; 0.1213s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ub-unsigned.: 0.363932s (num_starts 3; 0.1213s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.364044s (num_starts 5; 0.0728s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.364397s (num_starts 5; 0.0729s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.365251s (num_starts 14; 0.0261s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ub-unsigned.: 0.365287s (num_starts 14; 0.0261s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.367076s (num_starts 3; 0.1224s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.367119s (num_starts 3; 0.1224s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.367909s (num_starts 5; 0.0736s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.368167s (num_starts 5; 0.0736s/start)
tfg::get_aliasing_constraints_for_edge.: 0.368756s (num_starts 5032; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.371091s (num_starts 5; 0.0742s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);false-predicate;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.371172s (num_starts 2; 0.1856s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);false-predicate;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.371178s (num_starts 2; 0.1856s/start)
get_sprel_map_pair_at_pc.: 0.371198s (num_starts 797; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);false-predicate.: 0.371218s (num_starts 2; 0.1856s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);false-predicate.: 0.371254s (num_starts 2; 0.1856s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.371317s (num_starts 5; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;linear;-trivial.: 0.371453s (num_starts 56; 0.0066s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372628s (num_starts 7; 0.0532s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372653s (num_starts 7; 0.0532s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.374725s (num_starts 5; 0.0749s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon).: 0.375046s (num_starts 5; 0.0750s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.375119s (num_starts 6; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-.: 0.376511s (num_starts 8; 0.0471s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.376525s (num_starts 3; 0.1255s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.376548s (num_starts 3; 0.1255s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.377752s (num_starts 1; 0.3778s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.377756s (num_starts 1; 0.3778s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.377767s (num_starts 1; 0.3778s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2.: 0.378415s (num_starts 1; 0.3784s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.380444s (num_starts 8; 0.0476s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.381554s (num_starts 5; 0.0763s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.38181s (num_starts 5; 0.0764s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.382258s (num_starts 17; 0.0225s/start)
decide_hoare_triple_helper;per-query-type;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.386345s (num_starts 6; 0.0644s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.386758s (num_starts 2; 0.1934s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;dst_edge_composition_proves_false.: 0.386832s (num_starts 2; 0.1934s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.391332s (num_starts 2; 0.1957s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;dst_edge_composition_proves_false.: 0.391401s (num_starts 2; 0.1957s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.392276s (num_starts 5; 0.0785s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.392535s (num_starts 5; 0.0785s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.392639s (num_starts 4; 0.0982s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI4_L7%1%allocaI2.: 0.392644s (num_starts 1; 0.3926s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.392717s (num_starts 4; 0.0982s/start)
invariant_inference_xfer.memlabel-is-absent.from.L0%0%d_L0%0%d.: 0.394402s (num_starts 7; 0.0563s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.395052s (num_starts 3; 0.1317s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.39516s (num_starts 3; 0.1317s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.396005s (num_starts 6; 0.0660s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.396121s (num_starts 3; 0.1320s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.396134s (num_starts 3; 0.1320s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.40008s (num_starts 6; 0.0667s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.401s (num_starts 1; 0.4010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.401251s (num_starts 6; 0.0669s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.40132s (num_starts 6; 0.0669s/start)
decide_hoare_triple_helper;per-query-type;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.401491s (num_starts 72; 0.0056s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.403772s (num_starts 1; 0.4038s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.L0%0%d_L0%0%d.: 0.405815s (num_starts 7; 0.0580s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.L0%0%d_L0%0%d.: 0.406202s (num_starts 7; 0.0580s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.40685s (num_starts 6; 0.0678s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.L0%0%d_L0%0%d.: 0.407129s (num_starts 7; 0.0582s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-.: 0.408033s (num_starts 5; 0.0816s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-.: 0.40807s (num_starts 5; 0.0816s/start)
get_next_potential_correlations.: 0.408936s (num_starts 16; 0.0256s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry).: 0.411773s (num_starts 6; 0.0686s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.L0%0%d_L0%0%d.: 0.411883s (num_starts 7; 0.0588s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.413794s (num_starts 6; 0.0690s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;memeq-.: 0.414248s (num_starts 10; 0.0414s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.417443s (num_starts 7; 0.0596s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.417494s (num_starts 7; 0.0596s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.417511s (num_starts 3; 0.1392s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.417725s (num_starts 6; 0.0696s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.41779s (num_starts 6; 0.0696s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.417835s (num_starts 6; 0.0696s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.417898s (num_starts 6; 0.0696s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.417925s (num_starts 6; 0.0697s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.417968s (num_starts 6; 0.0697s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memeq-.: 0.418288s (num_starts 10; 0.0418s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;memeq-.: 0.418567s (num_starts 24; 0.0174s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.418677s (num_starts 71; 0.0059s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.420488s (num_starts 68; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.421399s (num_starts 3; 0.1405s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;dst_edge_composition_proves_false.: 0.421496s (num_starts 3; 0.1405s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.422793s (num_starts 2; 0.2114s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.422809s (num_starts 2; 0.2114s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.426163s (num_starts 5; 0.0852s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-geq-sp.: 0.426417s (num_starts 5; 0.0853s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.426951s (num_starts 2; 0.2135s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.426954s (num_starts 2; 0.2135s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.426998s (num_starts 2; 0.2135s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;dst_edge_composition_proves_false.: 0.427007s (num_starts 2; 0.2135s/start)
collect_assumes_around_edge.: 0.430182s (num_starts 70; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.430774s (num_starts 3; 0.1436s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;dst_edge_composition_proves_false.: 0.430866s (num_starts 3; 0.1436s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memeq-.: 0.431651s (num_starts 10; 0.0432s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.433454s (num_starts 5163; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.433648s (num_starts 5; 0.0867s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-below-isp-houdini-guess.: 0.436017s (num_starts 6; 0.0727s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.43773s (num_starts 6; 0.0730s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.43875s (num_starts 7; 0.0627s/start)
decide_hoare_triple_helper;per-query-type;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.439197s (num_starts 6; 0.0732s/start)
parse_yices_model.: 0.440549s (num_starts 57; 0.0077s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.445765s (num_starts 5163; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-eq-houdini-guess.: 0.446332s (num_starts 6; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.447391s (num_starts 2; 0.2237s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.447395s (num_starts 2; 0.2237s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.447434s (num_starts 2; 0.2237s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;dst_edge_composition_proves_false.: 0.447441s (num_starts 2; 0.2237s/start)
copy_masked_mappings.: 0.451529s (num_starts 15794; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.451704s (num_starts 6; 0.0753s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.451787s (num_starts 6; 0.0753s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.451844s (num_starts 6; 0.0753s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.451903s (num_starts 6; 0.0753s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;memeq-.: 0.462885s (num_starts 16; 0.0289s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.471797s (num_starts 5; 0.0944s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon).: 0.472188s (num_starts 5; 0.0944s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.472909s (num_starts 5; 0.0946s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.473006s (num_starts 1; 0.4730s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.473017s (num_starts 1; 0.4730s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);linear.: 0.473045s (num_starts 1; 0.4730s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);linear.: 0.473053s (num_starts 1; 0.4731s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon).: 0.473254s (num_starts 5; 0.0947s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2.: 0.475928s (num_starts 1; 0.4759s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2.: 0.476785s (num_starts 1; 0.4768s/start)
decide_hoare_triple_helper;per-query-type;local-eq-lsprel-guess-houdini-guess.: 0.480145s (num_starts 20; 0.0240s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.482614s (num_starts 7; 0.0689s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.486429s (num_starts 2; 0.2432s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.486458s (num_starts 2; 0.2432s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.486472s (num_starts 2; 0.2432s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved.: 0.486567s (num_starts 2; 0.2433s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;exit.sp-preserved.: 0.48658s (num_starts 2; 0.2433s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved.: 0.486603s (num_starts 2; 0.2433s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.488727s (num_starts 8; 0.0611s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.489227s (num_starts 7; 0.0699s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear.: 0.499858s (num_starts 14; 0.0357s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;linear.: 0.499897s (num_starts 14; 0.0357s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.500964s (num_starts 50; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.501167s (num_starts 20; 0.0251s/start)
decide_hoare_triple_helper;per-query-type;memlabel-is-absent-houdini-guess.: 0.5023s (num_starts 38; 0.0132s/start)
lr_status_meet.: 0.503207s (num_starts 192752; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.509447s (num_starts 6; 0.0849s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-.: 0.510759s (num_starts 12; 0.0426s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.51782s (num_starts 20; 0.0259s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;linear.: 0.517872s (num_starts 20; 0.0259s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.522878s (num_starts 5; 0.1046s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon).: 0.523283s (num_starts 5; 0.1047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.524664s (num_starts 8; 0.0656s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2.: 0.527108s (num_starts 1; 0.5271s/start)
bv_const_ref_map2expr_map.: 0.536002s (num_starts 5929; 0.0001s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.542407s (num_starts 9837; 0.0001s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.5456s (num_starts 5; 0.1091s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon).: 0.545993s (num_starts 5; 0.1092s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2.: 0.549648s (num_starts 1; 0.5496s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.549986s (num_starts 34; 0.0162s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.5509s (num_starts 6; 0.0918s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.554208s (num_starts 6; 0.0924s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.558158s (num_starts 6; 0.0930s/start)
src_tfg_counter_example_translate_on_edge_composition.delta1.: 0.560058s (num_starts 385; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.560305s (num_starts 62; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memeq-.: 0.561213s (num_starts 10; 0.0561s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.561594s (num_starts 6440; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.564171s (num_starts 8; 0.0705s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.566051s (num_starts 3; 0.1887s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);lb-signed.: 0.568474s (num_starts 12; 0.0474s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.568823s (num_starts 12; 0.0474s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.569983s (num_starts 9; 0.0633s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.570455s (num_starts 9; 0.0634s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned.: 0.574034s (num_starts 12; 0.0478s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.574712s (num_starts 11; 0.0522s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-iscontiguous-houdini-guess.: 0.581535s (num_starts 27; 0.0215s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.585864s (num_starts 1; 0.5859s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.585874s (num_starts 1; 0.5859s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);linear.: 0.5859s (num_starts 1; 0.5859s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);linear.: 0.585908s (num_starts 1; 0.5859s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.593739s (num_starts 625; 0.0009s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);-trivial.: 0.593891s (num_starts 108; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-signed.: 0.594084s (num_starts 16; 0.0371s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.599416s (num_starts 10; 0.0599s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.609051s (num_starts 9; 0.0677s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.610304s (num_starts 5163; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.614948s (num_starts 25410; 0.0000s/start)
get_masked_array_constant.: 0.618709s (num_starts 258; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.618942s (num_starts 2; 0.3095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.618972s (num_starts 2; 0.3095s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.620891s (num_starts 71; 0.0087s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;linear;-trivial.: 0.626194s (num_starts 84; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);linear.: 0.626967s (num_starts 4; 0.1567s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);linear.: 0.62701s (num_starts 4; 0.1568s/start)
evaluate_memmask.: 0.629147s (num_starts 258; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.629419s (num_starts 8; 0.0787s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.62949s (num_starts 8; 0.0787s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);pred-type-unknown.: 0.629586s (num_starts 8; 0.0787s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);pred-type-unknown.: 0.629674s (num_starts 8; 0.0787s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.631921s (num_starts 4; 0.1580s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.634969s (num_starts 10; 0.0635s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.635021s (num_starts 10; 0.0635s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.636953s (num_starts 11; 0.0579s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.638347s (num_starts 6; 0.1064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.638568s (num_starts 6; 0.1064s/start)
invariant_inference_xfer.mem-allocs-equality.from.L0%0%d_L0%0%d.: 0.64595s (num_starts 7; 0.0923s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.64622s (num_starts 4; 0.1616s/start)
invariant_inference_xfer.sp-below-isp.from.L0%0%d_L0%0%d.: 0.648911s (num_starts 7; 0.0927s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.650163s (num_starts 20; 0.0325s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.653264s (num_starts 5; 0.1307s/start)
ce_perform_memory_fuzzing.: 0.660099s (num_starts 320; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.66192s (num_starts 6; 0.1103s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.662168s (num_starts 6; 0.1104s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.668695s (num_starts 11; 0.0608s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.671465s (num_starts 11; 0.0610s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 0.673449s (num_starts 25; 0.0269s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.674785s (num_starts 5; 0.1350s/start)
cg_with_dst_ml_check::get_aliasing_constraints_for_edge.: 0.676018s (num_starts 45; 0.0150s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d).: 0.676914s (num_starts 10; 0.0677s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.685142s (num_starts 4; 0.1713s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.690227s (num_starts 20; 0.0345s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;linear.: 0.690302s (num_starts 20; 0.0345s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);-trivial.: 0.691057s (num_starts 103; 0.0067s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);-trivial.: 0.691197s (num_starts 176; 0.0039s/start)
query:convert_to_z3.: 0.6957s (num_starts 14610; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;memeq-;-trivial.: 0.695718s (num_starts 116; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.707404s (num_starts 1; 0.7074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.707407s (num_starts 1; 0.7074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.707441s (num_starts 1; 0.7074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;dst_edge_composition_proves_false.: 0.707445s (num_starts 1; 0.7074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memeq-.: 0.709422s (num_starts 24; 0.0296s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.710511s (num_starts 1; 0.7105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.710516s (num_starts 1; 0.7105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.710543s (num_starts 1; 0.7105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;dst_edge_composition_proves_false.: 0.710553s (num_starts 1; 0.7106s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.717964s (num_starts 3976; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.72374s (num_starts 10; 0.0724s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.723786s (num_starts 10; 0.0724s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.725287s (num_starts 3; 0.2418s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.727178s (num_starts 4; 0.1818s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.727207s (num_starts 4; 0.1818s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.727218s (num_starts 4; 0.1818s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.728477s (num_starts 10; 0.0728s/start)
pth_collect_simplified_preds_using_atom_func.: 0.729184s (num_starts 3844; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned.: 0.736193s (num_starts 7; 0.1052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ub-unsigned.: 0.736216s (num_starts 7; 0.1052s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);ub-unsigned.: 0.736258s (num_starts 7; 0.1052s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2).: 0.737508s (num_starts 10; 0.0738s/start)
tfg_run_pointsto_analysis.: 0.744558s (num_starts 1; 0.7446s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.746042s (num_starts 14; 0.0533s/start)
decide_hoare_triple_helper;per-query-type;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.75114s (num_starts 10; 0.0751s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.753186s (num_starts 10; 0.0753s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-neq-zero.: 0.753655s (num_starts 10; 0.0754s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.754476s (num_starts 10; 0.0754s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2).: 0.754669s (num_starts 10; 0.0755s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;linear.: 0.763s (num_starts 33; 0.0231s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.768078s (num_starts 4; 0.1920s/start)
create_new_corr_graph_edge.new_node.: 0.768955s (num_starts 50; 0.0154s/start)
decide_hoare_triple_helper;per-query-type;exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.784781s (num_starts 4; 0.1962s/start)
decide_hoare_triple_helper;per-query-type;exit.sp-preserved.: 0.785068s (num_starts 4; 0.1963s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.78674s (num_starts 20; 0.0393s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;linear.: 0.786805s (num_starts 20; 0.0393s/start)
create_new_corr_graph_edge.: 0.794517s (num_starts 70; 0.0114s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.797254s (num_starts 10; 0.0797s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-is-aligned.: 0.797724s (num_starts 10; 0.0798s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.799017s (num_starts 7; 0.1141s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.803458s (num_starts 3; 0.2678s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2).: 0.806278s (num_starts 13; 0.0620s/start)
collect_assumes_around_path_helper.: 0.826818s (num_starts 1915; 0.0004s/start)
get_unrolled_paths_from.: 0.830902s (num_starts 124; 0.0067s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.831391s (num_starts 797; 0.0010s/start)
graph_with_paths::collect_assumes_around_path.: 0.833344s (num_starts 1915; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.83524s (num_starts 38; 0.0220s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.835295s (num_starts 734; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.844438s (num_starts 10; 0.0844s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.84591s (num_starts 6; 0.1410s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;memeq-.: 0.846911s (num_starts 15; 0.0565s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.853142s (num_starts 12; 0.0711s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear.: 0.853789s (num_starts 10; 0.0854s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);-trivial.: 0.865031s (num_starts 136; 0.0064s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-ineq-houdini-guess.: 0.867414s (num_starts 34; 0.0255s/start)
decide_hoare_triple_helper;per-query-type;local-sizes-are-equal-houdini-guess.: 0.878872s (num_starts 34; 0.0258s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-.: 0.881679s (num_starts 20; 0.0441s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.882912s (num_starts 15; 0.0589s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.884388s (num_starts 2; 0.4422s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.884421s (num_starts 2; 0.4422s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.884429s (num_starts 2; 0.4422s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv.: 0.884517s (num_starts 2; 0.4423s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;exit.boolbv.: 0.884542s (num_starts 2; 0.4423s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv.: 0.884557s (num_starts 2; 0.4423s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear.: 0.884565s (num_starts 55; 0.0161s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.889197s (num_starts 1; 0.8892s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.905733s (num_starts 5; 0.1811s/start)
counter_example_satisfies_preds.: 0.90769s (num_starts 8821; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.921665s (num_starts 12; 0.0768s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.922221s (num_starts 12; 0.0769s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.928366s (num_starts 12; 0.0774s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.928934s (num_starts 12; 0.0774s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI4_L0%1%allocaI2.inductive-invariants.: 0.930421s (num_starts 32; 0.0291s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear.: 0.930939s (num_starts 15; 0.0621s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.934244s (num_starts 3; 0.3114s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.934315s (num_starts 1; 0.9343s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.934324s (num_starts 3; 0.3114s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.939365s (num_starts 12; 0.0783s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.939993s (num_starts 12; 0.0783s/start)
decide_hoare_triple_helper;per-query-type;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.946338s (num_starts 10; 0.0946s/start)
decide_hoare_triple_helper;per-query-type;-alloca-region-was-stack.: 0.946768s (num_starts 10; 0.0947s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);linear.: 0.972324s (num_starts 17; 0.0572s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);linear.: 0.972455s (num_starts 17; 0.0572s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.976687s (num_starts 1; 0.9767s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.978177s (num_starts 10; 0.0978s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-no-overflow.: 0.978654s (num_starts 10; 0.0979s/start)
predicate_canonicalized.: 0.983034s (num_starts 8305; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.988707s (num_starts 11; 0.0899s/start)
check_wfconds_on_edge.Lfor.cond2%1%bbentry_L14%1%bbentry=>E0%0%d_E0%0%d.: 0.993445s (num_starts 2; 0.4967s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.00056s (num_starts 10; 0.1001s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon).: 1.00229s (num_starts 11; 0.0911s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.02905s (num_starts 12; 0.0858s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 1.02954s (num_starts 12; 0.0858s/start)
query:convert_from_z3.: 1.03221s (num_starts 14610; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 1.03274s (num_starts 4; 0.2582s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L3%1%allocaI1.: 1.04828s (num_starts 1; 1.0483s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.05237s (num_starts 12; 0.0877s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 1.05286s (num_starts 12; 0.0877s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 1.0609s (num_starts 177; 0.0060s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.06157s (num_starts 12; 0.0885s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 1.06208s (num_starts 12; 0.0885s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08199s (num_starts 6; 0.1803s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08947s (num_starts 11; 0.0990s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 1.09137s (num_starts 5892; 0.0002s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 1.09429s (num_starts 25632; 0.0000s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 1.10046s (num_starts 5892; 0.0002s/start)
decide_hoare_triple_helper;per-query-type;mem-allocs-equality.: 1.11079s (num_starts 39; 0.0285s/start)
counter_example_falsifies_preds.: 1.11539s (num_starts 1094; 0.0010s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 1.11923s (num_starts 25410; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.12871s (num_starts 10; 0.1129s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.12876s (num_starts 10; 0.1129s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.13697s (num_starts 2; 0.5685s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.13701s (num_starts 2; 0.5685s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);linear.: 1.14139s (num_starts 3; 0.3805s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);linear.: 1.14143s (num_starts 3; 0.3805s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 1.15471s (num_starts 4; 0.2887s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.16784s (num_starts 5; 0.2336s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.16787s (num_starts 5; 0.2336s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.16789s (num_starts 5; 0.2336s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.17806s (num_starts 11; 0.1071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-unsigned.: 1.18893s (num_starts 11; 0.1081s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ub-unsigned.: 1.18896s (num_starts 11; 0.1081s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-unsigned.: 1.18908s (num_starts 11; 0.1081s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 1.2023s (num_starts 20; 0.0601s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;linear.: 1.20237s (num_starts 20; 0.0601s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20435s (num_starts 9; 0.1338s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;expr-group-region_agrees_with_memlabel-houdini-guess.: 1.20932s (num_starts 16; 0.0756s/start)
decide_hoare_triple_helper;per-query-type;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.21026s (num_starts 10; 0.1210s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 1.21416s (num_starts 67; 0.0181s/start)
decide_hoare_triple_helper;per-query-type;exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.21804s (num_starts 4; 0.3045s/start)
decide_hoare_triple_helper;per-query-type;exit.boolbv.: 1.21832s (num_starts 4; 0.3046s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI4_L0%1%allocaI2.: 1.23284s (num_starts 6; 0.2055s/start)
compute_lr_status_for_expr.: 1.2607s (num_starts 9020; 0.0001s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.28279s (num_starts 4; 0.3207s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;expr-group-region_agrees_with_memlabel-houdini-guess.: 1.28887s (num_starts 20; 0.0644s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.29693s (num_starts 9; 0.1441s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L0%1%allocaI1.: 1.30591s (num_starts 4; 0.3265s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2).: 1.31788s (num_starts 12; 0.1098s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);-trivial.: 1.32263s (num_starts 177; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear.: 1.32554s (num_starts 20; 0.0663s/start)
decide_hoare_triple_helper;per-query-type;sp-below-isp-houdini-guess.: 1.34094s (num_starts 38; 0.0353s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.37079s (num_starts 4; 0.3427s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);false-predicate;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.38641s (num_starts 6; 0.2311s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);false-predicate;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.38648s (num_starts 6; 0.2311s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);false-predicate.: 1.38669s (num_starts 6; 0.2311s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);false-predicate.: 1.38675s (num_starts 6; 0.2311s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.39628s (num_starts 6; 0.2327s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d).: 1.41762s (num_starts 10; 0.1418s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L6%1%allocaI1.: 1.41993s (num_starts 1; 1.4199s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.45174s (num_starts 10; 0.1452s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.4519s (num_starts 10; 0.1452s/start)
add_fresh_counterexample_at_pc_and_propagate.Lfor.cond2%1%bbentry_L9%1%bbentry.inductive-invariants.: 1.45762s (num_starts 96; 0.0152s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.48775s (num_starts 10; 0.1488s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.48786s (num_starts 10; 0.1488s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);pred-type-unknown.: 1.48816s (num_starts 10; 0.1488s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);pred-type-unknown.: 1.48827s (num_starts 10; 0.1488s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);linear.: 1.49273s (num_starts 16; 0.0933s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);linear.: 1.49286s (num_starts 16; 0.0933s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 1.50751s (num_starts 889; 0.0017s/start)
ldr_decompose_and_linear_solve.: 1.50826s (num_starts 464; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 1.51203s (num_starts 79; 0.0191s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 1.52522s (num_starts 127; 0.0120s/start)
corr_graph::get_aliasing_constraints_for_edge.: 1.5256s (num_starts 127; 0.0120s/start)
invariant_inference_xfer.src-branches-const-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 1.54533s (num_starts 8; 0.1932s/start)
bv_linear_solve.: 1.54964s (num_starts 464; 0.0033s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L0%1%allocaI1.inductive-invariants.: 1.55065s (num_starts 22; 0.0705s/start)
query:bv_solve.: 1.55238s (num_starts 464; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.55509s (num_starts 13; 0.1196s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.5553s (num_starts 13; 0.1196s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.56881s (num_starts 10; 0.1569s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.56895s (num_starts 10; 0.1569s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 1.58484s (num_starts 28; 0.0566s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);linear.: 1.59382s (num_starts 14; 0.1138s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);linear.: 1.59394s (num_starts 14; 0.1139s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.60413s (num_starts 15; 0.1069s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 1.60515s (num_starts 15; 0.1070s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 1.61955s (num_starts 25410; 0.0001s/start)
lhs_set_sort.: 1.63227s (num_starts 797; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);linear.: 1.65702s (num_starts 26; 0.0637s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);linear.: 1.65727s (num_starts 26; 0.0637s/start)
ce_reconcile_sorts.: 1.66265s (num_starts 307; 0.0054s/start)
parse_z3_model_neo.: 1.71265s (num_starts 219; 0.0078s/start)
check_wfconds_on_edge.Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d.: 1.71674s (num_starts 2; 0.8584s/start)
bv_solve_returning_intermediate_structures.: 1.74134s (num_starts 464; 0.0038s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.75761s (num_starts 8; 0.2197s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;false-predicate;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.75764s (num_starts 8; 0.2197s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;false-predicate.: 1.75794s (num_starts 8; 0.2197s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.75801s (num_starts 16; 0.1099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.78093s (num_starts 10; 0.1781s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.79287s (num_starts 16; 0.1121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.79313s (num_starts 16; 0.1121s/start)
segment_memory_and_perform_commonMEM_optimization.: 1.8007s (num_starts 797; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.80308s (num_starts 11; 0.1639s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.81146s (num_starts 24; 0.0755s/start)
tfg_asm_t::tfg_postprocess_after_pointsto_analysis.: 1.8215s (num_starts 1; 1.8215s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear.: 1.82239s (num_starts 22; 0.0828s/start)
gen_pred_from_coeff_row.simplify.: 1.83081s (num_starts 5929; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);linear.: 1.84661s (num_starts 23; 0.0803s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);linear.: 1.84678s (num_starts 23; 0.0803s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2.: 1.85446s (num_starts 5; 0.3709s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-eq-houdini-guess.: 1.85533s (num_starts 33; 0.0562s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.86278s (num_starts 15; 0.1242s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.86302s (num_starts 15; 0.1242s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 1.86433s (num_starts 20; 0.0932s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 1.87649s (num_starts 1936; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.89036s (num_starts 13; 0.1454s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.L0%0%d_L0%0%d.: 1.90184s (num_starts 7; 0.2717s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);linear.: 1.92564s (num_starts 26; 0.0741s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);linear.: 1.92586s (num_starts 26; 0.0741s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear.: 1.93084s (num_starts 31; 0.0623s/start)
bvsolve_cache_query.miss1.: 1.93419s (num_starts 464; 0.0042s/start)
bvsolve_cache_query.: 1.94652s (num_starts 464; 0.0042s/start)
counter_example_evaluate_preds.: 2.00257s (num_starts 9915; 0.0002s/start)
tfg_postprocess_after_pointsto_analysis.: 2.00728s (num_starts 2; 1.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.04191s (num_starts 11; 0.1856s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;linear.: 2.06692s (num_starts 15; 0.1378s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.0708s (num_starts 12; 0.1726s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lentry%1%allocaI4_L0%1%allocaI2.: 2.0784s (num_starts 6; 0.3464s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;linear.: 2.11976s (num_starts 20; 0.1060s/start)
collect_inductive_preds_around_path.: 2.13162s (num_starts 1854; 0.0011s/start)
compute_new_lr_status_on_locs.: 2.15509s (num_starts 625; 0.0034s/start)
guarded_predicate_set_and.: 2.15804s (num_starts 797; 0.0027s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.16833s (num_starts 17; 0.1275s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon).: 2.17135s (num_starts 30; 0.0724s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 2.21814s (num_starts 137; 0.0162s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.24062s (num_starts 15; 0.1494s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2).: 2.25225s (num_starts 41; 0.0549s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 2.3123s (num_starts 388; 0.0060s/start)
solve_for_bv_points.: 2.31388s (num_starts 464; 0.0050s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.33791s (num_starts 23; 0.1016s/start)
query:simplify-z3.: 2.379s (num_starts 29220; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.41086s (num_starts 10; 0.2411s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 2.4114s (num_starts 10; 0.2411s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 2.42039s (num_starts 797; 0.0030s/start)
collect_aliasing_constraints_around_path_helper.: 2.42239s (num_starts 805; 0.0030s/start)
collect_aliasing_constraints_around_path.: 2.42327s (num_starts 461; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.44881s (num_starts 16; 0.1531s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.45603s (num_starts 16; 0.1535s/start)
read_counter_examples_from_channel.: 2.46372s (num_starts 126; 0.0196s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.46956s (num_starts 23; 0.1074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.46964s (num_starts 23; 0.1074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;pred-type-unknown.: 2.47025s (num_starts 23; 0.1074s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 2.47034s (num_starts 23; 0.1074s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.5017s (num_starts 30; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;linear.: 2.51162s (num_starts 27; 0.0930s/start)
propagate_nodece_across_edge.: 2.52058s (num_starts 370; 0.0068s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.5889s (num_starts 31; 0.0835s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 2.59109s (num_starts 57; 0.0455s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 2.62923s (num_starts 797; 0.0033s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 2.66363s (num_starts 177; 0.0150s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.69222s (num_starts 15; 0.1795s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 2.69672s (num_starts 62; 0.0435s/start)
reconcile_memvar_using_constituents.: 2.69831s (num_starts 1758; 0.0015s/start)
reconcile_segmentation_in_counter_example.: 2.72232s (num_starts 226; 0.0120s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.72733s (num_starts 19; 0.1435s/start)
put_smtlib_string_in_file.: 2.72766s (num_starts 1352; 0.0020s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 2.78495s (num_starts 464; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;linear.: 2.79852s (num_starts 29; 0.0965s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;linear.: 2.81904s (num_starts 40; 0.0705s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;linear.: 2.82653s (num_starts 53; 0.0533s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 2.84496s (num_starts 15; 0.1897s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 2.9058s (num_starts 4339; 0.0007s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.91414s (num_starts 26; 0.1121s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.94875s (num_starts 24; 0.1229s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1).: 2.9752s (num_starts 39; 0.0763s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.98004s (num_starts 30; 0.0993s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.98075s (num_starts 19; 0.1569s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L14%1%bbentry;(epsilon).: 2.98193s (num_starts 19; 0.1569s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1).: 2.98904s (num_starts 35; 0.0854s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry).: 3.03526s (num_starts 199; 0.0153s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 3.07918s (num_starts 87; 0.0354s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.08634s (num_starts 40; 0.0772s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1).: 3.10764s (num_starts 50; 0.0622s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.1646s (num_starts 31; 0.1021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.20775s (num_starts 20; 0.1604s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.20791s (num_starts 20; 0.1604s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.208s (num_starts 20; 0.1604s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear.: 3.23792s (num_starts 34; 0.0952s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;linear.: 3.238s (num_starts 34; 0.0952s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);linear.: 3.23815s (num_starts 34; 0.0952s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1).: 3.2487s (num_starts 49; 0.0663s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 3.27021s (num_starts 1364; 0.0024s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.27325s (num_starts 34; 0.0963s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.28069s (num_starts 33; 0.0994s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 3.28314s (num_starts 1936; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 3.33019s (num_starts 80; 0.0416s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.33981s (num_starts 20; 0.1670s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 3.35437s (num_starts 10301; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1).: 3.36306s (num_starts 47; 0.0716s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.3763s (num_starts 21; 0.1608s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.38739s (num_starts 34; 0.0996s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 3.38879s (num_starts 797; 0.0043s/start)
apply_mask_and_overlay_array_constant.: 3.40332s (num_starts 4339; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.45998s (num_starts 13; 0.2662s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 3.46055s (num_starts 13; 0.2662s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear.: 3.4633s (num_starts 49; 0.0707s/start)
graph_edge_composition_get_simplified_edge_cond.: 3.5414s (num_starts 34882; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1).: 3.55651s (num_starts 89; 0.0400s/start)
invariant_inference_xfer.src-branches-const-ineq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 3.61485s (num_starts 16; 0.2259s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.61931s (num_starts 21; 0.1723s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.61993s (num_starts 21; 0.1724s/start)
gen_pred_from_coeff_row.: 3.68282s (num_starts 5929; 0.0006s/start)
decide_hoare_triple_helper;per-query-type;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.75065s (num_starts 51; 0.0735s/start)
compute_preds_for_bv_points.: 3.76303s (num_starts 343; 0.0110s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 3.76492s (num_starts 399; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);linear.: 3.95651s (num_starts 62; 0.0638s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);linear.: 3.95707s (num_starts 62; 0.0638s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.96424s (num_starts 28; 0.1416s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;linear.: 3.96774s (num_starts 104; 0.0382s/start)
tfg_run_pointsto_analysis_asm.: 4.04603s (num_starts 1; 4.0460s/start)
expr_substitute_using_available_exprs_submap.: 4.13968s (num_starts 6290; 0.0007s/start)
counter_example_translate_on_edge_composition_helper.: 4.20974s (num_starts 5739; 0.0007s/start)
invariant_inference_xfer.expr-group-bvs.from.Lfor.cond2%1%bbentry_L14%1%bbentry.: 4.24698s (num_starts 8; 0.5309s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.36283s (num_starts 33; 0.1322s/start)
decide_hoare_triple_helper;per-query-type;memeq-.: 4.45068s (num_starts 167; 0.0267s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L14%1%bbentry).: 4.47076s (num_starts 74; 0.0604s/start)
liveness_analysis_conservative::xfer_and_meet.: 4.48356s (num_starts 412; 0.0109s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.51565s (num_starts 51; 0.0885s/start)
populate_loc_liveness.: 4.53086s (num_starts 10; 0.4531s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 4.75456s (num_starts 56; 0.0849s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.L0%0%d_L0%0%d.: 4.78523s (num_starts 7; 0.6836s/start)
ftmap_run_pointsto_analysis.: 4.79045s (num_starts 2; 2.3952s/start)
tfg_populate_structs_after_ssa_construction.: 4.8291s (num_starts 2; 2.4145s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 4.87424s (num_starts 71; 0.0687s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 4.91854s (num_starts 2; 2.4593s/start)
decide_hoare_triple_helper;per-query-type;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.03132s (num_starts 54; 0.0932s/start)
check_dst_mls.: 5.21429s (num_starts 1; 5.2143s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry).: 5.29309s (num_starts 205; 0.0258s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry).: 5.3871s (num_starts 187; 0.0288s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI4_L0%1%allocaI2.: 5.4042s (num_starts 6; 0.9007s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 5.41768s (num_starts 625; 0.0087s/start)
invariant_inference_xfer.expr-group-bvs.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 5.47473s (num_starts 4; 1.3687s/start)
decide_hoare_triple_helper;-trivial.: 5.5728s (num_starts 1011; 0.0055s/start)
decide_hoare_triple_helper;per-query-type;expr-group-region_agrees_with_memlabel-houdini-guess.: 5.60393s (num_starts 129; 0.0434s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 5.74658s (num_starts 91; 0.0631s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.76248s (num_starts 36; 0.1601s/start)
edge_composition_apply_trans_funs_on_pred.: 5.7748s (num_starts 1700; 0.0034s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 5.7758s (num_starts 1936; 0.0030s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.01139s (num_starts 37; 0.1625s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;linear.: 6.13613s (num_starts 92; 0.0667s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.15638s (num_starts 80; 0.0770s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.30058s (num_starts 25; 0.2520s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 6.30159s (num_starts 25; 0.2521s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 6.37826s (num_starts 625; 0.0102s/start)
graph_ec_apply_trans_funs_helper.0.: 6.67838s (num_starts 22181; 0.0003s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry).: 6.70808s (num_starts 140; 0.0479s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.74564s (num_starts 36; 0.1874s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon).: 6.74768s (num_starts 36; 0.1874s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L14%1%bbentry;(Lfor.cond2%1%bbentry_L14%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry).: 6.75839s (num_starts 188; 0.0359s/start)
avail_exprs_create_submap.: 7.53101s (num_starts 1875; 0.0040s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 7.75259s (num_starts 38; 0.2040s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.85918s (num_starts 76; 0.1034s/start)
decide_hoare_triple_helper;per-query-type;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.05873s (num_starts 76; 0.1060s/start)
check_equivalence_proof.: 8.08079s (num_starts 1; 8.0808s/start)
expr_do_simplify_using_lhs_set_and_precond.: 8.1158s (num_starts 8109; 0.0010s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2).: 8.17526s (num_starts 139; 0.0588s/start)
check_wfconds_on_edge.: 8.25897s (num_starts 43; 0.1921s/start)
add_fresh_counterexample_at_pc_and_propagate.: 9.98069s (num_starts 263; 0.0379s/start)
decide_hoare_triple.: 11.9366s (num_starts 60; 0.1989s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L0%1%allocaI1.: 12.23s (num_starts 4; 3.0575s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 12.3535s (num_starts 625; 0.0198s/start)
dst_edge_composition_proves_false.: 13.5465s (num_starts 25; 0.5419s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 13.8345s (num_starts 236; 0.0586s/start)
get_next_dst_edge_composition_to_correlate.: 13.9208s (num_starts 17; 0.8189s/start)
check_preds_on_edge_compositions.: 14.5985s (num_starts 48; 0.3041s/start)
tfg_relax_pointsto_vals_on_edge.: 14.9296s (num_starts 448; 0.0333s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 23.3231s (num_starts 144; 0.1620s/start)
decide_hoare_triple_helper;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 28.8966s (num_starts 259; 0.1116s/start)
decide_hoare_triple_helper;per-query-type;linear.: 33.7104s (num_starts 608; 0.0554s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 37.4833s (num_starts 7; 5.3548s/start)
decide_hoare_triple_with_alias_cons.ce.: 42.9184s (num_starts 1415; 0.0303s/start)
query:smt.: 46.7286s (num_starts 676; 0.0691s/start)
graph_ec_apply_trans_funs_helper.1.: 48.908s (num_starts 42330; 0.0012s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 49.1248s (num_starts 416; 0.1181s/start)
tfg_get_preimage_for_expr_across_edge_composition.computeWP_for_pred_across_ec.: 49.2981s (num_starts 42168; 0.0012s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 55.7844s (num_starts 62265; 0.0009s/start)
graph_ec_apply_trans_funs_helper.: 55.7885s (num_starts 64511; 0.0009s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 55.8901s (num_starts 64511; 0.0009s/start)
computeWP_for_pred_across_ec.: 55.9346s (num_starts 62265; 0.0009s/start)
solver_provable.: 57.1486s (num_starts 797; 0.0717s/start)
solver_satisfiable-cache-miss.: 57.2417s (num_starts 676; 0.0847s/start)
solver_satisfiable.: 57.2473s (num_starts 798; 0.0717s/start)
expr_is_provable.: 58.2908s (num_starts 797; 0.0731s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 61.6888s (num_starts 797; 0.0774s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 64.7343s (num_starts 797; 0.0812s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 64.8392s (num_starts 797; 0.0814s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 67.1926s (num_starts 797; 0.0843s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 68.5183s (num_starts 797; 0.0860s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 68.5367s (num_starts 797; 0.0860s/start)
is_expr_equal_using_lhs_set_and_precond.: 68.5545s (num_starts 797; 0.0860s/start)
prove.: 68.5698s (num_starts 797; 0.0860s/start)
prove_spawn_and_join_helper.: 68.5746s (num_starts 797; 0.0860s/start)
prove_spawn_and_join.: 73.6545s (num_starts 797; 0.0924s/start)
prove_wrapper.proof_query_not_trivial.: 74.2848s (num_starts 797; 0.0932s/start)
prove_wrapper.: 74.9798s (num_starts 1686; 0.0445s/start)
decide_hoare_triple_check_ub.: 80.8738s (num_starts 1686; 0.0480s/start)
decide_hoare_triple_helper.: 83.6764s (num_starts 1686; 0.0496s/start)
corr_graph::add_edge().: 103.112s (num_starts 70; 1.4730s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 104.138s (num_starts 56; 1.8596s/start)
corr_graph_add_correlation.: 108.894s (num_starts 56; 1.9445s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 108.899s (num_starts 56; 1.9446s/start)
update_invariant_state_for_edges.: 117.543s (num_starts 21; 5.5973s/start)
cg_check_new_cg_ec.: 117.543s (num_starts 21; 5.5973s/start)
correl_entry_apply.: 117.544s (num_starts 21; 5.5974s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 126.36s (num_starts 168; 0.7521s/start)
decide_hoare_triple_with_alias_cons.: 126.624s (num_starts 1686; 0.0751s/start)
expandProductCFG.: 131.883s (num_starts 22; 5.9947s/start)
bestFirstSearch.: 241.144s (num_starts 1; 241.1444s/start)
Time taken for equivalence check.: 255.21s (num_starts 1; 255.2104s/start)

counters:
# of Paths Prunned through CE propagation.: 32
# of assume sat failures for cg-edge-assume-alloca-ptr-eq.: 21
# of assume sat failures for cg-edge-assume-unknown.: 50
# of assume sat failures for undef-behavioursome.edge.L22%1%d=>L22%1%spver.: 8
# of assume sat failures for undef-behavioursome.edge.Lfor.body11%1%d=>Lfor.body11%5%d.: 3
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 32
# of paths enumerated.: 207
# of paths expanded.: 21
# of queries to linear solver.: 464
# of smt-solver-queries.: 676
L0%0%d=>L9%1%bbentry-src_ecs.: 54
L0%0%d=>L9%1%bbentry-src_to_pcs.: 3
L9%1%bbentry=>E0%0%d-src_ecs.: 3
L9%1%bbentry=>E0%0%d-src_to_pcs.: 1
L9%1%bbentry=>L9%1%bbentry-src_ecs.: 4
L9%1%bbentry=>L9%1%bbentry-src_to_pcs.: 1
Memory Fuzing CE.: 84
num-backtrackings.: 13
removed-siblings.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L14%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 16
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 12
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.dst-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 0
smallest_point_cover_xfer.dst-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-ineq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 4
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 44
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 109
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 15
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 21
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 2
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 2
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 9
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 66
smallest_point_cover_xfer.expr-group-bvs.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.expr-group-bvs.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 45
smallest_point_cover_xfer.expr-group-bvs.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 22
smallest_point_cover_xfer.expr-group-bvs.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 28
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.L0%0%d_L0%0%d.prove_queries.: 30
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 12
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 9
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 12
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.local-eq-lsprel-guess.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.local-eq-lsprel-guess.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 6
smallest_point_cover_xfer.local-sizes-are-equal.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.local-sizes-are-equal.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.local-sizes-are-equal.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.mem-allocs-equality.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L7%1%allocaI2.iters.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L7%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.mem-allocs-equality.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.mem-allocs-equality.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memlabel-is-absent.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.memlabel-is-absent.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.memlabel-is-absent.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L7%1%allocaI2.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L7%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.L0%0%d_L0%0%d.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.L0%0%d_L0%0%d.prove_queries.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI4_L7%1%allocaI2.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI4_L7%1%allocaI2.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L7%1%allocaI2.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L7%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI4_L7%1%allocaI2.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI4_L7%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L7%1%allocaI2.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L7%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.ml-lb-addr-eq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-ub-eq.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.ml-lb-ub-eq.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 6
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-ub-ineq.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.ml-lb-ub-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 6
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.sp-below-isp.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 6
smallest_point_cover_xfer.sp-below-isp.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 8
smallest_point_cover_xfer.sp-below-isp.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.sp-below-isp.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.sp-ml-lb-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 9
smallest_point_cover_xfer.src-branches-const-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.iters.: 16
smallest_point_cover_xfer.src-branches-const-ineq.from.Lfor.cond2%1%bbentry_L14%1%bbentry.prove_queries.: 42
smallest_point_cover_xfer.src-branches-const-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 8
smallest_point_cover_xfer.src-branches-const-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 18
smt-queries-cache-hits.: 122
smt-queries-cvc4-sat.: 31
smt-queries-yices-sat.: 57
smt-queries-z3-sat.: 219
total-correlation-possibilities.: 111
total-correlation-possibilities-mod-lsprels.: 66
total-correlations-explored.: 22

flags:
dst-aloc.: 24
dst-edges.: 33
dst-nodes.: 31
dst-sp-updates.: 10
final-CG-alloc-correlations.: 1
final-CG-counterexamples-generated-at-Lentry%1%allocaI3_L0%1%allocaI1.: 15
final-CG-counterexamples-generated-at-Lentry%1%allocaI4_L0%1%allocaI2.: 9
final-CG-counterexamples-generated-at-Lfor.cond2%1%bbentry_L9%1%bbentry.: 8
final-CG-counterexamples-total-at-Lentry%1%allocaI3_L0%1%allocaI1.: 15
final-CG-counterexamples-total-at-Lentry%1%allocaI4_L0%1%allocaI2.: 11
final-CG-counterexamples-total-at-Lfor.cond2%1%bbentry_L9%1%bbentry.: 46
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 5
final-CG-num-invariants.: 96
final-CG-super-edges.: 1
src-allocation-stmts.: 1
src-edges.: 23
src-nodes.: 19
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 35.82
final-CG-time-to-total-time-ratio.: 0.15
query-time-to-total-time-ratio.: 0.17

Context stats:
exprs: count: 209383
sorts: count: 179
num_proof_queries: 797
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	409034
	        hit ratio:	0.984072
m_simplify_solver:
	----------- total:	60355
	        hit ratio:	0.757783
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	15122
	        hit ratio:	0.775757
m_z3_solver_substitution:
	----------- total:	14610
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	14619
	        hit ratio:	0
m_is_expr_not_equal_syntactic:
	----------- total:	19
	        hit ratio:	0.947368
m_expr_size:
	----------- total:	129973
	        hit ratio:	0.872697
m_contains_only_constants_or_sp_versions:
	----------- total:	68
	        hit ratio:	0.75
m_expr_evaluates_to_constant_visitor:
	----------- total:	7261184
	        hit ratio:	0.991035

z3_solver expr_query_cache entry size: 676
	----------- total:	798
	             hits:	122
	        hit ratio:	0.152882
histogram (time taken by solver in ms):
[  5.8510,   9.5314) (avg.   7.9893)     : 3
[  9.5314,  15.5270) (avg.  13.4264)     : 17
[ 15.5270,  25.2938) (avg.  19.9783)     : 119
[ 25.2938,  41.2043) (avg.  33.3982)     : 126
[ 41.2043,  67.1229) (avg.  47.8744)     : 193
[ 67.1229, 109.3450) (avg.  92.8260)     : 110
[109.3450, 178.1259) (avg. 141.6727)     : 60
[178.1259, 290.1719) (avg. 202.9913)     : 36
[290.1719, 472.6977) (avg. 337.1640)     : 10
[472.6977, 770.0370) (avg. 626.6925)     : 2
histogram (number of quantifiers in query)
[ 0,  2) (avg.  1)                       : 268
[ 2,  4) (avg.  3)                       : 211
[ 4,  6) (avg.  0)                       : 0
[ 6,  8) (avg.  7)                       : 183
[ 8, 10) (avg.  8)                       : 9
[10, 12) (avg. 10)                       : 5
[12, 14) (avg.  0)                       : 0
[14, 16) (avg.  0)                       : 0
[16, 18) (avg.  0)                       : 0
[18, 20) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[ 201,  305) (avg.  247)                 : 3
[ 305,  409) (avg.    0)                 : 0
[ 409,  513) (avg.  437)                 : 4
[ 513,  617) (avg.  590)                 : 211
[ 617,  721) (avg.  684)                 : 161
[ 721,  825) (avg.  762)                 : 76
[ 825,  929) (avg.  886)                 : 104
[ 929, 1033) (avg.  990)                 : 45
[1033, 1137) (avg. 1052)                 : 65
[1137, 1241) (avg. 1200)                 : 7
Top 10 highest time taking queries:
1. [0.769s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.63.from_pcLentry%1%allocaI3_L6%1%allocaI1.cond_apply_set_elem0_of_1.0
2. [0.484s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.62.from_pcLentry%1%allocaI3_L4%1%allocaI1.cond_apply_set_elem0_of_1.0
3. [0.428s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.56.from_pcLentry%1%allocaI3_L1%1%allocaI1.cond_apply_set_elem0_of_1.0
4. [0.414s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.exit.boolbv.llvm-indir_tgt.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.cond_apply_set_elem0_of_1.1
5. [0.361s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.exit.boolbv.llvm-indir_tgt.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.cond_apply_set_elem0_of_1.0
6. [0.353s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.expr-group-bvs.linear2-32-free_var_idx.68.from_pcLentry%1%allocaI3_L7%1%allocaI1.cond_apply_set_elem0_of_1.0
7. [0.321s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.60.from_pcLentry%1%allocaI3_L3%1%allocaI1.cond_apply_set_elem0_of_1.0
8. [0.318s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear4-32-free_var_idx.23.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
9. [0.297s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.expr-group-bvs.linear2-32-free_var_idx.91.from_pcLentry%1%allocaI4_L0%1%allocaI2.cond_apply_set_elem0_of_1.1
10. [0.295s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.Lfor.cond2%1%bbentry_L9%1%bbentry.dstToPC.E0%0%d.from_pcLfor.cond2%1%bbentry_L.7

<MSG>5:08 : Successfully computed equivalence for function: main.
</MSG>

tfg_edge_expr_wp_fn: num_starts 28935 time spent: 0:0:1 [1.425579s total; 0.000049 per start]
tfg_computeWP: num_starts 463001 time spent: 0:0:50 [50.214774s total; 0.000108 per start]
tfg_get_simplified_to_state_for_edge: num_starts 567868 time spent: 0:0:0 [0.856209s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 117693 time spent: 0:0:0 [0.163412s total; 0.000001 per start]
tfg_get_simplified_assumes_for_edge: num_starts 68501 time spent: 0:0:0 [0.085335s total; 0.000001 per start]
add_nodeces_at_pc_and_propagate: num_starts 287 time spent: 0:0:13 [13.292722s total; 0.046316 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 140 time spent: 0:0:8 [8.871892s total; 0.063371 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 8020 time spent: 0:0:3 [3.931927s total; 0.000490 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 1751 time spent: 0:0:1 [1.839316s total; 0.001050 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 6837 time spent: 0:0:2 [2.535380s total; 0.000371 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 66661 time spent: 0:0:4 [4.203701s total; 0.000063 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 6848 time spent: 0:0:0 [0.696653s total; 0.000102 per start]
tfg_graph_get_vars_written_on_edge: num_starts 6837 time spent: 0:0:0 [0.241859s total; 0.000035 per start]
cg_with_rank_add_CE_at_pc: num_starts 646 time spent: 0:0:10 [10.761377s total; 0.016658 per start]
graph_with_ce_add_CE_at_pc: num_starts 461 time spent: 0:0:0 [0.022067s total; 0.000048 per start]
graph_with_guessing_add_CE_at_pc: num_starts 646 time spent: 0:0:10 [10.739651s total; 0.016625 per start]
point_set_add_point_using_CE: num_starts 7858 time spent: 0:0:3 [3.347219s total; 0.000426 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 7858 time spent: 0:0:3 [3.365457s total; 0.000428 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 475 time spent: 0:0:10 [10.461367s total; 0.022024 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 475 time spent: 0:0:7 [7.061534s total; 0.014866 per start]
expr_label_memlabels_using_memlabel_map: num_starts 168348 time spent: 0:0:2 [2.495190s total; 0.000015 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 20613 time spent: 0:0:1 [1.022197s total; 0.000050 per start]
expr_simplify_solver: num_starts 62647 time spent: 0:0:3 [3.888493s total; 0.000062 per start]
expr_simplify_syntactic: num_starts 62647 time spent: 0:0:3 [3.614859s total; 0.000058 per start]
expr_simplify_select_on_store: num_starts 2169 time spent: 0:0:1 [1.633723s total; 0.000753 per start]
expr_simplify_store_on_store: num_starts 784 time spent: 0:0:0 [0.229196s total; 0.000292 per start]
expr_simplify_using_lhs_set_helper: num_starts 8506 time spent: 0:0:8 [8.482534s total; 0.000997 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 107122 time spent: 0:0:8 [8.397656s total; 0.000078 per start]
expr_evaluates_to_constant: num_starts 7157624 time spent: 0:0:6 [6.919494s total; 0.000001 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 65202 time spent: 0:0:0 [0.130258s total; 0.000002 per start]
expr_simplify_eq: num_starts 3842 time spent: 0:0:0 [0.040935s total; 0.000011 per start]
expr_simplify_iff: num_starts 100 time spent: 0:0:0 [0.000036s total; 0.000000 per start]
expr_simplify_or: num_starts 2241 time spent: 0:0:0 [0.001937s total; 0.000001 per start]
expr_simplify_and: num_starts 3506 time spent: 0:0:0 [0.017216s total; 0.000005 per start]
expr_simplify_andnot1: num_starts 2241 time spent: 0:0:0 [0.027091s total; 0.000012 per start]
expr_simplify_andnot2: num_starts 512 time spent: 0:0:0 [0.004921s total; 0.000010 per start]
expr_simplify_not: num_starts 1438 time spent: 0:0:0 [0.002069s total; 0.000001 per start]
expr_simplify_implies: num_starts 126 time spent: 0:0:0 [0.000861s total; 0.000007 per start]
expr_simplify_ite: num_starts 2703 time spent: 0:0:0 [0.097802s total; 0.000036 per start]
canonicalize_expr_tree: num_starts 15225 time spent: 0:0:0 [0.407219s total; 0.000027 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1665 time spent: 0:0:0 [0.006162s total; 0.000004 per start]
expr_simplify_select_on_store_visit_function: num_starts 2504 time spent: 0:0:1 [1.592952s total; 0.000636 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 205 time spent: 0:0:0 [0.135879s total; 0.000663 per start]
memlabel_contains_only_readonly_symbols: num_starts 6757 time spent: 0:0:0 [0.001102s total; 0.000000 per start]
memlabels_are_independent: num_starts 2274 time spent: 0:0:0 [0.006296s total; 0.000003 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 146 time spent: 0:0:0 [0.066775s total; 0.000457 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 556 time spent: 0:0:0 [0.157807s total; 0.000284 per start]
is_overlapping_atoms_pair_syntactic: num_starts 556 time spent: 0:0:0 [0.111507s total; 0.000201 per start]
is_overlapping_considering_type_constraints: num_starts 146 time spent: 0:0:0 [0.002606s total; 0.000018 per start]
find_offset_wrt_typed_variable_pointer: num_starts 154 time spent: 0:0:0 [0.002587s total; 0.000017 per start]
is_gep_inbounds_offset: num_starts 154 time spent: 0:0:0 [0.001957s total; 0.000013 per start]
get_arithmetic_addsub_atoms: num_starts 27774822 time spent: 0:0:7 [7.558336s total; 0.000000 per start]
expr_is_variable_start: num_starts 203 time spent: 0:0:0 [0.000071s total; 0.000000 per start]
insn_md_assemble: num_starts 48 time spent: 0:0:0 [0.000084s total; 0.000002 per start]
expr_linear_relation_holds_visit: num_starts 35712 time spent: 0:0:0 [0.209830s total; 0.000006 per start]
expr_is_consts_struct_constant: num_starts 53939 time spent: 0:0:0 [0.021541s total; 0.000000 per start]
expr_do_simplify_helper: num_starts 411372 time spent: 0:0:8 [8.188119s total; 0.000020 per start]
expr_do_simplify_helper_cache: num_starts 411372 time spent: 0:0:0 [0.381644s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 9300 time spent: 0:0:0 [0.009122s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 9300 time spent: 0:0:0 [0.020196s total; 0.000002 per start]
evaluate_expr_and_check_bounds: num_starts 67994 time spent: 0:0:5 [5.215078s total; 0.000077 per start]
combo_dfa_xfer_and_meet: num_starts 177 time spent: 0:0:2 [2.663473s total; 0.015048 per start]
alias_val_xfer_and_meet: num_starts 177 time spent: 0:0:1 [1.058966s total; 0.005983 per start]
get_sprel_map_from_avail_exprs: num_starts 297 time spent: 0:0:0 [0.315642s total; 0.001063 per start]
update_memlabels_for_memslot_locs: num_starts 140 time spent: 0:0:0 [0.175374s total; 0.001253 per start]
populate_gen_and_kill_sets_for_edge: num_starts 1250 time spent: 0:0:1 [1.035893s total; 0.000829 per start]
compute_simplified_loc_exprs_for_edge: num_starts 2658 time spent: 0:0:2 [2.989765s total; 0.001125 per start]
compute_locs_definitely_written_on_edge: num_starts 1250 time spent: 0:0:0 [0.016139s total; 0.000013 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 2340 time spent: 0:0:0 [0.688836s total; 0.000294 per start]
edge_update_memlabel_map_for_mlvars: num_starts 625 time spent: 0:0:0 [0.143596s total; 0.000230 per start]
add_new_locs_based_on_edge: num_starts 177 time spent: 0:0:0 [0.511388s total; 0.002889 per start]
alias_val_meet: num_starts 625 time spent: 0:0:0 [0.766714s total; 0.001227 per start]
expand_locset_to_include_slots_for_memmask: num_starts 3229 time spent: 0:0:0 [0.098710s total; 0.000031 per start]
total: num_starts 1 time spent: 0:5:11 [311.912090s total; 311.912090 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 260.81s.
ftmap_run_pointsto_analysis.: 4.79045s (num_starts 2; 2.3952s/start)s.
EQ Time after pointsto analysis: 256.023s.
EQ Time after pointsto analysis and smt_query: 181.043s.
EQ Time after pointsto analysis and smt_query and bv-solve: 179.096s.
Equivalence proof found. The programs are equivalent.
