argv[0] = eq32
argv[1] = --check-safety
argv[2] = --unroll-factor
argv[3] = 3
argv[4] = emi9f.c
argv[5] = emi9f.fixed.s
argv[6] = --proof
argv[7] = emi9f.fixed.cg
Query dir: /tmp/smt-solver-tmp-files/sbansal.1341819
argv[0] = /home/sbansal/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/sbansal/superopt-project/superopt-tests/soundness/emi9f.c
argv[10] = -o
argv[11] = /home/sbansal/superopt-project/superopt-tests/soundness/emi9f.c.bc.tmp
argv[12] = -m32

argv[0] = /home/sbansal/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = /home/sbansal/superopt-project/superopt-tests/soundness/emi9f.c.bc
argv[9] = -o
argv[10] = emi9f.c.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function main</MSG>


tfg_get_simplified_edge_cond_for_edge: num_starts 232 time spent: 0:0:0 [0.000324s total; 0.000001 per start]
tfg_get_simplified_assumes_for_edge: num_starts 226 time spent: 0:0:0 [0.000291s total; 0.000001 per start]
expr_label_memlabels_using_memlabel_map: num_starts 3302 time spent: 0:0:0 [0.033201s total; 0.000010 per start]
expr_simplify_solver: num_starts 16204 time spent: 0:0:0 [0.347263s total; 0.000021 per start]
expr_simplify_syntactic: num_starts 16204 time spent: 0:0:6 [6.039195s total; 0.000373 per start]
expr_simplify_select_on_store: num_starts 4261 time spent: 0:0:4 [4.350169s total; 0.001021 per start]
expr_simplify_store_on_store: num_starts 3236 time spent: 0:0:0 [0.171343s total; 0.000053 per start]
expr_simplify_using_lhs_set_helper: num_starts 3607 time spent: 0:0:6 [6.626648s total; 0.001837 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 47127 time spent: 0:0:6 [6.594657s total; 0.000140 per start]
expr_evaluates_to_constant: num_starts 40932 time spent: 0:0:0 [0.094898s total; 0.000002 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 9541 time spent: 0:0:0 [0.016165s total; 0.000002 per start]
expr_simplify_eq: num_starts 6 time spent: 0:0:0 [0.000062s total; 0.000010 per start]
expr_simplify_not: num_starts 3 time spent: 0:0:0 [0.000003s total; 0.000001 per start]
expr_simplify_ite: num_starts 8 time spent: 0:0:0 [0.000440s total; 0.000055 per start]
canonicalize_expr_tree: num_starts 2131 time spent: 0:0:0 [0.056584s total; 0.000027 per start]
expr_simplify_memalloc_using_memlabel: num_starts 3234 time spent: 0:0:0 [0.007957s total; 0.000002 per start]
expr_simplify_select_on_store_visit_function: num_starts 5809 time spent: 0:0:4 [4.262548s total; 0.000734 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 1491 time spent: 0:0:0 [0.587666s total; 0.000394 per start]
memlabel_contains_only_readonly_symbols: num_starts 1491 time spent: 0:0:0 [0.000310s total; 0.000000 per start]
memlabels_are_independent: num_starts 3840 time spent: 0:0:0 [0.012531s total; 0.000003 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 747 time spent: 0:0:0 [0.169749s total; 0.000227 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 747 time spent: 0:0:0 [0.164575s total; 0.000220 per start]
is_overlapping_atoms_pair_syntactic: num_starts 747 time spent: 0:0:0 [0.145286s total; 0.000194 per start]
is_overlapping_considering_type_constraints: num_starts 747 time spent: 0:0:0 [0.005016s total; 0.000007 per start]
find_offset_wrt_typed_variable_pointer: num_starts 1494 time spent: 0:0:0 [0.004916s total; 0.000003 per start]
is_gep_inbounds_offset: num_starts 1494 time spent: 0:0:0 [0.000136s total; 0.000000 per start]
get_arithmetic_addsub_atoms: num_starts 43084 time spent: 0:0:0 [0.029778s total; 0.000001 per start]
expr_is_variable_start: num_starts 981 time spent: 0:0:0 [0.000083s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 2478 time spent: 0:0:0 [0.014150s total; 0.000006 per start]
expr_is_consts_struct_constant: num_starts 4231 time spent: 0:0:0 [0.001963s total; 0.000000 per start]
expr_do_simplify_helper: num_starts 16329 time spent: 0:0:6 [6.660079s total; 0.000408 per start]
expr_do_simplify_helper_cache: num_starts 16329 time spent: 0:0:0 [0.012643s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 16 time spent: 0:0:0 [0.000003s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 16 time spent: 0:0:0 [0.000034s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 213 time spent: 0:0:1 [1.738933s total; 0.008164 per start]
alias_val_xfer_and_meet: num_starts 213 time spent: 0:0:1 [1.487616s total; 0.006984 per start]
get_sprel_map_from_avail_exprs: num_starts 271 time spent: 0:0:0 [0.034190s total; 0.000126 per start]
update_memlabels_for_memslot_locs: num_starts 57 time spent: 0:0:0 [0.021455s total; 0.000376 per start]
populate_gen_and_kill_sets_for_edge: num_starts 426 time spent: 0:0:0 [0.068641s total; 0.000161 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1151 time spent: 0:0:6 [6.447088s total; 0.005601 per start]
compute_locs_definitely_written_on_edge: num_starts 426 time spent: 0:0:0 [0.000286s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 1860 time spent: 0:0:1 [1.283487s total; 0.000690 per start]
edge_update_memlabel_map_for_mlvars: num_starts 213 time spent: 0:0:0 [0.034243s total; 0.000161 per start]
add_new_locs_based_on_edge: num_starts 213 time spent: 0:0:0 [0.150708s total; 0.000708 per start]
alias_val_meet: num_starts 213 time spent: 0:0:0 [0.035703s total; 0.000168 per start]
expand_locset_to_include_slots_for_memmask: num_starts 1882 time spent: 0:0:0 [0.098928s total; 0.000053 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
remove_function_name_from_symbols.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 3e-06s (num_starts 1; 0.0000s/start)
set_symbol_map_for_touched_symbols.: 4e-06s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 3e-05s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 3.8e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 4.8e-05s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 6.1e-05s (num_starts 1; 0.0001s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::conservative_dfa_val_for_newly_defined_loc.: 0.000101s (num_starts 9; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::conservative_dfa_val_for_newly_defined_loc.: 0.000108s (num_starts 9; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 0.000119s (num_starts 214; 0.0000s/start)
populate_locid2expr_map.: 0.000134s (num_starts 1; 0.0001s/start)
determinize_value_expr_map.: 0.000188s (num_starts 229; 0.0000s/start)
compute_sprel_relations.: 0.000218s (num_starts 1; 0.0002s/start)
propagate_sprels.: 0.000228s (num_starts 1; 0.0002s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000256s (num_starts 38; 0.0000s/start)
expr_is_hidden_reg.: 0.000302s (num_starts 498; 0.0000s/start)
main.3.: 0.000347s (num_starts 1; 0.0003s/start)
expr_is_callee_save_const.: 0.000389s (num_starts 502; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000533s (num_starts 113; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000583s (num_starts 1; 0.0006s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000673s (num_starts 17; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000697s (num_starts 113; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000748s (num_starts 1; 0.0007s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000778s (num_starts 2; 0.0004s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000835s (num_starts 213; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.001024s (num_starts 1; 0.0010s/start)
sp_version_relations_val_t::meet.: 0.001752s (num_starts 5154; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.001819s (num_starts 226; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.001902s (num_starts 2; 0.0010s/start)
expr_represents_llvm_undef.: 0.002012s (num_starts 504; 0.0000s/start)
canonicalize_llvm_nextpcs.: 0.002056s (num_starts 1; 0.0021s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.002725s (num_starts 1; 0.0027s/start)
def_analysis::xfer_and_meet.: 0.00296s (num_starts 226; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.002961s (num_starts 1; 0.0030s/start)
populate_exit_return_values_for_llvm_method.: 0.00364s (num_starts 1; 0.0036s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.004181s (num_starts 20; 0.0002s/start)
create_closure_matrix.: 0.005968s (num_starts 270; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.006215s (num_starts 208; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.008043s (num_starts 165; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.009797s (num_starts 6612; 0.0000s/start)
graph_visit_exprs.: 0.009864s (num_starts 4; 0.0025s/start)
populate_dominator_and_postdominator_relations.: 0.010342s (num_starts 1; 0.0103s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.011066s (num_starts 1; 0.0111s/start)
expr_linear_relation_holds::visit.var.: 0.011564s (num_starts 914; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.01198s (num_starts 141; 0.0001s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.018666s (num_starts 213; 0.0001s/start)
graph_identify_back_edges.: 0.019531s (num_starts 4; 0.0049s/start)
graph_identify_natural_loops.: 0.019878s (num_starts 4; 0.0050s/start)
graph_locs_map_update_memlabels_for_memslot_locs_with_memalloc.calling.compute_lr_status_for_expr.: 0.02085s (num_starts 360; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.023608s (num_starts 1; 0.0236s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.023891s (num_starts 1; 0.0239s/start)
tfg::populate_loc_definedness.before_solve.: 0.02391s (num_starts 2; 0.0120s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.024516s (num_starts 1; 0.0245s/start)
tfg::populate_loc_definedness.before_initialize.: 0.024719s (num_starts 2; 0.0124s/start)
tfg::populate_loc_definedness.: 0.025383s (num_starts 2; 0.0127s/start)
create_sp_version_relations_lattice_at_pc.: 0.02613s (num_starts 270; 0.0001s/start)
compute_regions.: 0.026399s (num_starts 4; 0.0066s/start)
find_dominators.: 0.028146s (num_starts 6; 0.0047s/start)
lr_status_meet.: 0.028498s (num_starts 18491; 0.0000s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.030592s (num_starts 213; 0.0001s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.034014s (num_starts 213; 0.0002s/start)
populate_branch_affecting_locs.: 0.03586s (num_starts 2; 0.0179s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.042033s (num_starts 213; 0.0002s/start)
graph_to_stream.: 0.042643s (num_starts 1; 0.0426s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.047936s (num_starts 213; 0.0002s/start)
tfg_preprocess.src.llvm.main.: 0.054312s (num_starts 1; 0.0543s/start)
tfg::tfg_preprocess.: 0.054315s (num_starts 1; 0.0543s/start)
query:convert_from_z3.: 0.054638s (num_starts 2129; 0.0000s/start)
query:convert_to_z3.: 0.062502s (num_starts 2129; 0.0000s/start)
avail_exprs_create_submap.: 0.067922s (num_starts 639; 0.0001s/start)
get_tfg.: 0.09022s (num_starts 1; 0.0902s/start)
get_function_tfg_map.main.: 0.090293s (num_starts 1; 0.0903s/start)
get_function_tfg_map.: 0.090296s (num_starts 1; 0.0903s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.108857s (num_starts 185; 0.0006s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.109138s (num_starts 185; 0.0006s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.116504s (num_starts 213; 0.0005s/start)
main.2.: 0.128075s (num_starts 1; 0.1281s/start)
compute_lr_status_for_expr.: 0.139147s (num_starts 723; 0.0002s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.157545s (num_starts 1; 0.1575s/start)
query:simplify-z3.: 0.167012s (num_starts 4258; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.280641s (num_starts 3302; 0.0001s/start)
populate_simplified_to_state.: 0.289283s (num_starts 2; 0.1446s/start)
populate_simplified_assets.: 0.298226s (num_starts 4; 0.0746s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.625817s (num_starts 3302; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.628957s (num_starts 3302; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.666111s (num_starts 3302; 0.0002s/start)
compute_new_lr_status_on_locs.: 1.25676s (num_starts 213; 0.0059s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 1.48964s (num_starts 213; 0.0070s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 1.73911s (num_starts 213; 0.0082s/start)
populate_locs_potentially_modified_on_edge.: 1.92568s (num_starts 2; 0.9628s/start)
populate_auxilliary_structures_dependent_on_locs.: 2.22391s (num_starts 2; 1.1120s/start)
parse_consts_db.: 3.46933s (num_starts 1; 3.4693s/start)
liveness_analysis_conservative::xfer_and_meet.: 4.72941s (num_starts 286; 0.0165s/start)
populate_loc_liveness.: 4.7632s (num_starts 2; 2.3816s/start)
expr_do_simplify_using_lhs_set_and_precond.: 6.63142s (num_starts 3607; 0.0018s/start)
tfg_postprocess_after_pointsto_analysis.: 7.0841s (num_starts 1; 7.0841s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 7.29055s (num_starts 1; 7.2906s/start)
ftmap_run_pointsto_analysis.: 9.08852s (num_starts 1; 9.0885s/start)
main.: 12.7808s (num_starts 1; 12.7808s/start)

counters:

flags:

info:


 /home/sbansal/superopt-project/usr/local/bin/harvest32 -functions_only -live_callee_save -allow_unsupported -no_canonicalize_imms -no_eliminate_unreachable_bbls -no_eliminate_duplicates -f ALL -o /home/sbansal/superopt-project/superopt-tests/soundness/emi9f.fixed.s.o.harvest -l /home/sbansal/superopt-project/superopt-tests/soundness/emi9f.fixed.s.o.harvest.log /home/sbansal/superopt-project/superopt-tests/soundness/emi9f.fixed.s.o
Printing stats::get():
timers:
i386_init_costfns.: 1e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 4e-06s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 4.5e-05s (num_starts 1; 0.0000s/start)
src_iseq_fetch.: 4.6e-05s (num_starts 2; 0.0000s/start)
src_iseq_copy.: 4.7e-05s (num_starts 13; 0.0000s/start)
context_constructor.: 5.4e-05s (num_starts 1; 0.0001s/start)
obtain_live_outs.: 7.7e-05s (num_starts 1; 0.0001s/start)
imm_vt_map_copy.: 0.000226s (num_starts 756; 0.0000s/start)
regset_diff.: 0.000309s (num_starts 40; 0.0000s/start)
regset_rename.: 0.000551s (num_starts 84; 0.0000s/start)
i386_insn_init_constants.: 0.001147s (num_starts 1; 0.0011s/start)
src_iseq_get_usedef.: 0.001913s (num_starts 2; 0.0010s/start)
src_iseq_get_usedef_regs.: 0.001918s (num_starts 2; 0.0010s/start)
gas_init.: 0.001937s (num_starts 1; 0.0019s/start)
insn_db_list_get_all_matches.: 0.005126s (num_starts 35; 0.0001s/start)
insn_db_get_all_matches.: 0.005221s (num_starts 35; 0.0001s/start)
opctable_init.: 0.005871s (num_starts 1; 0.0059s/start)
src_insn_get_usedef.: 0.006062s (num_starts 35; 0.0002s/start)
init_input_file.: 0.006985s (num_starts 1; 0.0070s/start)
src_iseq_deserialize.: 2.93639s (num_starts 44336; 0.0001s/start)
opc_init.: 3.46108s (num_starts 1; 3.4611s/start)
i386_init.: 3.46303s (num_starts 2; 1.7315s/start)
parse_consts_db.: 3.60187s (num_starts 1; 3.6019s/start)
src_usedef_tab_read_from_file.: 6.48735s (num_starts 1; 6.4873s/start)
src_usedef_tab_init.: 6.48735s (num_starts 1; 6.4874s/start)
usedef_init.: 6.48735s (num_starts 1; 6.4874s/start)

counters:

flags:

info:


Mem-stats:

 /home/sbansal/superopt-project/usr/local/bin/eqgen32 -tfg_llvm emi9f.c.etfg -l /home/sbansal/superopt-project/superopt-tests/soundness/emi9f.fixed.s.o.harvest.log -o /home/sbansal/superopt-project/superopt-tests/soundness/emi9f.fixed.s.o.tfg -e /home/sbansal/superopt-project/superopt-tests/soundness/emi9f.fixed.s.o -f ALL /home/sbansal/superopt-project/superopt-tests/soundness/emi9f.fixed.s.o.harvest
Setting max_stack_push_delta = 2147483648
dst_tfg_add_stack_pointer_translation_at_function_entry 2562: out_e = L0%1%d=>L1%1%d
Executing: /home/sbansal/superopt-project/usr/local/bin/harvest-dwarf /home/sbansal/superopt-project/superopt-tests/soundness/emi9f.fixed.s.o
main 469:Printing stats:

tfg_get_simplified_edge_cond_for_edge: num_starts 10 time spent: 0:0:0 [0.000012s total; 0.000001 per start]
tfg_get_simplified_assumes_for_edge: num_starts 123 time spent: 0:0:0 [0.000170s total; 0.000001 per start]
expr_label_memlabels_using_memlabel_map: num_starts 1146 time spent: 0:0:0 [0.022278s total; 0.000019 per start]
expr_simplify_solver: num_starts 6215 time spent: 0:0:0 [0.174436s total; 0.000028 per start]
expr_simplify_syntactic: num_starts 6215 time spent: 0:0:1 [1.823403s total; 0.000293 per start]
expr_simplify_select_on_store: num_starts 1343 time spent: 0:0:1 [1.274455s total; 0.000949 per start]
expr_simplify_store_on_store: num_starts 912 time spent: 0:0:0 [0.042616s total; 0.000047 per start]
expr_simplify_using_lhs_set_helper: num_starts 1309 time spent: 0:0:2 [2.093836s total; 0.001600 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 15983 time spent: 0:0:2 [2.082514s total; 0.000130 per start]
expr_evaluates_to_constant: num_starts 8524 time spent: 0:0:0 [0.035358s total; 0.000004 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 3291 time spent: 0:0:0 [0.005831s total; 0.000002 per start]
expr_simplify_eq: num_starts 223 time spent: 0:0:0 [0.001919s total; 0.000009 per start]
expr_simplify_iff: num_starts 32 time spent: 0:0:0 [0.000013s total; 0.000000 per start]
expr_simplify_or: num_starts 16 time spent: 0:0:0 [0.000015s total; 0.000001 per start]
expr_simplify_and: num_starts 55 time spent: 0:0:0 [0.000207s total; 0.000004 per start]
expr_simplify_andnot1: num_starts 2 time spent: 0:0:0 [0.000020s total; 0.000010 per start]
expr_simplify_andnot2: num_starts 10 time spent: 0:0:0 [0.000096s total; 0.000010 per start]
expr_simplify_not: num_starts 38 time spent: 0:0:0 [0.000054s total; 0.000001 per start]
expr_simplify_implies: num_starts 3 time spent: 0:0:0 [0.000019s total; 0.000006 per start]
expr_simplify_ite: num_starts 98 time spent: 0:0:0 [0.002492s total; 0.000025 per start]
canonicalize_expr_tree: num_starts 866 time spent: 0:0:0 [0.020953s total; 0.000024 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1503 time spent: 0:0:0 [0.003804s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 1752 time spent: 0:0:1 [1.253469s total; 0.000715 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 390 time spent: 0:0:0 [0.020069s total; 0.000051 per start]
memlabel_contains_only_readonly_symbols: num_starts 390 time spent: 0:0:0 [0.000050s total; 0.000000 per start]
memlabels_are_independent: num_starts 913 time spent: 0:0:0 [0.001902s total; 0.000002 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 12 time spent: 0:0:0 [0.000935s total; 0.000078 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 12 time spent: 0:0:0 [0.000904s total; 0.000075 per start]
is_overlapping_atoms_pair_syntactic: num_starts 12 time spent: 0:0:0 [0.000839s total; 0.000070 per start]
is_overlapping_considering_type_constraints: num_starts 12 time spent: 0:0:0 [0.000029s total; 0.000002 per start]
find_offset_wrt_typed_variable_pointer: num_starts 17 time spent: 0:0:0 [0.000026s total; 0.000002 per start]
is_gep_inbounds_offset: num_starts 17 time spent: 0:0:0 [0.000002s total; 0.000000 per start]
get_arithmetic_addsub_atoms: num_starts 3451 time spent: 0:0:0 [0.003069s total; 0.000001 per start]
expr_is_variable_start: num_starts 10 time spent: 0:0:0 [0.000001s total; 0.000000 per start]
insn_md_assemble: num_starts 10 time spent: 0:0:0 [0.000028s total; 0.000003 per start]
expr_linear_relation_holds_visit: num_starts 278 time spent: 0:0:0 [0.001895s total; 0.000007 per start]
expr_is_consts_struct_constant: num_starts 206 time spent: 0:0:0 [0.000100s total; 0.000000 per start]
expr_do_simplify_helper: num_starts 3981 time spent: 0:0:2 [2.103419s total; 0.000528 per start]
expr_do_simplify_helper_cache: num_starts 3981 time spent: 0:0:0 [0.002621s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 96 time spent: 0:0:0 [0.000025s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 96 time spent: 0:0:0 [0.000210s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 10 time spent: 0:0:0 [0.201739s total; 0.020174 per start]
alias_val_xfer_and_meet: num_starts 10 time spent: 0:0:0 [0.163027s total; 0.016303 per start]
get_sprel_map_from_avail_exprs: num_starts 18 time spent: 0:0:0 [0.002511s total; 0.000140 per start]
update_memlabels_for_memslot_locs: num_starts 7 time spent: 0:0:0 [0.001221s total; 0.000174 per start]
populate_gen_and_kill_sets_for_edge: num_starts 20 time spent: 0:0:0 [0.010945s total; 0.000547 per start]
compute_simplified_loc_exprs_for_edge: num_starts 163 time spent: 0:0:1 [1.817082s total; 0.011148 per start]
compute_locs_definitely_written_on_edge: num_starts 20 time spent: 0:0:0 [0.000053s total; 0.000003 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 50 time spent: 0:0:0 [0.020310s total; 0.000406 per start]
edge_update_memlabel_map_for_mlvars: num_starts 10 time spent: 0:0:0 [0.001566s total; 0.000157 per start]
add_new_locs_based_on_edge: num_starts 10 time spent: 0:0:0 [0.110887s total; 0.011089 per start]
alias_val_meet: num_starts 10 time spent: 0:0:0 [0.000922s total; 0.000092 per start]
expand_locset_to_include_slots_for_memmask: num_starts 50 time spent: 0:0:0 [0.000741s total; 0.000015 per start]
total: num_starts 1 time spent: 0:0:22 [22.543844s total; 22.543844 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
etfg_init.: 0s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.llvm.main.: 0s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.llvm.main.: 0s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.llvm.main.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.llvm.main.: 1e-06s (num_starts 1; 0.0000s/start)
i386_init_costfns.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_constructor.src.llvm.main.before_tfg_llvm_populate_calls.: 1e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.llvm.main.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.llvm.main.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
vconstants_alloc.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.llvm.main.: 3e-06s (num_starts 1; 0.0000s/start)
expr_is_hidden_reg.: 7e-06s (num_starts 19; 0.0000s/start)
i386_iseq_copy.: 7e-06s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 8e-06s (num_starts 11; 0.0000s/start)
expr_is_callee_save_const.: 1.5e-05s (num_starts 27; 0.0000s/start)
context_constructor.solver.: 2.3e-05s (num_starts 1; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::conservative_dfa_val_for_newly_defined_loc.: 2.6e-05s (num_starts 2; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::conservative_dfa_val_for_newly_defined_loc.: 2.8e-05s (num_starts 2; 0.0000s/start)
context_constructor.: 3e-05s (num_starts 1; 0.0000s/start)
x86_assemble.: 3.8e-05s (num_starts 1; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 4.1e-05s (num_starts 1; 0.0000s/start)
imm_vt_map_copy.: 4.2e-05s (num_starts 108; 0.0000s/start)
dst_iseq_inv_rename.: 5e-05s (num_starts 1; 0.0001s/start)
peep_preprocess_using_regmap.: 5.3e-05s (num_starts 5; 0.0000s/start)
add_extra_node_at_start_pc.: 6e-05s (num_starts 1; 0.0001s/start)
populate_dominator_and_postdominator_relations.: 6.2e-05s (num_starts 1; 0.0001s/start)
tfg_eliminate_hidden_regs.: 7e-05s (num_starts 5; 0.0000s/start)
llptfg_constructor.: 9.1e-05s (num_starts 1; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 9.7e-05s (num_starts 13; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000101s (num_starts 154; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000102s (num_starts 1; 0.0001s/start)
compute_sprel_relations.: 0.000116s (num_starts 1; 0.0001s/start)
i386_infer_regcons_from_assembly.: 0.000122s (num_starts 1; 0.0001s/start)
propagate_sprels.: 0.000124s (num_starts 1; 0.0001s/start)
dst_iseq_disassemble_with_bin_offsets.: 0.000125s (num_starts 1; 0.0001s/start)
def_analysis::xfer_and_meet.: 0.000175s (num_starts 10; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000245s (num_starts 10; 0.0000s/start)
regmap_assign_using_regcons.: 0.000289s (num_starts 1; 0.0003s/start)
expr_represents_llvm_undef.: 0.00034s (num_starts 52; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.000348s (num_starts 2; 0.0002s/start)
populate_branch_affecting_locs.: 0.000387s (num_starts 1; 0.0004s/start)
graph_locs_add_all_llvmvars.: 0.000403s (num_starts 1; 0.0004s/start)
populate_locid2expr_map.: 0.000403s (num_starts 2; 0.0002s/start)
graph_locs_add_local_vars_for_edge.: 0.000427s (num_starts 10; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000435s (num_starts 1; 0.0004s/start)
tfg::populate_loc_definedness.before_solve.: 0.000464s (num_starts 1; 0.0005s/start)
lr_status_meet.: 0.000473s (num_starts 418; 0.0000s/start)
determinize_value_expr_map.: 0.000517s (num_starts 363; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.00057s (num_starts 10; 0.0001s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000574s (num_starts 10; 0.0001s/start)
graph_locs_add_all_exvregs.: 0.000576s (num_starts 1; 0.0006s/start)
tighten_mem_access_ml.cache_miss.: 0.000643s (num_starts 9; 0.0001s/start)
tighten_mem_access_ml.: 0.000658s (num_starts 9; 0.0001s/start)
dst_iseq_from_string.: 0.000729s (num_starts 1; 0.0007s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000747s (num_starts 3; 0.0002s/start)
insn_db_list_get_all_matches.: 0.000784s (num_starts 5; 0.0002s/start)
insn_db_get_all_matches.: 0.000838s (num_starts 5; 0.0002s/start)
tfg::populate_loc_definedness.before_initialize.: 0.000888s (num_starts 1; 0.0009s/start)
tfg::populate_loc_definedness.: 0.000926s (num_starts 1; 0.0009s/start)
tfg::collect_assumes_around_edge.: 0.000992s (num_starts 123; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.001043s (num_starts 276; 0.0000s/start)
graph_locs_map_update_memlabels_for_memslot_locs_with_memalloc.calling.compute_lr_status_for_expr.: 0.001173s (num_starts 10; 0.0001s/start)
expr_linear_relation_holds::visit.var.: 0.001175s (num_starts 60; 0.0000s/start)
i386_insn_init_constants.: 0.001197s (num_starts 1; 0.0012s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.001499s (num_starts 217; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.001541s (num_starts 30; 0.0001s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.001554s (num_starts 10; 0.0002s/start)
gas_init.: 0.001734s (num_starts 1; 0.0017s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.002045s (num_starts 217; 0.0000s/start)
tfg_asm_prune_implausible_pc_local_sprel_expr_assumes.: 0.003001s (num_starts 1; 0.0030s/start)
expr_substitute_using_available_exprs_submap.: 0.003795s (num_starts 70; 0.0001s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.004272s (num_starts 10; 0.0004s/start)
graph_with_aliasing_constructor.src.llvm.main.: 0.005022s (num_starts 1; 0.0050s/start)
graph_visit_exprs_const.const.: 0.005154s (num_starts 2; 0.0026s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.0056s (num_starts 217; 0.0000s/start)
graph_with_locs_constructor.src.llvm.main.: 0.005979s (num_starts 1; 0.0060s/start)
tfg_preprocess.dst.: 0.006091s (num_starts 1; 0.0061s/start)
tfg::tfg_preprocess.: 0.006093s (num_starts 1; 0.0061s/start)
find_dominators.: 0.006151s (num_starts 13; 0.0005s/start)
avail_exprs_create_submap.: 0.006402s (num_starts 30; 0.0002s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.006404s (num_starts 10; 0.0006s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.006444s (num_starts 10; 0.0006s/start)
graph_identify_back_edges.: 0.006495s (num_starts 10; 0.0006s/start)
opctable_init.: 0.006525s (num_starts 1; 0.0065s/start)
graph_identify_natural_loops.: 0.006623s (num_starts 10; 0.0007s/start)
identify_address_taken_local_variables.: 0.006668s (num_starts 1; 0.0067s/start)
compute_regions.: 0.008775s (num_starts 10; 0.0009s/start)
create_closure_matrix.: 0.009235s (num_starts 17; 0.0005s/start)
create_sp_version_relations_lattice_at_pc.: 0.011777s (num_starts 17; 0.0007s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.014089s (num_starts 52; 0.0003s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.014164s (num_starts 52; 0.0003s/start)
graph_with_edge_structures_constructor.src.llvm.main.: 0.015413s (num_starts 1; 0.0154s/start)
graph_visit_exprs.: 0.0156s (num_starts 12; 0.0013s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.016489s (num_starts 10; 0.0016s/start)
compute_lr_status_for_expr.: 0.016673s (num_starts 97; 0.0002s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.017834s (num_starts 1; 0.0178s/start)
populate_transitive_closure.: 0.018121s (num_starts 7; 0.0026s/start)
graph_with_simplified_assets_constructor.src.llvm.main.: 0.019057s (num_starts 1; 0.0191s/start)
graph_to_stream.: 0.024307s (num_starts 1; 0.0243s/start)
graph_with_predicates_constructor.src.llvm.main.: 0.026878s (num_starts 1; 0.0269s/start)
query:convert_to_z3.: 0.033592s (num_starts 861; 0.0000s/start)
query:convert_from_z3.: 0.039678s (num_starts 861; 0.0000s/start)
dst_insn_get_tfg.: 0.045539s (num_starts 5; 0.0091s/start)
compute_new_lr_status_on_locs.: 0.04936s (num_starts 10; 0.0049s/start)
query:simplify-z3.: 0.099815s (num_starts 1722; 0.0001s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.133545s (num_starts 10; 0.0134s/start)
populate_loc_liveness.: 0.135728s (num_starts 1; 0.1357s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.13932s (num_starts 929; 0.0001s/start)
tfg_postprocess_after_pointsto_analysis.: 0.151887s (num_starts 1; 0.1519s/start)
tfg_asm_t::tfg_postprocess_after_pointsto_analysis.: 0.15242s (num_starts 1; 0.1524s/start)
populate_simplified_to_state.: 0.160291s (num_starts 2; 0.0801s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.16308s (num_starts 10; 0.0163s/start)
populate_simplified_assets.: 0.169822s (num_starts 4; 0.0425s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.201745s (num_starts 10; 0.0202s/start)
tfg_llvm_constructor.src.llvm.main.before_parsing_potential_scev_relations.: 0.202207s (num_starts 1; 0.2022s/start)
tfg_llvm_constructor.src.llvm.main.before_parsing_PC_to_line_and_column.: 0.202366s (num_starts 1; 0.2024s/start)
ftmap_run_pointsto_analysis.: 0.360708s (num_starts 1; 0.3607s/start)
tfg_run_pointsto_analysis_asm.: 0.360764s (num_starts 1; 0.3608s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.386899s (num_starts 929; 0.0004s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.387851s (num_starts 1146; 0.0003s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.408654s (num_starts 929; 0.0004s/start)
populate_locs_potentially_modified_on_edge.: 1.74485s (num_starts 2; 0.8724s/start)
tfg_constructor.src.llvm.main.after_transitive_closure.: 1.9055s (num_starts 1; 1.9055s/start)
tfg_constructor.src.llvm.main.post_parsing.: 1.90551s (num_starts 1; 1.9055s/start)
tfg_constructor.src.llvm.main.after_string_contents.: 1.90551s (num_starts 1; 1.9055s/start)
tfg_constructor.src.llvm.main.after_compute_max_memlabel_varnum.: 1.90553s (num_starts 1; 1.9055s/start)
tfg_constructor.src.llvm.main.: 1.90553s (num_starts 1; 1.9055s/start)
populate_auxilliary_structures_dependent_on_locs.: 1.91468s (num_starts 2; 0.9573s/start)
expr_do_simplify_using_lhs_set_and_precond.: 2.09546s (num_starts 1309; 0.0016s/start)
dst_parse_sym_exec_db.: 2.41264s (num_starts 1; 2.4126s/start)
opc_init.: 3.43914s (num_starts 1; 3.4391s/start)
i386_init.: 3.44093s (num_starts 1; 3.4409s/start)
read_local_sprel_mapping_data.: 3.60044s (num_starts 1; 3.6004s/start)
parse_consts_db.: 3.98714s (num_starts 1; 3.9871s/start)
dst_iseq_deserialize.: 4.52681s (num_starts 88672; 0.0001s/start)
dst_usedef_tab_read_from_file.: 6.28628s (num_starts 1; 6.2863s/start)
dst_usedef_tab_init.: 6.28628s (num_starts 1; 6.2863s/start)
usedef_init.: 6.28628s (num_starts 1; 6.2863s/start)
gen_tfg_for_dst_iseq-main.: 6.39296s (num_starts 1; 6.3930s/start)

counters:

flags:

info:

Context stats:
exprs: count: 143296
sorts: count: 171
num_proof_queries: 0
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	3981
	        hit ratio:	0.671188
m_simplify_solver:
	----------- total:	6215
	        hit ratio:	0.86066
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	292
	        hit ratio:	0.383562
m_z3_solver_substitution:
	----------- total:	861
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	866
	        hit ratio:	0
m_expr_size:
	----------- total:	12686
	        hit ratio:	0.922276
m_contains_only_constants_or_sp_versions:
	----------- total:	6
	        hit ratio:	0.5
m_expr_evaluates_to_constant_visitor:
	----------- total:	16920
	        hit ratio:	0.777837

z3_solver expr_query_cache entry size: 0

<MSG>0:00 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:04 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:17 : Converting assembly code to object file...</MSG>
<MSG>0:17 : Harvesting object code to obtain harvested assembly...</MSG>
<MSG>0:30 : Converting harvested assembly to Transfer Function Graph (TFG)...</MSG>
<MSG>0:53 : Searching for equivalence at unroll factor 3</MSG>
<MSG>0:55 : Computing equivalence for function: main...</MSG>
Computing equivalence for function: main...
remove_node_and_make_composite_edges 609: Warning : removing Lfor.cond%3%d, pdt.size() = 2 (> 1), incoming.size 1, outgoing.size 2
, max_expr_size = 124
<MSG>0:55 : Constructing SSA for LLVM TFG...</MSG>
<MSG>1:06 : Constructing SSA for Assembly TFG...</MSG>
<MSG>1:07 : Finished SSA construction for both TFGs...</MSG>
<MSG>1:07 : Computing equivalence of the two TFGs (LLVM IR and x86 assembly)...</MSG>
<MSG>1:07 : Chose (after CE propagation) product-TFG main (d:0, s:0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>1:07 : product-TFG main: Enumerating correlations for L0%0%d=>E0%0%d[mu 1, delta 1] starting at L0%0%d_L0%0%d
</MSG>
<MSG>1:07 : Considering 3 paths to src pc E0%0%d as correlation candidates for L0%0%d=>E0%0%d[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>1:07 : Attempting correlation of src pathset L0%0%d=>E0%0%d[mu 1, delta 1] as correlation candidate for L0%0%d=>E0%0%d[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>1:07 : Attempting correlation of src pathset L0%0%d=>E0%0%d[mu 2, delta 1] as correlation candidate for L0%0%d=>E0%0%d[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>1:07 : Attempting correlation of src pathset L0%0%d=>E0%0%d[mu 3, delta 1] as correlation candidate for L0%0%d=>E0%0%d[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>1:07 : Found 9 feasible correlations for paths to src pc E0%0%d as correlation candidates for L0%0%d=>E0%0%d[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>1:07 : product-TFG main: Found 9 correlations for L0%0%d=>E0%0%d[mu 1, delta 1] starting at L0%0%d_L0%0%d
</MSG>
<MSG>1:07 : product-TFG main created 9 possibilities in group main.A...</MSG>
<MSG>1:07 : Chose (for CE propagation) product-TFG main.A1 (d:0, s:0) from a frontier of size 9...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
<MSG>1:07 : Finished adding lsprel-assumes for allocation to the product-TFG main.A1...</MSG>
<MSG>1:07 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A1...</MSG>
<MSG>1:08 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>1:08 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:08 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d
</MSG>
<MSG>1:08 : Identified 4 common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:08 : main.A1: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:08 : main.A1: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:08 : main.A1: Adding node Lentry%1%allocaI3_L0%1%allocaI3 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%2%d=
<MSG>1:08 : main.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:08 : main.A1: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:08 : main.A1: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:08 : main.A1: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:08 : main.A1: Adding node Lentry%1%allocaI4_L0%1%allocaI4 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%2%d=
<MSG>1:08 : main.A1: Getting alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:08 : main.A1: Found no alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
<MSG>1:08 : main.A1: Computing loop hoisting select expressions at toPC Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:08 : main.A1: Computing loop hoisting non-linear expressions at toPC Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:08 : main.A1: Adding node Lentry%2%allocaI3_L0%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%2%d=
<MSG>1:08 : main.A1: Getting alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:08 : main.A1: Found 1 alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:08 : main.A1: Computing loop hoisting select expressions at toPC Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:08 : main.A1: Computing loop hoisting non-linear expressions at toPC Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:08 : main.A1: Adding node Lentry%2%allocaI4_L0%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%2%d=
<MSG>1:08 : main.A1: Getting alloca-ptrs on edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:08 : main.A1: Found no alloca-ptrs on edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%2%d=
<MSG>1:08 : main.A1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>1:08 : main.A1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>1:08 : main.A1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>1:08 : main.A1: Getting alloca-ptrs on edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:08 : main.A1: Found no alloca-ptrs on edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:08 : main.A1: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:08 : main.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:08 : main.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:08 : main.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:08 : main.A1: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3</MSG>
<MSG>1:08 : main.A1: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L0%1%allocaI3 and propagated further.
</MSG>
<MSG>1:08 : main.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:08 : main.A1: Finished executing CG's add edge function...</MSG>
<MSG>1:08 : main.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:08 : main.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:08 : main.A1: Adding edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:08 : main.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
<MSG>1:08 : main.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:08 : main.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:08 : main.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:08 : main.A1: Finished executing CG's add edge function...</MSG>
<MSG>1:08 : main.A1: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:08 : main.A1: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:08 : main.A1: Adding edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:08 : main.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:08 : main.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:08 : main.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:08 : main.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:08 : main.A1: Finished executing CG's add edge function...</MSG>
<MSG>1:08 : main.A1: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:08 : main.A1: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:08 : main.A1: Adding edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:08 : main.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%2%d=
<MSG>1:08 : main.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:08 : main.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:08 : main.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:08 : main.A1: Finished executing CG's add edge function...</MSG>
<MSG>1:08 : main.A1: Computing CG regions after the addition of the edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:08 : main.A1: Done computing CG regions after the addition of the edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:08 : main.A1: Adding edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:08 : main.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:08 : main.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:08 : main.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:08 : main.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:09 : main.A1: Finished executing CG's add edge function...</MSG>
<MSG>1:09 : main.A1: Computing CG regions after the addition of the edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:09 : main.A1: Done computing CG regions after the addition of the edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:09 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:09 : Added correlation to the product-TFG main.A1 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:09 : Chose (after CE propagation) product-TFG main.A1 (d:0, s:0) from a frontier of size 9...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3 (C L0%0%d => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d (C line 19 => C E0%0%d at mu 1 delta 1, A line 19 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI3 (C line 19, A line 19)
                Lentry%1%allocaI3_L0%1%allocaI3 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI4 (C line 19, A line 19)
                Lentry%1%allocaI4_L0%1%allocaI4 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%2%allocaI3_L0%1%allocaI1 (C line 19, A line 19)
                Lentry%2%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 15 bv exprs)
            Lentry%2%allocaI4_L0%1%allocaI2 (C line 19, A line 19)
                Lentry%2%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 15 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/
  	  local.=Lentry%2%d= == input.dst.local./*___y___main__x__=Lentry%2%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
<MSG>1:09 : main.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>1:09 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3, Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4, Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1, Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2, Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:09 : main.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3) ...</MSG>
<MSG>1:09 : main.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3), result: unchanged</MSG>
<MSG>1:09 : main.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:09 : main.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3) ...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 1 proof-stats=dht11-prove_trivial4-prove7...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:11 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:11 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3), result: changed ...</MSG>
<MSG>1:12 : main.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3), result: changed( 0, 1 ) ...</MSG>
<MSG>1:12 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4) ...</MSG>
<MSG>1:12 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: changed</MSG>
<MSG>1:12 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI3 ...</MSG>
<MSG>1:12 : main.A1: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4) ...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:13 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 1 proof-stats=dht21-prove_trivial9-prove12...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:16 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:16 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: changed ...</MSG>
<MSG>1:17 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: changed( 1, 1 ) ...</MSG>
<MSG>1:17 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>1:17 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: unchanged</MSG>
<MSG>1:17 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI4 ...</MSG>
<MSG>1:17 : main.A1: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 15 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht23-prove_trivial15-prove8...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: changed ...</MSG>
<MSG>1:20 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>1:20 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:20 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: changed</MSG>
<MSG>1:20 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%2%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>1:20 : main.A1: Relaxing invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 15 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:20 : main.A1: marking unstable at Lentry%2%allocaI4_L0%1%allocaI2 due to failing condition:
wfcond.from_pcLentry%2%allocaI4_L0%1%allocaI2.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140320 : 1 { 0x1 } : BOOL                          : true
146415 : not(140320) : BOOL                        : false

ce =
=counter_example_begin z3.ce1112 2129b189bd8601eeb2b3ceabc9d5a64
=input.dst.exreg.0.4
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=symbol.1
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=symbol.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=symbol.3
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=dst_symbol_addr.1
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=dst_symbol_addr.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst_symbol_addr.3
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=callee_save_const.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1535639564 { 0x5b88000c +1.6250143e56 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 1531184128 { 0x5b440400 +1.53137207e55 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local_alloc_count.=L0%0%d=
1 : 0 { 0x0 +1.0e129 } : COUNT
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 1531184128 { 0x5b440400 +1.53137207e55 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3
1 : 1 { 0x1 } : BOOL
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 1531184128 { 0x5b440400 +1.53137207e55 } : BV:32
=input.src.local_size.=Lentry%2%d=.Lentry%2%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 530649087 ] -> memlabel-mem--heap, [ 530649088; 1531184127 ] -> memlabel-mem--esp, [ 1531184128; 1531184143 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1531184144; 2147487743 ] -> memlabel-mem--esp, [ 2147487744; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.local_alloc_count.=Lentry%2%d=.Lentry%2%allocaI3
1 : 1 { 0x1 +1.11e129 } : COUNT
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4
1 : 530644999 { 0x1fa10007 +1.25781333e192 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4
1 : 530644992 { 0x1fa10000 +1.25781250e192 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3
1 : 530644992 { 0x1fa10000 +1.25781250e192 } : BV:32
=input.src.llvm-mem.Lentry%1%allocaI4
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 1531184143 { 0x5b44040f +1.53137385e55 } : BV:32
=input.src.llvm-mem.Lentry%2%allocaI4
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 530644991 ] -> 0, [ 530644992; 530644999 ] -> 1, [ 530645000; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%2%allocaI4
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 530644991 ] -> memlabel-mem--heap, [ 530644992; 530644999 ] -> memlabel-mem--local./*___y___main__x__=Lentry%2%d=/, [ 530645000; 530649087 ] -> memlabel-mem--heap, [ 530649088; 1531184127 ] -> memlabel-mem--esp, [ 1531184128; 1531184143 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1531184144; 2147487743 ] -> memlabel-mem--esp, [ 2147487744; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1535639564 { 0x5b88000c +1.6250143e56 } : BV:32
=input.dst.exreg.0.5.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1535639564 { 0x5b88000c +1.6250143e56 } : BV:32
=rodata.size
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4063 { 0xfdf +1.48434e129 } : BV:32
=stack.size
1 : 1616838656 { 0x605f0000 +1.74218750e65 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.memlabel-mem--symbol.1.1_begin
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=input.memlabel-mem--symbol.1.1_end
1 : 4063 { 0xfdf +1.48434e129 } : BV:32
=input.memlabel-mem--symbol.3.0_begin
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=input.memlabel-mem--symbol.3.0_end
1 : 4095 { 0xfff +1.48816e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 530649088 { 0x1fa11000 +1.25830078e192 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147487743 { 0x80000fff -2147479553 -1.48816e129 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 1531184128 { 0x5b440400 +1.53137207e55 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%2%d=/
1 : 530644992 { 0x1fa10000 +1.25781250e192 } : BV:32
=input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.mem.L0%1%allocaI4
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%1%allocaI4
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 530649087 ] -> memlabel-mem--heap, [ 530649088; 1531184127 ] -> memlabel-mem--esp, [ 1531184128; 1531184143 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1531184144; 2147487743 ] -> memlabel-mem--esp, [ 2147487744; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.mem.L0%1%allocaI2
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 530644991 ] -> 0, [ 530644992; 530644999 ] -> 1, [ 530645000; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%1%allocaI2
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 530644991 ] -> memlabel-mem--heap, [ 530644992; 530644999 ] -> memlabel-mem--local./*___y___main__x__=Lentry%2%d=/, [ 530645000; 530649087 ] -> memlabel-mem--heap, [ 530649088; 1531184127 ] -> memlabel-mem--esp, [ 1531184128; 1531184143 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1531184144; 2147487743 ] -> memlabel-mem--esp, [ 2147487744; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.L0%1%allocaI2
1 : 530644999 { 0x1fa10007 +1.25781333e192 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.L0%1%allocaI2
1 : 530644992 { 0x1fa10000 +1.25781250e192 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.L0%1%allocaI2
1 : 0 { 0x0 } : BOOL
=commonMEM.llvm-mem.Lentry%1%allocaI4.mem.L0%1%allocaI4.cluster.memlabel-mem--rodata
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.L0%1%allocaI4.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
67974802
=counter_example_end


failcond-expr = not(true):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: changed ...</MSG>
<MSG>1:20 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:20 : main.A1: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)*((Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)*((Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)*((Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)*(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d))))) became unstable after invariant inference</MSG>
<MSG>1:20 : Chosen product-TFG main.A1 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)*((Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)*((Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)*((Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)*(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d))))))
</MSG>
<MSG>1:20 : Chose (for CE propagation) product-TFG main.A2 (d:0, s:0) from a frontier of size 8...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
<MSG>1:20 : Finished adding lsprel-assumes for allocation to the product-TFG main.A2...</MSG>
<MSG>1:20 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A2...</MSG>
<MSG>1:21 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>1:21 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:21 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d
</MSG>
<MSG>1:21 : Identified 4 common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:21 : main.A2: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:21 : main.A2: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:21 : main.A2: Adding node Lentry%1%allocaI3_L0%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A2: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%2%d=
<MSG>1:21 : main.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:21 : main.A2: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:21 : main.A2: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:21 : main.A2: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:21 : main.A2: Adding node Lentry%1%allocaI4_L0%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A2: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%2%d=
<MSG>1:21 : main.A2: Getting alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:21 : main.A2: Found no alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A2: returning 1 for =Lentry%1%d=
<MSG>1:21 : main.A2: Computing loop hoisting select expressions at toPC Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:21 : main.A2: Computing loop hoisting non-linear expressions at toPC Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:21 : main.A2: Adding node Lentry%2%allocaI3_L0%2%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A2: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%2%d=
<MSG>1:21 : main.A2: Getting alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:21 : main.A2: Found 1 alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:21 : main.A2: Computing loop hoisting select expressions at toPC Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>1:21 : main.A2: Computing loop hoisting non-linear expressions at toPC Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>1:21 : main.A2: Adding node Lentry%2%allocaI4_L0%2%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A2: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%2%d=
<MSG>1:21 : main.A2: Getting alloca-ptrs on edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>1:21 : main.A2: Found no alloca-ptrs on edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%2%d=
<MSG>1:21 : main.A2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>1:21 : main.A2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>1:21 : main.A2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>1:21 : main.A2: Getting alloca-ptrs on edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:21 : main.A2: Found no alloca-ptrs on edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:21 : main.A2: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:21 : main.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:21 : main.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:21 : main.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:21 : main.A2: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1</MSG>
<MSG>1:21 : main.A2: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L0%1%allocaI1 and propagated further.
</MSG>
<MSG>1:21 : main.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:21 : main.A2: Finished executing CG's add edge function...</MSG>
<MSG>1:21 : main.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:21 : main.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:21 : main.A2: Adding edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:21 : main.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A2: returning 1 for =Lentry%1%d=
<MSG>1:21 : main.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:21 : main.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:21 : main.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:21 : main.A2: Finished executing CG's add edge function...</MSG>
<MSG>1:21 : main.A2: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:21 : main.A2: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:21 : main.A2: Adding edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:21 : main.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:21 : main.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:21 : main.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:21 : main.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:21 : main.A2: Finished executing CG's add edge function...</MSG>
<MSG>1:21 : main.A2: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:21 : main.A2: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:21 : main.A2: Adding edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>1:21 : main.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%2%d=
<MSG>1:21 : main.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:21 : main.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:21 : main.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:21 : main.A2: Finished executing CG's add edge function...</MSG>
<MSG>1:21 : main.A2: Computing CG regions after the addition of the edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>1:21 : main.A2: Done computing CG regions after the addition of the edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>1:21 : main.A2: Adding edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:21 : main.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:21 : main.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:21 : main.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:21 : main.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:21 : main.A2: Finished executing CG's add edge function...</MSG>
<MSG>1:21 : main.A2: Computing CG regions after the addition of the edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:21 : main.A2: Done computing CG regions after the addition of the edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:21 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:21 : Added correlation to the product-TFG main.A2 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:21 : Chose (after CE propagation) product-TFG main.A2 (d:0, s:0) from a frontier of size 8...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d (C line 19 => C E0%0%d at mu 1 delta 1, A line 19 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 19, A line 19)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 19, A line 19)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%2%allocaI3_L0%2%allocaI1 (C line 19, A line 19)
                Lentry%2%allocaI3_L0%2%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%2%allocaI4_L0%2%allocaI2 (C line 19, A line 19)
                Lentry%2%allocaI4_L0%2%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/
  	L0%2%spver:
  	  local.=Lentry%2%d= == input.dst.sp=L0%2%spver=sp.L0%2%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
<MSG>1:21 : main.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>1:21 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1, Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2, Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1, Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2, Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:21 : main.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>1:21 : main.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: unchanged</MSG>
<MSG>1:21 : main.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:21 : main.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>1:21 : main.A2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:21 : main.A2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:21 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:21 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:21 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:21 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:21 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:21 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:21 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:21 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:21 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:21 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:21 : main.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:21 : main.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:21 : main.A2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:22 : main.A2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:22 : main.A2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:22 : main.A2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:22 : main.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht12-prove_trivial4-prove8...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed ...</MSG>
<MSG>1:24 : main.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>1:24 : main.A2: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:24 : main.A2: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed</MSG>
<MSG>1:24 : main.A2: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>1:24 : main.A2: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:24 : main.A2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:24 : main.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:28 : main.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht24-prove_trivial11-prove13...</MSG>
<MSG>1:28 : main.A2: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed ...</MSG>
<MSG>1:30 : main.A2: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:30 : main.A2: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1) ...</MSG>
<MSG>1:30 : main.A2: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1), result: changed</MSG>
<MSG>1:30 : main.A2: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>1:30 : main.A2: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1) ...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:30 : main.A2: marking unstable at Lentry%2%allocaI4_L0%2%allocaI2 due to failing condition:
wfcond.from_pcLentry%2%allocaI4_L0%2%allocaI2.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140320 : 1 { 0x1 } : BOOL                          : true
146415 : not(140320) : BOOL                        : false

ce =
=counter_example_begin z3v487.ce2032 c7944d45f165ab31594e177def51c73
=input.dst.exreg.0.4
1 : 2153778752 { 0x80600e40 -2141188544 -1.75043487e129 } : BV:32
=input.dst.exreg.6.0
1 : 1919851193 { 0x726e9ab9 +1.86409676e101 } : BV:32
=symbol.1
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=symbol.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=symbol.3
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=dst_symbol_addr.1
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=dst_symbol_addr.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst_symbol_addr.3
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=callee_save_const.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 2684370972 { 0xa000401c -1610596324 -1.195646e193 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.src.local_size.=Lentry%2%d=
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%2%d=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local_alloc_count.=L0%0%d=
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : COUNT
=alloca_ptr
1 : (() -> 2684370956, ) : FUNCTION[COUNT,ARRAY[BV:32 -> MEMLABEL],MEMLABEL,BV:32 -> BV:32]
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3
1 : 1 { 0x1 } : BOOL
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.src.local_size.=Lentry%2%d=.Lentry%2%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 2147483647 ] -> memlabel-mem--heap, [ 2147483648; 3758096383 ] -> memlabel-mem--esp, [ 3758096384; 3758096399 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 3758096400; 3758100479 ] -> memlabel-mem--esp, [ 3758100480; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.local_alloc_count.Lentry%2%allocaI3
1 : 0 { 0x0 +1.0e129 } : COUNT
=input.src.local_alloc_count.=Lentry%2%d=.Lentry%2%allocaI3
1 : 0 { 0x0 +1.0e129 } : COUNT
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4
1 : 2684370963 { 0xa0004013 -1610596333 -1.195538e193 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4
1 : 2684370956 { 0xa000400c -1610596340 -1.195455e193 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.local_alloc_count.Lentry%1%allocaI3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : COUNT
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3
1 : 2684370956 { 0xa000400c -1610596340 -1.195455e193 } : BV:32
=input.src.llvm-mem.Lentry%1%allocaI4
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 3758096399 { 0xe000000f -536870897 -1.178e65 } : BV:32
=input.src.llvm-mem.Lentry%2%allocaI4
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%2%allocaI4
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 2147483647 ] -> memlabel-mem--heap, [ 2147483648; 2684370955 ] -> memlabel-mem--esp, [ 2684370956; 2684370963 ] -> memlabel-mem--local./*___y___main__x__=Lentry%2%d=/, [ 2684370964; 3758096383 ] -> memlabel-mem--esp, [ 3758096384; 3758096399 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 3758096400; 3758100479 ] -> memlabel-mem--esp, [ 3758100480; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%d.Lentry%2%allocaI3
1 : 2684370956 { 0xa000400c -1610596340 -1.195455e193 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 2684370972 { 0xa000401c -1610596324 -1.195646e193 } : BV:32
=input.dst.exreg.0.5.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%2%spver
1 : 2684370956 { 0xa000400c -1610596340 -1.195455e193 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 2684370972 { 0xa000401c -1610596324 -1.195646e193 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 2684370972 { 0xa000401c -1610596324 -1.195646e193 } : BV:32
=input.dst.mem.L0%2%d
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%2%d
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 2147483647 ] -> memlabel-mem--heap, [ 2147483648; 3758096383 ] -> memlabel-mem--esp, [ 3758096384; 3758096399 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 3758096400; 3758100479 ] -> memlabel-mem--esp, [ 3758100480; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L0%2%d
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%2%d
1 : 499877795 { 0x1dcb87a3 +1.59007680e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%2%d
1 : 191440829 { 0xb6927bd +1.82152521e151 } : BV:32
=input.dst.local_size.=Lentry%2%d=.L0%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L0%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.L0%2%d
1 : 958688584 { 0x39246d48 +1.28458499e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.L0%2%d
1 : 655066682 { 0x270b863a +1.9003376e207 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.L0%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.6.0.L0%2%spver
1 : 1919849144 { 0x726e92b8 +1.86385250e101 } : BV:32
=rodata.size
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.10.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.11.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.sp=L0%2%spver=sp.L0%2%spver
1 : 2684370956 { 0xa000400c -1610596340 -1.195455e193 } : BV:32
=input.dst.exreg.12.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.13.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.15.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.7.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.local_size.=Lentry%2%d=
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end
1 : 958688584 { 0x39246d48 +1.28458499e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin
1 : 655066682 { 0x270b863a +1.9003376e207 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4063 { 0xfdf +1.48434e129 } : BV:32
=stack.size
1 : 1610616832 { 0x60001000 +1.48828e65 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.memlabel-mem--symbol.1.1_begin
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=input.memlabel-mem--symbol.1.1_end
1 : 4063 { 0xfdf +1.48434e129 } : BV:32
=input.memlabel-mem--symbol.3.0_begin
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=input.memlabel-mem--symbol.3.0_end
1 : 4095 { 0xfff +1.48816e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.memlabel-mem--esp_end
1 : 3758100479 { 0xe0000fff -536866817 -1.48816e65 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 3758096384 { 0xe0000000 -536870912 -1.0e65 } : BV:32
=input.dst.mem.L0%1%allocaI2
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%1%allocaI2
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 2147483647 ] -> memlabel-mem--heap, [ 2147483648; 3758096383 ] -> memlabel-mem--esp, [ 3758096384; 3758096399 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 3758096400; 3758100479 ] -> memlabel-mem--esp, [ 3758100480; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%1%allocaI2
1 : 191440829 { 0xb6927bd +1.82152521e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%1%allocaI2
1 : 499877795 { 0x1dcb87a3 +1.59007680e188 } : BV:32
=input.dst.local_size.=Lentry%2%d=.L0%2%allocaI1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.mem.L0%2%allocaI2
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%2%allocaI2
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 2147483647 ] -> memlabel-mem--heap, [ 2147483648; 2684370955 ] -> memlabel-mem--esp, [ 2684370956; 2684370963 ] -> memlabel-mem--local./*___y___main__x__=Lentry%2%d=/, [ 2684370964; 3758096383 ] -> memlabel-mem--esp, [ 3758096384; 3758096399 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 3758096400; 3758100479 ] -> memlabel-mem--esp, [ 3758100480; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.L0%2%allocaI2
1 : 2684370963 { 0xa0004013 -1610596333 -1.195538e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.L0%2%allocaI2
1 : 2684370956 { 0xa000400c -1610596340 -1.195455e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.L0%2%allocaI2
1 : 0 { 0x0 } : BOOL
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lentry%1%allocaI4.mem.L0%1%allocaI2.cluster.memlabel-mem--rodata
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lentry%1%allocaI4.mem.L0%1%allocaI2.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1988498910
=counter_example_end


failcond-expr = not(true):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1), result: changed ...</MSG>
<MSG>1:30 : main.A2: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1), result: changed( 1, 1 ) ...</MSG>
<MSG>1:30 : main.A2: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)*((Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)*((Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)*((Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2)*(Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d))))) became unstable after invariant inference</MSG>
<MSG>1:30 : Chosen product-TFG main.A2 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)*((Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)*((Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)*((Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2)*(Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d))))))
</MSG>
<MSG>1:30 : Chose (for CE propagation) product-TFG main.A3 (d:0, s:0) from a frontier of size 7...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
<MSG>1:30 : Finished adding lsprel-assumes for allocation to the product-TFG main.A3...</MSG>
<MSG>1:30 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A3...</MSG>
<MSG>1:30 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>1:30 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:30 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d
</MSG>
<MSG>1:30 : Identified 4 common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:30 : main.A3: marking unstable at L0%0%d_L0%0%d due to failing condition:
correlation-failure--failed-to-create-alloc-dealloc-nodes-and-edges
failcond-expr = true:
1 : 1 { 0x1 } : BOOL
</MSG>
<MSG>1:30 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:30 : Failed correlation of src pathset L0%0%d=>E0%0%d[mu 1, delta 1] as correlation candidate for L0%0%d=>E0%0%d[mu 1, delta 1] at L0%0%d_L0%0%d: failcond = correlation-failure--failed-to-create-alloc-dealloc-nodes-and-edges
</MSG>
<MSG>1:30 : Discovered that the correlation was useless for the product-TFG main.A3 (d:0, s:0)...</MSG>
<MSG>1:30 : Chose (for CE propagation) product-TFG main.A4 (d:0, s:0) from a frontier of size 6...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 2, delta 1]
<MSG>1:30 : Finished adding lsprel-assumes for allocation to the product-TFG main.A4...</MSG>
<MSG>1:30 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A4...</MSG>
<MSG>1:31 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>1:31 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:31 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d
</MSG>
<MSG>1:31 : Identified 4 common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:31 : main.A4: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:31 : main.A4: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:31 : main.A4: Adding node Lentry%1%allocaI3_L0%1%allocaI3 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A4: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A4: returning 1 for =Lentry%2%d=
<MSG>1:31 : main.A4: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:31 : main.A4: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:31 : main.A4: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:31 : main.A4: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:31 : main.A4: Adding node Lentry%1%allocaI4_L0%1%allocaI4 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A4: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A4: returning 1 for =Lentry%2%d=
<MSG>1:31 : main.A4: Getting alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:31 : main.A4: Found no alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
local_is_heap_allocated 3811: main.A4: returning 1 for =Lentry%1%d=
<MSG>1:31 : main.A4: Computing loop hoisting select expressions at toPC Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:31 : main.A4: Computing loop hoisting non-linear expressions at toPC Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:31 : main.A4: Adding node Lentry%2%allocaI3_L0%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A4: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A4: returning 1 for =Lentry%2%d=
<MSG>1:31 : main.A4: Getting alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:31 : main.A4: Found 1 alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:31 : main.A4: Computing loop hoisting select expressions at toPC Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:31 : main.A4: Computing loop hoisting non-linear expressions at toPC Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:31 : main.A4: Adding node Lentry%2%allocaI4_L0%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A4: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A4: returning 1 for =Lentry%2%d=
<MSG>1:31 : main.A4: Getting alloca-ptrs on edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:31 : main.A4: Found no alloca-ptrs on edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A4: returning 1 for =Lentry%2%d=
<MSG>1:31 : main.A4: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>1:31 : main.A4: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>1:31 : main.A4: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>1:31 : main.A4: Getting alloca-ptrs on edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:31 : main.A4: Found no alloca-ptrs on edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:31 : main.A4: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:31 : main.A4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:31 : main.A4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:31 : main.A4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:31 : main.A4: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3</MSG>
<MSG>1:31 : main.A4: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L0%1%allocaI3 and propagated further.
</MSG>
<MSG>1:31 : main.A4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:31 : main.A4: Finished executing CG's add edge function...</MSG>
<MSG>1:31 : main.A4: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:31 : main.A4: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:31 : main.A4: Adding edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:31 : main.A4: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A4: returning 1 for =Lentry%1%d=
<MSG>1:31 : main.A4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:31 : main.A4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:31 : main.A4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:31 : main.A4: Finished executing CG's add edge function...</MSG>
<MSG>1:31 : main.A4: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:31 : main.A4: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:31 : main.A4: Adding edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:31 : main.A4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:31 : main.A4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:31 : main.A4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:31 : main.A4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:31 : main.A4: Finished executing CG's add edge function...</MSG>
<MSG>1:31 : main.A4: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:31 : main.A4: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:31 : main.A4: Adding edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:31 : main.A4: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A4: returning 1 for =Lentry%2%d=
<MSG>1:31 : main.A4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:31 : main.A4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:31 : main.A4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:31 : main.A4: Finished executing CG's add edge function...</MSG>
<MSG>1:31 : main.A4: Computing CG regions after the addition of the edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:31 : main.A4: Done computing CG regions after the addition of the edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:31 : main.A4: Adding edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:31 : main.A4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:31 : main.A4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:31 : main.A4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:31 : main.A4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
<MSG>1:31 : main.A4: Finished executing CG's add edge function...</MSG>
<MSG>1:31 : main.A4: Computing CG regions after the addition of the edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:31 : main.A4: Done computing CG regions after the addition of the edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:31 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:31 : Added correlation to the product-TFG main.A4 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:31 : Chose (after CE propagation) product-TFG main.A4 (d:0, s:0) from a frontier of size 6...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3 (C L0%0%d => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d (C line 19 => C E0%0%d at mu 2 delta 1, A line 19 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI3 (C line 19, A line 19)
                Lentry%1%allocaI3_L0%1%allocaI3 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI4 (C line 19, A line 19)
                Lentry%1%allocaI4_L0%1%allocaI4 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%2%allocaI3_L0%1%allocaI1 (C line 19, A line 19)
                Lentry%2%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 15 bv exprs)
            Lentry%2%allocaI4_L0%1%allocaI2 (C line 19, A line 19)
                Lentry%2%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 15 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/
  	  local.=Lentry%2%d= == input.dst.local./*___y___main__x__=Lentry%2%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 2, delta 1]
<MSG>1:31 : main.A4: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>1:31 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3, Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4, Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1, Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2, Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:31 : main.A4: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3) ...</MSG>
<MSG>1:31 : main.A4: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3), result: unchanged</MSG>
<MSG>1:31 : main.A4: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:32 : main.A4: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3) ...</MSG>
<MSG>1:32 : main.A4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:32 : main.A4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:32 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:32 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:32 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:32 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:32 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:32 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:32 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:32 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:32 : main.A4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:32 : main.A4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:32 : main.A4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:32 : main.A4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:32 : main.A4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:32 : main.A4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:32 : main.A4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:34 : main.A4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 1 proof-stats=dht16-prove_trivial5-prove11...</MSG>
<MSG>1:34 : main.A4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:34 : main.A4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:34 : main.A4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:34 : main.A4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:34 : main.A4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:34 : main.A4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:34 : main.A4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:34 : main.A4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:34 : main.A4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:34 : main.A4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:34 : main.A4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:34 : main.A4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:34 : main.A4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:34 : main.A4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:34 : main.A4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:34 : main.A4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:34 : main.A4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:34 : main.A4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:34 : main.A4: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3), result: changed ...</MSG>
<MSG>1:34 : main.A4: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3), result: changed( 0, 1 ) ...</MSG>
<MSG>1:34 : main.A4: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4) ...</MSG>
<MSG>1:34 : main.A4: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: changed</MSG>
<MSG>1:34 : main.A4: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI3 ...</MSG>
<MSG>1:34 : main.A4: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4) ...</MSG>
<MSG>1:34 : main.A4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:34 : main.A4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:34 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:35 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:35 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:35 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:35 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:35 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:35 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:35 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:35 : main.A4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:35 : main.A4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:35 : main.A4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:35 : main.A4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:35 : main.A4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:35 : main.A4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:35 : main.A4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:38 : main.A4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 1 proof-stats=dht23-prove_trivial11-prove12...</MSG>
<MSG>1:38 : main.A4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:38 : main.A4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:38 : main.A4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:38 : main.A4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:38 : main.A4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:38 : main.A4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:38 : main.A4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:38 : main.A4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:38 : main.A4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:38 : main.A4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:38 : main.A4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: changed ...</MSG>
<MSG>1:39 : main.A4: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: changed( 1, 1 ) ...</MSG>
<MSG>1:39 : main.A4: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>1:39 : main.A4: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: unchanged</MSG>
<MSG>1:39 : main.A4: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI4 ...</MSG>
<MSG>1:39 : main.A4: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:39 : main.A4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:39 : main.A4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 15 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:41 : main.A4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht21-prove_trivial12-prove9...</MSG>
<MSG>1:41 : main.A4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:41 : main.A4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:41 : main.A4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:41 : main.A4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:41 : main.A4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:41 : main.A4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:41 : main.A4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:41 : main.A4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:41 : main.A4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:41 : main.A4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:41 : main.A4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:42 : main.A4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:42 : main.A4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:42 : main.A4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:42 : main.A4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:42 : main.A4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:42 : main.A4: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:42 : main.A4: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:42 : main.A4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:42 : main.A4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:42 : main.A4: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: changed ...</MSG>
<MSG>1:42 : main.A4: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>1:42 : main.A4: Relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:42 : main.A4: Done relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: changed</MSG>
<MSG>1:42 : main.A4: Checking well-formedness assertions on outgoing edges from Lentry%2%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>1:42 : main.A4: Relaxing invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:42 : main.A4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:42 : main.A4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:42 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:42 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:42 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:42 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:42 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:43 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:43 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:43 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:43 : main.A4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:43 : main.A4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:43 : main.A4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:43 : main.A4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:43 : main.A4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:43 : main.A4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:43 : main.A4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 15 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:43 : main.A4: marking unstable at Lentry%2%allocaI4_L0%1%allocaI2 due to failing condition:
wfcond.from_pcLentry%2%allocaI4_L0%1%allocaI2.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140320 : 1 { 0x1 } : BOOL                          : true
146415 : not(140320) : BOOL                        : false

ce =
=counter_example_begin z3.ce3274 d79672d116d1e1466eab23a69cfb9313
=input.dst.exreg.0.4
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=symbol.1
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=symbol.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=symbol.3
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=dst_symbol_addr.1
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=dst_symbol_addr.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst_symbol_addr.3
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=callee_save_const.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1535639564 { 0x5b88000c +1.6250143e56 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 1531184128 { 0x5b440400 +1.53137207e55 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local_alloc_count.=L0%0%d=
1 : 0 { 0x0 +1.0e129 } : COUNT
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 1531184128 { 0x5b440400 +1.53137207e55 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3
1 : 1 { 0x1 } : BOOL
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 1531184128 { 0x5b440400 +1.53137207e55 } : BV:32
=input.src.local_size.=Lentry%2%d=.Lentry%2%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 530649087 ] -> memlabel-mem--heap, [ 530649088; 1531184127 ] -> memlabel-mem--esp, [ 1531184128; 1531184143 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1531184144; 2147487743 ] -> memlabel-mem--esp, [ 2147487744; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.local_alloc_count.=Lentry%2%d=.Lentry%2%allocaI3
1 : 1 { 0x1 +1.11e129 } : COUNT
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4
1 : 530644999 { 0x1fa10007 +1.25781333e192 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4
1 : 530644992 { 0x1fa10000 +1.25781250e192 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3
1 : 530644992 { 0x1fa10000 +1.25781250e192 } : BV:32
=input.src.llvm-mem.Lentry%1%allocaI4
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 1531184143 { 0x5b44040f +1.53137385e55 } : BV:32
=input.src.llvm-mem.Lentry%2%allocaI4
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 530644991 ] -> 0, [ 530644992; 530644999 ] -> 1, [ 530645000; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%2%allocaI4
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 530644991 ] -> memlabel-mem--heap, [ 530644992; 530644999 ] -> memlabel-mem--local./*___y___main__x__=Lentry%2%d=/, [ 530645000; 530649087 ] -> memlabel-mem--heap, [ 530649088; 1531184127 ] -> memlabel-mem--esp, [ 1531184128; 1531184143 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1531184144; 2147487743 ] -> memlabel-mem--esp, [ 2147487744; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1535639564 { 0x5b88000c +1.6250143e56 } : BV:32
=input.dst.exreg.0.5.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1535639564 { 0x5b88000c +1.6250143e56 } : BV:32
=rodata.size
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4063 { 0xfdf +1.48434e129 } : BV:32
=stack.size
1 : 1616838656 { 0x605f0000 +1.74218750e65 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.memlabel-mem--symbol.1.1_begin
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=input.memlabel-mem--symbol.1.1_end
1 : 4063 { 0xfdf +1.48434e129 } : BV:32
=input.memlabel-mem--symbol.3.0_begin
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=input.memlabel-mem--symbol.3.0_end
1 : 4095 { 0xfff +1.48816e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 530649088 { 0x1fa11000 +1.25830078e192 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147487743 { 0x80000fff -2147479553 -1.48816e129 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 1531184128 { 0x5b440400 +1.53137207e55 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%2%d=/
1 : 530644992 { 0x1fa10000 +1.25781250e192 } : BV:32
=input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.mem.L0%1%allocaI4
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%1%allocaI4
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 530649087 ] -> memlabel-mem--heap, [ 530649088; 1531184127 ] -> memlabel-mem--esp, [ 1531184128; 1531184143 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1531184144; 2147487743 ] -> memlabel-mem--esp, [ 2147487744; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.mem.L0%1%allocaI2
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 530644991 ] -> 0, [ 530644992; 530644999 ] -> 1, [ 530645000; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%1%allocaI2
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 530644991 ] -> memlabel-mem--heap, [ 530644992; 530644999 ] -> memlabel-mem--local./*___y___main__x__=Lentry%2%d=/, [ 530645000; 530649087 ] -> memlabel-mem--heap, [ 530649088; 1531184127 ] -> memlabel-mem--esp, [ 1531184128; 1531184143 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 1531184144; 2147487743 ] -> memlabel-mem--esp, [ 2147487744; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.L0%1%allocaI2
1 : 530644999 { 0x1fa10007 +1.25781333e192 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.L0%1%allocaI2
1 : 530644992 { 0x1fa10000 +1.25781250e192 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.L0%1%allocaI2
1 : 0 { 0x0 } : BOOL
=commonMEM.llvm-mem.Lentry%1%allocaI4.mem.L0%1%allocaI4.cluster.memlabel-mem--rodata
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.L0%1%allocaI4.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1019305995
=counter_example_end


failcond-expr = not(true):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
</MSG>
<MSG>1:43 : main.A4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:43 : main.A4: Done relaxing invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: changed ...</MSG>
<MSG>1:43 : main.A4: Done relaxing memlabels and invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:43 : main.A4: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)*((Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)*((Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)*((Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)*(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d))))) became unstable after invariant inference</MSG>
<MSG>1:43 : Chosen product-TFG main.A4 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)*((Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)*((Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)*((Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)*(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d))))))
</MSG>
<MSG>1:43 : Chose (for CE propagation) product-TFG main.A5 (d:0, s:0) from a frontier of size 5...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 2, delta 1]
<MSG>1:43 : Finished adding lsprel-assumes for allocation to the product-TFG main.A5...</MSG>
<MSG>1:43 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A5...</MSG>
<MSG>1:43 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>1:43 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:43 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d
</MSG>
<MSG>1:43 : Identified 4 common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:43 : main.A5: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:43 : main.A5: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:43 : main.A5: Adding node Lentry%1%allocaI3_L0%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A5: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%2%d=
<MSG>1:43 : main.A5: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:43 : main.A5: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:43 : main.A5: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:43 : main.A5: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:43 : main.A5: Adding node Lentry%1%allocaI4_L0%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A5: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%2%d=
<MSG>1:43 : main.A5: Getting alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:43 : main.A5: Found no alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A5: returning 1 for =Lentry%1%d=
<MSG>1:43 : main.A5: Computing loop hoisting select expressions at toPC Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:43 : main.A5: Computing loop hoisting non-linear expressions at toPC Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:43 : main.A5: Adding node Lentry%2%allocaI3_L0%2%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A5: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%2%d=
<MSG>1:43 : main.A5: Getting alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:43 : main.A5: Found 1 alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:43 : main.A5: Computing loop hoisting select expressions at toPC Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>1:43 : main.A5: Computing loop hoisting non-linear expressions at toPC Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>1:43 : main.A5: Adding node Lentry%2%allocaI4_L0%2%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A5: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%2%d=
<MSG>1:43 : main.A5: Getting alloca-ptrs on edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>1:43 : main.A5: Found no alloca-ptrs on edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%2%d=
<MSG>1:43 : main.A5: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>1:43 : main.A5: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>1:43 : main.A5: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>1:43 : main.A5: Getting alloca-ptrs on edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:43 : main.A5: Found no alloca-ptrs on edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:43 : main.A5: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:43 : main.A5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:43 : main.A5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:43 : main.A5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:43 : main.A5: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1</MSG>
<MSG>1:43 : main.A5: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L0%1%allocaI1 and propagated further.
</MSG>
<MSG>1:43 : main.A5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:43 : main.A5: Finished executing CG's add edge function...</MSG>
<MSG>1:43 : main.A5: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:43 : main.A5: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:43 : main.A5: Adding edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:43 : main.A5: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A5: returning 1 for =Lentry%1%d=
<MSG>1:43 : main.A5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:43 : main.A5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:43 : main.A5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:43 : main.A5: Finished executing CG's add edge function...</MSG>
<MSG>1:43 : main.A5: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:43 : main.A5: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:43 : main.A5: Adding edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:43 : main.A5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:43 : main.A5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:43 : main.A5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:43 : main.A5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:43 : main.A5: Finished executing CG's add edge function...</MSG>
<MSG>1:43 : main.A5: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:43 : main.A5: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>1:43 : main.A5: Adding edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>1:43 : main.A5: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%2%d=
<MSG>1:43 : main.A5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:43 : main.A5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:43 : main.A5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:43 : main.A5: Finished executing CG's add edge function...</MSG>
<MSG>1:43 : main.A5: Computing CG regions after the addition of the edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>1:43 : main.A5: Done computing CG regions after the addition of the edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>1:43 : main.A5: Adding edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:43 : main.A5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:43 : main.A5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:43 : main.A5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:43 : main.A5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
<MSG>1:44 : main.A5: Finished executing CG's add edge function...</MSG>
<MSG>1:44 : main.A5: Computing CG regions after the addition of the edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:44 : main.A5: Done computing CG regions after the addition of the edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:44 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:44 : Added correlation to the product-TFG main.A5 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:44 : Chose (after CE propagation) product-TFG main.A5 (d:0, s:0) from a frontier of size 5...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d (C line 19 => C E0%0%d at mu 2 delta 1, A line 19 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 19, A line 19)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 19, A line 19)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%2%allocaI3_L0%2%allocaI1 (C line 19, A line 19)
                Lentry%2%allocaI3_L0%2%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%2%allocaI4_L0%2%allocaI2 (C line 19, A line 19)
                Lentry%2%allocaI4_L0%2%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/
  	L0%2%spver:
  	  local.=Lentry%2%d= == input.dst.sp=L0%2%spver=sp.L0%2%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 2, delta 1]
<MSG>1:44 : main.A5: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>1:44 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1, Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2, Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1, Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2, Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:44 : main.A5: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>1:44 : main.A5: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: unchanged</MSG>
<MSG>1:44 : main.A5: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:44 : main.A5: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>1:44 : main.A5: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:44 : main.A5: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:44 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:44 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:44 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:44 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:44 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:44 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:44 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:44 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:44 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:44 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:44 : main.A5: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:44 : main.A5: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:44 : main.A5: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:44 : main.A5: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:44 : main.A5: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:44 : main.A5: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:44 : main.A5: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:45 : main.A5: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht14-prove_trivial5-prove9...</MSG>
<MSG>1:45 : main.A5: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:45 : main.A5: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:45 : main.A5: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:45 : main.A5: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:45 : main.A5: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:45 : main.A5: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:45 : main.A5: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:46 : main.A5: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:46 : main.A5: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:46 : main.A5: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:46 : main.A5: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:46 : main.A5: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed ...</MSG>
<MSG>1:46 : main.A5: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>1:46 : main.A5: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:46 : main.A5: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed</MSG>
<MSG>1:46 : main.A5: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>1:46 : main.A5: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:46 : main.A5: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:46 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:46 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:46 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:46 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:46 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:46 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:46 : main.A5: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:47 : main.A5: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:47 : main.A5: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:47 : main.A5: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:47 : main.A5: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:47 : main.A5: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:47 : main.A5: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:50 : main.A5: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht23-prove_trivial10-prove13...</MSG>
<MSG>1:50 : main.A5: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:51 : main.A5: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:51 : main.A5: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:51 : main.A5: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:51 : main.A5: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:51 : main.A5: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:51 : main.A5: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:51 : main.A5: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:51 : main.A5: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:51 : main.A5: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:51 : main.A5: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:51 : main.A5: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:51 : main.A5: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed ...</MSG>
<MSG>1:52 : main.A5: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:52 : main.A5: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1) ...</MSG>
<MSG>1:52 : main.A5: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1), result: changed</MSG>
<MSG>1:52 : main.A5: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>1:52 : main.A5: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1) ...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:52 : main.A5: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>1:52 : main.A5: marking unstable at Lentry%2%allocaI4_L0%2%allocaI2 due to failing condition:
wfcond.from_pcLentry%2%allocaI4_L0%2%allocaI2.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140320 : 1 { 0x1 } : BOOL                          : true
146415 : not(140320) : BOOL                        : false

ce =
=counter_example_begin z3.ce4175 716a18df91b59c81986f27fc81ccd1
=input.dst.exreg.0.4
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.exreg.6.0
1 : 428493393 { 0x198a4a51 +1.8039295e180 } : BV:32
=symbol.1
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=symbol.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=symbol.3
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=dst_symbol_addr.1
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=dst_symbol_addr.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst_symbol_addr.3
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=callee_save_const.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1753220156 { 0x6880043c +1.12922e82 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 2969569536 { 0xb1000900 -1325397760 -1.27465e227 } : BV:32
=input.src.local_size.=Lentry%2%d=
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%2%d=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local_alloc_count.=L0%0%d=
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : COUNT
=alloca_ptr
1 : (() -> 1753220140, ) : FUNCTION[COUNT,ARRAY[BV:32 -> MEMLABEL],MEMLABEL,BV:32 -> BV:32]
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 2969569536 { 0xb1000900 -1325397760 -1.27465e227 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3
1 : 1 { 0x1 } : BOOL
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 2969569536 { 0xb1000900 -1325397760 -1.27465e227 } : BV:32
=input.src.local_size.=Lentry%2%d=.Lentry%2%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 964694015 ] -> memlabel-mem--heap, [ 964694016; 2969569535 ] -> memlabel-mem--esp, [ 2969569536; 2969569551 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2969569552; 3221229567 ] -> memlabel-mem--esp, [ 3221229568; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.local_alloc_count.Lentry%2%allocaI3
1 : 0 { 0x0 +1.0e129 } : COUNT
=input.src.local_alloc_count.=Lentry%2%d=.Lentry%2%allocaI3
1 : 0 { 0x0 +1.0e129 } : COUNT
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4
1 : 1753220147 { 0x68800433 +1.12814e82 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4
1 : 1753220140 { 0x6880042c +1.12731e82 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.local_alloc_count.Lentry%1%allocaI3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : COUNT
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3
1 : 1753220140 { 0x6880042c +1.12731e82 } : BV:32
=input.src.llvm-mem.Lentry%1%allocaI4
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 2969569551 { 0xb100090f -1325397745 -1.27644e227 } : BV:32
=input.src.llvm-mem.Lentry%2%allocaI4
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%2%allocaI4
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 964694015 ] -> memlabel-mem--heap, [ 964694016; 1753220139 ] -> memlabel-mem--esp, [ 1753220140; 1753220147 ] -> memlabel-mem--local./*___y___main__x__=Lentry%2%d=/, [ 1753220148; 2969569535 ] -> memlabel-mem--esp, [ 2969569536; 2969569551 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2969569552; 3221229567 ] -> memlabel-mem--esp, [ 3221229568; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.llvm-%d.Lentry%2%allocaI3
1 : 1753220140 { 0x6880042c +1.12731e82 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1753220156 { 0x6880043c +1.12922e82 } : BV:32
=input.dst.exreg.0.5.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%2%spver
1 : 1753220140 { 0x6880042c +1.12731e82 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1753220156 { 0x6880043c +1.12922e82 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1753220156 { 0x6880043c +1.12922e82 } : BV:32
=input.dst.mem.L0%2%d
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%2%d
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 964694015 ] -> memlabel-mem--heap, [ 964694016; 2969569535 ] -> memlabel-mem--esp, [ 2969569536; 2969569551 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2969569552; 3221229567 ] -> memlabel-mem--esp, [ 3221229568; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L0%2%d
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%2%d
1 : 853281613 { 0x32dc0b4d +1.71909487e230 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%2%d
1 : 1373989270 { 0x51e56996 +1.79228472e36 } : BV:32
=input.dst.local_size.=Lentry%2%d=.L0%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L0%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.L0%2%d
1 : 1125556454 { 0x4316a0e6 +1.17678523e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.L0%2%d
1 : 106237571 { 0x6550e83 +1.66450536e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.L0%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.6.0.L0%2%spver
1 : 428491280 { 0x198a4210 +1.8014106e180 } : BV:32
=rodata.size
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.10.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.11.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.sp=L0%2%spver=sp.L0%2%spver
1 : 1753220140 { 0x6880042c +1.12731e82 } : BV:32
=input.dst.exreg.12.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.13.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.15.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.7.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.local_size.=Lentry%2%d=
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end
1 : 1125556454 { 0x4316a0e6 +1.17678523e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin
1 : 106237571 { 0x6550e83 +1.66450536e141 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4063 { 0xfdf +1.48434e129 } : BV:32
=stack.size
1 : 2256535552 { 0x86800000 -2038431744 -1.0e142 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.memlabel-mem--symbol.1.1_begin
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=input.memlabel-mem--symbol.1.1_end
1 : 4063 { 0xfdf +1.48434e129 } : BV:32
=input.memlabel-mem--symbol.3.0_begin
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=input.memlabel-mem--symbol.3.0_end
1 : 4095 { 0xfff +1.48816e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 964694016 { 0x39801000 +1.48828e244 } : BV:32
=input.memlabel-mem--esp_end
1 : 3221229567 { 0xc0000fff -1073737729 -1.48816e1 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 2969569536 { 0xb1000900 -1325397760 -1.27465e227 } : BV:32
=input.dst.mem.L0%1%allocaI2
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%1%allocaI2
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 964694015 ] -> memlabel-mem--heap, [ 964694016; 2969569535 ] -> memlabel-mem--esp, [ 2969569536; 2969569551 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2969569552; 3221229567 ] -> memlabel-mem--esp, [ 3221229568; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%1%allocaI2
1 : 1373989270 { 0x51e56996 +1.79228472e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%1%allocaI2
1 : 853281613 { 0x32dc0b4d +1.71909487e230 } : BV:32
=input.dst.local_size.=Lentry%2%d=.L0%2%allocaI1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.mem.L0%2%allocaI2
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%2%allocaI2
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 964694015 ] -> memlabel-mem--heap, [ 964694016; 1753220139 ] -> memlabel-mem--esp, [ 1753220140; 1753220147 ] -> memlabel-mem--local./*___y___main__x__=Lentry%2%d=/, [ 1753220148; 2969569535 ] -> memlabel-mem--esp, [ 2969569536; 2969569551 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2969569552; 3221229567 ] -> memlabel-mem--esp, [ 3221229568; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.L0%2%allocaI2
1 : 1753220147 { 0x68800433 +1.12814e82 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.L0%2%allocaI2
1 : 1753220140 { 0x6880042c +1.12731e82 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.L0%2%allocaI2
1 : 0 { 0x0 } : BOOL
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lentry%1%allocaI4.mem.L0%1%allocaI2.cluster.memlabel-mem--rodata
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lentry%1%allocaI4.mem.L0%1%allocaI2.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4222348028
=counter_example_end


failcond-expr = not(true):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
</MSG>
<MSG>1:52 : main.A5: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:52 : main.A5: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1), result: changed ...</MSG>
<MSG>1:52 : main.A5: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1), result: changed( 1, 1 ) ...</MSG>
<MSG>1:52 : main.A5: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)*((Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)*((Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)*((Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2)*(Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d))))) became unstable after invariant inference</MSG>
<MSG>1:52 : Chosen product-TFG main.A5 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)*((Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)*((Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)*((Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2)*(Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d))))))
</MSG>
<MSG>1:52 : Chose (for CE propagation) product-TFG main.A6 (d:0, s:0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 2, delta 1]
<MSG>1:52 : Finished adding lsprel-assumes for allocation to the product-TFG main.A6...</MSG>
<MSG>1:52 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A6...</MSG>
<MSG>1:52 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>1:52 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:52 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d
</MSG>
<MSG>1:52 : Identified 4 common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:52 : main.A6: marking unstable at L0%0%d_L0%0%d due to failing condition:
correlation-failure--failed-to-create-alloc-dealloc-nodes-and-edges
failcond-expr = true:
1 : 1 { 0x1 } : BOOL
</MSG>
<MSG>1:52 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:52 : Failed correlation of src pathset L0%0%d=>E0%0%d[mu 2, delta 1] as correlation candidate for L0%0%d=>E0%0%d[mu 1, delta 1] at L0%0%d_L0%0%d: failcond = correlation-failure--failed-to-create-alloc-dealloc-nodes-and-edges
</MSG>
<MSG>1:52 : Discovered that the correlation was useless for the product-TFG main.A6 (d:0, s:0)...</MSG>
<MSG>1:52 : Chose (for CE propagation) product-TFG main.A7 (d:0, s:0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 3, delta 1]
<MSG>1:52 : Finished adding lsprel-assumes for allocation to the product-TFG main.A7...</MSG>
<MSG>1:52 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A7...</MSG>
<MSG>1:53 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>1:53 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:53 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d
</MSG>
<MSG>1:53 : Identified 4 common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:53 : main.A7: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:53 : main.A7: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:53 : main.A7: Adding node Lentry%1%allocaI3_L0%1%allocaI3 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A7: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A7: returning 1 for =Lentry%2%d=
<MSG>1:53 : main.A7: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:53 : main.A7: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:53 : main.A7: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:53 : main.A7: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:53 : main.A7: Adding node Lentry%1%allocaI4_L0%1%allocaI4 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A7: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A7: returning 1 for =Lentry%2%d=
<MSG>1:53 : main.A7: Getting alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:53 : main.A7: Found no alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
local_is_heap_allocated 3811: main.A7: returning 1 for =Lentry%1%d=
<MSG>1:53 : main.A7: Computing loop hoisting select expressions at toPC Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:53 : main.A7: Computing loop hoisting non-linear expressions at toPC Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:53 : main.A7: Adding node Lentry%2%allocaI3_L0%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A7: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A7: returning 1 for =Lentry%2%d=
<MSG>1:53 : main.A7: Getting alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:53 : main.A7: Found 1 alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:53 : main.A7: Computing loop hoisting select expressions at toPC Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:53 : main.A7: Computing loop hoisting non-linear expressions at toPC Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:53 : main.A7: Adding node Lentry%2%allocaI4_L0%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A7: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A7: returning 1 for =Lentry%2%d=
<MSG>1:53 : main.A7: Getting alloca-ptrs on edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:53 : main.A7: Found no alloca-ptrs on edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A7: returning 1 for =Lentry%2%d=
<MSG>1:53 : main.A7: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>1:53 : main.A7: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>1:53 : main.A7: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>1:53 : main.A7: Getting alloca-ptrs on edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:53 : main.A7: Found no alloca-ptrs on edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:53 : main.A7: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:53 : main.A7: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:53 : main.A7: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:53 : main.A7: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:53 : main.A7: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3</MSG>
<MSG>1:53 : main.A7: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L0%1%allocaI3 and propagated further.
</MSG>
<MSG>1:53 : main.A7: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:53 : main.A7: Finished executing CG's add edge function...</MSG>
<MSG>1:53 : main.A7: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:53 : main.A7: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3...</MSG>
<MSG>1:53 : main.A7: Adding edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:53 : main.A7: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A7: returning 1 for =Lentry%1%d=
<MSG>1:53 : main.A7: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:53 : main.A7: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:53 : main.A7: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:53 : main.A7: Finished executing CG's add edge function...</MSG>
<MSG>1:53 : main.A7: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:53 : main.A7: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4...</MSG>
<MSG>1:53 : main.A7: Adding edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:53 : main.A7: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:53 : main.A7: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:53 : main.A7: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:53 : main.A7: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:53 : main.A7: Finished executing CG's add edge function...</MSG>
<MSG>1:53 : main.A7: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:53 : main.A7: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1...</MSG>
<MSG>1:53 : main.A7: Adding edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:53 : main.A7: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A7: returning 1 for =Lentry%2%d=
<MSG>1:53 : main.A7: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:53 : main.A7: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:53 : main.A7: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:53 : main.A7: Finished executing CG's add edge function...</MSG>
<MSG>1:53 : main.A7: Computing CG regions after the addition of the edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:53 : main.A7: Done computing CG regions after the addition of the edge Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2...</MSG>
<MSG>1:53 : main.A7: Adding edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:53 : main.A7: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:53 : main.A7: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:53 : main.A7: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:53 : main.A7: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lfor.body%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lfor.body%1%d=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%d,-1}
operator() 10396: new_te = ((Lfor.cond%1%bbentry=>Lfor.body%1%d)*((Lfor.body%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%d)))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond%1%bbentry=>Lfor.body%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
<MSG>1:53 : main.A7: Finished executing CG's add edge function...</MSG>
<MSG>1:53 : main.A7: Computing CG regions after the addition of the edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:53 : main.A7: Done computing CG regions after the addition of the edge Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:53 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>1:53 : Added correlation to the product-TFG main.A7 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:53 : Chose (after CE propagation) product-TFG main.A7 (d:0, s:0) from a frontier of size 3...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3 (C L0%0%d => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d (C line 19 => C E0%0%d at mu 3 delta 1, A line 19 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI3 (C line 19, A line 19)
                Lentry%1%allocaI3_L0%1%allocaI3 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI4 (C line 19, A line 19)
                Lentry%1%allocaI4_L0%1%allocaI4 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%2%allocaI3_L0%1%allocaI1 (C line 19, A line 19)
                Lentry%2%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 15 bv exprs)
            Lentry%2%allocaI4_L0%1%allocaI2 (C line 19, A line 19)
                Lentry%2%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 15 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/
  	  local.=Lentry%2%d= == input.dst.local./*___y___main__x__=Lentry%2%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 3, delta 1]
<MSG>1:53 : main.A7: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>1:53 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3, Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4, Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1, Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2, Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>1:53 : main.A7: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3) ...</MSG>
<MSG>1:54 : main.A7: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3), result: unchanged</MSG>
<MSG>1:54 : main.A7: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:54 : main.A7: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3) ...</MSG>
<MSG>1:54 : main.A7: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:54 : main.A7: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:54 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:54 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:54 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:54 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:54 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:54 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:54 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:54 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:54 : main.A7: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:54 : main.A7: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:54 : main.A7: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:54 : main.A7: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:54 : main.A7: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:54 : main.A7: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:54 : main.A7: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:57 : main.A7: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 1 proof-stats=dht13-prove_trivial5-prove8...</MSG>
<MSG>1:57 : main.A7: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:57 : main.A7: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:57 : main.A7: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:57 : main.A7: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:57 : main.A7: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:57 : main.A7: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:57 : main.A7: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:57 : main.A7: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:57 : main.A7: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:57 : main.A7: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:57 : main.A7: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:57 : main.A7: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:57 : main.A7: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:57 : main.A7: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:57 : main.A7: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:57 : main.A7: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:57 : main.A7: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>1:58 : main.A7: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:58 : main.A7: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3), result: changed ...</MSG>
<MSG>1:58 : main.A7: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3), result: changed( 0, 1 ) ...</MSG>
<MSG>1:58 : main.A7: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4) ...</MSG>
<MSG>1:58 : main.A7: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: changed</MSG>
<MSG>1:58 : main.A7: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI3 ...</MSG>
<MSG>1:58 : main.A7: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4) ...</MSG>
<MSG>1:58 : main.A7: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:58 : main.A7: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:58 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:58 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:58 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:58 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:58 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:58 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:58 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:58 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:58 : main.A7: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:58 : main.A7: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:58 : main.A7: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:59 : main.A7: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:59 : main.A7: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>1:59 : main.A7: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:59 : main.A7: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:02 : main.A7: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 1 proof-stats=dht21-prove_trivial8-prove13...</MSG>
<MSG>2:02 : main.A7: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:02 : main.A7: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:02 : main.A7: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:02 : main.A7: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:02 : main.A7: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:03 : main.A7: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:03 : main.A7: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:03 : main.A7: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:03 : main.A7: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:03 : main.A7: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:03 : main.A7: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:03 : main.A7: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:03 : main.A7: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:03 : main.A7: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:03 : main.A7: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:03 : main.A7: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:03 : main.A7: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:03 : main.A7: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:03 : main.A7: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:03 : main.A7: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:03 : main.A7: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: changed ...</MSG>
<MSG>2:03 : main.A7: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: changed( 1, 1 ) ...</MSG>
<MSG>2:03 : main.A7: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>2:03 : main.A7: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: unchanged</MSG>
<MSG>2:03 : main.A7: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI4 ...</MSG>
<MSG>2:04 : main.A7: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>2:04 : main.A7: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:04 : main.A7: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:04 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:04 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:04 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:04 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:04 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:04 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:04 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:04 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:04 : main.A7: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:04 : main.A7: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:04 : main.A7: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:04 : main.A7: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:04 : main.A7: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:04 : main.A7: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:04 : main.A7: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 15 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:06 : main.A7: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht19-prove_trivial11-prove8...</MSG>
<MSG>2:06 : main.A7: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:06 : main.A7: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:06 : main.A7: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:06 : main.A7: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:06 : main.A7: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:06 : main.A7: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:06 : main.A7: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:06 : main.A7: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:06 : main.A7: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:06 : main.A7: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:06 : main.A7: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:06 : main.A7: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:06 : main.A7: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:06 : main.A7: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:06 : main.A7: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:07 : main.A7: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:07 : main.A7: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:07 : main.A7: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:07 : main.A7: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:07 : main.A7: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:07 : main.A7: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: changed ...</MSG>
<MSG>2:07 : main.A7: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>2:07 : main.A7: Relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:07 : main.A7: Done relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: changed</MSG>
<MSG>2:07 : main.A7: Checking well-formedness assertions on outgoing edges from Lentry%2%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>2:07 : main.A7: Relaxing invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:07 : main.A7: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:07 : main.A7: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:07 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:07 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:07 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:07 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:07 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:08 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:08 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:08 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:08 : main.A7: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:08 : main.A7: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:08 : main.A7: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:08 : main.A7: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:08 : main.A7: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:08 : main.A7: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:08 : main.A7: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 15 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lfor.body%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lfor.body%1%d=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%d,-1}
operator() 10396: new_te = ((Lfor.cond%1%bbentry=>Lfor.body%1%d)*((Lfor.body%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%d)))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond%1%bbentry=>Lfor.body%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lfor.body%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lfor.body%1%d=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%d,-1}
operator() 10396: new_te = ((Lfor.cond%1%bbentry=>Lfor.body%1%d)*((Lfor.body%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%d)))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond%1%bbentry=>Lfor.body%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lfor.body%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lfor.body%1%d=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%d,-1}
operator() 10396: new_te = ((Lfor.cond%1%bbentry=>Lfor.body%1%d)*((Lfor.body%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%d)))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond%1%bbentry=>Lfor.body%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lfor.body%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lfor.body%1%d=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%d,-1}
operator() 10396: new_te = ((Lfor.cond%1%bbentry=>Lfor.body%1%d)*((Lfor.body%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%d)))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond%1%bbentry=>Lfor.body%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lfor.body%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lfor.body%1%d=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%d,-1}
operator() 10396: new_te = ((Lfor.cond%1%bbentry=>Lfor.body%1%d)*((Lfor.body%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%d)))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond%1%bbentry=>Lfor.body%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lfor.body%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lfor.body%1%d=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%d,-1}
operator() 10396: new_te = ((Lfor.cond%1%bbentry=>Lfor.body%1%d)*((Lfor.body%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%d)))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond%1%bbentry=>Lfor.body%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lfor.body%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lfor.body%1%d=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%d,-1}
operator() 10396: new_te = ((Lfor.cond%1%bbentry=>Lfor.body%1%d)*((Lfor.body%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%d)))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond%1%bbentry=>Lfor.body%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
<MSG>2:19 : main.A7: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht22-prove_trivial13-prove9...</MSG>
<MSG>2:19 : main.A7: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:19 : main.A7: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:19 : main.A7: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:19 : main.A7: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:19 : main.A7: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:19 : main.A7: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:19 : main.A7: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:20 : main.A7: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:20 : main.A7: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:20 : main.A7: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:20 : main.A7: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:20 : main.A7: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:20 : main.A7: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:20 : main.A7: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:20 : main.A7: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:20 : main.A7: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:20 : main.A7: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 2 exprs and 2 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:20 : main.A7: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:20 : main.A7: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:20 : main.A7: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:20 : main.A7: Done relaxing invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: changed ...</MSG>
<MSG>2:20 : main.A7: Done relaxing memlabels and invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>2:20 : main.A7: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4) ...</MSG>
<MSG>2:20 : main.A7: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: unchanged</MSG>
<MSG>2:20 : main.A7: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI3 ...</MSG>
<MSG>2:20 : main.A7: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4) ...</MSG>
<MSG>2:20 : main.A7: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:20 : main.A7: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:20 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:21 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:21 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:21 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:21 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:21 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:21 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:21 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:21 : main.A7: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:21 : main.A7: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:21 : main.A7: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:21 : main.A7: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:21 : main.A7: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:21 : main.A7: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:21 : main.A7: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 13 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:21 : main.A7: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht7-prove_trivial5-prove2...</MSG>
<MSG>2:21 : main.A7: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:22 : main.A7: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:22 : main.A7: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:22 : main.A7: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:22 : main.A7: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:22 : main.A7: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:22 : main.A7: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:22 : main.A7: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:22 : main.A7: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:22 : main.A7: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:22 : main.A7: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:22 : main.A7: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:22 : main.A7: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:22 : main.A7: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:22 : main.A7: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:22 : main.A7: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:22 : main.A7: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:22 : main.A7: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:22 : main.A7: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:22 : main.A7: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:22 : main.A7: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: unchanged ...</MSG>
<MSG>2:22 : main.A7: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:22 : main.A7: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>2:22 : main.A7: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: unchanged</MSG>
<MSG>2:22 : main.A7: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI4 ...</MSG>
<MSG>2:23 : main.A7: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 15 exprs and 9 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht9-prove_trivial8-prove1...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:23 : main.A7: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:23 : main.A7: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: unchanged ...</MSG>
<MSG>2:23 : main.A7: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:23 : main.A7: Relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:24 : main.A7: Done relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: unchanged</MSG>
<MSG>2:24 : main.A7: Checking well-formedness assertions on outgoing edges from Lentry%2%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>2:24 : main.A7: Relaxing invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:24 : main.A7: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:24 : main.A7: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:24 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:24 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:24 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:24 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:24 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:24 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:24 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:24 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:24 : main.A7: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:24 : main.A7: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:24 : main.A7: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:24 : main.A7: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:24 : main.A7: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:24 : main.A7: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:24 : main.A7: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 15 exprs and 11 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:25 : main.A7: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht10-prove_trivial8-prove2...</MSG>
<MSG>2:25 : main.A7: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:25 : main.A7: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:25 : main.A7: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:25 : main.A7: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:25 : main.A7: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:26 : main.A7: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:26 : main.A7: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:26 : main.A7: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:26 : main.A7: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:26 : main.A7: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:26 : main.A7: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:26 : main.A7: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:26 : main.A7: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:26 : main.A7: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:26 : main.A7: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:26 : main.A7: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:26 : main.A7: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 2 exprs and 2 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:26 : main.A7: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:26 : main.A7: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:26 : main.A7: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:26 : main.A7: Done relaxing invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: unchanged ...</MSG>
<MSG>2:26 : main.A7: Done relaxing memlabels and invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:26 : main.A7: Relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d) ...</MSG>
<MSG>2:26 : main.A7: Done relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d), result: changed</MSG>
<MSG>2:26 : main.A7: Checking well-formedness assertions on outgoing edges from Lentry%2%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>2:29 : main.A7: Done relaxing memlabels and invariants across the edge composition (Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d), result: changed( 1, 0 ) ...</MSG>
<MSG>2:29 : main.A7: Relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d) ...</MSG>
<MSG>2:29 : main.A7: Done relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d), result: changed</MSG>
<MSG>2:29 : main.A7: Checking well-formedness assertions on outgoing edges from Lentry%2%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>2:30 : main.A7: Done relaxing memlabels and invariants across the edge composition (Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d), result: changed( 1, 0 ) ...</MSG>
<MSG>2:30 : main.A7 (d:2, s:0): checked newly added edge and inferred invariants...</MSG>
<MSG>2:30 : main.A7 (d:2, s:0): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>2:30 : Chosen product-TFG main.A7 will be explored later...</MSG>
<MSG>2:30 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>2:30 : Chose (for CE propagation) product-TFG main.A8 (d:0, s:0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 3, delta 1]
<MSG>2:30 : Finished adding lsprel-assumes for allocation to the product-TFG main.A8...</MSG>
<MSG>2:30 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A8...</MSG>
<MSG>2:30 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>2:30 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>2:30 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d
</MSG>
<MSG>2:30 : Identified 4 common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>2:30 : main.A8: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:30 : main.A8: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:30 : main.A8: Adding node Lentry%1%allocaI3_L0%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A8: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A8: returning 0 for =Lentry%2%d=
<MSG>2:30 : main.A8: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:30 : main.A8: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:30 : main.A8: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:30 : main.A8: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:30 : main.A8: Adding node Lentry%1%allocaI4_L0%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A8: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A8: returning 0 for =Lentry%2%d=
<MSG>2:30 : main.A8: Getting alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:30 : main.A8: Found no alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A8: returning 1 for =Lentry%1%d=
<MSG>2:30 : main.A8: Computing loop hoisting select expressions at toPC Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>2:30 : main.A8: Computing loop hoisting non-linear expressions at toPC Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>2:30 : main.A8: Adding node Lentry%2%allocaI3_L0%2%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A8: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A8: returning 0 for =Lentry%2%d=
<MSG>2:30 : main.A8: Getting alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>2:30 : main.A8: Found 1 alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>2:30 : main.A8: Computing loop hoisting select expressions at toPC Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>2:30 : main.A8: Computing loop hoisting non-linear expressions at toPC Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>2:30 : main.A8: Adding node Lentry%2%allocaI4_L0%2%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A8: returning 1 for =Lentry%1%d=
local_is_heap_allocated 3811: main.A8: returning 0 for =Lentry%2%d=
<MSG>2:30 : main.A8: Getting alloca-ptrs on edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>2:30 : main.A8: Found no alloca-ptrs on edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A8: returning 0 for =Lentry%2%d=
<MSG>2:30 : main.A8: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:30 : main.A8: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:30 : main.A8: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>2:30 : main.A8: Getting alloca-ptrs on edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>2:30 : main.A8: Found no alloca-ptrs on edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>2:30 : main.A8: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:30 : main.A8: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:30 : main.A8: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:30 : main.A8: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:30 : main.A8: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1</MSG>
<MSG>2:30 : main.A8: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L0%1%allocaI1 and propagated further.
</MSG>
<MSG>2:30 : main.A8: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:30 : main.A8: Finished executing CG's add edge function...</MSG>
<MSG>2:30 : main.A8: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:30 : main.A8: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:30 : main.A8: Adding edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:30 : main.A8: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A8: returning 1 for =Lentry%1%d=
<MSG>2:30 : main.A8: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:30 : main.A8: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:30 : main.A8: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:30 : main.A8: Finished executing CG's add edge function...</MSG>
<MSG>2:30 : main.A8: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:30 : main.A8: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:30 : main.A8: Adding edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>2:30 : main.A8: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:30 : main.A8: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:30 : main.A8: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:30 : main.A8: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:30 : main.A8: Finished executing CG's add edge function...</MSG>
<MSG>2:30 : main.A8: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>2:30 : main.A8: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1...</MSG>
<MSG>2:30 : main.A8: Adding edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>2:30 : main.A8: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A8: returning 0 for =Lentry%2%d=
<MSG>2:30 : main.A8: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:30 : main.A8: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:30 : main.A8: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:30 : main.A8: Finished executing CG's add edge function...</MSG>
<MSG>2:30 : main.A8: Computing CG regions after the addition of the edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>2:30 : main.A8: Done computing CG regions after the addition of the edge Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2...</MSG>
<MSG>2:30 : main.A8: Adding edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>2:30 : main.A8: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:30 : main.A8: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:30 : main.A8: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:30 : main.A8: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lfor.body%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lfor.body%1%d=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%d,-1}
operator() 10396: new_te = ((Lfor.cond%1%bbentry=>Lfor.body%1%d)*((Lfor.body%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%d)))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond%1%bbentry=>Lfor.body%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
<MSG>2:30 : main.A8: Finished executing CG's add edge function...</MSG>
<MSG>2:30 : main.A8: Computing CG regions after the addition of the edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>2:30 : main.A8: Done computing CG regions after the addition of the edge Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>2:30 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>2:30 : Added correlation to the product-TFG main.A8 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>2:30 : Chose (after CE propagation) product-TFG main.A8 (d:0, s:0) from a frontier of size 3...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d (C line 19 => C E0%0%d at mu 3 delta 1, A line 19 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 19, A line 19)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 19, A line 19)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%2%allocaI3_L0%2%allocaI1 (C line 19, A line 19)
                Lentry%2%allocaI3_L0%2%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            Lentry%2%allocaI4_L0%2%allocaI2 (C line 19, A line 19)
                Lentry%2%allocaI4_L0%2%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 14 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/
  	L0%2%spver:
  	  local.=Lentry%2%d= == input.dst.sp=L0%2%spver=sp.L0%2%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 3, delta 1]
<MSG>2:30 : main.A8: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>2:30 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1, Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2, Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1, Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2, Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>2:30 : main.A8: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>2:30 : main.A8: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: unchanged</MSG>
<MSG>2:30 : main.A8: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>2:30 : main.A8: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>2:30 : main.A8: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:30 : main.A8: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:30 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:30 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:30 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:31 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:31 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:31 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:31 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:31 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:31 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:31 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:31 : main.A8: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:31 : main.A8: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:31 : main.A8: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:31 : main.A8: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:31 : main.A8: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:31 : main.A8: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:31 : main.A8: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:33 : main.A8: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht15-prove_trivial4-prove11...</MSG>
<MSG>2:33 : main.A8: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:33 : main.A8: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:33 : main.A8: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:33 : main.A8: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:33 : main.A8: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:33 : main.A8: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:33 : main.A8: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:33 : main.A8: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:33 : main.A8: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:33 : main.A8: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:33 : main.A8: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:33 : main.A8: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:33 : main.A8: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:33 : main.A8: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:33 : main.A8: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:33 : main.A8: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:33 : main.A8: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:33 : main.A8: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:33 : main.A8: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed ...</MSG>
<MSG>2:33 : main.A8: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>2:33 : main.A8: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:33 : main.A8: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed</MSG>
<MSG>2:33 : main.A8: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>2:34 : main.A8: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:34 : main.A8: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A8: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A8: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A8: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A8: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A8: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:34 : main.A8: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:34 : main.A8: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A8: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:38 : main.A8: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht22-prove_trivial10-prove12...</MSG>
<MSG>2:38 : main.A8: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:38 : main.A8: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:38 : main.A8: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:38 : main.A8: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:38 : main.A8: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:39 : main.A8: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:39 : main.A8: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:39 : main.A8: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:39 : main.A8: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 2 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:39 : main.A8: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:39 : main.A8: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:39 : main.A8: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:39 : main.A8: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:39 : main.A8: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:39 : main.A8: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:39 : main.A8: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:39 : main.A8: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:39 : main.A8: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:39 : main.A8: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:39 : main.A8: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:39 : main.A8: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed ...</MSG>
<MSG>2:39 : main.A8: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>2:39 : main.A8: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1) ...</MSG>
<MSG>2:39 : main.A8: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1), result: changed</MSG>
<MSG>2:39 : main.A8: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>2:40 : main.A8: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1) ...</MSG>
<MSG>2:40 : main.A8: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>2:40 : main.A8: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>2:40 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>2:40 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>2:40 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>2:40 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A8: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>2:40 : main.A8: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A8: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>2:40 : main.A8: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A8: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>2:40 : main.A8: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:40 : main.A8: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>2:40 : main.A8: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:40 : main.A8: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)...</MSG>
<MSG>2:40 : main.A8: marking unstable at Lentry%2%allocaI3_L0%2%allocaI1 due to failing condition:
wfcond.from_pcLentry%2%allocaI3.to_pcLentry%2%allocaI4-alloca-region-was-stack
140968 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483663 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483664; 2147500031 ] -> memlabel-mem--esp, [ 2147500032; 4294967295 ] -> memlabel-mem--heap, )
140969 : input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3 : BV:32 : 2147483644
140334 : 8 { 0x8 +1.95e129 } : BV:32               : 8
140656 : memlabel-mem--esp : MEMLABEL              : memlabel-mem--esp
153196 : region_agrees_with_memlabel(140968, 140969, 140334, 140656) : BOOL : false

ce =
=counter_example_begin z3v487.ce7283 ad68f472fe1e1d8a5fb4cd6a39bebe
=input.dst.exreg.0.4
1 : 1073741832 { 0x40000008 +1.95e1 } : BV:32
=input.dst.exreg.6.0
1 : 1666948271 { 0x635b9caf +1.71571910e71 } : BV:32
=symbol.1
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=symbol.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=symbol.3
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=dst_symbol_addr.1
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=dst_symbol_addr.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst_symbol_addr.3
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=callee_save_const.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.local_size.=Lentry%2%d=
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%2%d=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local_alloc_count.=L0%0%d=
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : COUNT
=alloca_ptr
1 : (() -> 2147483644, ) : FUNCTION[COUNT,ARRAY[BV:32 -> MEMLABEL],MEMLABEL,BV:32 -> BV:32]
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3
1 : 1 { 0x1 } : BOOL
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.local_size.=Lentry%2%d=.Lentry%2%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483663 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483664; 2147500031 ] -> memlabel-mem--esp, [ 2147500032; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.local_alloc_count.Lentry%2%allocaI3
1 : 0 { 0x0 +1.0e129 } : COUNT
=input.src.local_alloc_count.=Lentry%2%d=.Lentry%2%allocaI3
1 : 0 { 0x0 +1.0e129 } : COUNT
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.local_alloc_count.Lentry%1%allocaI3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : COUNT
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.src.llvm-mem.Lentry%1%allocaI4
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
=input.src.llvm-%d.Lentry%2%allocaI3
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.5.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%2%spver
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.mem.L0%2%d
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%2%d
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483663 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483664; 2147500031 ] -> memlabel-mem--esp, [ 2147500032; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L0%2%d
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%2%d
1 : 1963519206 { 0x7508ece6 +1.6972956e107 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%2%d
1 : 986372326 { 0x3acad8e6 +1.58474421e246 } : BV:32
=input.dst.local_size.=Lentry%2%d=.L0%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L0%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.L0%2%d
1 : 1478748108 { 0x5823e7cc +1.28051137e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.L0%2%d
1 : 885182539 { 0x34c2d04b +1.52198159e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.L0%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.6.0.L0%2%spver
1 : 1666948154 { 0x635b9c3a +1.71570515e71 } : BV:32
=rodata.size
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.10.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.11.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.sp=L0%2%spver=sp.L0%2%spver
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.exreg.12.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.13.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.15.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.7.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L0%2%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L0%2%spver
1 : 0 { 0x0 } : BV:1
=input.dst.local_size.=Lentry%2%d=
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end
1 : 1478748108 { 0x5823e7cc +1.28051137e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin
1 : 885182539 { 0x34c2d04b +1.52198159e234 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4063 { 0xfdf +1.48434e129 } : BV:32
=stack.size
1 : 1073758208 { 0x40004000 +1.195312e1 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.memlabel-mem--symbol.1.1_begin
1 : 4056 { 0xfd8 +1.48351e129 } : BV:32
=input.memlabel-mem--symbol.1.1_end
1 : 4063 { 0xfdf +1.48434e129 } : BV:32
=input.memlabel-mem--symbol.3.0_begin
1 : 4064 { 0xfe0 +1.48446e129 } : BV:32
=input.memlabel-mem--symbol.3.0_end
1 : 4095 { 0xfff +1.48816e129 } : BV:32
=input.memlabel-mem--esp_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147500031 { 0x80003fff -2147467265 -1.195300e129 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L0%1%allocaI2
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%1%allocaI2
1 : ([ 0; 3 ] -> memlabel-mem--symbol.2.0, [ 4; 4055 ] -> memlabel-mem--heap, [ 4056; 4063 ] -> memlabel-mem--rodata, [ 4064; 4095 ] -> memlabel-mem--symbol.3.0, [ 4096; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483663 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483664; 2147500031 ] -> memlabel-mem--esp, [ 2147500032; 4294967295 ] -> memlabel-mem--heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%1%allocaI2
1 : 986372326 { 0x3acad8e6 +1.58474421e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%1%allocaI2
1 : 1963519206 { 0x7508ece6 +1.6972956e107 } : BV:32
=input.dst.local_size.=Lentry%2%d=.L0%2%allocaI1
1 : 8 { 0x8 +1.95e129 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lentry%1%allocaI4.mem.L0%1%allocaI2.cluster.memlabel-mem--rodata
1 : ([ 0; 4059 ] -> 0, [ 4060; 4060 ] -> 1, [ 4061; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lentry%1%allocaI4.mem.L0%1%allocaI2.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3045155616
=counter_example_end


failcond-expr = region_agrees_with_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3, 8, memlabel-mem--esp):
1 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
2 : input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3 : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : memlabel-mem--esp : MEMLABEL
5 : region_agrees_with_memlabel(1, 2, 3, 4) : BOOL
</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lfor.body%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lfor.body%1%d=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%d,-1}
operator() 10396: new_te = ((Lfor.cond%1%bbentry=>Lfor.body%1%d)*((Lfor.body%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%d)))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond%1%bbentry=>Lfor.body%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((Lentry%2%allocaI4=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%d)*(Lfor.body%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = (Lentry%2%allocaI4=>Lfor.cond%1%bbentry)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
<MSG>2:41 : main.A8: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:41 : main.A8: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1), result: changed ...</MSG>
<MSG>2:41 : main.A8: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1), result: changed( 1, 1 ) ...</MSG>
<MSG>2:41 : main.A8: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)*((Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)*((Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)*((Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2)*(Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d))))) became unstable after invariant inference</MSG>
<MSG>2:41 : Chosen product-TFG main.A8 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)*((Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)*((Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1)*((Lentry%2%allocaI3_L0%2%allocaI1=>Lentry%2%allocaI4_L0%2%allocaI2)*(Lentry%2%allocaI4_L0%2%allocaI2=>E0%0%d_E0%0%d))))))
</MSG>
<MSG>2:41 : Chose (for CE propagation) product-TFG main.A9 (d:0, s:0) from a frontier of size 2...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 3, delta 1]
<MSG>2:41 : Finished adding lsprel-assumes for allocation to the product-TFG main.A9...</MSG>
<MSG>2:41 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A9...</MSG>
<MSG>2:41 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>2:41 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>2:41 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d
</MSG>
<MSG>2:41 : Identified 4 common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>2:41 : main.A9: marking unstable at L0%0%d_L0%0%d due to failing condition:
correlation-failure--failed-to-create-alloc-dealloc-nodes-and-edges
failcond-expr = true:
1 : 1 { 0x1 } : BOOL
</MSG>
<MSG>2:41 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>2:41 : Failed correlation of src pathset L0%0%d=>E0%0%d[mu 3, delta 1] as correlation candidate for L0%0%d=>E0%0%d[mu 1, delta 1] at L0%0%d_L0%0%d: failcond = correlation-failure--failed-to-create-alloc-dealloc-nodes-and-edges
</MSG>
<MSG>2:41 : Discovered that the correlation was useless for the product-TFG main.A9 (d:0, s:0)...</MSG>
<MSG>2:41 : Chose (after CE propagation) product-TFG main.A7 (d:2, s:0) from a frontier of size 1...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3 (C L0%0%d => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d (C line 19 => C E0%0%d at mu 3 delta 1, A line 19 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI3 (C line 19, A line 19)
                Lentry%1%allocaI3_L0%1%allocaI3 [inductive-invariants] contains 13 counterexamples (for correlating 14 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI4 (C line 19, A line 19)
                Lentry%1%allocaI4_L0%1%allocaI4 [inductive-invariants] contains 14 counterexamples (for correlating 14 bv exprs)
            Lentry%2%allocaI3_L0%1%allocaI1 (C line 19, A line 19)
                Lentry%2%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 10 counterexamples (for correlating 15 bv exprs)
            Lentry%2%allocaI4_L0%1%allocaI2 (C line 19, A line 19)
                Lentry%2%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 15 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/
  	  local.=Lentry%2%d= == input.dst.local./*___y___main__x__=Lentry%2%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta 1]
  src-full-pathset: L0%0%d=>E0%0%d[mu 3, delta 1]
<MSG>2:41 : main.A7: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>2:41 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3, Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4, Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1, Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2, Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d...</MSG>
<MSG>2:41 : main.A7: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3) ...</MSG>
<MSG>2:41 : main.A7: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3), result: unchanged</MSG>
<MSG>2:41 : main.A7: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>2:41 : main.A7: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3) ...</MSG>
<MSG>2:41 : main.A7: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:41 : main.A7: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:41 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:41 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:41 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:41 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:41 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:41 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:41 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:41 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:41 : main.A7: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:41 : main.A7: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:41 : main.A7: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:41 : main.A7: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:41 : main.A7: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:41 : main.A7: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:41 : main.A7: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 11 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht6-prove_trivial4-prove2...</MSG>
<MSG>2:42 : main.A7: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:42 : main.A7: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:42 : main.A7: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:42 : main.A7: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:42 : main.A7: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:42 : main.A7: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:42 : main.A7: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:42 : main.A7: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:42 : main.A7: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3)...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3), result: unchanged ...</MSG>
<MSG>2:42 : main.A7: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:42 : main.A7: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4) ...</MSG>
<MSG>2:42 : main.A7: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: unchanged</MSG>
<MSG>2:42 : main.A7: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI3 ...</MSG>
<MSG>2:42 : main.A7: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4) ...</MSG>
<MSG>2:42 : main.A7: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:42 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:42 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:42 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:43 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:43 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:43 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:43 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:43 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:43 : main.A7: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:43 : main.A7: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:43 : main.A7: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:43 : main.A7: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:43 : main.A7: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:43 : main.A7: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:43 : main.A7: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 13 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:43 : main.A7: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht7-prove_trivial5-prove2...</MSG>
<MSG>2:43 : main.A7: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: unchanged ...</MSG>
<MSG>2:44 : main.A7: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:44 : main.A7: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>2:44 : main.A7: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: unchanged</MSG>
<MSG>2:44 : main.A7: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI4 ...</MSG>
<MSG>2:44 : main.A7: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:44 : main.A7: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:44 : main.A7: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 15 exprs and 9 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:45 : main.A7: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht9-prove_trivial8-prove1...</MSG>
<MSG>2:45 : main.A7: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:45 : main.A7: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:45 : main.A7: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:45 : main.A7: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:45 : main.A7: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:45 : main.A7: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:45 : main.A7: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:45 : main.A7: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:45 : main.A7: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:45 : main.A7: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:45 : main.A7: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:45 : main.A7: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:45 : main.A7: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:45 : main.A7: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:45 : main.A7: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:45 : main.A7: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:45 : main.A7: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:45 : main.A7: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:45 : main.A7: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:45 : main.A7: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:45 : main.A7: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: unchanged ...</MSG>
<MSG>2:45 : main.A7: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:45 : main.A7: Relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:45 : main.A7: Done relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: unchanged</MSG>
<MSG>2:45 : main.A7: Checking well-formedness assertions on outgoing edges from Lentry%2%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>2:46 : main.A7: Relaxing invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:46 : main.A7: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:46 : main.A7: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:46 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:46 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:46 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:46 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:46 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.3.0 (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:46 : main.A7: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:46 : main.A7: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:46 : main.A7: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:46 : main.A7: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A7: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:46 : main.A7: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:46 : main.A7: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:46 : main.A7: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A7: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 15 exprs and 11 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:47 : main.A7: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht10-prove_trivial8-prove2...</MSG>
<MSG>2:47 : main.A7: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:47 : main.A7: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:47 : main.A7: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:47 : main.A7: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:47 : main.A7: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:47 : main.A7: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:47 : main.A7: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:47 : main.A7: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:47 : main.A7: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 4 exprs and 1 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:47 : main.A7: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:47 : main.A7: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:47 : main.A7: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:47 : main.A7: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:48 : main.A7: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:48 : main.A7: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:48 : main.A7: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:48 : main.A7: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 2 exprs and 2 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:48 : main.A7: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : main.A7: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:48 : main.A7: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:48 : main.A7: Done relaxing invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: unchanged ...</MSG>
<MSG>2:48 : main.A7: Done relaxing memlabels and invariants across the edge composition (Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:48 : main.A7: Relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d) ...</MSG>
<MSG>2:48 : main.A7: Done relaxing dst graph's memlabels for edge composition (Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>2:48 : main.A7: Checking well-formedness assertions on outgoing edges from Lentry%2%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>2:48 : main.A7: Done relaxing memlabels and invariants across the edge composition (Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:48 : main.A7 (d:2, s:0): checked newly added edge and inferred invariants...</MSG>
<MSG>2:48 : main.A7 (d:2, s:0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:48 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>2:48 : Checking equivalence proof...</MSG>
<MSG>2:57 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d:
  Invariant state (0 classes):

Lentry%1%allocaI3_L0%1%allocaI3:
  Invariant state (18 classes):
    eqclass 0:
    smallest point cover name mem-allocs-equality, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->eq(input.src.llvm-mem.alloc, input.dst.mem.alloc) ; 
    1 preds:
      0.: eq(input.src.llvm-mem.alloc, input.dst.mem.alloc)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 1:
    smallest point cover name memory-equality-memlabel-mem--rodata, type ARR_EQ, exprs [2]: 2-->memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--rodata) ; 3-->memmask(input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--rodata) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem, input.src.llvm-mem.alloc, input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--rodata)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 2:
    smallest point cover name memory-equality-memlabel-mem--symbol.2.0, type ARR_EQ, exprs [2]: 4-->memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--symbol.2.0) ; 5-->memmask(input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--symbol.2.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem, input.src.llvm-mem.alloc, input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--symbol.2.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 3:
    smallest point cover name memory-equality-memlabel-mem--symbol.3.0, type ARR_EQ, exprs [2]: 6-->memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--symbol.3.0) ; 7-->memmask(input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--symbol.3.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem, input.src.llvm-mem.alloc, input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--symbol.3.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 4:
    smallest point cover name memory-equality-memlabel-mem--heap, type ARR_EQ, exprs [2]: 8-->memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--heap) ; 9-->memmask(input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--heap) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem, input.src.llvm-mem.alloc, input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--heap)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 5:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 10-->and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--symbol.1.1_end)), eq(input.memlabel-mem--symbol.1.1_end, bvadd(input.memlabel-mem--symbol.1.1_begin, bvadd(8, 4294967295)))), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--symbol.3.0_end)), eq(input.memlabel-mem--symbol.3.0_end, bvadd(input.memlabel-mem--symbol.3.0_begin, bvadd(32, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end)))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_end))))), and(bvuge(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.1_end, input.memlabel-mem--rodata_end)))), and(eq(bvand(symbol.2, 3), 0), eq(bvand(symbol.1, 3), 0))), and(and(eq(symbol.2, input.memlabel-mem--symbol.2.0_begin), eq(symbol.1, input.memlabel-mem--symbol.1.1_begin)), eq(symbol.3, input.memlabel-mem--symbol.3.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)), eq(symbol.3, dst_symbol_addr.3))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--symbol.1.1_end)), eq(input.memlabel-mem--symbol.1.1_end, bvadd(input.memlabel-mem--symbol.1.1_begin, bvadd(8, 4294967295)))), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--symbol.3.0_end)), eq(input.memlabel-mem--symbol.3.0_end, bvadd(input.memlabel-mem--symbol.3.0_begin, bvadd(32, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end)))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_end))))), and(bvuge(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.1_end, input.memlabel-mem--rodata_end)))), and(eq(bvand(symbol.2, 3), 0), eq(bvand(symbol.1, 3), 0))), and(and(eq(symbol.2, input.memlabel-mem--symbol.2.0_begin), eq(symbol.1, input.memlabel-mem--symbol.1.1_begin)), eq(symbol.3, input.memlabel-mem--symbol.3.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)), eq(symbol.3, dst_symbol_addr.3)))  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 6:
    smallest point cover name memlabel-is-absent, type HOUDINI_EXPECTS_STABILITY, exprs [2]: 11-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, memlabel_is_absent(input.src.llvm-mem.alloc, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 12-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, memlabel_is_absent(input.src.llvm-mem.alloc, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, memlabel_is_absent(input.src.llvm-mem.alloc, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, memlabel_is_absent(input.src.llvm-mem.alloc, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 7:
    smallest point cover name sp-below-isp, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 13-->bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp) ; 
    1 preds:
      0.: bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 8:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [14]: 14-->input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 ; 15-->retaddr_const ; 16-->input.dst.sp=L0%0%d=sp ; 17-->input.dst.sp=L0%1%spver=sp.L0%1%spver ; 18-->input.dst.local_size.=Lentry%2%d= ; 19-->input.dst.exreg.0.3.L0%1%spver ; 20-->input.dst.exreg.0.4.L0%1%spver ; 21-->input.dst.exreg.0.5.L0%1%spver ; 22-->input.dst.exreg.0.6.L0%1%spver ; 23-->input.dst.exreg.0.7.L0%1%spver ; 24-->input.dst.local./*___y___main__x__=Lentry%1%d=/ ; 25-->input.dst.local./*___y___main__x__=Lentry%2%d=/ ; 26-->input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3 ; 27-->select(input.dst.mem.L0%1%spver, input.dst.mem.alloc, mlvar.dst.2, input.dst.sp=L0%0%d=sp, 4, false) ; 
    6 preds:
      0.: retaddr_const         ==  select(input.dst.mem.L0%1%spver, input.dst.mem.alloc, mlvar.dst.2, input.dst.sp=L0%0%d=sp, 4, false)
      1.: 16                    ==  input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3
      2.: input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3  ==  input.dst.local./*___y___main__x__=Lentry%1%d=/
      3.: 12                    ==  bvextract(input.dst.sp=L0%0%d=sp, 3, 0)
      4.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.exreg.0.4.L0%1%spver)
      5.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.sp=L0%1%spver=sp.L0%1%spver)
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3v487.ce4314      1.:z3.ce4357      2.:z3v487.ce4439      3.:z3v487.ce4230      4.:z3v487.ce4272      5.:z3.ce4440      6.:z3.ce4231      7.:z3v487.ce4356      8.:z3v487.ce4398      9.:z3.ce4273      10.:z3.ce4315
    eqclass 9:
    smallest point cover name expr-group-region_agrees_with_memlabel, type HOUDINI, exprs [3]: 28-->region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%0%d=sp, 4, memlabel-mem--esp) ; 29-->region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp) ; 30-->region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp) ; 
    3 preds:
      0.: region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp)  ==  true
      1.: region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp)  ==  true
      2.: region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%0%d=sp, 4, memlabel-mem--esp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [2]: 31-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3)) ; 32-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local_size.=Lentry%2%d=, input.dst.local_size.=Lentry%2%d=)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local_size.=Lentry%2%d=, input.dst.local_size.=Lentry%2%d=))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 11:
    smallest point cover name nonarg-locals-iscontiguous, type HOUDINI, exprs [2]: 33-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, iscontiguous_memlabel(input.src.llvm-mem.alloc, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 34-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, iscontiguous_memlabel(input.src.llvm-mem.alloc, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce4230
    eqclass 12:
    smallest point cover name nonarg-locals-isprobably-contiguous, type HOUDINI, exprs [2]: 35-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 36-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 13:
    smallest point cover name sp-ml-lb-ineq, type HOUDINI, exprs [4]: 37-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin)) ; 38-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3))) ; 39-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin)) ; 40-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=))) ; 
    4 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=)))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin))  ==  true
      2.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3)))  ==  true
      3.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 14:
    smallest point cover name ml-lb-ub-eq, type HOUDINI, exprs [2]: 41-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end)) ; 42-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end)) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce4481      1.:z3v487.ce4522
    eqclass 15:
    smallest point cover name ml-lb-ub-ineq, type HOUDINI, exprs [2]: 43-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end)) ; 44-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 16:
    smallest point cover name ml-lb-addr-eq, type HOUDINI, exprs [2]: 45-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3)) ; 46-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 17:
    smallest point cover name local-eq-lsprel-guess, type HOUDINI, exprs [2]: 47-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/)) ; 48-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local./*___y___main__x__=Lentry%2%d=/, input.dst.local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local./*___y___main__x__=Lentry%2%d=/, input.dst.local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces

Lentry%1%allocaI4_L0%1%allocaI4:
  Invariant state (19 classes):
    eqclass 0:
    smallest point cover name mem-allocs-equality, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 49-->eq(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4) ; 
    1 preds:
      0.: eq(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name memory-equality-memlabel-mem--rodata, type ARR_EQ, exprs [2]: 50-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--rodata) ; 51-->memmask(input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--rodata) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--rodata)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 2:
    smallest point cover name memory-equality-memlabel-mem--symbol.2.0, type ARR_EQ, exprs [2]: 52-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.2.0) ; 53-->memmask(input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--symbol.2.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--symbol.2.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 3:
    smallest point cover name memory-equality-memlabel-mem--symbol.3.0, type ARR_EQ, exprs [2]: 54-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.3.0) ; 55-->memmask(input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--symbol.3.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--symbol.3.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 4:
    smallest point cover name memory-equality-memlabel-mem--heap, type ARR_EQ, exprs [2]: 56-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--heap) ; 57-->memmask(input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--heap) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--heap)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 5:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 10-->and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--symbol.1.1_end)), eq(input.memlabel-mem--symbol.1.1_end, bvadd(input.memlabel-mem--symbol.1.1_begin, bvadd(8, 4294967295)))), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--symbol.3.0_end)), eq(input.memlabel-mem--symbol.3.0_end, bvadd(input.memlabel-mem--symbol.3.0_begin, bvadd(32, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end)))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_end))))), and(bvuge(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.1_end, input.memlabel-mem--rodata_end)))), and(eq(bvand(symbol.2, 3), 0), eq(bvand(symbol.1, 3), 0))), and(and(eq(symbol.2, input.memlabel-mem--symbol.2.0_begin), eq(symbol.1, input.memlabel-mem--symbol.1.1_begin)), eq(symbol.3, input.memlabel-mem--symbol.3.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)), eq(symbol.3, dst_symbol_addr.3))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--symbol.1.1_end)), eq(input.memlabel-mem--symbol.1.1_end, bvadd(input.memlabel-mem--symbol.1.1_begin, bvadd(8, 4294967295)))), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--symbol.3.0_end)), eq(input.memlabel-mem--symbol.3.0_end, bvadd(input.memlabel-mem--symbol.3.0_begin, bvadd(32, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end)))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_end))))), and(bvuge(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.1_end, input.memlabel-mem--rodata_end)))), and(eq(bvand(symbol.2, 3), 0), eq(bvand(symbol.1, 3), 0))), and(and(eq(symbol.2, input.memlabel-mem--symbol.2.0_begin), eq(symbol.1, input.memlabel-mem--symbol.1.1_begin)), eq(symbol.3, input.memlabel-mem--symbol.3.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)), eq(symbol.3, dst_symbol_addr.3)))  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 6:
    smallest point cover name memlabel-is-absent, type HOUDINI_EXPECTS_STABILITY, exprs [2]: 58-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 59-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 7:
    smallest point cover name sp-below-isp, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 13-->bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp) ; 
    1 preds:
      0.: bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 8:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [14]: 14-->input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 ; 15-->retaddr_const ; 16-->input.dst.sp=L0%0%d=sp ; 17-->input.dst.sp=L0%1%spver=sp.L0%1%spver ; 18-->input.dst.local_size.=Lentry%2%d= ; 19-->input.dst.exreg.0.3.L0%1%spver ; 20-->input.dst.exreg.0.4.L0%1%spver ; 21-->input.dst.exreg.0.5.L0%1%spver ; 22-->input.dst.exreg.0.6.L0%1%spver ; 23-->input.dst.exreg.0.7.L0%1%spver ; 24-->input.dst.local./*___y___main__x__=Lentry%1%d=/ ; 25-->input.dst.local./*___y___main__x__=Lentry%2%d=/ ; 26-->input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3 ; 60-->select(input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, mlloc.dst.7, input.dst.sp=L0%0%d=sp, 4, false) ; 
    7 preds:
      0.: retaddr_const         ==  select(input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, mlloc.dst.7, input.dst.sp=L0%0%d=sp, 4, false)
      1.: 16                    ==  input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3
      2.: input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3  ==  input.dst.local./*___y___main__x__=Lentry%1%d=/
      3.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.exreg.0.4.L0%1%spver)
      4.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.sp=L0%1%spver=sp.L0%1%spver)
      5.: 12                    ==  bvextract(input.dst.sp=L0%0%d=sp, 3, 0)
      6.: 0                     ==  bvextract(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, 1, 0)
     is_assumed_eqclass : 0
    13 visited ces:
      0.:z3.ce4607      1.:z3.ce4563      2.:z3v487.ce4564      3.:z3.ce4995      4.:z3v487.ce4608      5.:z3.ce4694      6.:cvc4.ce4823      7.:z3.ce4866      8.:cvc4.ce4737      9.:z3.ce4651      10.:cvc4.ce4780      11.:z3.ce4909      12.:z3.ce4952
    eqclass 9:
    smallest point cover name expr-group-region_agrees_with_memlabel, type HOUDINI, exprs [3]: 61-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI4, input.dst.sp=L0%0%d=sp, 4, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 62-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI4, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp) ; 63-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI4, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp) ; 
    3 preds:
      0.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI4, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp)  ==  true
      1.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI4, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp)  ==  true
      2.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI4, input.dst.sp=L0%0%d=sp, 4, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [2]: 32-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local_size.=Lentry%2%d=, input.dst.local_size.=Lentry%2%d=)) ; 64-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local_size.=Lentry%2%d=, input.dst.local_size.=Lentry%2%d=))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 11:
    smallest point cover name nonarg-locals-iscontiguous, type HOUDINI, exprs [2]: 65-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 66-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 12:
    smallest point cover name nonarg-locals-isprobably-contiguous, type HOUDINI, exprs [2]: 67-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 68-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 13:
    smallest point cover name sp-ml-lb-ineq, type HOUDINI, exprs [4]: 39-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin)) ; 40-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=))) ; 69-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4)) ; 70-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3))) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=)))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce4607
    eqclass 14:
    smallest point cover name ml-lb-ub-eq, type HOUDINI, exprs [2]: 42-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end)) ; 71-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 
    1 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5038
    eqclass 15:
    smallest point cover name ml-lb-ub-ineq, type HOUDINI, exprs [2]: 44-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end)) ; 72-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 16:
    smallest point cover name ml-lb-addr-eq, type HOUDINI, exprs [2]: 46-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.local./*___y___main__x__=Lentry%2%d=/)) ; 73-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.local./*___y___main__x__=Lentry%2%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 17:
    smallest point cover name locals-ub-upper-bound, type HOUDINI, exprs [1]: 74-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvult(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, input.dst.sp=L0%0%d=sp)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce4563
    eqclass 18:
    smallest point cover name local-eq-lsprel-guess, type HOUDINI, exprs [2]: 48-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local./*___y___main__x__=Lentry%2%d=/, input.dst.local./*___y___main__x__=Lentry%2%d=/)) ; 75-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local./*___y___main__x__=Lentry%2%d=/, input.dst.local./*___y___main__x__=Lentry%2%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces

Lentry%2%allocaI3_L0%1%allocaI1:
  Invariant state (19 classes):
    eqclass 0:
    smallest point cover name mem-allocs-equality, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 49-->eq(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4) ; 
    1 preds:
      0.: eq(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 1:
    smallest point cover name memory-equality-memlabel-mem--rodata, type ARR_EQ, exprs [2]: 50-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--rodata) ; 51-->memmask(input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--rodata) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--rodata)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 2:
    smallest point cover name memory-equality-memlabel-mem--symbol.2.0, type ARR_EQ, exprs [2]: 52-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.2.0) ; 53-->memmask(input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--symbol.2.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--symbol.2.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 3:
    smallest point cover name memory-equality-memlabel-mem--symbol.3.0, type ARR_EQ, exprs [2]: 54-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.3.0) ; 55-->memmask(input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--symbol.3.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--symbol.3.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 4:
    smallest point cover name memory-equality-memlabel-mem--heap, type ARR_EQ, exprs [2]: 56-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--heap) ; 57-->memmask(input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--heap) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, memlabel-mem--heap)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 5:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 10-->and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--symbol.1.1_end)), eq(input.memlabel-mem--symbol.1.1_end, bvadd(input.memlabel-mem--symbol.1.1_begin, bvadd(8, 4294967295)))), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--symbol.3.0_end)), eq(input.memlabel-mem--symbol.3.0_end, bvadd(input.memlabel-mem--symbol.3.0_begin, bvadd(32, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end)))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_end))))), and(bvuge(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.1_end, input.memlabel-mem--rodata_end)))), and(eq(bvand(symbol.2, 3), 0), eq(bvand(symbol.1, 3), 0))), and(and(eq(symbol.2, input.memlabel-mem--symbol.2.0_begin), eq(symbol.1, input.memlabel-mem--symbol.1.1_begin)), eq(symbol.3, input.memlabel-mem--symbol.3.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)), eq(symbol.3, dst_symbol_addr.3))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--symbol.1.1_end)), eq(input.memlabel-mem--symbol.1.1_end, bvadd(input.memlabel-mem--symbol.1.1_begin, bvadd(8, 4294967295)))), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--symbol.3.0_end)), eq(input.memlabel-mem--symbol.3.0_end, bvadd(input.memlabel-mem--symbol.3.0_begin, bvadd(32, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end)))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_end))))), and(bvuge(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.1_end, input.memlabel-mem--rodata_end)))), and(eq(bvand(symbol.2, 3), 0), eq(bvand(symbol.1, 3), 0))), and(and(eq(symbol.2, input.memlabel-mem--symbol.2.0_begin), eq(symbol.1, input.memlabel-mem--symbol.1.1_begin)), eq(symbol.3, input.memlabel-mem--symbol.3.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)), eq(symbol.3, dst_symbol_addr.3)))  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 6:
    smallest point cover name memlabel-is-absent, type HOUDINI_EXPECTS_STABILITY, exprs [2]: 58-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 59-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 7:
    smallest point cover name sp-below-isp, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 13-->bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp) ; 
    1 preds:
      0.: bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 8:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [15]: 14-->input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 ; 15-->retaddr_const ; 16-->input.dst.sp=L0%0%d=sp ; 17-->input.dst.sp=L0%1%spver=sp.L0%1%spver ; 19-->input.dst.exreg.0.3.L0%1%spver ; 20-->input.dst.exreg.0.4.L0%1%spver ; 21-->input.dst.exreg.0.5.L0%1%spver ; 22-->input.dst.exreg.0.6.L0%1%spver ; 23-->input.dst.exreg.0.7.L0%1%spver ; 24-->input.dst.local./*___y___main__x__=Lentry%1%d=/ ; 25-->input.dst.local./*___y___main__x__=Lentry%2%d=/ ; 26-->input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3 ; 60-->select(input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, mlloc.dst.7, input.dst.sp=L0%0%d=sp, 4, false) ; 76-->input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3 ; 77-->input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1 ; 
    9 preds:
      0.: 8                     ==  input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1
      1.: input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3  ==  input.dst.local./*___y___main__x__=Lentry%2%d=/
      2.: retaddr_const         ==  select(input.dst.mem.L0%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI4, mlloc.dst.7, input.dst.sp=L0%0%d=sp, 4, false)
      3.: 16                    ==  input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3
      4.: input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3  ==  input.dst.local./*___y___main__x__=Lentry%1%d=/
      5.: 12                    ==  bvextract(input.dst.sp=L0%0%d=sp, 3, 0)
      6.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.exreg.0.4.L0%1%spver)
      7.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.sp=L0%1%spver=sp.L0%1%spver)
      8.: 0                     ==  bvextract(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce5081      1.:z3v487.ce5082      2.:z3v487.ce5247      3.:z3.ce5206      4.:z3v487.ce5123      5.:z3.ce5124      6.:z3v487.ce5165      7.:z3v487.ce5288      8.:z3.ce5329
    eqclass 9:
    smallest point cover name expr-group-region_agrees_with_memlabel, type HOUDINI, exprs [3]: 61-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI4, input.dst.sp=L0%0%d=sp, 4, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 62-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI4, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp) ; 63-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI4, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp) ; 
    3 preds:
      0.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI4, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp)  ==  true
      1.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI4, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp)  ==  true
      2.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI4, input.dst.sp=L0%0%d=sp, 4, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [2]: 64-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3)) ; 78-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local_size.=Lentry%2%d=.Lentry%2%allocaI3, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local_size.=Lentry%2%d=.Lentry%2%allocaI3, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 11:
    smallest point cover name nonarg-locals-iscontiguous, type HOUDINI, exprs [2]: 65-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 66-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 12:
    smallest point cover name nonarg-locals-isprobably-contiguous, type HOUDINI, exprs [2]: 67-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 68-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 13:
    smallest point cover name sp-ml-lb-ineq, type HOUDINI, exprs [4]: 39-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin)) ; 69-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4)) ; 70-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3))) ; 79-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1))) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1)))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5082
    eqclass 14:
    smallest point cover name ml-lb-ub-eq, type HOUDINI, exprs [2]: 71-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 80-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end)) ; 
    1 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5370
    eqclass 15:
    smallest point cover name ml-lb-ub-ineq, type HOUDINI, exprs [2]: 72-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 81-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 16:
    smallest point cover name ml-lb-addr-eq, type HOUDINI, exprs [2]: 73-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3)) ; 82-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin, input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 17:
    smallest point cover name locals-ub-upper-bound, type HOUDINI, exprs [1]: 74-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvult(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, input.dst.sp=L0%0%d=sp)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5081
    eqclass 18:
    smallest point cover name local-eq-lsprel-guess, type HOUDINI, exprs [2]: 75-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/)) ; 83-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3, input.dst.local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3, input.dst.local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces

Lentry%2%allocaI4_L0%1%allocaI2:
  Invariant state (19 classes):
    eqclass 0:
    smallest point cover name mem-allocs-equality, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 84-->eq(input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.dst.mem.alloc.L0%1%allocaI2) ; 
    1 preds:
      0.: eq(input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.dst.mem.alloc.L0%1%allocaI2)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name memory-equality-memlabel-mem--rodata, type ARR_EQ, exprs [2]: 85-->memmask(input.src.llvm-mem.Lentry%2%allocaI4, input.src.llvm-mem.alloc.Lentry%2%allocaI4, memlabel-mem--rodata) ; 86-->memmask(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--rodata) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%2%allocaI4, input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--rodata)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 2:
    smallest point cover name memory-equality-memlabel-mem--symbol.2.0, type ARR_EQ, exprs [2]: 87-->memmask(input.src.llvm-mem.Lentry%2%allocaI4, input.src.llvm-mem.alloc.Lentry%2%allocaI4, memlabel-mem--symbol.2.0) ; 88-->memmask(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--symbol.2.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%2%allocaI4, input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--symbol.2.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 3:
    smallest point cover name memory-equality-memlabel-mem--symbol.3.0, type ARR_EQ, exprs [2]: 89-->memmask(input.src.llvm-mem.Lentry%2%allocaI4, input.src.llvm-mem.alloc.Lentry%2%allocaI4, memlabel-mem--symbol.3.0) ; 90-->memmask(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--symbol.3.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%2%allocaI4, input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--symbol.3.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 4:
    smallest point cover name memory-equality-memlabel-mem--heap, type ARR_EQ, exprs [2]: 91-->memmask(input.src.llvm-mem.Lentry%2%allocaI4, input.src.llvm-mem.alloc.Lentry%2%allocaI4, memlabel-mem--heap) ; 92-->memmask(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--heap) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%2%allocaI4, input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--heap)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 5:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 10-->and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--symbol.1.1_end)), eq(input.memlabel-mem--symbol.1.1_end, bvadd(input.memlabel-mem--symbol.1.1_begin, bvadd(8, 4294967295)))), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--symbol.3.0_end)), eq(input.memlabel-mem--symbol.3.0_end, bvadd(input.memlabel-mem--symbol.3.0_begin, bvadd(32, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end)))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_end))))), and(bvuge(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.1_end, input.memlabel-mem--rodata_end)))), and(eq(bvand(symbol.2, 3), 0), eq(bvand(symbol.1, 3), 0))), and(and(eq(symbol.2, input.memlabel-mem--symbol.2.0_begin), eq(symbol.1, input.memlabel-mem--symbol.1.1_begin)), eq(symbol.3, input.memlabel-mem--symbol.3.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)), eq(symbol.3, dst_symbol_addr.3))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--symbol.1.1_end)), eq(input.memlabel-mem--symbol.1.1_end, bvadd(input.memlabel-mem--symbol.1.1_begin, bvadd(8, 4294967295)))), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--symbol.3.0_end)), eq(input.memlabel-mem--symbol.3.0_end, bvadd(input.memlabel-mem--symbol.3.0_begin, bvadd(32, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end)))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.3.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.3.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.3.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.3.0_end))))), and(bvuge(input.memlabel-mem--symbol.1.1_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.1_end, input.memlabel-mem--rodata_end)))), and(eq(bvand(symbol.2, 3), 0), eq(bvand(symbol.1, 3), 0))), and(and(eq(symbol.2, input.memlabel-mem--symbol.2.0_begin), eq(symbol.1, input.memlabel-mem--symbol.1.1_begin)), eq(symbol.3, input.memlabel-mem--symbol.3.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)), eq(symbol.3, dst_symbol_addr.3)))  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 6:
    smallest point cover name memlabel-is-absent, type HOUDINI_EXPECTS_STABILITY, exprs [2]: 93-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%2%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 94-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%2%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%2%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%2%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 7:
    smallest point cover name sp-below-isp, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 13-->bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp) ; 
    1 preds:
      0.: bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 8:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [15]: 14-->input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 ; 15-->retaddr_const ; 16-->input.dst.sp=L0%0%d=sp ; 17-->input.dst.sp=L0%1%spver=sp.L0%1%spver ; 19-->input.dst.exreg.0.3.L0%1%spver ; 20-->input.dst.exreg.0.4.L0%1%spver ; 21-->input.dst.exreg.0.5.L0%1%spver ; 22-->input.dst.exreg.0.6.L0%1%spver ; 23-->input.dst.exreg.0.7.L0%1%spver ; 24-->input.dst.local./*___y___main__x__=Lentry%1%d=/ ; 25-->input.dst.local./*___y___main__x__=Lentry%2%d=/ ; 26-->input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3 ; 76-->input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3 ; 77-->input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1 ; 95-->select(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, mlloc.dst.8, input.dst.sp=L0%0%d=sp, 4, false) ; 
    10 preds:
      0.: retaddr_const         ==  select(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, mlloc.dst.8, input.dst.sp=L0%0%d=sp, 4, false)
      1.: 8                     ==  input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1
      2.: input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3  ==  input.dst.local./*___y___main__x__=Lentry%2%d=/
      3.: 16                    ==  input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3
      4.: 0                     ==  bvextract(input.dst.local./*___y___main__x__=Lentry%2%d=/, 1, 0)
      5.: input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3  ==  input.dst.local./*___y___main__x__=Lentry%1%d=/
      6.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.exreg.0.4.L0%1%spver)
      7.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.sp=L0%1%spver=sp.L0%1%spver)
      8.: 12                    ==  bvextract(input.dst.sp=L0%0%d=sp, 3, 0)
      9.: 0                     ==  bvextract(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, 1, 0)
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce5411      1.:z3v487.ce5412      2.:z3.ce5873      3.:z3.ce6027      4.:z3.ce5565      5.:z3v487.ce5566      6.:z3v487.ce5719      7.:z3.ce5720      8.:z3v487.ce5874      9.:z3.ce6144      10.:z3.ce6261
    eqclass 9:
    smallest point cover name expr-group-region_agrees_with_memlabel, type HOUDINI, exprs [3]: 96-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%0%d=sp, 4, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp) ; 97-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp) ; 98-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp) ; 
    3 preds:
      0.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp)  ==  true
      1.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp)  ==  true
      2.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%0%d=sp, 4, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-local./*___y___main__x__=Lentry%2%d=/-esp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [2]: 64-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3)) ; 99-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, eq(input.src.local_size.=Lentry%2%d=.Lentry%2%allocaI3, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, eq(input.src.local_size.=Lentry%2%d=.Lentry%2%allocaI3, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 11:
    smallest point cover name nonarg-locals-iscontiguous, type HOUDINI, exprs [2]: 100-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 101-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 12:
    smallest point cover name nonarg-locals-isprobably-contiguous, type HOUDINI, exprs [2]: 102-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 103-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%2%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 13:
    smallest point cover name sp-ml-lb-ineq, type HOUDINI, exprs [4]: 69-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4)) ; 70-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3))) ; 104-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4)) ; 105-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce5411
    eqclass 14:
    smallest point cover name ml-lb-ub-eq, type HOUDINI, exprs [2]: 71-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 106-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4)) ; 
    2 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4))  ==  true
      1.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 15:
    smallest point cover name ml-lb-ub-ineq, type HOUDINI, exprs [2]: 72-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 107-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4, input.dst.local_size.=Lentry%2%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI3, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 16:
    smallest point cover name ml-lb-addr-eq, type HOUDINI, exprs [2]: 73-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3)) ; 108-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4, input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_begin.Lentry%2%allocaI4, input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 17:
    smallest point cover name locals-ub-upper-bound, type HOUDINI, exprs [2]: 74-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvult(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, input.dst.sp=L0%0%d=sp)) ; 109-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, bvult(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_end.Lentry%2%allocaI4, input.dst.sp=L0%0%d=sp)) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5412      1.:z3.ce5565
    eqclass 18:
    smallest point cover name local-eq-lsprel-guess, type HOUDINI, exprs [2]: 75-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/)) ; 110-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3, input.dst.local./*___y___main__x__=Lentry%2%d=/)) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%2%d=/_is-absent.Lentry%2%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%2%d=/.Lentry%2%allocaI3, input.dst.local./*___y___main__x__=Lentry%2%d=/))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces

E0%0%d_E0%0%d:
  Invariant state (0 classes):


<MSG>2:57 : Checking safety of the product-CFG...</MSG>
check_safety 381: checking safety for zero divisors
check_safety_for 337: Solving src_must_be_unsafe dfa
check_safety_for 339: Done src_must_be_unsafe dfa
check_safety_for 343: Solving dst_may_be_unsafe dfa
check_safety_for 345: Done dst_may_be_unsafe dfa
check_safety 386: safety check passed for zero divisors
check_safety 387: checking safety for unsafe heap accesses
check_safety_for 337: Solving src_must_be_unsafe dfa
check_safety_for 339: Done src_must_be_unsafe dfa
check_safety_for 343: Solving dst_may_be_unsafe dfa
check_safety_for 345: Done dst_may_be_unsafe dfa
check_safety 392: safety check passed for unsafe heap accesses
<MSG>2:57 : Safety check passed on product-CFG...</MSG>
check_safety_for 337: Solving src_must_be_unsafe dfa
check_safety_for 339: Done src_must_be_unsafe dfa
check_safety_for 343: Solving dst_may_be_unsafe dfa
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
check_safety_for 345: Done dst_may_be_unsafe dfa
<MSG>2:58 : DST Memlabel check passed on product-CFG...</MSG>
Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3 (C L0%0%d => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2 (C line 19 => C line 19 at mu 1 delta 1, A line 19 => A line 19 at mu 1 delta 1)
            Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d (C line 19 => C E0%0%d at mu 3 delta 1, A line 19 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 19)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI3 (C line 19, A line 19)
                Lentry%1%allocaI3_L0%1%allocaI3 [inductive-invariants] contains 13 counterexamples (for correlating 14 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI4 (C line 19, A line 19)
                Lentry%1%allocaI4_L0%1%allocaI4 [inductive-invariants] contains 14 counterexamples (for correlating 14 bv exprs)
            Lentry%2%allocaI3_L0%1%allocaI1 (C line 19, A line 19)
                Lentry%2%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 10 counterexamples (for correlating 15 bv exprs)
            Lentry%2%allocaI4_L0%1%allocaI2 (C line 19, A line 19)
                Lentry%2%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 15 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/
  	  local.=Lentry%2%d= == input.dst.local./*___y___main__x__=Lentry%2%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function main. 123.45s, query:smt.: 42.1627s (num_starts 544; 0.0775s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 78.6491s (num_starts 1308; 0.0601s/start)ftmap_run_pointsto_analysis.: 11.4462s (num_starts 2; 5.7231s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
get_paths_with_matching_to_pc.: 3e-06s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lentry%2%allocaI3_L0%1%allocaI1.: 3.5e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L0%1%allocaI1.: 3.7e-05s (num_starts 3; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 5.1e-05s (num_starts 6; 0.0000s/start)
compute_tfg_pred_eqclass.: 5.5e-05s (num_starts 24; 0.0000s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L0%1%allocaI3.: 5.9e-05s (num_starts 5; 0.0000s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.L0%0%d_L0%0%d.: 7.7e-05s (num_starts 7; 0.0000s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI4_L0%1%allocaI4.: 9.9e-05s (num_starts 5; 0.0000s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.000112s (num_starts 3; 0.0000s/start)
graph_with_paths::path_modifies_memalloc.: 0.000164s (num_starts 48; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000208s (num_starts 1; 0.0002s/start)
alias_val_t::constructor_with_map_arg.: 0.000247s (num_starts 373; 0.0000s/start)
remove_complex_bv_exprs.: 0.000273s (num_starts 24; 0.0000s/start)
tfg_suffixpath_get_expr_helper.: 0.000345s (num_starts 9; 0.0000s/start)
determinize_value_expr_map.: 0.000402s (num_starts 106; 0.0000s/start)
prove_trivial.: 0.000425s (num_starts 657; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::conservative_dfa_val_for_newly_defined_loc.: 0.000427s (num_starts 34; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000432s (num_starts 24; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::conservative_dfa_val_for_newly_defined_loc.: 0.000442s (num_starts 34; 0.0000s/start)
prune_dst_memslots.: 0.000465s (num_starts 24; 0.0000s/start)
expr_is_hidden_reg.: 0.000481s (num_starts 633; 0.0000s/start)
graph_visit_exprs_const.const.: 0.000489s (num_starts 1; 0.0005s/start)
populate_suffixpaths.: 0.000497s (num_starts 1; 0.0005s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.000528s (num_starts 1; 0.0005s/start)
expr_is_callee_save_const.: 0.000706s (num_starts 769; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000732s (num_starts 11; 0.0001s/start)
get_memlabel_set_from_mlvarnames.: 0.000808s (num_starts 60; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000982s (num_starts 12; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.001145s (num_starts 1; 0.0011s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.001229s (num_starts 1; 0.0012s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.001279s (num_starts 1; 0.0013s/start)
graph_locs_add_all_local_vars.: 0.0013s (num_starts 2; 0.0006s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.001455s (num_starts 1308; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.001456s (num_starts 2; 0.0007s/start)
compute_sprel_relations.: 0.001493s (num_starts 2; 0.0007s/start)
graph_locs_add_all_llvmvars.: 0.0015s (num_starts 2; 0.0008s/start)
propagate_sprels.: 0.001515s (num_starts 2; 0.0008s/start)
sp_version_relations_val_t::meet.: 0.001622s (num_starts 2364; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001663s (num_starts 1; 0.0017s/start)
tfg::collect_assumes_around_edge.: 0.001763s (num_starts 122; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.001843s (num_starts 24; 0.0001s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.001887s (num_starts 7; 0.0003s/start)
tfg::populate_loc_definedness.post_dfa.: 0.002162s (num_starts 12; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-trivial.: 0.002359s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.002379s (num_starts 1; 0.0024s/start)
graph_locs_add_local_vars_for_edge.: 0.002439s (num_starts 67; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-eq-houdini-guess;-trivial.: 0.002448s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-trivial.: 0.00245s (num_starts 1; 0.0024s/start)
graph_locs_add_exvregs_for_edge.: 0.002462s (num_starts 67; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.002468s (num_starts 1; 0.0025s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.002481s (num_starts 679; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.002487s (num_starts 1; 0.0025s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.002623s (num_starts 405; 0.0000s/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 0.002711s (num_starts 30; 0.0001s/start)
graph_edge_contains_unknown_function_call.: 0.002742s (num_starts 215; 0.0000s/start)
get_mask_ranges_for_memlabel.: 0.002783s (num_starts 262; 0.0000s/start)
compute_ssa_vars_renaming_map.: 0.002797s (num_starts 2; 0.0014s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.002977s (num_starts 2; 0.0015s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 0.003123s (num_starts 30; 0.0001s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.003257s (num_starts 305; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.003441s (num_starts 238; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.003493s (num_starts 20; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.003494s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.0035s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.003504s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.003509s (num_starts 2; 0.0018s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.003513s (num_starts 4; 0.0009s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.003633s (num_starts 18; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.00364s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-eq-lsprel-guess-houdini-guess.: 0.003649s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003713s (num_starts 2; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.003723s (num_starts 2; 0.0019s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.003806s (num_starts 69; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-addr-eq-houdini-guess;-trivial.: 0.00384s (num_starts 2; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-addr-eq-houdini-guess.: 0.003849s (num_starts 2; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.0039s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);abstract-memlabel-asserts-houdini-guess.: 0.003915s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003937s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.003956s (num_starts 1; 0.0040s/start)
get_unrolled_loop_paths_from.: 0.003956s (num_starts 6; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004034s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.004052s (num_starts 1; 0.0041s/start)
def_analysis::xfer_and_meet.: 0.004113s (num_starts 124; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.004162s (num_starts 2; 0.0021s/start)
populate_locid2expr_map.: 0.004164s (num_starts 53; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.004171s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.00422s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.004314s (num_starts 2; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-ineq-houdini-guess.: 0.004323s (num_starts 2; 0.0022s/start)
compute_vars_reaching_definitions.: 0.004352s (num_starts 2; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.00453s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004537s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004539s (num_starts 2; 0.0023s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.00455s (num_starts 8; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004559s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-iscontiguous-houdini-guess.: 0.004568s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.004597s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004618s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-trivial.: 0.004621s (num_starts 1; 0.0046s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.004633s (num_starts 19; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.004636s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.004638s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004648s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.004666s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.004681s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-below-isp-houdini-guess;-trivial.: 0.00476s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-below-isp-houdini-guess.: 0.004773s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.004777s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004783s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.004797s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-trivial.: 0.00489s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.005287s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.00531s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);mem-allocs-equality;-trivial.: 0.00539s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005399s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.005416s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.005419s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.005439s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.005475s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.005476s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.005487s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005566s (num_starts 2; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005568s (num_starts 2; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005577s (num_starts 2; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.00561s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.005638s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.00564s (num_starts 2; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.005651s (num_starts 1; 0.0057s/start)
populate_transitive_closure.: 0.005664s (num_starts 69; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-below-isp-houdini-guess;-trivial.: 0.005667s (num_starts 1; 0.0057s/start)
guarded_predicate_set_eliminate_axpreds.: 0.005668s (num_starts 651; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memlabel-is-absent-houdini-guess.: 0.005682s (num_starts 2; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-below-isp-houdini-guess.: 0.005686s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-trivial.: 0.005699s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.005756s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-sizes-are-equal-houdini-guess;-trivial.: 0.005785s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.005791s (num_starts 1; 0.0058s/start)
sort_exprs_and_compute_bv_eqclass.: 0.005819s (num_starts 24; 0.0002s/start)
graph_identify_back_edges.: 0.00589s (num_starts 76; 0.0001s/start)
compute_bv_bool_eqclass.: 0.00599s (num_starts 24; 0.0002s/start)
graph_identify_natural_loops.: 0.006056s (num_starts 76; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.006057s (num_starts 238; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.006073s (num_starts 137; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.006124s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.006156s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.006174s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006226s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.006243s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);mem-allocs-equality;-trivial.: 0.006259s (num_starts 1; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);mem-allocs-equality.: 0.006313s (num_starts 1; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.00648s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.006495s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memlabel-is-absent-houdini-guess;-trivial.: 0.006616s (num_starts 1; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;false-predicate;-trivial.: 0.006651s (num_starts 1; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate;-trivial.: 0.006653s (num_starts 1; 0.0067s/start)
parse_yices_model.: 0.006657s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate.: 0.006662s (num_starts 1; 0.0067s/start)
identify_address_taken_local_variables.: 0.006708s (num_starts 1; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-trivial.: 0.006774s (num_starts 1; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.006778s (num_starts 1; 0.0068s/start)
proof_query_is_trivial_helper.: 0.006778s (num_starts 1490; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.006829s (num_starts 3; 0.0023s/start)
pth_collect_preds_using_atom_func.: 0.006862s (num_starts 108; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.006875s (num_starts 3; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-eq-houdini-guess;-trivial.: 0.006961s (num_starts 1; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-trivial.: 0.006963s (num_starts 1; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);mem-allocs-equality;-trivial.: 0.007003s (num_starts 1; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);mem-allocs-equality.: 0.007052s (num_starts 1; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.007104s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.007123s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-sizes-are-equal-houdini-guess;-trivial.: 0.007132s (num_starts 2; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-sizes-are-equal-houdini-guess.: 0.007147s (num_starts 2; 0.0036s/start)
graph_with_paths::collect_writable_memlabels_for_path.: 0.007486s (num_starts 60; 0.0001s/start)
populate_branch_affecting_locs.: 0.007487s (num_starts 12; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.007718s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.00773s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.007746s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.007748s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.007756s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.00776s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.007769s (num_starts 2; 0.0039s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.007771s (num_starts 678; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007772s (num_starts 1; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.007789s (num_starts 1; 0.0078s/start)
expr_represents_llvm_undef.: 0.007811s (num_starts 1579; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.00783s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.007842s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-addr-eq-houdini-guess;-trivial.: 0.007883s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-addr-eq-houdini-guess.: 0.007895s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.007943s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.007955s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-addr-eq-houdini-guess;-trivial.: 0.00796s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-addr-eq-houdini-guess.: 0.008002s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.008075s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-ineq-houdini-guess.: 0.008087s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.008346s (num_starts 1; 0.0083s/start)
tfg::populate_loc_definedness.before_solve.: 0.008631s (num_starts 12; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.008668s (num_starts 2; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.00868s (num_starts 2; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-sizes-are-equal-houdini-guess;-trivial.: 0.008743s (num_starts 2; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-sizes-are-equal-houdini-guess.: 0.008756s (num_starts 2; 0.0044s/start)
tfg_edge_composition_get_assumes.: 0.008861s (num_starts 108; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memlabel-is-absent-houdini-guess;-trivial.: 0.00888s (num_starts 1; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;false-predicate;-trivial.: 0.008919s (num_starts 1; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate;-trivial.: 0.008922s (num_starts 1; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate.: 0.008932s (num_starts 1; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.008948s (num_starts 1; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);mem-allocs-equality;-trivial.: 0.008953s (num_starts 1; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);mem-allocs-equality.: 0.008973s (num_starts 1; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);mem-allocs-equality;-trivial.: 0.009007s (num_starts 1; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.009011s (num_starts 2; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);mem-allocs-equality.: 0.00903s (num_starts 1; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.009044s (num_starts 2; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-trivial.: 0.00909s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.009092s (num_starts 2; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.009097s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);false-predicate;-trivial.: 0.009098s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;false-predicate;-trivial.: 0.0091s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);false-predicate;-trivial.: 0.009102s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);false-predicate.: 0.009112s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.009126s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-below-isp-houdini-guess;-trivial.: 0.009135s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-below-isp-houdini-guess.: 0.009141s (num_starts 1; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.009161s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.009163s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.00918s (num_starts 1; 0.0092s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.009187s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-sizes-are-equal-houdini-guess;-trivial.: 0.009188s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.009191s (num_starts 1; 0.0092s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.009192s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-iscontiguous-houdini-guess.: 0.009196s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.009206s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.009216s (num_starts 1; 0.0092s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.009238s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.009269s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-addr-eq-houdini-guess;-trivial.: 0.009324s (num_starts 2; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-addr-eq-houdini-guess.: 0.009354s (num_starts 2; 0.0047s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.009366s (num_starts 108; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.009465s (num_starts 2; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.009493s (num_starts 2; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-ml-lb-ineq-houdini-guess.: 0.009511s (num_starts 2; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.009524s (num_starts 2; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-below-isp-houdini-guess;-trivial.: 0.009586s (num_starts 3; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-dst-edgecond-implies-src-edgecond;-trivial.: 0.009608s (num_starts 1; 0.0096s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.009609s (num_starts 1; 0.0096s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.009612s (num_starts 4; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.009614s (num_starts 1; 0.0096s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-ml-lb-ineq-houdini-guess.: 0.009629s (num_starts 4; 0.0024s/start)
find_dominators.: 0.009636s (num_starts 135; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.009813s (num_starts 2; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009827s (num_starts 1; 0.0098s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-eq-lsprel-guess-houdini-guess.: 0.009827s (num_starts 2; 0.0049s/start)
graph_visit_exprs_and_keys.: 0.009843s (num_starts 2; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.009859s (num_starts 1; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.009908s (num_starts 1; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-trivial.: 0.010003s (num_starts 1; 0.0100s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-eq-houdini-guess;-trivial.: 0.010087s (num_starts 1; 0.0101s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-eq-houdini-guess;-trivial.: 0.010092s (num_starts 1; 0.0101s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.010198s (num_starts 2; 0.0051s/start)
set_result_and_counter_example.: 0.010216s (num_starts 544; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.010244s (num_starts 1; 0.0102s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memlabel-is-absent-houdini-guess.: 0.010246s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.010247s (num_starts 1; 0.0102s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.010264s (num_starts 1; 0.0103s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.010274s (num_starts 1; 0.0103s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.010336s (num_starts 1; 0.0103s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);abstract-memlabel-asserts-houdini-guess.: 0.010357s (num_starts 1; 0.0104s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.010667s (num_starts 1; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.010832s (num_starts 1; 0.0108s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.010911s (num_starts 2; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.010957s (num_starts 2; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.011005s (num_starts 4; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);mem-allocs-equality;-trivial.: 0.011397s (num_starts 1; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.011435s (num_starts 1; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.011439s (num_starts 1; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.011444s (num_starts 1; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-sizes-are-equal-houdini-guess;-trivial.: 0.011479s (num_starts 1; 0.0115s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.011573s (num_starts 1; 0.0116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.011609s (num_starts 1; 0.0116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.011705s (num_starts 1; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-dst-edgecond-implies-src-edgecond;-trivial.: 0.011705s (num_starts 1; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.011712s (num_starts 1; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);linear;-trivial.: 0.011753s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memeq-;-trivial.: 0.011835s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011867s (num_starts 3; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memeq-.: 0.011929s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.012145s (num_starts 2; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-ml-lb-ineq-houdini-guess.: 0.01221s (num_starts 2; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-below-isp-houdini-guess;-trivial.: 0.012411s (num_starts 2; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.012497s (num_starts 3; 0.0042s/start)
compute_regions.: 0.012524s (num_starts 76; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-addr-eq-houdini-guess;-trivial.: 0.012695s (num_starts 4; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-addr-eq-houdini-guess.: 0.01279s (num_starts 4; 0.0032s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.013053s (num_starts 651; 0.0000s/start)
proof_query_is_trivial.: 0.013111s (num_starts 1308; 0.0000s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.013118s (num_starts 1455; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;mem-allocs-equality;-trivial.: 0.013122s (num_starts 2; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.013253s (num_starts 2; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.013262s (num_starts 2; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.01351s (num_starts 1; 0.0135s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.01353s (num_starts 1; 0.0135s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-below-isp-houdini-guess;-trivial.: 0.013748s (num_starts 2; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.013778s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.013828s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.013833s (num_starts 4; 0.0035s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.013887s (num_starts 238; 0.0001s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.013945s (num_starts 20; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.014069s (num_starts 1; 0.0141s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);abstract-memlabel-asserts-houdini-guess.: 0.014075s (num_starts 1; 0.0141s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.014096s (num_starts 1; 0.0141s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.014102s (num_starts 1; 0.0141s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.014523s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.014554s (num_starts 1; 0.0146s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.014554s (num_starts 2; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-ml-lb-ineq-houdini-guess.: 0.014584s (num_starts 2; 0.0073s/start)
tfg::populate_loc_definedness.before_initialize.: 0.014595s (num_starts 12; 0.0012s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.014819s (num_starts 1; 0.0148s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.01485s (num_starts 1455; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.014969s (num_starts 309; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-eq-houdini-guess;-trivial.: 0.014975s (num_starts 2; 0.0075s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.015115s (num_starts 1; 0.0151s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.015116s (num_starts 1; 0.0151s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.01512s (num_starts 1; 0.0151s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.01513s (num_starts 1; 0.0151s/start)
graph_visit_exprs.: 0.015225s (num_starts 5; 0.0030s/start)
tfg::populate_loc_definedness.: 0.015307s (num_starts 12; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.015695s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.015717s (num_starts 1; 0.0157s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-trivial.: 0.015718s (num_starts 1; 0.0157s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.01572s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.015721s (num_starts 1; 0.0157s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);outgoing_edges_cover_all_possibilities..: 0.015729s (num_starts 1; 0.0157s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);outgoing_edges_cover_all_possibilities..: 0.015735s (num_starts 1; 0.0157s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.015839s (num_starts 1; 0.0158s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);-trivial.: 0.01584s (num_starts 1; 0.0158s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.015843s (num_starts 1; 0.0158s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);outgoing_edges_cover_all_possibilities..: 0.015856s (num_starts 1; 0.0159s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);outgoing_edges_cover_all_possibilities..: 0.015865s (num_starts 1; 0.0159s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI4_L0%1%allocaI2;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.016109s (num_starts 1; 0.0161s/start)
decide_hoare_triple_helper;per-path;Lentry%2%allocaI4_L0%1%allocaI2;(epsilon);-trivial.: 0.016109s (num_starts 1; 0.0161s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI4_L0%1%allocaI2;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.016111s (num_starts 1; 0.0161s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI4_L0%1%allocaI2;(epsilon);outgoing_edges_cover_all_possibilities..: 0.016124s (num_starts 1; 0.0161s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI4_L0%1%allocaI2;(epsilon);outgoing_edges_cover_all_possibilities..: 0.016134s (num_starts 1; 0.0161s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.016304s (num_starts 1; 0.0163s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.016317s (num_starts 1; 0.0163s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016436s (num_starts 1; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.016441s (num_starts 1; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memeq-;-trivial.: 0.016538s (num_starts 5; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.016559s (num_starts 6; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memlabel-is-absent-houdini-guess;-trivial.: 0.01664s (num_starts 5; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memeq-.: 0.016641s (num_starts 5; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-ml-lb-ineq-houdini-guess.: 0.016654s (num_starts 6; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.016931s (num_starts 3; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-addr-eq-houdini-guess;-trivial.: 0.017264s (num_starts 5; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-addr-eq-houdini-guess;-trivial.: 0.017321s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-addr-eq-houdini-guess.: 0.017383s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;mem-allocs-equality;-trivial.: 0.017404s (num_starts 3; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.01743s (num_starts 4; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-ml-lb-ineq-houdini-guess.: 0.017457s (num_starts 4; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-sizes-are-equal-houdini-guess;-trivial.: 0.017526s (num_starts 5; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-sizes-are-equal-houdini-guess;-trivial.: 0.017715s (num_starts 3; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.017756s (num_starts 4; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.017959s (num_starts 2; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-ml-lb-ineq-houdini-guess.: 0.01799s (num_starts 2; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memlabel-is-absent-houdini-guess;-trivial.: 0.018083s (num_starts 2; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memlabel-is-absent-houdini-guess.: 0.018097s (num_starts 2; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.018174s (num_starts 2; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.018187s (num_starts 2; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;mem-allocs-equality;-trivial.: 0.018198s (num_starts 2; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memeq-;-trivial.: 0.01864s (num_starts 4; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memeq-.: 0.01872s (num_starts 4; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.01876s (num_starts 3; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-eq-houdini-guess;-trivial.: 0.018924s (num_starts 2; 0.0095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-trivial.: 0.018927s (num_starts 2; 0.0095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.018948s (num_starts 2; 0.0095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.019107s (num_starts 1; 0.0191s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.019122s (num_starts 1; 0.0191s/start)
get_unrolled_paths_from.: 0.019177s (num_starts 23; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-below-isp-houdini-guess;-trivial.: 0.019599s (num_starts 1; 0.0196s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-trivial.: 0.019921s (num_starts 1; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-trivial.: 0.019941s (num_starts 1; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.019945s (num_starts 1; 0.0199s/start)
cg_src_dst_tfg_copy.: 0.020005s (num_starts 9; 0.0022s/start)
do_ssa_transformation.: 0.02008s (num_starts 2; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-trivial.: 0.020127s (num_starts 1; 0.0201s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.02013s (num_starts 1; 0.0201s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.020138s (num_starts 3; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.020144s (num_starts 3; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.020158s (num_starts 3; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;false-predicate;-trivial.: 0.020347s (num_starts 1; 0.0203s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate;-trivial.: 0.020348s (num_starts 1; 0.0203s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate.: 0.020356s (num_starts 1; 0.0204s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.02042s (num_starts 6; 0.0034s/start)
aliasing_constraints.convert_to_expr.: 0.021047s (num_starts 651; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.021267s (num_starts 3; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.021376s (num_starts 4; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-trivial.: 0.021594s (num_starts 1; 0.0216s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.021608s (num_starts 1; 0.0216s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.021613s (num_starts 1; 0.0216s/start)
decide_hoare_triple_helper;per-path;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-trivial.: 0.021619s (num_starts 1; 0.0216s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);outgoing_edges_cover_all_possibilities..: 0.02162s (num_starts 1; 0.0216s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);outgoing_edges_cover_all_possibilities..: 0.021637s (num_starts 1; 0.0216s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.021677s (num_starts 108; 0.0002s/start)
corr_graph_enumerate_correlations.: 0.021972s (num_starts 1; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);mem-allocs-equality;-trivial.: 0.021989s (num_starts 1; 0.0220s/start)
removeMostPromising.: 0.021993s (num_starts 19; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);mem-allocs-equality.: 0.022003s (num_starts 1; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);linear;-trivial.: 0.022008s (num_starts 9; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.022075s (num_starts 1; 0.0221s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.022088s (num_starts 1; 0.0221s/start)
interesting_wp_exprs_apply_trans_funs.: 0.022088s (num_starts 108; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;-dst-edgecond-implies-src-edgecond;-trivial.: 0.022719s (num_starts 1; 0.0227s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.02272s (num_starts 1; 0.0227s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.022725s (num_starts 1; 0.0227s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.022857s (num_starts 1; 0.0229s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.023478s (num_starts 1; 0.0235s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.023888s (num_starts 1; 0.0239s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-below-isp-houdini-guess;-trivial.: 0.024196s (num_starts 4; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-below-isp-houdini-guess.: 0.024281s (num_starts 4; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memeq-;-trivial.: 0.024472s (num_starts 1; 0.0245s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memeq-;-trivial.: 0.024477s (num_starts 1; 0.0245s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.024627s (num_starts 1; 0.0246s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.02464s (num_starts 1; 0.0246s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.02476s (num_starts 1; 0.0248s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.024885s (num_starts 3; 0.0083s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.024988s (num_starts 3; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memlabel-is-absent-houdini-guess;-trivial.: 0.025053s (num_starts 5; 0.0050s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.025077s (num_starts 3; 0.0084s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.025186s (num_starts 3; 0.0084s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.sp-preserved;-trivial.: 0.02543s (num_starts 4; 0.0064s/start)
decide_hoare_triple_helper;per-query-type;exit.sp-preserved;-trivial.: 0.025437s (num_starts 4; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;exit.sp-preserved;-trivial.: 0.025443s (num_starts 4; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.sp-preserved;-trivial.: 0.025451s (num_starts 4; 0.0064s/start)
get_next_potential_correlations.: 0.025496s (num_starts 1; 0.0255s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.sp-preserved.: 0.025536s (num_starts 4; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;exit.sp-preserved.: 0.025551s (num_starts 4; 0.0064s/start)
decide_hoare_triple_helper;per-query-type;exit.sp-preserved.: 0.025567s (num_starts 4; 0.0064s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.sp-preserved.: 0.02558s (num_starts 4; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.026349s (num_starts 2; 0.0132s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.026528s (num_starts 7; 0.0038s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.026596s (num_starts 3; 0.0089s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.02668s (num_starts 3; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memeq-;-trivial.: 0.027174s (num_starts 5; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memeq-.: 0.027283s (num_starts 5; 0.0055s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.027419s (num_starts 3; 0.0091s/start)
get_sprel_map_pair.: 0.02755s (num_starts 1317; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.027856s (num_starts 11; 0.0025s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.028548s (num_starts 54; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-addr-eq-houdini-guess;-trivial.: 0.028637s (num_starts 5; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-below-isp-houdini-guess;-trivial.: 0.028726s (num_starts 2; 0.0144s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-sizes-are-equal-houdini-guess;-trivial.: 0.029217s (num_starts 5; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.029434s (num_starts 3; 0.0098s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.029438s (num_starts 3; 0.0098s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.029458s (num_starts 3; 0.0098s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.029571s (num_starts 4; 0.0074s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.030179s (num_starts 3; 0.0101s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.030247s (num_starts 6; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-ml-lb-ineq-houdini-guess.: 0.030323s (num_starts 6; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.03059s (num_starts 2; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.03059s (num_starts 2; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.030591s (num_starts 2; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.030598s (num_starts 2; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.030599s (num_starts 2; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.030729s (num_starts 2; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.030737s (num_starts 2; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.030762s (num_starts 2; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.03077s (num_starts 2; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.031658s (num_starts 3; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;abstract-memlabel-asserts-houdini-guess.: 0.031735s (num_starts 3; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.032114s (num_starts 3; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;abstract-memlabel-asserts-houdini-guess.: 0.032176s (num_starts 3; 0.0107s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.032272s (num_starts 3; 0.0108s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.032361s (num_starts 3; 0.0108s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.032395s (num_starts 30; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.032727s (num_starts 2; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.032756s (num_starts 2; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.032784s (num_starts 4; 0.0082s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.032829s (num_starts 2; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memlabel-is-absent-houdini-guess.: 0.032858s (num_starts 2; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.033163s (num_starts 2; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.033171s (num_starts 2; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.033788s (num_starts 1; 0.0338s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.033792s (num_starts 1; 0.0338s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;mem-allocs-equality;-trivial.: 0.03386s (num_starts 3; 0.0113s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.034236s (num_starts 3; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-trivial.: 0.035204s (num_starts 4; 0.0088s/start)
lr_status_meet.: 0.035274s (num_starts 20254; 0.0000s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.035292s (num_starts 1461; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate;-trivial.: 0.03591s (num_starts 3; 0.0120s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-trivial.: 0.035976s (num_starts 3; 0.0120s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate.: 0.035977s (num_starts 3; 0.0120s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.036033s (num_starts 3; 0.0120s/start)
graph_with_guessing_sync_preds.: 0.036319s (num_starts 1308; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;sp-below-isp-houdini-guess;-trivial.: 0.036427s (num_starts 2; 0.0182s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.036874s (num_starts 1; 0.0369s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.036879s (num_starts 1; 0.0369s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(epsilon);pred-type-unknown.: 0.036885s (num_starts 1; 0.0369s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);pred-type-unknown.: 0.036898s (num_starts 1; 0.0369s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-trivial.: 0.037286s (num_starts 3; 0.0124s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);mem-allocs-equality;-trivial.: 0.037994s (num_starts 3; 0.0127s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);mem-allocs-equality.: 0.038139s (num_starts 3; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.038497s (num_starts 15; 0.0026s/start)
identify_assumed_eqclasses.: 0.03857s (num_starts 30; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.038821s (num_starts 2; 0.0194s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memlabel-is-absent-houdini-guess;-trivial.: 0.039029s (num_starts 5; 0.0078s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.039146s (num_starts 3; 0.0130s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.039339s (num_starts 3; 0.0131s/start)
expr_linear_relation_holds::visit.var.: 0.039784s (num_starts 2196; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.039933s (num_starts 3; 0.0133s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.040065s (num_starts 3; 0.0134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.040118s (num_starts 5; 0.0080s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.040301s (num_starts 3; 0.0134s/start)
tighten_mem_access_ml.cache_miss.: 0.040371s (num_starts 93; 0.0004s/start)
tighten_mem_access_ml.: 0.040605s (num_starts 104; 0.0004s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.040624s (num_starts 398; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;ml-lb-ub-eq-houdini-guess;-trivial.: 0.040769s (num_starts 2; 0.0204s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-trivial.: 0.040771s (num_starts 2; 0.0204s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.040787s (num_starts 2; 0.0204s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.040791s (num_starts 2; 0.0204s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-ml-lb-ineq-houdini-guess.: 0.04084s (num_starts 2; 0.0204s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.040877s (num_starts 4; 0.0102s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;abstract-memlabel-asserts-houdini-guess.: 0.040975s (num_starts 4; 0.0102s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.041016s (num_starts 2; 0.0205s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.041024s (num_starts 2; 0.0205s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.041306s (num_starts 3; 0.0138s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-trivial.: 0.041355s (num_starts 2; 0.0207s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-trivial.: 0.041366s (num_starts 2; 0.0207s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.041392s (num_starts 3; 0.0138s/start)
collect_assumes_around_edge.: 0.041483s (num_starts 30; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memeq-;-trivial.: 0.041721s (num_starts 2; 0.0209s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memeq-;-trivial.: 0.041727s (num_starts 2; 0.0209s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.041896s (num_starts 6; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.041916s (num_starts 6; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.041994s (num_starts 6; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.042016s (num_starts 6; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.042147s (num_starts 3; 0.0140s/start)
collect_dst_to_src_submap_preds.: 0.042227s (num_starts 1308; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.042265s (num_starts 3; 0.0141s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.042395s (num_starts 6; 0.0071s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.042493s (num_starts 6; 0.0071s/start)
ldr_decomposition.: 0.043306s (num_starts 305; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.043885s (num_starts 6; 0.0073s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.043956s (num_starts 8790; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.043984s (num_starts 6; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.044329s (num_starts 7; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memeq-;-trivial.: 0.044702s (num_starts 4; 0.0112s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memeq-.: 0.044729s (num_starts 4; 0.0112s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.045012s (num_starts 4; 0.0113s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.045056s (num_starts 6; 0.0075s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.045173s (num_starts 6; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;-dst-edgecond-implies-src-edgecond;-trivial.: 0.045689s (num_starts 2; 0.0228s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.045691s (num_starts 2; 0.0228s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.047049s (num_starts 3; 0.0157s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memlabel-is-absent-houdini-guess;-trivial.: 0.04705s (num_starts 7; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.047682s (num_starts 10; 0.0048s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1.: 0.047803s (num_starts 3; 0.0159s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;linear;-trivial.: 0.048249s (num_starts 17; 0.0028s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.048524s (num_starts 823; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.048637s (num_starts 6; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);linear;-trivial.: 0.048733s (num_starts 7; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memlabel-is-absent-houdini-guess.: 0.048827s (num_starts 6; 0.0081s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.049854s (num_starts 3; 0.0166s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.050752s (num_starts 24; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.051424s (num_starts 6; 0.0086s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.051631s (num_starts 6; 0.0086s/start)
construct_linear_combination_exprs.: 0.051724s (num_starts 3674; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);linear;-trivial.: 0.052253s (num_starts 11; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;local-sizes-are-equal-houdini-guess;-trivial.: 0.052318s (num_starts 3; 0.0174s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.053132s (num_starts 3; 0.0177s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.053614s (num_starts 3; 0.0179s/start)
graph_locs_map_update_memlabels_for_memslot_locs_with_memalloc.calling.compute_lr_status_for_expr.: 0.053816s (num_starts 170; 0.0003s/start)
check_safety.: 0.05492s (num_starts 1; 0.0549s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.055476s (num_starts 1; 0.0555s/start)
wp_pred.apply_trans_funs_simplified.: 0.055708s (num_starts 202; 0.0003s/start)
generate_aliasing_constraints_from_expr.: 0.055774s (num_starts 3209; 0.0000s/start)
parse_cvc4_model.: 0.056259s (num_starts 8; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-trivial.: 0.0563s (num_starts 5; 0.0113s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-.: 0.056331s (num_starts 5; 0.0113s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.056451s (num_starts 9; 0.0063s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.056896s (num_starts 5; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.057045s (num_starts 3; 0.0190s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.05728s (num_starts 5; 0.0115s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.057282s (num_starts 5; 0.0115s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.057765s (num_starts 1; 0.0578s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.057774s (num_starts 1; 0.0578s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.057892s (num_starts 5; 0.0116s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.058233s (num_starts 5; 0.0116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.059676s (num_starts 3; 0.0199s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.059679s (num_starts 5; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.059687s (num_starts 3; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.059688s (num_starts 3; 0.0199s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.060718s (num_starts 5; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.061273s (num_starts 4; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.061287s (num_starts 4; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.063109s (num_starts 12; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;ml-lb-addr-eq-houdini-guess;-trivial.: 0.063312s (num_starts 4; 0.0158s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memeq-;-trivial.: 0.063336s (num_starts 8; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;ml-lb-addr-eq-houdini-guess.: 0.063368s (num_starts 4; 0.0158s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063414s (num_starts 1; 0.0634s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063419s (num_starts 1; 0.0634s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.06344s (num_starts 1; 0.0634s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063655s (num_starts 1; 0.0637s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063661s (num_starts 1; 0.0637s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.06368s (num_starts 1; 0.0637s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.064324s (num_starts 3; 0.0214s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.064378s (num_starts 3; 0.0215s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.064796s (num_starts 6; 0.0108s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-ml-lb-ineq-houdini-guess.: 0.065001s (num_starts 6; 0.0108s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.065277s (num_starts 1; 0.0653s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.065297s (num_starts 1; 0.0653s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.0653s (num_starts 1; 0.0653s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.065305s (num_starts 1; 0.0653s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-below-isp-houdini-guess.: 0.065311s (num_starts 1; 0.0653s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-trivial.: 0.065338s (num_starts 4; 0.0163s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066209s (num_starts 1; 0.0662s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.066288s (num_starts 5; 0.0133s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-trivial.: 0.066417s (num_starts 4; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.066475s (num_starts 4; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;mem-allocs-equality;-trivial.: 0.066558s (num_starts 3; 0.0222s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;mem-allocs-equality.: 0.066605s (num_starts 3; 0.0222s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-trivial.: 0.066641s (num_starts 5; 0.0133s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.067068s (num_starts 3; 0.0224s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067359s (num_starts 1; 0.0674s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06764s (num_starts 1; 0.0676s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067673s (num_starts 1; 0.0677s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067919s (num_starts 1; 0.0679s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067923s (num_starts 1; 0.0679s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.067951s (num_starts 1; 0.0680s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-no-overflow.: 0.067958s (num_starts 1; 0.0680s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068281s (num_starts 1; 0.0683s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068548s (num_starts 1; 0.0685s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068551s (num_starts 1; 0.0686s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);mem-allocs-equality.: 0.068567s (num_starts 1; 0.0686s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069044s (num_starts 1; 0.0690s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-no-overflow.: 0.069071s (num_starts 1; 0.0691s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069261s (num_starts 1; 0.0693s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069274s (num_starts 1; 0.0693s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069653s (num_starts 1; 0.0697s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069675s (num_starts 1; 0.0697s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069821s (num_starts 1; 0.0698s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069824s (num_starts 1; 0.0698s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06987s (num_starts 1; 0.0699s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069875s (num_starts 1; 0.0699s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);abstract-memlabel-asserts-houdini-guess.: 0.069887s (num_starts 1; 0.0699s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.070494s (num_starts 4; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.070566s (num_starts 4; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070596s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-region-was-stack.: 0.070621s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07067s (num_starts 1; 0.0707s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070821s (num_starts 1; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07083s (num_starts 1; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071048s (num_starts 1; 0.0710s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071055s (num_starts 1; 0.0711s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071125s (num_starts 1; 0.0711s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07124s (num_starts 1; 0.0712s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071244s (num_starts 1; 0.0712s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-addr-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071307s (num_starts 1; 0.0713s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071317s (num_starts 1; 0.0713s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-ineq-houdini-guess.: 0.071587s (num_starts 2; 0.0358s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071827s (num_starts 1; 0.0718s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07185s (num_starts 1; 0.0718s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071858s (num_starts 1; 0.0719s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071952s (num_starts 1; 0.0720s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-no-overflow.: 0.071987s (num_starts 1; 0.0720s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072176s (num_starts 1; 0.0722s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.072215s (num_starts 2; 0.0361s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.072216s (num_starts 2; 0.0361s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;linear;-trivial.: 0.072219s (num_starts 28; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.072229s (num_starts 1; 0.0722s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.072419s (num_starts 6; 0.0121s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.072514s (num_starts 6; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072634s (num_starts 1; 0.0726s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-trivial.: 0.072647s (num_starts 6; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-region-was-stack.: 0.072669s (num_starts 1; 0.0727s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072723s (num_starts 1; 0.0727s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072737s (num_starts 1; 0.0727s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072748s (num_starts 1; 0.0727s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.072771s (num_starts 1; 0.0728s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);sp-below-isp-houdini-guess.: 0.072798s (num_starts 1; 0.0728s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-below-isp-houdini-guess;-trivial.: 0.073097s (num_starts 4; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-below-isp-houdini-guess.: 0.07315s (num_starts 4; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073364s (num_starts 1; 0.0734s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-trivial.: 0.073372s (num_starts 6; 0.0122s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.07354s (num_starts 6; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memlabel-is-absent-houdini-guess.: 0.074343s (num_starts 2; 0.0372s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07468s (num_starts 1; 0.0747s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.074707s (num_starts 1; 0.0747s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074717s (num_starts 1; 0.0747s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074725s (num_starts 1; 0.0747s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);sp-below-isp-houdini-guess.: 0.074781s (num_starts 1; 0.0748s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.074833s (num_starts 2; 0.0374s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074959s (num_starts 1; 0.0750s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074964s (num_starts 1; 0.0750s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-below-isp-houdini-guess.: 0.074967s (num_starts 4; 0.0187s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.074975s (num_starts 3; 0.0250s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.074999s (num_starts 1; 0.0750s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-is-aligned.: 0.075006s (num_starts 1; 0.0750s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;abstract-memlabel-asserts-houdini-guess.: 0.075025s (num_starts 3; 0.0250s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075043s (num_starts 1; 0.0750s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-neq-zero.: 0.07507s (num_starts 1; 0.0751s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07569s (num_starts 1; 0.0757s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075695s (num_starts 1; 0.0757s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.075722s (num_starts 1; 0.0757s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-neq-zero.: 0.075729s (num_starts 1; 0.0757s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076472s (num_starts 1; 0.0765s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07648s (num_starts 1; 0.0765s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076558s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.076578s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;mem-allocs-equality.: 0.07667s (num_starts 3; 0.0256s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076918s (num_starts 1; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077049s (num_starts 1; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077055s (num_starts 1; 0.0771s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.077079s (num_starts 2; 0.0385s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.077096s (num_starts 1; 0.0771s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-region-was-stack.: 0.0771s (num_starts 1; 0.0771s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077197s (num_starts 1; 0.0772s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-is-aligned.: 0.077232s (num_starts 1; 0.0772s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077661s (num_starts 1; 0.0777s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.077705s (num_starts 1; 0.0777s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.077723s (num_starts 6; 0.0130s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077742s (num_starts 1; 0.0777s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.077793s (num_starts 1; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077828s (num_starts 1; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.077864s (num_starts 1; 0.0779s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.077907s (num_starts 6; 0.0130s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.078017s (num_starts 4; 0.0195s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memeq-;-trivial.: 0.078027s (num_starts 7; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.078074s (num_starts 4; 0.0195s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078119s (num_starts 1; 0.0781s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07815s (num_starts 1; 0.0781s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.078161s (num_starts 1; 0.0782s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-is-aligned.: 0.078186s (num_starts 1; 0.0782s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078261s (num_starts 1; 0.0783s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078294s (num_starts 1; 0.0783s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.078296s (num_starts 1; 0.0783s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078306s (num_starts 1; 0.0783s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memlabel-is-absent-houdini-guess;-trivial.: 0.07857s (num_starts 4; 0.0196s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-ineq-houdini-guess.: 0.078573s (num_starts 4; 0.0196s/start)
populate_locs_potentially_modified_on_edge.: 0.07876s (num_starts 84; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078965s (num_starts 1; 0.0790s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-neq-zero.: 0.079s (num_starts 1; 0.0790s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-eq-lsprel-guess-houdini-guess.: 0.079046s (num_starts 2; 0.0395s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-ineq-houdini-guess.: 0.079053s (num_starts 2; 0.0395s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079321s (num_starts 1; 0.0793s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079328s (num_starts 1; 0.0793s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079434s (num_starts 1; 0.0794s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079442s (num_starts 1; 0.0794s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079526s (num_starts 1; 0.0795s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.079584s (num_starts 1; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079604s (num_starts 1; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.079656s (num_starts 1; 0.0797s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079804s (num_starts 1; 0.0798s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079811s (num_starts 1; 0.0798s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079884s (num_starts 1; 0.0799s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.079926s (num_starts 1; 0.0799s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memlabel-is-absent-houdini-guess.: 0.080004s (num_starts 2; 0.0400s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080085s (num_starts 1; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080091s (num_starts 1; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.080126s (num_starts 1; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-is-aligned.: 0.080133s (num_starts 1; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08014s (num_starts 1; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080149s (num_starts 1; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.080175s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;-alloca-region-was-stack.: 0.080179s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080498s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080504s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.080531s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-region-was-stack.: 0.080535s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.08059s (num_starts 2; 0.0403s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.080887s (num_starts 2; 0.0404s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081039s (num_starts 1; 0.0810s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.08108s (num_starts 1; 0.0811s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.081131s (num_starts 2; 0.0406s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081262s (num_starts 1; 0.0813s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.081314s (num_starts 2; 0.0407s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-sizes-are-equal-houdini-guess.: 0.081391s (num_starts 2; 0.0407s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081598s (num_starts 1; 0.0816s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081603s (num_starts 1; 0.0816s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.081638s (num_starts 1; 0.0816s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-neq-zero.: 0.081644s (num_starts 1; 0.0816s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;abstract-memlabel-asserts-houdini-guess.: 0.081825s (num_starts 4; 0.0205s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;mem-allocs-equality.: 0.081946s (num_starts 3; 0.0273s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-addr-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082187s (num_starts 1; 0.0822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082197s (num_starts 1; 0.0822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082253s (num_starts 1; 0.0823s/start)
operator().computeWP_for_pred_across_ec.: 0.082285s (num_starts 460; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.082296s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-trivial.: 0.082587s (num_starts 4; 0.0206s/start)
smallest_point_cover_arr.recompute_preds_for_points.: 0.082604s (num_starts 1680; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082796s (num_starts 1; 0.0828s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082802s (num_starts 1; 0.0828s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.082856s (num_starts 2; 0.0414s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memeq-;-trivial.: 0.083111s (num_starts 5; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memeq-.: 0.083183s (num_starts 5; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.08336s (num_starts 2; 0.0417s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083393s (num_starts 1; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.083437s (num_starts 1; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memeq-;-trivial.: 0.083459s (num_starts 10; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083464s (num_starts 1; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083471s (num_starts 1; 0.0835s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-below-isp-houdini-guess;-trivial.: 0.083504s (num_starts 6; 0.0139s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-below-isp-houdini-guess.: 0.083667s (num_starts 6; 0.0139s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083784s (num_starts 1; 0.0838s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083796s (num_starts 1; 0.0838s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);sp-below-isp-houdini-guess.: 0.083841s (num_starts 1; 0.0838s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.084028s (num_starts 12; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084151s (num_starts 1; 0.0842s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084157s (num_starts 1; 0.0842s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.084193s (num_starts 1; 0.0842s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-no-overflow.: 0.0842s (num_starts 1; 0.0842s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.084207s (num_starts 12; 0.0070s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.084395s (num_starts 5; 0.0169s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;outgoing_edges_cover_all_possibilities.;-trivial.: 0.084397s (num_starts 5; 0.0169s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084468s (num_starts 1; 0.0845s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;outgoing_edges_cover_all_possibilities..: 0.084472s (num_starts 5; 0.0169s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.084488s (num_starts 5; 0.0169s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.084508s (num_starts 1; 0.0845s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084677s (num_starts 1; 0.0847s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.08473s (num_starts 1; 0.0847s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084787s (num_starts 1; 0.0848s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084792s (num_starts 1; 0.0848s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.084817s (num_starts 1; 0.0848s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;-alloca-addr-is-aligned.: 0.084826s (num_starts 1; 0.0848s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.084899s (num_starts 2; 0.0424s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-below-isp-houdini-guess.: 0.085242s (num_starts 3; 0.0284s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085317s (num_starts 1; 0.0853s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.085371s (num_starts 1; 0.0854s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.085545s (num_starts 2; 0.0428s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-sizes-are-equal-houdini-guess.: 0.085663s (num_starts 2; 0.0428s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);mem-allocs-equality;-trivial.: 0.086034s (num_starts 4; 0.0215s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.086092s (num_starts 4; 0.0215s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086117s (num_starts 1; 0.0861s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086254s (num_starts 1; 0.0863s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.0863s (num_starts 1; 0.0863s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086426s (num_starts 1; 0.0864s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086432s (num_starts 1; 0.0864s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.086458s (num_starts 1; 0.0865s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;-alloca-addr-no-overflow.: 0.086465s (num_starts 1; 0.0865s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-trivial.: 0.086939s (num_starts 4; 0.0217s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-trivial.: 0.086952s (num_starts 4; 0.0217s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.087279s (num_starts 4; 0.0218s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087335s (num_starts 1; 0.0873s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087343s (num_starts 1; 0.0873s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.087554s (num_starts 2; 0.0438s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.08765s (num_starts 2; 0.0438s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.087775s (num_starts 2; 0.0439s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.087823s (num_starts 5; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.087904s (num_starts 3; 0.0293s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.087912s (num_starts 3; 0.0293s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.088163s (num_starts 6; 0.0147s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.088325s (num_starts 6; 0.0147s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08856s (num_starts 1; 0.0886s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-ineq-houdini-guess.: 0.088563s (num_starts 4; 0.0221s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088566s (num_starts 1; 0.0886s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-below-isp-houdini-guess.: 0.088571s (num_starts 3; 0.0295s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-eq-lsprel-guess-houdini-guess.: 0.088579s (num_starts 2; 0.0443s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.088616s (num_starts 5; 0.0177s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.088732s (num_starts 4; 0.0222s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-sizes-are-equal-houdini-guess.: 0.089064s (num_starts 4; 0.0223s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-eq-lsprel-guess-houdini-guess.: 0.089084s (num_starts 4; 0.0223s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.089231s (num_starts 2; 0.0446s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.089715s (num_starts 5; 0.0179s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.089718s (num_starts 5; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memlabel-is-absent-houdini-guess;-trivial.: 0.089935s (num_starts 4; 0.0225s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.090175s (num_starts 2; 0.0451s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.090656s (num_starts 137; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-.: 0.090708s (num_starts 5; 0.0181s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memeq-;-trivial.: 0.090981s (num_starts 4; 0.0227s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.091483s (num_starts 2; 0.0457s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.091769s (num_starts 4; 0.0229s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.091844s (num_starts 4; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-sizes-are-equal-houdini-guess;-trivial.: 0.092044s (num_starts 4; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.092458s (num_starts 4; 0.0231s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.092633s (num_starts 6; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-eq-lsprel-guess-houdini-guess.: 0.092656s (num_starts 6; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-sizes-are-equal-houdini-guess.: 0.092751s (num_starts 4; 0.0232s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.092966s (num_starts 6; 0.0155s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.092992s (num_starts 6; 0.0155s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memeq-;-trivial.: 0.093095s (num_starts 11; 0.0085s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.093319s (num_starts 1; 0.0933s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.09335s (num_starts 1; 0.0934s/start)
create_closure_matrix.: 0.093786s (num_starts 251; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.094058s (num_starts 3; 0.0314s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.094285s (num_starts 5; 0.0189s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.094481s (num_starts 4; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.094572s (num_starts 4; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);mem-allocs-equality;-trivial.: 0.094766s (num_starts 4; 0.0237s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);mem-allocs-equality.: 0.094817s (num_starts 4; 0.0237s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.094993s (num_starts 5; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-eq-lsprel-guess-houdini-guess.: 0.09534s (num_starts 4; 0.0238s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.095512s (num_starts 4; 0.0239s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.095518s (num_starts 4; 0.0239s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-trivial.: 0.095533s (num_starts 4; 0.0239s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-trivial.: 0.095534s (num_starts 4; 0.0239s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.095812s (num_starts 4; 0.0240s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);abstract-memlabel-asserts-houdini-guess.: 0.095862s (num_starts 4; 0.0240s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memlabel-is-absent-houdini-guess.: 0.09604s (num_starts 6; 0.0160s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096185s (num_starts 1; 0.0962s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096188s (num_starts 1; 0.0962s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);mem-allocs-equality.: 0.096199s (num_starts 1; 0.0962s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memlabel-is-absent-houdini-guess;-trivial.: 0.096632s (num_starts 6; 0.0161s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096698s (num_starts 1; 0.0967s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096704s (num_starts 1; 0.0967s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.096729s (num_starts 1; 0.0967s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;-alloca-addr-neq-zero.: 0.096737s (num_starts 1; 0.0967s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;memlabel-is-absent-houdini-guess;-trivial.: 0.097311s (num_starts 5; 0.0195s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-sizes-are-equal-houdini-guess.: 0.097483s (num_starts 6; 0.0162s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097965s (num_starts 1; 0.0980s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097969s (num_starts 1; 0.0980s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-sizes-are-equal-houdini-guess.: 0.099216s (num_starts 6; 0.0165s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.099482s (num_starts 5; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-addr-eq-houdini-guess.: 0.099648s (num_starts 6; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-addr-eq-houdini-guess.: 0.100129s (num_starts 6; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.100453s (num_starts 6; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-ineq-houdini-guess.: 0.100477s (num_starts 6; 0.0167s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.100988s (num_starts 6; 0.0168s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.102059s (num_starts 6; 0.0170s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.102099s (num_starts 3; 0.0340s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;sp-ml-lb-ineq-houdini-guess.: 0.102148s (num_starts 6; 0.0170s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.102237s (num_starts 2; 0.0511s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;mem-allocs-equality.: 0.102535s (num_starts 4; 0.0256s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);mem-allocs-equality;-trivial.: 0.102804s (num_starts 6; 0.0171s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.103035s (num_starts 6; 0.0172s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;linear;-trivial.: 0.104095s (num_starts 19; 0.0055s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.104604s (num_starts 137; 0.0008s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.104824s (num_starts 6; 0.0175s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memlabel-is-absent-houdini-guess;-trivial.: 0.105402s (num_starts 6; 0.0176s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.105418s (num_starts 6; 0.0176s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.106031s (num_starts 10; 0.0106s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.106056s (num_starts 6; 0.0177s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-eq-lsprel-guess-houdini-guess.: 0.106208s (num_starts 10; 0.0106s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.106249s (num_starts 6; 0.0177s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.107149s (num_starts 5; 0.0214s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-addr-eq-houdini-guess;-trivial.: 0.107538s (num_starts 6; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-addr-eq-houdini-guess.: 0.107563s (num_starts 6; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-sizes-are-equal-houdini-guess;-trivial.: 0.107573s (num_starts 6; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-sizes-are-equal-houdini-guess.: 0.107596s (num_starts 6; 0.0179s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.108065s (num_starts 10; 0.0108s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.108256s (num_starts 10; 0.0108s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.108784s (num_starts 5; 0.0218s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.109241s (num_starts 9; 0.0121s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-sizes-are-equal-houdini-guess;-trivial.: 0.109286s (num_starts 6; 0.0182s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.109341s (num_starts 6; 0.0182s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.109381s (num_starts 9; 0.0122s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.109456s (num_starts 5; 0.0219s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-ml-lb-ineq-houdini-guess.: 0.109517s (num_starts 8; 0.0137s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);mem-allocs-equality;-trivial.: 0.109977s (num_starts 6; 0.0183s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.110051s (num_starts 6; 0.0183s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);mem-allocs-equality.: 0.110197s (num_starts 6; 0.0184s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);abstract-memlabel-asserts-houdini-guess.: 0.110215s (num_starts 6; 0.0184s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.110877s (num_starts 2; 0.0554s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.11143s (num_starts 5; 0.0223s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.111511s (num_starts 5; 0.0223s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.111573s (num_starts 5; 0.0223s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.111599s (num_starts 5; 0.0223s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.1125s (num_starts 2; 0.0563s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.112806s (num_starts 10; 0.0113s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-ineq-houdini-guess.: 0.112962s (num_starts 10; 0.0113s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;mem-allocs-equality.: 0.113742s (num_starts 4; 0.0284s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.11376s (num_starts 6; 0.0190s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.113987s (num_starts 6; 0.0190s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.114777s (num_starts 3399; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.116066s (num_starts 5; 0.0232s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-ml-lb-ineq-houdini-guess.: 0.116364s (num_starts 8; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.116383s (num_starts 3; 0.0388s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.11642s (num_starts 2; 0.0582s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.11655s (num_starts 5; 0.0233s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.L0%0%d_L0%0%d.: 0.117657s (num_starts 7; 0.0168s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memlabel-is-absent-houdini-guess.: 0.118326s (num_starts 8; 0.0148s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.118561s (num_starts 5; 0.0237s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.118567s (num_starts 5; 0.0237s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memlabel-is-absent-houdini-guess.: 0.118629s (num_starts 6; 0.0198s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-addr-eq-houdini-guess;-trivial.: 0.119232s (num_starts 10; 0.0119s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-addr-eq-houdini-guess.: 0.119383s (num_starts 10; 0.0119s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.L0%0%d_L0%0%d.: 0.119462s (num_starts 7; 0.0171s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.119618s (num_starts 2; 0.0598s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;sp-below-isp-houdini-guess.: 0.120302s (num_starts 3; 0.0401s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.12124s (num_starts 7; 0.0173s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.121789s (num_starts 5; 0.0244s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.L0%0%d_L0%0%d.: 0.122282s (num_starts 7; 0.0175s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.L0%0%d_L0%0%d.: 0.123419s (num_starts 7; 0.0176s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-sizes-are-equal-houdini-guess;-trivial.: 0.123421s (num_starts 10; 0.0123s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);local-sizes-are-equal-houdini-guess.: 0.123599s (num_starts 10; 0.0124s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.123712s (num_starts 2; 0.0619s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.125661s (num_starts 7; 0.0180s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.126583s (num_starts 7; 0.0181s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memeq-;-trivial.: 0.126771s (num_starts 15; 0.0085s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.127041s (num_starts 2; 0.0635s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);memeq-.: 0.127209s (num_starts 15; 0.0085s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.128158s (num_starts 8; 0.0160s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.128273s (num_starts 8; 0.0160s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.128678s (num_starts 8; 0.0161s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-iscontiguous-houdini-guess.: 0.128795s (num_starts 8; 0.0161s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 0.128864s (num_starts 7; 0.0184s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.129838s (num_starts 2; 0.0649s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memlabel-is-absent-houdini-guess.: 0.129862s (num_starts 2; 0.0649s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.131016s (num_starts 3; 0.0437s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.131268s (num_starts 8; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.131382s (num_starts 8; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;ml-lb-ub-ineq-houdini-guess.: 0.133024s (num_starts 4; 0.0333s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.133548s (num_starts 8; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.133661s (num_starts 8; 0.0167s/start)
get_masked_array_constant.: 0.133704s (num_starts 262; 0.0005s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/.from.L0%0%d_L0%0%d.: 0.1341s (num_starts 3; 0.0447s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-addr-eq-houdini-guess;-trivial.: 0.134919s (num_starts 8; 0.0169s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-addr-eq-houdini-guess.: 0.135021s (num_starts 8; 0.0169s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memeq-;-trivial.: 0.135634s (num_starts 8; 0.0170s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.138461s (num_starts 2; 0.0692s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.139156s (num_starts 8; 0.0174s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.139302s (num_starts 8; 0.0174s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.139576s (num_starts 5; 0.0279s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.140433s (num_starts 8; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.140456s (num_starts 8; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.140601s (num_starts 8; 0.0176s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.140664s (num_starts 8; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.141505s (num_starts 8; 0.0177s/start)
evaluate_memmask.: 0.141505s (num_starts 262; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-ml-lb-ineq-houdini-guess.: 0.141608s (num_starts 8; 0.0177s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.141887s (num_starts 12; 0.0118s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.142223s (num_starts 12; 0.0119s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.142337s (num_starts 12; 0.0119s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-iscontiguous-houdini-guess.: 0.142652s (num_starts 12; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.143189s (num_starts 8; 0.0179s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.144853s (num_starts 12; 0.0121s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.145163s (num_starts 12; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;local-eq-lsprel-guess-houdini-guess.: 0.145689s (num_starts 4; 0.0364s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.147098s (num_starts 3; 0.0490s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.147125s (num_starts 12; 0.0123s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.14743s (num_starts 12; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147455s (num_starts 2; 0.0737s/start)
compute_expr_eqclasses_at_pc.: 0.148303s (num_starts 24; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.148731s (num_starts 2; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;local-sizes-are-equal-houdini-guess.: 0.150375s (num_starts 4; 0.0376s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.150541s (num_starts 2; 0.0753s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-.: 0.150894s (num_starts 5; 0.0302s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.151624s (num_starts 2; 0.0758s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-region-was-stack.: 0.151708s (num_starts 2; 0.0759s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-addr-eq-houdini-guess;-trivial.: 0.152174s (num_starts 12; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152199s (num_starts 2; 0.0761s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152214s (num_starts 2; 0.0761s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152222s (num_starts 2; 0.0761s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;ml-lb-ub-eq-houdini-guess;-trivial.: 0.152274s (num_starts 8; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-region-was-stack.: 0.152334s (num_starts 2; 0.0762s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152426s (num_starts 2; 0.0762s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-addr-eq-houdini-guess.: 0.15248s (num_starts 12; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-no-overflow.: 0.15252s (num_starts 2; 0.0763s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153154s (num_starts 2; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-neq-zero.: 0.153241s (num_starts 2; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153486s (num_starts 2; 0.0767s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.1535s (num_starts 2; 0.0767s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-iscontiguous-houdini-guess.: 0.153601s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.154048s (num_starts 1; 0.1540s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);false-predicate.: 0.154087s (num_starts 1; 0.1541s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.154322s (num_starts 2; 0.0772s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.154335s (num_starts 2; 0.0772s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.154436s (num_starts 2; 0.0772s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;nonarg-locals-iscontiguous-houdini-guess.: 0.154446s (num_starts 2; 0.0772s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.155454s (num_starts 12; 0.0130s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.155818s (num_starts 12; 0.0130s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156418s (num_starts 1; 0.1564s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);false-predicate.: 0.156452s (num_starts 1; 0.1565s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156615s (num_starts 2; 0.0783s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-no-overflow.: 0.156731s (num_starts 2; 0.0784s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.156939s (num_starts 8; 0.0196s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156975s (num_starts 1; 0.1570s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);false-predicate.: 0.157016s (num_starts 1; 0.1570s/start)
get_sprel_map_pair_at_pc.: 0.157584s (num_starts 651; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.15848s (num_starts 2; 0.0792s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.158529s (num_starts 31; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-neq-zero.: 0.158598s (num_starts 2; 0.0793s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159355s (num_starts 1; 0.1594s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);false-predicate.: 0.159412s (num_starts 1; 0.1594s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159441s (num_starts 2; 0.0797s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159462s (num_starts 2; 0.0797s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-is-aligned.: 0.159542s (num_starts 2; 0.0798s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160222s (num_starts 2; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160291s (num_starts 2; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160305s (num_starts 2; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-iscontiguous-houdini-guess.: 0.160413s (num_starts 2; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160917s (num_starts 2; 0.0805s/start)
cg_add_node.: 0.161049s (num_starts 31; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161303s (num_starts 2; 0.0807s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161316s (num_starts 2; 0.0807s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.161412s (num_starts 2; 0.0807s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;nonarg-locals-iscontiguous-houdini-guess.: 0.161423s (num_starts 2; 0.0807s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-ineq-houdini-guess.: 0.161472s (num_starts 6; 0.0269s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161809s (num_starts 2; 0.0809s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-dst-edgecond-implies-src-edgecond.: 0.162365s (num_starts 3; 0.0541s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;nonarg-locals-iscontiguous-houdini-guess.: 0.162816s (num_starts 4; 0.0407s/start)
create_sp_version_relations_lattice_at_pc.: 0.163122s (num_starts 251; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.163192s (num_starts 10; 0.0163s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.163441s (num_starts 2; 0.0817s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.163454s (num_starts 2; 0.0817s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.163454s (num_starts 2; 0.0817s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.163545s (num_starts 2; 0.0818s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-is-aligned.: 0.163572s (num_starts 2; 0.0818s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;linear;-trivial.: 0.164041s (num_starts 30; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.164208s (num_starts 2; 0.0821s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.164221s (num_starts 2; 0.0821s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-iscontiguous-houdini-guess.: 0.164996s (num_starts 4; 0.0412s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;memeq-;-trivial.: 0.165684s (num_starts 9; 0.0184s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.167377s (num_starts 5; 0.0335s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-ineq-houdini-guess.: 0.168297s (num_starts 6; 0.0280s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168392s (num_starts 2; 0.0842s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168405s (num_starts 2; 0.0842s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.168499s (num_starts 2; 0.0842s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168804s (num_starts 2; 0.0844s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16882s (num_starts 2; 0.0844s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.168934s (num_starts 2; 0.0845s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.169142s (num_starts 4; 0.0423s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169177s (num_starts 2; 0.0846s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169191s (num_starts 2; 0.0846s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.169293s (num_starts 2; 0.0846s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-dst-edgecond-implies-src-edgecond.: 0.170636s (num_starts 3; 0.0569s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.17158s (num_starts 12; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-below-isp-houdini-guess.: 0.171843s (num_starts 3; 0.0573s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);sp-ml-lb-ineq-houdini-guess.: 0.171927s (num_starts 12; 0.0143s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-trivial.: 0.174045s (num_starts 13; 0.0134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-eq-lsprel-guess-houdini-guess.: 0.174201s (num_starts 6; 0.0290s/start)
graph_to_stream.: 0.17678s (num_starts 6; 0.0295s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.177075s (num_starts 4; 0.0443s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.17777s (num_starts 2; 0.0889s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.178949s (num_starts 1500; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.179576s (num_starts 6; 0.0299s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.179643s (num_starts 1; 0.1796s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);false-predicate.: 0.179675s (num_starts 1; 0.1797s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-eq-lsprel-guess-houdini-guess.: 0.181801s (num_starts 6; 0.0303s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183923s (num_starts 1; 0.1839s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);false-predicate.: 0.183956s (num_starts 1; 0.1840s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;memlabel-is-absent-houdini-guess.: 0.184782s (num_starts 6; 0.0308s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.185548s (num_starts 2; 0.0928s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.185566s (num_starts 2; 0.0928s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.185648s (num_starts 2; 0.0928s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;nonarg-locals-iscontiguous-houdini-guess.: 0.185659s (num_starts 2; 0.0928s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.186768s (num_starts 6; 0.0311s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.187985s (num_starts 1; 0.1880s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);false-predicate.: 0.188027s (num_starts 1; 0.1880s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.188373s (num_starts 1; 0.1884s/start)
tfg_asm_t::tfg_postprocess_after_pointsto_analysis.: 0.188636s (num_starts 1; 0.1886s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.188713s (num_starts 1; 0.1887s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);false-predicate.: 0.188757s (num_starts 1; 0.1888s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);abstract-memlabel-asserts-houdini-guess.: 0.18901s (num_starts 3; 0.0630s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.190874s (num_starts 2; 0.0954s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.190944s (num_starts 3; 0.0636s/start)
counter_example_falsifies_preds.: 0.192107s (num_starts 340; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.192179s (num_starts 12; 0.0160s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.192234s (num_starts 12; 0.0160s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-ml-lb-ineq-houdini-guess.: 0.192284s (num_starts 12; 0.0160s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.192347s (num_starts 12; 0.0160s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.19273s (num_starts 1; 0.1927s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.193411s (num_starts 2; 0.0967s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.193424s (num_starts 2; 0.0967s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.193509s (num_starts 2; 0.0968s/start)
create_new_corr_graph_edge.new_node.: 0.19684s (num_starts 30; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.197467s (num_starts 3; 0.0658s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.197679s (num_starts 2; 0.0988s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.198287s (num_starts 3; 0.0661s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.199229s (num_starts 1; 0.1992s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);false-predicate.: 0.199266s (num_starts 1; 0.1993s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.199734s (num_starts 1; 0.1997s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);false-predicate.: 0.199781s (num_starts 1; 0.1998s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.199958s (num_starts 1; 0.2000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;-dst-edgecond-implies-src-edgecond.: 0.2006s (num_starts 3; 0.0669s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memeq-.: 0.20211s (num_starts 4; 0.0505s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.203436s (num_starts 1; 0.2034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);false-predicate.: 0.203493s (num_starts 1; 0.2035s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.20377s (num_starts 1; 0.2038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.20378s (num_starts 1; 0.2038s/start)
bv_const_ref_map2expr_map.: 0.204445s (num_starts 3674; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.204932s (num_starts 3; 0.0683s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.204945s (num_starts 3; 0.0683s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.207113s (num_starts 1; 0.2071s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.207217s (num_starts 1; 0.2072s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.207219s (num_starts 1; 0.2072s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.207219s (num_starts 1; 0.2072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.20722s (num_starts 1; 0.2072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.20723s (num_starts 1; 0.2072s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main;dst_edge_composition_proves_false.: 0.207232s (num_starts 1; 0.2072s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 0.207234s (num_starts 1; 0.2072s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.207236s (num_starts 1; 0.2072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.2088s (num_starts 1; 0.2088s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);false-predicate.: 0.208845s (num_starts 1; 0.2088s/start)
invariant_inference_xfer.sp-below-isp.from.L0%0%d_L0%0%d.: 0.209362s (num_starts 7; 0.0299s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.209411s (num_starts 1; 0.2094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);false-predicate.: 0.209461s (num_starts 1; 0.2095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.210766s (num_starts 2; 0.1054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21213s (num_starts 1; 0.2121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);false-predicate.: 0.212165s (num_starts 1; 0.2122s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.212722s (num_starts 18; 0.0118s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.213167s (num_starts 18; 0.0118s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.L0%0%d_L0%0%d.: 0.214192s (num_starts 7; 0.0306s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memlabel-is-absent-houdini-guess.: 0.214346s (num_starts 8; 0.0268s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.3.0.from.L0%0%d_L0%0%d.: 0.214864s (num_starts 7; 0.0307s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.215028s (num_starts 1500; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.21657s (num_starts 11; 0.0197s/start)
create_new_corr_graph_edge.: 0.216809s (num_starts 30; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-eq-houdini-guess.: 0.217234s (num_starts 2; 0.1086s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.217466s (num_starts 3; 0.0725s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.L0%0%d_L0%0%d.: 0.218004s (num_starts 7; 0.0311s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.218146s (num_starts 3; 0.0727s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.219205s (num_starts 20; 0.0110s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-ml-lb-ineq-houdini-guess.: 0.219503s (num_starts 20; 0.0110s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.219957s (num_starts 23; 0.0096s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.222687s (num_starts 1; 0.2227s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);false-predicate.: 0.222732s (num_starts 1; 0.2227s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.222904s (num_starts 3; 0.0743s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.22413s (num_starts 4; 0.0560s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.boolbv;-trivial.: 0.224346s (num_starts 3; 0.0748s/start)
decide_hoare_triple_helper;per-query-type;exit.boolbv;-trivial.: 0.224349s (num_starts 3; 0.0748s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;exit.boolbv;-trivial.: 0.224356s (num_starts 3; 0.0748s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.boolbv;-trivial.: 0.22436s (num_starts 3; 0.0748s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.224611s (num_starts 651; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.226489s (num_starts 3; 0.0755s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI4_L0%1%allocaI2.inductive-invariants.: 0.22819s (num_starts 4; 0.0570s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.228558s (num_starts 5520; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;sp-below-isp-houdini-guess;-trivial.: 0.229585s (num_starts 13; 0.0177s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.230263s (num_starts 15; 0.0154s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.23119s (num_starts 3; 0.0771s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);sp-below-isp-houdini-guess.: 0.231456s (num_starts 3; 0.0772s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.232253s (num_starts 3; 0.0774s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.233847s (num_starts 1; 0.2338s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);false-predicate.: 0.233862s (num_starts 1; 0.2339s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.233908s (num_starts 3; 0.0780s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.233924s (num_starts 3; 0.0780s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);mem-allocs-equality.: 0.23396s (num_starts 3; 0.0780s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.234051s (num_starts 3; 0.0780s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.234063s (num_starts 3; 0.0780s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-eq-houdini-guess;-trivial.: 0.236336s (num_starts 16; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.236416s (num_starts 2; 0.1182s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.236507s (num_starts 3; 0.0788s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.236509s (num_starts 2; 0.1183s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.237538s (num_starts 3; 0.0792s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.237643s (num_starts 3; 0.0792s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.237838s (num_starts 3; 0.0793s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.23846s (num_starts 3; 0.0795s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.238596s (num_starts 31; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.238651s (num_starts 2; 0.1193s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.238656s (num_starts 3; 0.0796s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.L0%0%d_L0%0%d.: 0.238723s (num_starts 7; 0.0341s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-eq-houdini-guess.: 0.238749s (num_starts 2; 0.1194s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.23922s (num_starts 1; 0.2392s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);false-predicate.: 0.239231s (num_starts 1; 0.2392s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.239798s (num_starts 3; 0.0799s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.240002s (num_starts 3; 0.0800s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memlabel-is-absent-houdini-guess.: 0.240417s (num_starts 6; 0.0401s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.243274s (num_starts 3; 0.0811s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.243365s (num_starts 3; 0.0811s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.243384s (num_starts 3; 0.0811s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.243619s (num_starts 3; 0.0812s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon).: 0.243632s (num_starts 3; 0.0812s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24409s (num_starts 2; 0.1220s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);-trivial.: 0.245638s (num_starts 27; 0.0091s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.245775s (num_starts 3; 0.0819s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.245972s (num_starts 3; 0.0820s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);sp-below-isp-houdini-guess.: 0.246362s (num_starts 5; 0.0493s/start)
check_wfconds_on_edge.Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1.: 0.246377s (num_starts 3; 0.0821s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.24826s (num_starts 3; 0.0828s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.L0%0%d_L0%0%d.: 0.248456s (num_starts 7; 0.0355s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.248624s (num_starts 1500; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;ml-lb-addr-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.249272s (num_starts 3; 0.0831s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.249295s (num_starts 3; 0.0831s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250336s (num_starts 3; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memeq-.: 0.251118s (num_starts 4; 0.0628s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.251484s (num_starts 3; 0.0838s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.252569s (num_starts 3; 0.0842s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.25395s (num_starts 3; 0.0847s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.254139s (num_starts 3; 0.0847s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);linear;-trivial.: 0.255727s (num_starts 15; 0.0170s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.256422s (num_starts 2; 0.1282s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.256434s (num_starts 2; 0.1282s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.256536s (num_starts 2; 0.1283s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3.: 0.256772s (num_starts 5; 0.0514s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.257521s (num_starts 3; 0.0858s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.257586s (num_starts 3; 0.0859s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.257733s (num_starts 6; 0.0430s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.257998s (num_starts 2; 0.1290s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-eq-houdini-guess.: 0.258109s (num_starts 2; 0.1291s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.25936s (num_starts 3; 0.0865s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.259865s (num_starts 3; 0.0866s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.262615s (num_starts 2; 0.1313s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.262629s (num_starts 2; 0.1313s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.262754s (num_starts 2; 0.1314s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-.: 0.264453s (num_starts 5; 0.0529s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.265388s (num_starts 5; 0.0531s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.265797s (num_starts 4; 0.0664s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memeq-.: 0.26584s (num_starts 4; 0.0665s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.266001s (num_starts 7; 0.0380s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.266825s (num_starts 3; 0.0889s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memeq-;-trivial.: 0.268356s (num_starts 16; 0.0168s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memeq-.: 0.268593s (num_starts 16; 0.0168s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.270551s (num_starts 6; 0.0451s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);abstract-memlabel-asserts-houdini-guess.: 0.273036s (num_starts 5; 0.0546s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;mem-allocs-equality;-trivial.: 0.275295s (num_starts 12; 0.0229s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-eq-houdini-guess.: 0.275498s (num_starts 4; 0.0689s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.278197s (num_starts 6; 0.0464s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.278355s (num_starts 4; 0.0696s/start)
query:convert_to_z3.: 0.279912s (num_starts 5805; 0.0000s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.280202s (num_starts 3; 0.0934s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.280569s (num_starts 4; 0.0701s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-dst-edgecond-implies-src-edgecond.: 0.280729s (num_starts 4; 0.0702s/start)
ldr_decompose_and_linear_solve.: 0.283597s (num_starts 305; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.285027s (num_starts 6; 0.0475s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.286879s (num_starts 3; 0.0956s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.290255s (num_starts 6; 0.0484s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.290361s (num_starts 13; 0.0223s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.291593s (num_starts 4; 0.0729s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.292926s (num_starts 3; 0.0976s/start)
bv_linear_solve.: 0.294527s (num_starts 305; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.294868s (num_starts 8; 0.0369s/start)
query:bv_solve.: 0.296134s (num_starts 305; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-.: 0.298035s (num_starts 15; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.298698s (num_starts 16; 0.0187s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memeq-;-trivial.: 0.298737s (num_starts 24; 0.0124s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);memeq-.: 0.299402s (num_starts 24; 0.0125s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.300033s (num_starts 4; 0.0750s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.30335s (num_starts 4; 0.0758s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memeq-.: 0.303555s (num_starts 4; 0.0759s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;ml-lb-ub-eq-houdini-guess.: 0.303558s (num_starts 4; 0.0759s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.304707s (num_starts 4; 0.0762s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-dst-edgecond-implies-src-edgecond.: 0.304923s (num_starts 4; 0.0762s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.305801s (num_starts 3; 0.1019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.305965s (num_starts 3; 0.1020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;linear;-trivial.: 0.306346s (num_starts 18; 0.0170s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.308223s (num_starts 17; 0.0181s/start)
copy_masked_mappings.: 0.308548s (num_starts 13925; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.314642s (num_starts 4; 0.0787s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memeq-.: 0.314917s (num_starts 4; 0.0787s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);linear;-trivial.: 0.316076s (num_starts 26; 0.0122s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.320639s (num_starts 3; 0.1069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.320661s (num_starts 3; 0.1069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.32081s (num_starts 3; 0.1069s/start)
decide_hoare_triple_helper;per-query-type;sp-below-isp-houdini-guess;-trivial.: 0.325931s (num_starts 26; 0.0125s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.329171s (num_starts 3; 0.1097s/start)
cg_with_dst_ml_check::get_aliasing_constraints_for_edge.: 0.33068s (num_starts 3; 0.1102s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.331747s (num_starts 3; 0.1106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.331774s (num_starts 3; 0.1106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.331913s (num_starts 3; 0.1106s/start)
populate_simplified_to_state.: 0.333144s (num_starts 84; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.334069s (num_starts 4; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.334424s (num_starts 3; 0.1115s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.334564s (num_starts 3; 0.1115s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.335708s (num_starts 4; 0.0839s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.335739s (num_starts 4; 0.0839s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.340648s (num_starts 1582; 0.0002s/start)
populate_simplified_assets.: 0.342212s (num_starts 168; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.34293s (num_starts 4; 0.0857s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.343002s (num_starts 4; 0.0858s/start)
bv_solve_returning_intermediate_structures.: 0.343346s (num_starts 305; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.34368s (num_starts 4; 0.0859s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.34409s (num_starts 4; 0.0860s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.346445s (num_starts 3; 0.1155s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.348049s (num_starts 2; 0.1740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.350292s (num_starts 6; 0.0584s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.350656s (num_starts 1; 0.3507s/start)
decide_hoare_triple_helper;per-query-type;exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.350663s (num_starts 1; 0.3507s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.350671s (num_starts 1; 0.3507s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.350682s (num_starts 1; 0.3507s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.351524s (num_starts 3; 0.1172s/start)
dst_edge_composition_proves_false.: 0.351724s (num_starts 1; 0.3517s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.352089s (num_starts 6; 0.0587s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.353779s (num_starts 2; 0.1769s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.353933s (num_starts 3; 0.1180s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.353951s (num_starts 3; 0.1180s/start)
get_next_dst_edge_composition_to_correlate.: 0.354021s (num_starts 2; 0.1770s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.354077s (num_starts 3; 0.1180s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;false-predicate.: 0.354843s (num_starts 3; 0.1183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.357703s (num_starts 8; 0.0447s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.358277s (num_starts 8; 0.0448s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;memeq-;-trivial.: 0.359288s (num_starts 20; 0.0180s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;false-predicate.: 0.362817s (num_starts 3; 0.1209s/start)
counter_example_satisfies_preds.: 0.364458s (num_starts 2238; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.365132s (num_starts 4; 0.0913s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.365237s (num_starts 4; 0.0913s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-eq-lsprel-guess-houdini-guess.: 0.369013s (num_starts 8; 0.0461s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.37003s (num_starts 4; 0.0925s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-neq-zero.: 0.370144s (num_starts 4; 0.0925s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.370277s (num_starts 4; 0.0926s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-region-was-stack.: 0.370377s (num_starts 4; 0.0926s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.370873s (num_starts 4; 0.0927s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-no-overflow.: 0.370978s (num_starts 4; 0.0927s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.371325s (num_starts 30; 0.0124s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memeq-.: 0.371845s (num_starts 15; 0.0248s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372097s (num_starts 4; 0.0930s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.372259s (num_starts 4; 0.0931s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.37287s (num_starts 5; 0.0746s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.373378s (num_starts 4; 0.0933s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.373437s (num_starts 4; 0.0934s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.373448s (num_starts 4; 0.0934s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.375533s (num_starts 4; 0.0939s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.375683s (num_starts 4; 0.0939s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.376444s (num_starts 8; 0.0471s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.376539s (num_starts 8; 0.0471s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.379146s (num_starts 4; 0.0948s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;sp-below-isp-houdini-guess.: 0.382083s (num_starts 15; 0.0255s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.384195s (num_starts 4; 0.0960s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-is-aligned.: 0.384304s (num_starts 4; 0.0961s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.385018s (num_starts 2; 0.1925s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-eq-houdini-guess.: 0.385062s (num_starts 2; 0.1925s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.386653s (num_starts 4; 0.0967s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.386834s (num_starts 4; 0.0967s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.386922s (num_starts 5; 0.0774s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.388024s (num_starts 5; 0.0776s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.388078s (num_starts 5; 0.0776s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-.: 0.388334s (num_starts 5; 0.0777s/start)
bvsolve_cache_query.miss1.: 0.388398s (num_starts 305; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memlabel-is-absent-houdini-guess.: 0.38848s (num_starts 10; 0.0388s/start)
decide_hoare_triple_helper;per-path;Lentry%2%allocaI4_L0%1%allocaI2;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.389127s (num_starts 2; 0.1946s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI4_L0%1%allocaI2;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.38913s (num_starts 2; 0.1946s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI4_L0%1%allocaI2;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.389156s (num_starts 2; 0.1946s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI4_L0%1%allocaI2;(epsilon);pred-type-unknown.: 0.389228s (num_starts 2; 0.1946s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI4_L0%1%allocaI2;(epsilon);pred-type-unknown.: 0.389257s (num_starts 2; 0.1946s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.390063s (num_starts 4; 0.0975s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.390131s (num_starts 4; 0.0975s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.391564s (num_starts 651; 0.0006s/start)
bvsolve_cache_query.: 0.393432s (num_starts 305; 0.0013s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.394208s (num_starts 5; 0.0788s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.395555s (num_starts 19; 0.0208s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.396048s (num_starts 2; 0.1980s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.398592s (num_starts 5; 0.0797s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);mem-allocs-equality.: 0.398803s (num_starts 5; 0.0798s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.399393s (num_starts 4; 0.0998s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.399603s (num_starts 4; 0.0999s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.400292s (num_starts 5; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.400962s (num_starts 4; 0.1002s/start)
tfg::get_aliasing_constraints_for_edge.: 0.401096s (num_starts 313; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.401134s (num_starts 4; 0.1003s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.402606s (num_starts 5; 0.0805s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.402679s (num_starts 5; 0.0805s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-addr-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.402718s (num_starts 5; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.40424s (num_starts 4; 0.1011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.40441s (num_starts 4; 0.1011s/start)
decide_hoare_triple_helper;per-path;Lentry%2%allocaI4_L0%1%allocaI2;(epsilon).: 0.405409s (num_starts 3; 0.1351s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.409349s (num_starts 20; 0.0205s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.409527s (num_starts 5; 0.0819s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.413807s (num_starts 6; 0.0690s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.413885s (num_starts 9; 0.0460s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.414231s (num_starts 2; 0.2071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-eq-houdini-guess.: 0.414253s (num_starts 2; 0.2071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.416171s (num_starts 9; 0.0462s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;false-predicate.: 0.416494s (num_starts 3; 0.1388s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.416685s (num_starts 5; 0.0833s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.420998s (num_starts 24; 0.0175s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.421238s (num_starts 84; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.423034s (num_starts 8; 0.0529s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.42324s (num_starts 8; 0.0529s/start)
decide_hoare_triple_helper;per-query-type;mem-allocs-equality;-trivial.: 0.424389s (num_starts 25; 0.0170s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.424407s (num_starts 5; 0.0849s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.426015s (num_starts 3; 0.1420s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.426027s (num_starts 3; 0.1420s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;pred-type-unknown.: 0.42613s (num_starts 3; 0.1420s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 0.426143s (num_starts 3; 0.1420s/start)
invariant_inference_xfer.memlabel-is-absent.from.L0%0%d_L0%0%d.: 0.42619s (num_starts 7; 0.0609s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;local-sizes-are-equal-houdini-guess;-trivial.: 0.426407s (num_starts 22; 0.0194s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.429818s (num_starts 1582; 0.0003s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.432676s (num_starts 5; 0.0865s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memlabel-is-absent-houdini-guess.: 0.434268s (num_starts 8; 0.0543s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.435318s (num_starts 5; 0.0871s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;memlabel-is-absent-houdini-guess;-trivial.: 0.435782s (num_starts 24; 0.0182s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-ineq-houdini-guess.: 0.436354s (num_starts 8; 0.0545s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.436779s (num_starts 5; 0.0874s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.438822s (num_starts 8; 0.0549s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.438921s (num_starts 8; 0.0549s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.440178s (num_starts 3; 0.1467s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.441483s (num_starts 5; 0.0883s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.442933s (num_starts 5; 0.0886s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-eq-houdini-guess.: 0.447288s (num_starts 4; 0.1118s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);linear;-trivial.: 0.447593s (num_starts 24; 0.0186s/start)
decide_hoare_triple_helper;per-query-type;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.448688s (num_starts 6; 0.0748s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.449365s (num_starts 5; 0.0899s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.450817s (num_starts 5; 0.0902s/start)
query:convert_from_z3.: 0.454848s (num_starts 5805; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;abstract-memlabel-asserts-houdini-guess.: 0.454867s (num_starts 15; 0.0303s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.460703s (num_starts 8; 0.0576s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.460809s (num_starts 8; 0.0576s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.46585s (num_starts 5; 0.0932s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-.: 0.466062s (num_starts 5; 0.0932s/start)
invariant_inference_xfer.mem-allocs-equality.from.L0%0%d_L0%0%d.: 0.466315s (num_starts 7; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-sizes-are-equal-houdini-guess.: 0.471421s (num_starts 8; 0.0589s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memeq-.: 0.472002s (num_starts 15; 0.0315s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.472486s (num_starts 9; 0.0525s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.473063s (num_starts 2; 0.2365s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.477125s (num_starts 6; 0.0795s/start)
decide_hoare_triple_helper;per-query-type;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.478934s (num_starts 35; 0.0137s/start)
solve_for_bv_points.: 0.481252s (num_starts 305; 0.0016s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.481274s (num_starts 5; 0.0963s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.481831s (num_starts 29; 0.0166s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);false-predicate.: 0.482244s (num_starts 3; 0.1607s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.482654s (num_starts 6; 0.0804s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.483993s (num_starts 7; 0.0691s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.485985s (num_starts 8; 0.0607s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.486103s (num_starts 8; 0.0608s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.488097s (num_starts 5; 0.0976s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.490268s (num_starts 6; 0.0817s/start)
decide_hoare_triple_helper;per-query-type;sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.490302s (num_starts 6; 0.0817s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;ml-lb-addr-eq-houdini-guess;-trivial.: 0.491667s (num_starts 27; 0.0182s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.491902s (num_starts 6; 0.0820s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.492991s (num_starts 3; 0.1643s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.4931s (num_starts 5; 0.0986s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);false-predicate.: 0.493169s (num_starts 3; 0.1644s/start)
predicate_canonicalized.: 0.496142s (num_starts 5233; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.497293s (num_starts 3; 0.1658s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);false-predicate.: 0.497484s (num_starts 3; 0.1658s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.499891s (num_starts 5; 0.1000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.501089s (num_starts 6; 0.0835s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.501579s (num_starts 6; 0.0836s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.503752s (num_starts 3; 0.1679s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.505844s (num_starts 6; 0.0843s/start)
tfg_run_pointsto_analysis_asm.: 0.50734s (num_starts 1; 0.5073s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.50859s (num_starts 6; 0.0848s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.508936s (num_starts 6; 0.0848s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;mem-allocs-equality.: 0.509527s (num_starts 15; 0.0340s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.511758s (num_starts 6; 0.0853s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-no-overflow.: 0.512138s (num_starts 6; 0.0854s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.5134s (num_starts 6; 0.0856s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-region-was-stack.: 0.513747s (num_starts 6; 0.0856s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.520488s (num_starts 36; 0.0145s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.521095s (num_starts 5; 0.1042s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);linear;-trivial.: 0.521725s (num_starts 44; 0.0119s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.523943s (num_starts 6; 0.0873s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-neq-zero.: 0.524306s (num_starts 6; 0.0874s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.524492s (num_starts 12; 0.0437s/start)
decide_hoare_triple_helper;per-query-type;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.525663s (num_starts 7; 0.0751s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.52595s (num_starts 6; 0.0877s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.526444s (num_starts 6; 0.0877s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.527425s (num_starts 6; 0.0879s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.527445s (num_starts 6; 0.0879s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.527483s (num_starts 6; 0.0879s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.527848s (num_starts 6; 0.0880s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.527905s (num_starts 6; 0.0880s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.528672s (num_starts 6; 0.0881s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.529029s (num_starts 12; 0.0441s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.529376s (num_starts 3; 0.1765s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.530206s (num_starts 5; 0.1060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-eq-houdini-guess.: 0.530411s (num_starts 5; 0.1061s/start)
check_wfconds_on_edge.Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1.: 0.532522s (num_starts 6; 0.0888s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.534082s (num_starts 6; 0.0890s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI4_L0%1%allocaI4.inductive-invariants.: 0.535842s (num_starts 50; 0.0107s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-eq-lsprel-guess-houdini-guess.: 0.536776s (num_starts 12; 0.0447s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-iscontiguous-houdini-guess.: 0.537519s (num_starts 8; 0.0672s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.539441s (num_starts 6; 0.0899s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-alloca-addr-is-aligned.: 0.539825s (num_starts 6; 0.0900s/start)
decide_hoare_triple_helper;per-query-type;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.543089s (num_starts 37; 0.0147s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI4;(epsilon).: 0.543801s (num_starts 7; 0.0777s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.547189s (num_starts 6; 0.0912s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.547645s (num_starts 6; 0.0913s/start)
counter_example_evaluate_preds.: 0.551065s (num_starts 2578; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.memeq;-trivial.: 0.551147s (num_starts 8; 0.0689s/start)
decide_hoare_triple_helper;per-query-type;exit.memeq;-trivial.: 0.551152s (num_starts 8; 0.0689s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;exit.memeq;-trivial.: 0.551159s (num_starts 8; 0.0689s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.memeq;-trivial.: 0.551167s (num_starts 8; 0.0689s/start)
decide_hoare_triple_helper;per-query-type;local-sizes-are-equal-houdini-guess;-trivial.: 0.55234s (num_starts 41; 0.0135s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.55417s (num_starts 11; 0.0504s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.554357s (num_starts 3; 0.1848s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.559354s (num_starts 3; 0.1865s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.561784s (num_starts 6; 0.0936s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.562094s (num_starts 6; 0.0937s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.562245s (num_starts 6; 0.0937s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;false-predicate.: 0.563632s (num_starts 4; 0.1409s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.567367s (num_starts 6; 0.0946s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.567861s (num_starts 6; 0.0946s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.L0%0%d_L0%0%d.: 0.568194s (num_starts 7; 0.0812s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.568417s (num_starts 6; 0.0947s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.568891s (num_starts 6; 0.0948s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.572929s (num_starts 3; 0.1910s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.boolbv.: 0.575158s (num_starts 4; 0.1438s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;exit.boolbv.: 0.57517s (num_starts 4; 0.1438s/start)
decide_hoare_triple_helper;per-query-type;exit.boolbv.: 0.575179s (num_starts 4; 0.1438s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.boolbv.: 0.575192s (num_starts 4; 0.1438s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.578184s (num_starts 344; 0.0017s/start)
expr_substitute_using_available_exprs_submap.: 0.580591s (num_starts 1883; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.581034s (num_starts 3; 0.1937s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-ineq-houdini-guess.: 0.587128s (num_starts 12; 0.0489s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memlabel-is-absent-houdini-guess.: 0.588732s (num_starts 12; 0.0491s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.590618s (num_starts 3; 0.1969s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);false-predicate.: 0.590811s (num_starts 3; 0.1969s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.591892s (num_starts 12; 0.0493s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.594819s (num_starts 305; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.598028s (num_starts 12; 0.0498s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.600548s (num_starts 3; 0.2002s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);false-predicate.: 0.600751s (num_starts 3; 0.2003s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.612057s (num_starts 1558; 0.0004s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.614422s (num_starts 1558; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.61794s (num_starts 8; 0.0772s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.621249s (num_starts 8; 0.0777s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.622171s (num_starts 31960; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.622671s (num_starts 36; 0.0173s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-addr-eq-houdini-guess;-trivial.: 0.630863s (num_starts 49; 0.0129s/start)
decide_hoare_triple_helper;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.63351s (num_starts 4; 0.1584s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.634597s (num_starts 8; 0.0793s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.638466s (num_starts 4; 0.1596s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);local-sizes-are-equal-houdini-guess.: 0.63866s (num_starts 12; 0.0532s/start)
decide_hoare_triple_helper;per-query-type;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.640659s (num_starts 56; 0.0114s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.640864s (num_starts 3; 0.2136s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);false-predicate.: 0.641061s (num_starts 3; 0.2137s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.641387s (num_starts 15; 0.0428s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.652469s (num_starts 9; 0.0725s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-eq-houdini-guess.: 0.653686s (num_starts 6; 0.1089s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.654018s (num_starts 9; 0.0727s/start)
decide_hoare_triple_helper;per-query-type;memlabel-is-absent-houdini-guess;-trivial.: 0.660799s (num_starts 51; 0.0130s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);-trivial.: 0.662879s (num_starts 66; 0.0100s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.667938s (num_starts 137; 0.0049s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.671226s (num_starts 5; 0.1342s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memeq-.: 0.681983s (num_starts 16; 0.0426s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;memeq-.: 0.70019s (num_starts 15; 0.0467s/start)
compute_lr_status_for_expr.: 0.70148s (num_starts 2968; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.712293s (num_starts 38; 0.0187s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memeq-.: 0.712337s (num_starts 12; 0.0594s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.712441s (num_starts 38; 0.0187s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.716716s (num_starts 32; 0.0224s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.724087s (num_starts 63; 0.0115s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memeq-.: 0.731049s (num_starts 16; 0.0457s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.736351s (num_starts 8; 0.0920s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.736505s (num_starts 8; 0.0921s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.73699s (num_starts 8; 0.0921s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.737107s (num_starts 8; 0.0921s/start)
check_node_stability_after_CE_addition.: 0.740476s (num_starts 320; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;ml-lb-addr-eq-houdini-guess.: 0.741561s (num_starts 30; 0.0247s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.753118s (num_starts 8; 0.0941s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.753271s (num_starts 8; 0.0942s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.75377s (num_starts 8; 0.0942s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.753886s (num_starts 8; 0.0942s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.755373s (num_starts 6; 0.1259s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.755865s (num_starts 6; 0.1260s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.756648s (num_starts 137; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.756884s (num_starts 8; 0.0946s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;sp-ml-lb-ineq-houdini-guess.: 0.757229s (num_starts 28; 0.0270s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;-alloca-region-was-stack.: 0.757252s (num_starts 8; 0.0947s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.762981s (num_starts 9; 0.0848s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.769228s (num_starts 8; 0.0962s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.770216s (num_starts 8; 0.0963s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;-alloca-addr-no-overflow.: 0.770625s (num_starts 8; 0.0963s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.774221s (num_starts 8; 0.0968s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;-alloca-addr-neq-zero.: 0.774599s (num_starts 8; 0.0968s/start)
decide_hoare_triple_helper;per-query-type;sp-below-isp-houdini-guess.: 0.775549s (num_starts 32; 0.0242s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.785113s (num_starts 8; 0.0981s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;-alloca-addr-is-aligned.: 0.785483s (num_starts 8; 0.0982s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L0%1%allocaI3.: 0.78788s (num_starts 5; 0.1576s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.798285s (num_starts 4; 0.1996s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;false-predicate.: 0.798439s (num_starts 4; 0.1996s/start)
decide_hoare_triple_helper;per-path;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);-trivial.: 0.800899s (num_starts 15; 0.0534s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI4_L0%1%allocaI4.: 0.815452s (num_starts 5; 0.1631s/start)
avail_exprs_create_submap.: 0.825558s (num_starts 411; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.831369s (num_starts 5; 0.1663s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.831708s (num_starts 6; 0.1386s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-eq-houdini-guess.: 0.834064s (num_starts 6; 0.1390s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.838234s (num_starts 5825; 0.0001s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%2%allocaI3_L0%1%allocaI1.: 0.841049s (num_starts 3; 0.2803s/start)
decide_hoare_triple_helper;per-query-type;memeq-;-trivial.: 0.842809s (num_starts 65; 0.0130s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.844968s (num_starts 4; 0.2112s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;false-predicate.: 0.845149s (num_starts 4; 0.2113s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.850935s (num_starts 10; 0.0851s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-iscontiguous-houdini-guess.: 0.851697s (num_starts 12; 0.0710s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.886874s (num_starts 12; 0.0739s/start)
edge_composition_apply_trans_funs_on_pred.: 0.889583s (num_starts 1332; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.899119s (num_starts 10; 0.0899s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.90955s (num_starts 1582; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.936926s (num_starts 11; 0.0852s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;memlabel-is-absent-houdini-guess.: 0.942354s (num_starts 30; 0.0314s/start)
gen_pred_from_coeff_row.simplify.: 0.943144s (num_starts 3674; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;mem-allocs-equality.: 0.951176s (num_starts 32; 0.0297s/start)
query:simplify-z3.: 0.966647s (num_starts 11610; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.972221s (num_starts 12; 0.0810s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L0%1%allocaI3.inductive-invariants.: 1.00091s (num_starts 67; 0.0149s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.0062s (num_starts 9; 0.1118s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.00631s (num_starts 5; 0.2013s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 1.00692s (num_starts 9; 0.1119s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L0%1%allocaI1.: 1.01084s (num_starts 3; 0.3369s/start)
decide_hoare_triple_helper;per-query-type;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.01185s (num_starts 13; 0.0778s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);ml-lb-ub-eq-houdini-guess.: 1.01659s (num_starts 6; 0.1694s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);memeq-.: 1.02311s (num_starts 20; 0.0512s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.: 1.02432s (num_starts 3; 0.3414s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.0267s (num_starts 9; 0.1141s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);ml-lb-ub-eq-houdini-guess.: 1.02739s (num_starts 9; 0.1142s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-addr-eq-houdini-guess.: 1.03503s (num_starts 54; 0.0192s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.03655s (num_starts 4; 0.2591s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 1.04168s (num_starts 14254; 0.0001s/start)
propagate_nodece_across_edge.: 1.04579s (num_starts 215; 0.0049s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L0%1%allocaI1.inductive-invariants.: 1.0487s (num_starts 69; 0.0152s/start)
guarded_predicate_set_and.: 1.06357s (num_starts 651; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.07656s (num_starts 13; 0.0828s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lentry%2%allocaI3_L0%2%allocaI1).: 1.07885s (num_starts 33; 0.0327s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear.: 1.09313s (num_starts 13; 0.0841s/start)
reconcile_memvar_using_constituents.: 1.09602s (num_starts 2164; 0.0005s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);-trivial.: 1.09743s (num_starts 108; 0.0102s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L0%1%allocaI3.: 1.10793s (num_starts 5; 0.2216s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.10965s (num_starts 5; 0.2219s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.11584s (num_starts 12; 0.0930s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.11607s (num_starts 12; 0.0930s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 1.11682s (num_starts 12; 0.0931s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 1.11697s (num_starts 12; 0.0931s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-.: 1.11903s (num_starts 15; 0.0746s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.memeq;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.12174s (num_starts 4; 0.2804s/start)
decide_hoare_triple_helper;per-query-type;exit.memeq;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.12177s (num_starts 4; 0.2804s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;exit.memeq;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1218s (num_starts 4; 0.2804s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.memeq;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.12183s (num_starts 4; 0.2805s/start)
reconcile_segmentation_in_counter_example.: 1.12262s (num_starts 203; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.12453s (num_starts 6; 0.1874s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear.: 1.13016s (num_starts 11; 0.1027s/start)
decide_hoare_triple_helper;per-query-type;sp-ml-lb-ineq-houdini-guess.: 1.13238s (num_starts 62; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);linear.: 1.13638s (num_starts 10; 0.1136s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 1.14245s (num_starts 651; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1534s (num_starts 7; 0.1648s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 1.16137s (num_starts 31; 0.0375s/start)
decide_hoare_triple_helper;per-query-type;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.17144s (num_starts 13; 0.0901s/start)
check_dst_mls.: 1.18288s (num_starts 1; 1.1829s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.18335s (num_starts 13; 0.0910s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);linear.: 1.1924s (num_starts 22; 0.0542s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;local-sizes-are-equal-houdini-guess.: 1.19653s (num_starts 30; 0.0399s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20253s (num_starts 13; 0.0925s/start)
decide_hoare_triple.: 1.2085s (num_starts 9; 0.1343s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.21554s (num_starts 15; 0.0810s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon).: 1.21671s (num_starts 15; 0.0811s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2.: 1.22781s (num_starts 3; 0.4093s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;-dst-edgecond-implies-src-edgecond.: 1.22963s (num_starts 15; 0.0820s/start)
lhs_set_sort.: 1.23279s (num_starts 651; 0.0019s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 1.25135s (num_starts 4432; 0.0003s/start)
ce_reconcile_sorts.: 1.25212s (num_starts 286; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;local-eq-lsprel-guess-houdini-guess.: 1.26127s (num_starts 30; 0.0420s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.26462s (num_starts 8; 0.1581s/start)
decide_hoare_triple_helper;per-query-type;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.29831s (num_starts 15; 0.0866s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.29851s (num_starts 14; 0.0928s/start)
decide_hoare_triple_helper;per-query-type;-alloca-region-was-stack.: 1.29917s (num_starts 15; 0.0866s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);linear.: 1.31357s (num_starts 15; 0.0876s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.31765s (num_starts 15; 0.0878s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-no-overflow.: 1.31858s (num_starts 15; 0.0879s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;ml-lb-ub-ineq-houdini-guess.: 1.33347s (num_starts 30; 0.0444s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.33975s (num_starts 15; 0.0893s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-neq-zero.: 1.34063s (num_starts 15; 0.0894s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.34771s (num_starts 15; 0.0898s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-is-aligned.: 1.34865s (num_starts 15; 0.0899s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.36066s (num_starts 8; 0.1701s/start)
collect_inductive_preds_around_path.: 1.38321s (num_starts 1485; 0.0009s/start)
decide_hoare_triple_helper;per-query-type;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.40233s (num_starts 17; 0.0825s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.40233s (num_starts 9; 0.1558s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.4067s (num_starts 6; 0.2344s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;nonarg-locals-iscontiguous-houdini-guess.: 1.42018s (num_starts 24; 0.0592s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);linear.: 1.42437s (num_starts 20; 0.0712s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.44092s (num_starts 18; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.46328s (num_starts 16; 0.0915s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memeq-.: 1.46401s (num_starts 16; 0.0915s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.47126s (num_starts 16; 0.0920s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memeq-.: 1.47218s (num_starts 16; 0.0920s/start)
decide_hoare_triple_helper;per-path;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.47236s (num_starts 5; 0.2945s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.49738s (num_starts 12; 0.1248s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);expr-group-region_agrees_with_memlabel-houdini-guess.: 1.49791s (num_starts 12; 0.1248s/start)
segment_memory_and_perform_commonMEM_optimization.: 1.51192s (num_starts 651; 0.0023s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 1.5169s (num_starts 137; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.51777s (num_starts 12; 0.1265s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear.: 1.54999s (num_starts 14; 0.1107s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);-trivial.: 1.58059s (num_starts 124; 0.0127s/start)
apply_mask_and_overlay_array_constant.: 1.59599s (num_starts 4432; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;nonarg-locals-isprobably-contiguous-houdini-guess.: 1.59838s (num_starts 30; 0.0533s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.61903s (num_starts 9; 0.1799s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;ml-lb-ub-eq-houdini-guess.: 1.67085s (num_starts 20; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.memeq.: 1.67334s (num_starts 12; 0.1394s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;exit.memeq.: 1.67338s (num_starts 12; 0.1394s/start)
decide_hoare_triple_helper;per-query-type;exit.memeq.: 1.67342s (num_starts 12; 0.1395s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d);exit.memeq.: 1.67346s (num_starts 12; 0.1395s/start)
decide_hoare_triple_helper;per-query-type;memlabel-is-absent-houdini-guess.: 1.67463s (num_starts 64; 0.0262s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI4_L0%1%allocaI2.: 1.71959s (num_starts 3; 0.5732s/start)
decide_hoare_triple_helper;per-query-type;local-sizes-are-equal-houdini-guess.: 1.72561s (num_starts 54; 0.0320s/start)
src_tfg_counter_example_translate_on_edge_composition.delta1.: 1.73992s (num_starts 344; 0.0051s/start)
src_tfg_counter_example_translate_on_edge_composition.: 1.74146s (num_starts 344; 0.0051s/start)
decide_hoare_triple_helper;per-path;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);-trivial.: 1.74386s (num_starts 95; 0.0184s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L0%1%allocaI3.: 1.7721s (num_starts 5; 0.3544s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);-trivial.: 1.78409s (num_starts 117; 0.0152s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%2%allocaI3_L0%1%allocaI1.inductive-invariants.: 1.78452s (num_starts 16; 0.1115s/start)
gen_pred_from_coeff_row.: 1.81114s (num_starts 3674; 0.0005s/start)
compute_preds_for_bv_points.: 1.84786s (num_starts 333; 0.0055s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 1.84957s (num_starts 380; 0.0049s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.L0%0%d_L0%0%d.: 1.85438s (num_starts 7; 0.2649s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);linear.: 1.87491s (num_starts 24; 0.0781s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.94572s (num_starts 22; 0.0884s/start)
decide_hoare_triple_helper;per-query-type;local-eq-lsprel-guess-houdini-guess.: 1.94755s (num_starts 54; 0.0361s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-ineq-houdini-guess.: 1.96358s (num_starts 54; 0.0364s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);memeq-.: 1.98949s (num_starts 24; 0.0829s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.9899s (num_starts 11; 0.1809s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.99273s (num_starts 23; 0.0866s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.01733s (num_starts 23; 0.0877s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);memeq-.: 2.01895s (num_starts 24; 0.0841s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);linear.: 2.02588s (num_starts 45; 0.0450s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;linear;-trivial.: 2.03832s (num_starts 113; 0.0180s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 2.04262s (num_starts 9; 0.2270s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);linear.: 2.04285s (num_starts 22; 0.0929s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.04706s (num_starts 11; 0.1861s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 2.05907s (num_starts 74; 0.0278s/start)
corr_graph::get_aliasing_constraints_for_edge.: 2.05926s (num_starts 74; 0.0278s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.13729s (num_starts 18; 0.1187s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);expr-group-region_agrees_with_memlabel-houdini-guess.: 2.13868s (num_starts 18; 0.1188s/start)
put_smtlib_string_in_file.: 2.14088s (num_starts 1088; 0.0020s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 2.14957s (num_starts 651; 0.0033s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.16155s (num_starts 24; 0.0901s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 2.20376s (num_starts 651; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A8;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear.: 2.21082s (num_starts 21; 0.1053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.24617s (num_starts 11; 0.2042s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-iscontiguous-houdini-guess.: 2.24968s (num_starts 38; 0.0592s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.2577s (num_starts 27; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);linear.: 2.2687s (num_starts 20; 0.1134s/start)
tfg_relax_pointsto_vals_on_edge.: 2.269s (num_starts 117; 0.0194s/start)
decide_hoare_triple_helper;per-path;Lentry%2%allocaI4_L0%1%allocaI2;(Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d).: 2.27431s (num_starts 20; 0.1137s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 2.27655s (num_starts 99; 0.0230s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 2.34902s (num_starts 32; 0.0734s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 2.39346s (num_starts 78; 0.0307s/start)
collect_aliasing_constraints_around_path_helper.: 2.39532s (num_starts 384; 0.0062s/start)
collect_aliasing_constraints_around_path.: 2.39579s (num_starts 230; 0.0104s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.41944s (num_starts 12; 0.2016s/start)
parse_z3_model_neo.: 2.45782s (num_starts 276; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear.: 2.4679s (num_starts 22; 0.1122s/start)
counter_example_translate_on_edge_composition_helper.: 2.52896s (num_starts 2010; 0.0013s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-isprobably-contiguous-houdini-guess.: 2.53524s (num_starts 54; 0.0469s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.57494s (num_starts 12; 0.2146s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.59695s (num_starts 30; 0.0866s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);-trivial.: 2.60176s (num_starts 203; 0.0128s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear.: 2.60342s (num_starts 23; 0.1132s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI3;(epsilon).: 2.61487s (num_starts 31; 0.0844s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4.: 2.62271s (num_starts 6; 0.4371s/start)
read_counter_examples_from_channel.: 2.6245s (num_starts 143; 0.0184s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 2.733s (num_starts 225; 0.0121s/start)
compute_new_lr_status_on_locs.: 2.73358s (num_starts 137; 0.0200s/start)
decide_hoare_triple_helper;per-path;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.77199s (num_starts 30; 0.0924s/start)
decide_hoare_triple_helper;per-path;Lentry%2%allocaI3_L0%1%allocaI1;(epsilon).: 2.7963s (num_starts 31; 0.0902s/start)
check_wfconds_on_edge.Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2.: 2.7976s (num_starts 6; 0.4663s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.81554s (num_starts 13; 0.2166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.81572s (num_starts 13; 0.2166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.91327s (num_starts 28; 0.1040s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 3.19509s (num_starts 20; 0.1598s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;expr-group-region_agrees_with_memlabel-houdini-guess.: 3.22343s (num_starts 45; 0.0716s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.2407s (num_starts 17; 0.1906s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.29541s (num_starts 17; 0.1938s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 3.34143s (num_starts 21; 0.1591s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 3.36567s (num_starts 20; 0.1683s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.45367s (num_starts 17; 0.2032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.45592s (num_starts 16; 0.2160s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 3.50052s (num_starts 14492; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 3.51162s (num_starts 14254; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);linear.: 3.52961s (num_starts 51; 0.0692s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);linear.: 3.53s (num_starts 51; 0.0692s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.55273s (num_starts 15; 0.2368s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.55552s (num_starts 40; 0.0889s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;linear.: 3.56114s (num_starts 35; 0.1017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.68451s (num_starts 17; 0.2167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A7;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);linear.: 3.6893s (num_starts 41; 0.0900s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;linear.: 3.73368s (num_starts 34; 0.1098s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A8;linear.: 3.7609s (num_starts 35; 0.1075s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear.: 3.77354s (num_starts 38; 0.0993s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 3.78287s (num_starts 14254; 0.0003s/start)
corr_graph::add_edge().: 3.79306s (num_starts 30; 0.1264s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.91606s (num_starts 24; 0.1632s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;memeq-.: 3.91736s (num_starts 60; 0.0653s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.94668s (num_starts 28; 0.1410s/start)
check_wfconds_on_edge.Lentry%2%allocaI4_L0%1%allocaI2=>E0%0%d_E0%0%d.: 3.9509s (num_starts 4; 0.9877s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.00715s (num_starts 20; 0.2004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.00786s (num_starts 23; 0.1743s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 4.07325s (num_starts 9; 0.4526s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-eq-houdini-guess.: 4.18508s (num_starts 44; 0.0951s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 4.24127s (num_starts 5360; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);linear.: 4.32521s (num_starts 49; 0.0883s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.52401s (num_starts 24; 0.1885s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;linear.: 4.59759s (num_starts 52; 0.0884s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.61505s (num_starts 27; 0.1709s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);linear.: 4.64324s (num_starts 87; 0.0534s/start)
decide_hoare_triple_helper;per-query-type;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.74355s (num_starts 46; 0.1031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;linear.: 4.78095s (num_starts 57; 0.0839s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1).: 5.1077s (num_starts 128; 0.0399s/start)
decide_hoare_triple_helper;per-query-type;expr-group-region_agrees_with_memlabel-houdini-guess.: 5.22624s (num_starts 81; 0.0645s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 5.25246s (num_starts 29618; 0.0002s/start)
decide_hoare_triple_helper;per-query-type;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.02597s (num_starts 72; 0.0837s/start)
corr_graph_add_correlation.: 6.1162s (num_starts 9; 0.6796s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 6.11642s (num_starts 9; 0.6796s/start)
graph_ec_apply_trans_funs_helper.0.: 6.29709s (num_starts 37944; 0.0002s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI4_L0%1%allocaI4.: 6.59151s (num_starts 5; 1.3183s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 6.62855s (num_starts 18010; 0.0004s/start)
graph_ec_apply_trans_funs_helper.1.: 6.84201s (num_starts 11698; 0.0006s/start)
decide_hoare_triple_helper;per-query-type;memeq-.: 6.87483s (num_starts 137; 0.0502s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.87485s (num_starts 52; 0.1322s/start)
add_fresh_counterexample_at_pc_and_propagate.: 6.87721s (num_starts 305; 0.0225s/start)
tfg_get_preimage_for_expr_across_edge_composition.computeWP_for_pred_across_ec.: 6.95694s (num_starts 11590; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.04095s (num_starts 35; 0.2012s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear.: 7.2826s (num_starts 66; 0.1103s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.47625s (num_starts 39; 0.1917s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 7.87209s (num_starts 1; 7.8721s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.99947s (num_starts 64; 0.1250s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);linear.: 8.00142s (num_starts 83; 0.0964s/start)
tfg_postprocess_after_pointsto_analysis.: 8.04087s (num_starts 2; 4.0204s/start)
liveness_analysis_conservative::xfer_and_meet.: 8.33559s (num_starts 126; 0.0662s/start)
populate_loc_liveness.: 8.3639s (num_starts 12; 0.6970s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 8.41307s (num_starts 20024; 0.0004s/start)
computeWP_for_pred_across_ec.: 8.4572s (num_starts 20024; 0.0004s/start)
check_equivalence_proof.: 8.76919s (num_starts 1; 8.7692s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.0775s (num_starts 48; 0.1891s/start)
decide_hoare_triple_helper;per-path;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.37076s (num_starts 81; 0.1157s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI4;(Lentry%1%allocaI4_L0%1%allocaI4=>Lentry%2%allocaI3_L0%1%allocaI1).: 9.48718s (num_starts 255; 0.0372s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI3).: 9.58568s (num_starts 188; 0.0510s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L0%1%allocaI3.: 10.0485s (num_starts 5; 2.0097s/start)
decide_hoare_triple_helper;-trivial.: 10.7427s (num_starts 765; 0.0140s/start)
tfg_run_pointsto_analysis.: 10.939s (num_starts 1; 10.9390s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 11.0539s (num_starts 6738; 0.0016s/start)
pth_collect_simplified_preds_using_atom_func.: 11.0685s (num_starts 6630; 0.0017s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L0%1%allocaI1.: 11.0732s (num_starts 3; 3.6911s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A7;linear.: 11.1202s (num_starts 161; 0.0691s/start)
decide_hoare_triple_helper;per-path;Lentry%2%allocaI3_L0%1%allocaI1;(Lentry%2%allocaI3_L0%1%allocaI1=>Lentry%2%allocaI4_L0%1%allocaI2).: 11.1262s (num_starts 176; 0.0632s/start)
ftmap_run_pointsto_analysis.: 11.4462s (num_starts 2; 5.7231s/start)
tfg_populate_structs_after_ssa_construction.: 11.4599s (num_starts 2; 5.7299s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 11.4831s (num_starts 2; 5.7415s/start)
check_wfconds_on_edge.: 11.6829s (num_starts 36; 0.3245s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 11.9108s (num_starts 7; 1.7015s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 12.3544s (num_starts 90; 0.1373s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%2%allocaI3_L0%1%allocaI1.: 12.569s (num_starts 5; 2.5138s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2).: 13.0274s (num_starts 156; 0.0835s/start)
graph_ec_apply_trans_funs_helper.: 13.2744s (num_starts 49642; 0.0003s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 13.3617s (num_starts 49642; 0.0003s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 13.6536s (num_starts 5328; 0.0026s/start)
corr_graph::get_simplified_non_mem_assumes.: 13.6645s (num_starts 5328; 0.0026s/start)
collect_assumes_around_path_helper.: 14.0103s (num_starts 1455; 0.0096s/start)
graph_with_paths::collect_assumes_around_path.: 14.0148s (num_starts 1455; 0.0096s/start)
expr_do_simplify_using_lhs_set_and_precond.: 15.0026s (num_starts 4085; 0.0037s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 16.6586s (num_starts 250; 0.0666s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 16.6853s (num_starts 134; 0.1245s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 18.0493s (num_starts 177; 0.1020s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI3;(Lentry%1%allocaI3_L0%1%allocaI3=>Lentry%1%allocaI4_L0%1%allocaI4).: 18.4843s (num_starts 251; 0.0736s/start)
check_preds_on_edge_compositions.: 18.6142s (num_starts 41; 0.4540s/start)
decide_hoare_triple_with_alias_cons.ce.: 21.3717s (num_starts 1050; 0.0204s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 28.81s (num_starts 149; 0.1934s/start)
decide_hoare_triple_helper;per-query-type;linear.: 31.5552s (num_starts 374; 0.0844s/start)
query:smt.: 42.1627s (num_starts 544; 0.0775s/start)
solver_provable.: 50.8594s (num_starts 651; 0.0781s/start)
solver_satisfiable-cache-miss.: 50.964s (num_starts 544; 0.0937s/start)
solver_satisfiable.: 50.9687s (num_starts 652; 0.0782s/start)
expr_is_provable.: 51.5024s (num_starts 651; 0.0791s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 52.6531s (num_starts 651; 0.0809s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 55.1993s (num_starts 651; 0.0848s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 55.2329s (num_starts 651; 0.0848s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 56.4643s (num_starts 651; 0.0867s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 56.5162s (num_starts 651; 0.0868s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 56.5284s (num_starts 651; 0.0868s/start)
is_expr_equal_using_lhs_set_and_precond.: 56.5429s (num_starts 651; 0.0869s/start)
prove.: 56.5574s (num_starts 651; 0.0869s/start)
prove_spawn_and_join_helper.: 56.561s (num_starts 651; 0.0869s/start)
prove_spawn_and_join.: 60.322s (num_starts 651; 0.0927s/start)
prove_wrapper.proof_query_not_trivial.: 60.6713s (num_starts 651; 0.0932s/start)
prove_wrapper.: 61.8678s (num_starts 1308; 0.0473s/start)
decide_hoare_triple_check_ub.: 62.8327s (num_starts 1308; 0.0480s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 67.1981s (num_starts 539; 0.1247s/start)
decide_hoare_triple_helper.: 78.6491s (num_starts 1308; 0.0601s/start)
update_invariant_state_for_edges.: 94.505s (num_starts 7; 13.5007s/start)
cg_check_new_cg_ec.: 94.5053s (num_starts 7; 13.5008s/start)
correl_entry_apply.: 94.5057s (num_starts 7; 13.5008s/start)
expandProductCFG.: 94.8887s (num_starts 8; 11.8611s/start)
decide_hoare_triple_with_alias_cons.: 100.043s (num_starts 1308; 0.0765s/start)
bestFirstSearch.: 101.19s (num_starts 1; 101.1899s/start)
Time taken for equivalence check.: 111.531s (num_starts 1; 111.5309s/start)

counters:
# of Paths Prunned through CE propagation.: 3
# of assume sat failures for cg-edge-assume-alloca-ptr-eq.: 238
# of assume sat failures for cg-edge-assume-unknown.: 262
# of correlations rejected by -alloca-region-was-stack check.: 1
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 4
# of paths enumerated.: 6
# of paths expanded.: 7
# of queries to linear solver.: 305
# of smt-solver-queries.: 544
L0%0%d=>E0%0%d-src_ecs.: 9
L0%0%d=>E0%0%d-src_to_pcs.: 1
Memory Fuzing CE.: 3
num-backtrackings.: 6
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 43
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 56
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 35
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 38
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 36
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 41
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 27
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 27
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 12
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 15
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.L0%0%d_L0%0%d.prove_queries.: 21
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 9
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 15
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 9
smallest_point_cover_xfer.local-eq-lsprel-guess.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.local-eq-lsprel-guess.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 5
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 5
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 5
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.mem-allocs-equality.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 3
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 5
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memlabel-is-absent.from.L0%0%d_L0%0%d.prove_queries.: 14
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 5
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 3
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 5
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%2%d=/.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.3.0.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.3.0.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 3
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.3.0.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 5
smallest_point_cover_xfer.ml-lb-addr-eq.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.ml-lb-addr-eq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 5
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-ub-eq.from.L0%0%d_L0%0%d.iters.: 12
smallest_point_cover_xfer.ml-lb-ub-eq.from.L0%0%d_L0%0%d.prove_queries.: 12
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 6
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 6
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 8
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 8
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 8
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 3
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.ml-lb-ub-ineq.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.ml-lb-ub-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 5
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 5
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 6
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 10
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 6
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 6
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 10
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 6
smallest_point_cover_xfer.sp-below-isp.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.sp-below-isp.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 3
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 3
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 5
smallest_point_cover_xfer.sp-below-isp.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.sp-ml-lb-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 3
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L0%1%allocaI3.iters.: 5
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L0%1%allocaI3.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI4_L0%1%allocaI4.iters.: 5
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI4_L0%1%allocaI4.prove_queries.: 5
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%2%allocaI3_L0%1%allocaI1.iters.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%2%allocaI3_L0%1%allocaI1.prove_queries.: 0
smt-queries-cache-hits.: 108
smt-queries-cvc4-sat.: 8
smt-queries-yices-sat.: 2
smt-queries-z3-sat.: 276
total-correlation-possibilities.: 10
total-correlation-possibilities-mod-lsprels.: 4
total-correlations-explored.: 8

flags:
dst-aloc.: 5
dst-edges.: 7
dst-nodes.: 8
dst-sp-updates.: 3
final-CG-alloc-correlations.: 2
final-CG-counterexamples-generated-at-Lentry%1%allocaI3_L0%1%allocaI3.: 13
final-CG-counterexamples-generated-at-Lentry%1%allocaI4_L0%1%allocaI4.: 14
final-CG-counterexamples-generated-at-Lentry%2%allocaI3_L0%1%allocaI1.: 10
final-CG-counterexamples-generated-at-Lentry%2%allocaI4_L0%1%allocaI2.: 11
final-CG-counterexamples-total-at-Lentry%1%allocaI3_L0%1%allocaI3.: 13
final-CG-counterexamples-total-at-Lentry%1%allocaI4_L0%1%allocaI4.: 14
final-CG-counterexamples-total-at-Lentry%2%allocaI3_L0%1%allocaI1.: 10
final-CG-counterexamples-total-at-Lentry%2%allocaI4_L0%1%allocaI2.: 11
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 1
final-CG-edges.: 5
final-CG-nodes.: 6
final-CG-num-invariants.: 138
final-CG-super-edges.: 1
src-allocation-stmts.: 2
src-edges.: 9
src-nodes.: 9
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 44.22
final-CG-time-to-total-time-ratio.: 0.44
query-time-to-total-time-ratio.: 0.38

Context stats:
exprs: count: 181434
sorts: count: 174
num_proof_queries: 651
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	222042
	        hit ratio:	0.987466
m_simplify_solver:
	----------- total:	26269
	        hit ratio:	0.778751
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	414
	        hit ratio:	0.369565
m_z3_solver_substitution:
	----------- total:	5805
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	5812
	        hit ratio:	0
m_expr_size:
	----------- total:	73704
	        hit ratio:	0.90839
m_contains_only_constants_or_sp_versions:
	----------- total:	278
	        hit ratio:	0.845324
m_expr_evaluates_to_constant_visitor:
	----------- total:	818810
	        hit ratio:	0.965182

z3_solver expr_query_cache entry size: 544
	----------- total:	652
	             hits:	108
	        hit ratio:	0.165644
histogram (time taken by solver in ms):
[  7.5180,  11.9964) (avg.   7.5180)     : 1
[ 11.9964,  19.1424) (avg.  18.0780)     : 2
[ 19.1424,  30.5453) (avg.   0.0000)     : 0
[ 30.5453,  48.7408) (avg.  44.3021)     : 240
[ 48.7408,  77.7750) (avg.  53.2085)     : 134
[ 77.7750, 124.1045) (avg. 101.9540)     : 89
[124.1045, 198.0319) (avg. 151.9404)     : 63
[198.0319, 315.9969) (avg. 238.0354)     : 7
[315.9969, 504.2319) (avg. 372.8494)     : 5
[504.2319, 804.5960) (avg. 724.5163)     : 3
histogram (number of quantifiers in query)
[0, 2) (avg. 1)                          : 438
[2, 4) (avg. 0)                          : 0
[4, 6) (avg. 5)                          : 82
[6, 7) (avg. 6)                          : 18
[7, 9) (avg. 7)                          : 6
[9, 11) (avg. 0)                         : 0
[11, 12) (avg. 0)                        : 0
[12, 14) (avg. 0)                        : 0
[14, 16) (avg. 0)                        : 0
[16, 17) (avg. 0)                        : 0
histogram (number of nodes in z3 ast)
[ 223,  356) (avg.  289)                 : 3
[ 356,  488) (avg.    0)                 : 0
[ 488,  620) (avg.  571)                 : 87
[ 620,  752) (avg.  727)                 : 243
[ 752,  884) (avg.  838)                 : 53
[ 884, 1016) (avg.  924)                 : 151
[1016, 1148) (avg. 1114)                 : 2
[1148, 1280) (avg.    0)                 : 0
[1280, 1412) (avg.    0)                 : 0
[1412, 1544) (avg. 1519)                 : 5
Top 10 highest time taking queries:
1. [0.804s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.65.from_pcLentry%1%allocaI3_L0%1%allocaI1.cond_apply_set_elem0_of_1.0
2. [0.692s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.65.from_pcLentry%1%allocaI3_L0%1%allocaI1.cond_apply_set_elem0_of_1.1
3. [0.678s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.60.from_pcLentry%1%allocaI3_L0%1%allocaI3.cond_apply_set_elem0_of_1.0
4. [0.430s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.60.from_pcLentry%1%allocaI3_L0%1%allocaI3.cond_apply_set_elem0_of_1.1
5. [0.425s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.60.from_pcLentry%1%allocaI3_L0%1%allocaI3.cond_apply_set_elem0_of_1.2
6. [0.351s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.65.from_pcLentry%1%allocaI3_L0%1%allocaI1.cond_apply_set_elem0_of_1.2
7. [0.331s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear8-32-free_var_idx.20.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
8. [0.328s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear8-32-free_var_idx.23.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
9. [0.278s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear6-32-free_var_idx.23.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
10. [0.272s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear8-32-free_var_idx.23.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.1

<MSG>2:59 : Successfully computed equivalence for function: main.
</MSG>

tfg_edge_expr_wp_fn: num_starts 17187 time spent: 0:0:4 [4.122091s total; 0.000240 per start]
tfg_computeWP: num_starts 85676 time spent: 0:0:11 [11.932666s total; 0.000139 per start]
tfg_get_simplified_to_state_for_edge: num_starts 110799 time spent: 0:0:0 [0.168298s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 26189 time spent: 0:0:0 [0.041019s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 24333 time spent: 0:0:0 [0.043379s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 311 time spent: 0:0:5 [5.832487s total; 0.018754 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 60 time spent: 0:0:0 [0.004723s total; 0.000079 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 1449 time spent: 0:0:2 [2.285818s total; 0.001578 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 340 time spent: 0:0:1 [1.267881s total; 0.003729 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 1371 time spent: 0:0:1 [1.947768s total; 0.001421 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 22813 time spent: 0:0:2 [2.208798s total; 0.000097 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 1371 time spent: 0:0:0 [0.189383s total; 0.000138 per start]
tfg_graph_get_vars_written_on_edge: num_starts 1371 time spent: 0:0:0 [0.058686s total; 0.000043 per start]
cg_with_rank_add_CE_at_pc: num_starts 320 time spent: 0:0:4 [4.778924s total; 0.014934 per start]
graph_with_ce_add_CE_at_pc: num_starts 223 time spent: 0:0:0 [0.006689s total; 0.000030 per start]
graph_with_guessing_add_CE_at_pc: num_starts 320 time spent: 0:0:4 [4.770899s total; 0.014909 per start]
point_set_add_point_using_CE: num_starts 4078 time spent: 0:0:1 [1.410321s total; 0.000346 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 4078 time spent: 0:0:1 [1.420346s total; 0.000348 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 317 time spent: 0:0:4 [4.017329s total; 0.012673 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 317 time spent: 0:0:2 [2.577183s total; 0.008130 per start]
expr_label_memlabels_using_memlabel_map: num_starts 111179 time spent: 0:0:1 [1.553787s total; 0.000014 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 12196 time spent: 0:0:0 [0.463756s total; 0.000038 per start]
expr_simplify_solver: num_starts 31872 time spent: 0:0:1 [1.694406s total; 0.000053 per start]
expr_simplify_syntactic: num_starts 31872 time spent: 0:0:14 [14.691989s total; 0.000461 per start]
expr_simplify_select_on_store: num_starts 4089 time spent: 0:0:10 [10.895126s total; 0.002664 per start]
expr_simplify_store_on_store: num_starts 4658 time spent: 0:0:2 [2.141578s total; 0.000460 per start]
expr_simplify_using_lhs_set_helper: num_starts 5200 time spent: 0:0:16 [16.913580s total; 0.003253 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 58927 time spent: 0:0:16 [16.861160s total; 0.000286 per start]
expr_evaluates_to_constant: num_starts 774878 time spent: 0:0:0 [0.922813s total; 0.000001 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 34143 time spent: 0:0:0 [0.069944s total; 0.000002 per start]
expr_simplify_eq: num_starts 966 time spent: 0:0:0 [0.012159s total; 0.000013 per start]
expr_simplify_iff: num_starts 68 time spent: 0:0:0 [0.000026s total; 0.000000 per start]
expr_simplify_or: num_starts 238 time spent: 0:0:0 [0.000230s total; 0.000001 per start]
expr_simplify_and: num_starts 697 time spent: 0:0:0 [0.002958s total; 0.000004 per start]
expr_simplify_andnot1: num_starts 126 time spent: 0:0:0 [0.001189s total; 0.000009 per start]
expr_simplify_andnot2: num_starts 44 time spent: 0:0:0 [0.000552s total; 0.000013 per start]
expr_simplify_not: num_starts 490 time spent: 0:0:0 [0.000751s total; 0.000002 per start]
expr_simplify_implies: num_starts 57 time spent: 0:0:0 [0.000359s total; 0.000006 per start]
expr_simplify_ite: num_starts 206 time spent: 0:0:0 [0.005425s total; 0.000026 per start]
canonicalize_expr_tree: num_starts 6368 time spent: 0:0:0 [0.205862s total; 0.000032 per start]
expr_simplify_memalloc_using_memlabel: num_starts 3328 time spent: 0:0:0 [0.009583s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 23912 time spent: 0:0:10 [10.796672s total; 0.000452 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 19749 time spent: 0:0:7 [7.561299s total; 0.000383 per start]
memlabel_contains_only_readonly_symbols: num_starts 26503 time spent: 0:0:0 [0.004622s total; 0.000000 per start]
memlabels_are_independent: num_starts 78781 time spent: 0:0:0 [0.294956s total; 0.000004 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 12646 time spent: 0:0:2 [2.479559s total; 0.000196 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 12646 time spent: 0:0:2 [2.391605s total; 0.000189 per start]
is_overlapping_atoms_pair_syntactic: num_starts 12646 time spent: 0:0:2 [2.043779s total; 0.000162 per start]
is_overlapping_considering_type_constraints: num_starts 12646 time spent: 0:0:0 [0.085677s total; 0.000007 per start]
find_offset_wrt_typed_variable_pointer: num_starts 16420 time spent: 0:0:0 [0.084541s total; 0.000005 per start]
is_gep_inbounds_offset: num_starts 16420 time spent: 0:0:0 [0.004263s total; 0.000000 per start]
get_arithmetic_addsub_atoms: num_starts 2830608 time spent: 0:0:1 [1.006452s total; 0.000000 per start]
expr_is_variable_start: num_starts 23844 time spent: 0:0:0 [0.001696s total; 0.000000 per start]
insn_md_assemble: num_starts 10 time spent: 0:0:0 [0.000034s total; 0.000003 per start]
expr_linear_relation_holds_visit: num_starts 7406 time spent: 0:0:0 [0.053657s total; 0.000007 per start]
expr_is_consts_struct_constant: num_starts 13327 time spent: 0:0:0 [0.005300s total; 0.000000 per start]
expr_do_simplify_helper: num_starts 224148 time spent: 0:0:16 [16.862052s total; 0.000075 per start]
expr_do_simplify_helper_cache: num_starts 224148 time spent: 0:0:0 [0.185041s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 212 time spent: 0:0:0 [0.000051s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 212 time spent: 0:0:0 [0.000474s total; 0.000002 per start]
evaluate_expr_and_check_bounds: num_starts 23806 time spent: 0:0:2 [2.668226s total; 0.000112 per start]
combo_dfa_xfer_and_meet: num_starts 20 time spent: 0:0:3 [3.365650s total; 0.168283 per start]
alias_val_xfer_and_meet: num_starts 20 time spent: 0:0:3 [3.194869s total; 0.159743 per start]
get_sprel_map_from_avail_exprs: num_starts 95 time spent: 0:0:0 [0.072985s total; 0.000768 per start]
update_memlabels_for_memslot_locs: num_starts 90 time spent: 0:0:0 [0.054899s total; 0.000610 per start]
populate_gen_and_kill_sets_for_edge: num_starts 274 time spent: 0:0:0 [0.171503s total; 0.000626 per start]
compute_simplified_loc_exprs_for_edge: num_starts 766 time spent: 0:0:11 [11.035652s total; 0.014407 per start]
compute_locs_definitely_written_on_edge: num_starts 274 time spent: 0:0:0 [0.002625s total; 0.000010 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 1018 time spent: 0:0:0 [0.991963s total; 0.000974 per start]
edge_update_memlabel_map_for_mlvars: num_starts 137 time spent: 0:0:0 [0.090891s total; 0.000663 per start]
add_new_locs_based_on_edge: num_starts 20 time spent: 0:0:0 [0.812833s total; 0.040642 per start]
alias_val_meet: num_starts 137 time spent: 0:0:0 [0.060222s total; 0.000440 per start]
expand_locset_to_include_slots_for_memmask: num_starts 1028 time spent: 0:0:0 [0.023548s total; 0.000023 per start]
total: num_starts 1 time spent: 0:3:2 [182.666097s total; 182.666097 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 123.50s.
ftmap_run_pointsto_analysis.: 11.4462s (num_starts 2; 5.7231s/start)s.
EQ Time after pointsto analysis: 112.055s.
EQ Time after pointsto analysis and smt_query: 50.1876s.
EQ Time after pointsto analysis and smt_query and bv-solve: 49.7942s.
Equivalence proof found. The programs are equivalent.
