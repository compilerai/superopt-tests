argv[0] = eq32
argv[1] = --check-safety
argv[2] = --unroll-factor
argv[3] = 3
argv[4] = emi1.c
argv[5] = emi1.s
argv[6] = --proof
argv[7] = emi1.cg
Query dir: /tmp/smt-solver-tmp-files/sbansal.1366918
argv[0] = /home/sbansal/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/sbansal/superopt-project/superopt-tests/soundness/emi1.c
argv[10] = -o
argv[11] = /home/sbansal/superopt-project/superopt-tests/soundness/emi1.c.bc.tmp
argv[12] = -m32

argv[0] = /home/sbansal/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = /home/sbansal/superopt-project/superopt-tests/soundness/emi1.c.bc
argv[9] = -o
argv[10] = emi1.c.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function main</MSG>


tfg_get_simplified_edge_cond_for_edge: num_starts 481 time spent: 0:0:0 [0.000698s total; 0.000001 per start]
tfg_get_simplified_assumes_for_edge: num_starts 264 time spent: 0:0:0 [0.000337s total; 0.000001 per start]
expr_label_memlabels_using_memlabel_map: num_starts 3236 time spent: 0:0:0 [0.012378s total; 0.000004 per start]
expr_simplify_solver: num_starts 961 time spent: 0:0:0 [0.084539s total; 0.000088 per start]
expr_simplify_syntactic: num_starts 961 time spent: 0:0:0 [0.270387s total; 0.000281 per start]
expr_simplify_select_on_store: num_starts 58 time spent: 0:0:0 [0.063507s total; 0.001095 per start]
expr_simplify_store_on_store: num_starts 246 time spent: 0:0:0 [0.013390s total; 0.000054 per start]
expr_simplify_using_lhs_set_helper: num_starts 397 time spent: 0:0:0 [0.372411s total; 0.000938 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 3496 time spent: 0:0:0 [0.370120s total; 0.000106 per start]
expr_evaluates_to_constant: num_starts 1693 time spent: 0:0:0 [0.007633s total; 0.000005 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 488 time spent: 0:0:0 [0.000996s total; 0.000002 per start]
expr_simplify_eq: num_starts 5 time spent: 0:0:0 [0.000052s total; 0.000010 per start]
expr_simplify_not: num_starts 7 time spent: 0:0:0 [0.000009s total; 0.000001 per start]
expr_simplify_ite: num_starts 4 time spent: 0:0:0 [0.000261s total; 0.000065 per start]
canonicalize_expr_tree: num_starts 264 time spent: 0:0:0 [0.004383s total; 0.000017 per start]
expr_simplify_memalloc_using_memlabel: num_starts 194 time spent: 0:0:0 [0.000570s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 93 time spent: 0:0:0 [0.062421s total; 0.000671 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 32 time spent: 0:0:0 [0.012297s total; 0.000384 per start]
memlabel_contains_only_readonly_symbols: num_starts 32 time spent: 0:0:0 [0.000003s total; 0.000000 per start]
memlabels_are_independent: num_starts 250 time spent: 0:0:0 [0.000498s total; 0.000002 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 16 time spent: 0:0:0 [0.003802s total; 0.000238 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 16 time spent: 0:0:0 [0.003739s total; 0.000234 per start]
is_overlapping_atoms_pair_syntactic: num_starts 16 time spent: 0:0:0 [0.003411s total; 0.000213 per start]
is_overlapping_considering_type_constraints: num_starts 16 time spent: 0:0:0 [0.000061s total; 0.000004 per start]
find_offset_wrt_typed_variable_pointer: num_starts 32 time spent: 0:0:0 [0.000058s total; 0.000002 per start]
is_gep_inbounds_offset: num_starts 32 time spent: 0:0:0 [0.000002s total; 0.000000 per start]
get_arithmetic_addsub_atoms: num_starts 1020 time spent: 0:0:0 [0.000850s total; 0.000001 per start]
expr_is_variable_start: num_starts 16 time spent: 0:0:0 [0.000002s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 482 time spent: 0:0:0 [0.004202s total; 0.000009 per start]
expr_is_consts_struct_constant: num_starts 6283 time spent: 0:0:0 [0.002966s total; 0.000000 per start]
expr_do_simplify_helper: num_starts 7956 time spent: 0:0:0 [0.380301s total; 0.000048 per start]
expr_do_simplify_helper_cache: num_starts 7956 time spent: 0:0:0 [0.005135s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 8 time spent: 0:0:0 [0.000003s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 8 time spent: 0:0:0 [0.000019s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 436 time spent: 0:0:0 [0.697546s total; 0.001600 per start]
alias_val_xfer_and_meet: num_starts 436 time spent: 0:0:0 [0.312388s total; 0.000716 per start]
get_sprel_map_from_avail_exprs: num_starts 494 time spent: 0:0:0 [0.064389s total; 0.000130 per start]
update_memlabels_for_memslot_locs: num_starts 57 time spent: 0:0:0 [0.002503s total; 0.000044 per start]
populate_gen_and_kill_sets_for_edge: num_starts 872 time spent: 0:0:0 [0.046957s total; 0.000054 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1983 time spent: 0:0:0 [0.380224s total; 0.000192 per start]
compute_locs_definitely_written_on_edge: num_starts 872 time spent: 0:0:0 [0.000321s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 239 time spent: 0:0:0 [0.095558s total; 0.000400 per start]
edge_update_memlabel_map_for_mlvars: num_starts 436 time spent: 0:0:0 [0.007267s total; 0.000017 per start]
add_new_locs_based_on_edge: num_starts 436 time spent: 0:0:0 [0.104197s total; 0.000239 per start]
alias_val_meet: num_starts 436 time spent: 0:0:0 [0.052718s total; 0.000121 per start]
expand_locset_to_include_slots_for_memmask: num_starts 420 time spent: 0:0:0 [0.002577s total; 0.000006 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 2e-06s (num_starts 1; 0.0000s/start)
set_symbol_map_for_touched_symbols.: 4e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 7e-06s (num_starts 1; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::conservative_dfa_val_for_newly_defined_loc.: 1.3e-05s (num_starts 1; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::conservative_dfa_val_for_newly_defined_loc.: 1.4e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 4.3e-05s (num_starts 1; 0.0000s/start)
expr_is_hidden_reg.: 8.5e-05s (num_starts 144; 0.0000s/start)
add_extra_node_at_start_pc.: 9.4e-05s (num_starts 1; 0.0001s/start)
expr_is_callee_save_const.: 0.000136s (num_starts 148; 0.0000s/start)
compute_sprel_relations.: 0.000139s (num_starts 1; 0.0001s/start)
populate_locid2expr_map.: 0.000141s (num_starts 1; 0.0001s/start)
propagate_sprels.: 0.000146s (num_starts 1; 0.0001s/start)
alias_val_t::constructor_with_map_arg.: 0.000234s (num_starts 437; 0.0000s/start)
main.3.: 0.000253s (num_starts 1; 0.0003s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000365s (num_starts 14; 0.0000s/start)
determinize_value_expr_map.: 0.000376s (num_starts 267; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000401s (num_starts 132; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000418s (num_starts 58; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.000425s (num_starts 4; 0.0001s/start)
graph_locs_add_all_exvregs.: 0.000503s (num_starts 1; 0.0005s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000571s (num_starts 2; 0.0003s/start)
graph_locs_add_local_vars_for_edge.: 0.000651s (num_starts 132; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000755s (num_starts 1; 0.0008s/start)
expr_represents_llvm_undef.: 0.000891s (num_starts 150; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.001038s (num_starts 1; 0.0010s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.001336s (num_starts 436; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.001342s (num_starts 17; 0.0001s/start)
tfg::populate_loc_definedness.post_dfa.: 0.001356s (num_starts 2; 0.0007s/start)
canonicalize_llvm_nextpcs.: 0.001722s (num_starts 1; 0.0017s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001953s (num_starts 1; 0.0020s/start)
graph_locs_map_update_memlabels_for_memslot_locs_with_memalloc.calling.compute_lr_status_for_expr.: 0.002126s (num_starts 37; 0.0001s/start)
sp_version_relations_val_t::meet.: 0.002326s (num_starts 5748; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.002784s (num_starts 294; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.002873s (num_starts 264; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.003346s (num_starts 199; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.003373s (num_starts 1; 0.0034s/start)
expr_substitute_using_available_exprs_submap.: 0.00546s (num_starts 207; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.005514s (num_starts 436; 0.0000s/start)
create_closure_matrix.: 0.006391s (num_starts 493; 0.0000s/start)
populate_exit_return_values_for_llvm_method.: 0.006441s (num_starts 1; 0.0064s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.00685s (num_starts 436; 0.0000s/start)
graph_visit_exprs.: 0.007125s (num_starts 4; 0.0018s/start)
context_constructor.solver.: 0.008068s (num_starts 1; 0.0081s/start)
context_constructor.: 0.008087s (num_starts 1; 0.0081s/start)
query:convert_to_z3.: 0.008973s (num_starts 264; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.011037s (num_starts 1; 0.0110s/start)
query:convert_from_z3.: 0.011428s (num_starts 264; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.013292s (num_starts 1; 0.0133s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.01784s (num_starts 3236; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.020534s (num_starts 362; 0.0001s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.020858s (num_starts 11302; 0.0000s/start)
graph_to_stream.: 0.021837s (num_starts 1; 0.0218s/start)
tfg::populate_loc_definedness.before_solve.: 0.025092s (num_starts 2; 0.0125s/start)
populate_simplified_to_state.: 0.025264s (num_starts 2; 0.0126s/start)
tfg::populate_loc_definedness.before_initialize.: 0.02574s (num_starts 2; 0.0129s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.026034s (num_starts 177; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.026309s (num_starts 177; 0.0001s/start)
tfg::populate_loc_definedness.: 0.026393s (num_starts 2; 0.0132s/start)
compute_lr_status_for_expr.: 0.029041s (num_starts 249; 0.0001s/start)
lr_status_meet.: 0.031653s (num_starts 27472; 0.0000s/start)
create_sp_version_relations_lattice_at_pc.: 0.031664s (num_starts 493; 0.0001s/start)
graph_identify_back_edges.: 0.032867s (num_starts 4; 0.0082s/start)
populate_simplified_assets.: 0.032939s (num_starts 4; 0.0082s/start)
graph_identify_natural_loops.: 0.034525s (num_starts 4; 0.0086s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.034531s (num_starts 436; 0.0001s/start)
find_dominators.: 0.043449s (num_starts 6; 0.0072s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.045217s (num_starts 1; 0.0452s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.045502s (num_starts 1; 0.0455s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.046271s (num_starts 1; 0.0463s/start)
compute_regions.: 0.051311s (num_starts 4; 0.0128s/start)
populate_branch_affecting_locs.: 0.064502s (num_starts 2; 0.0323s/start)
query:simplify-z3.: 0.067906s (num_starts 528; 0.0001s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.077319s (num_starts 436; 0.0002s/start)
tfg_preprocess.src.llvm.main.: 0.085074s (num_starts 1; 0.0851s/start)
tfg::tfg_preprocess.: 0.085076s (num_starts 1; 0.0851s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.089816s (num_starts 1; 0.0898s/start)
populate_locs_potentially_modified_on_edge.: 0.094184s (num_starts 2; 0.0471s/start)
main.2.: 0.099363s (num_starts 1; 0.0994s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.12018s (num_starts 3236; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.123267s (num_starts 3236; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.127139s (num_starts 2; 0.0636s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.132237s (num_starts 436; 0.0003s/start)
compute_new_lr_status_on_locs.: 0.134504s (num_starts 436; 0.0003s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.13921s (num_starts 3236; 0.0000s/start)
avail_exprs_create_submap.: 0.195731s (num_starts 1308; 0.0001s/start)
get_tfg.: 0.198135s (num_starts 1; 0.1981s/start)
get_function_tfg_map.main.: 0.198318s (num_starts 1; 0.1983s/start)
get_function_tfg_map.: 0.198324s (num_starts 1; 0.1983s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.238228s (num_starts 436; 0.0005s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.256176s (num_starts 411; 0.0006s/start)
populate_loc_liveness.: 0.290798s (num_starts 2; 0.1454s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.3147s (num_starts 436; 0.0007s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.372894s (num_starts 397; 0.0009s/start)
tfg_postprocess_after_pointsto_analysis.: 0.561582s (num_starts 1; 0.5616s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.697912s (num_starts 436; 0.0016s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.723975s (num_starts 1; 0.7240s/start)
ftmap_run_pointsto_analysis.: 1.53091s (num_starts 1; 1.5309s/start)
parse_consts_db.: 3.49104s (num_starts 1; 3.4910s/start)
main.: 5.43213s (num_starts 1; 5.4321s/start)

counters:

flags:

info:


 /home/sbansal/superopt-project/usr/local/bin/harvest32 -functions_only -live_callee_save -allow_unsupported -no_canonicalize_imms -no_eliminate_unreachable_bbls -no_eliminate_duplicates -f ALL -o /home/sbansal/superopt-project/superopt-tests/soundness/emi1.s.o.harvest -l /home/sbansal/superopt-project/superopt-tests/soundness/emi1.s.o.harvest.log /home/sbansal/superopt-project/superopt-tests/soundness/emi1.s.o
Printing stats::get():
timers:
i386_init_costfns.: 1e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 4e-06s (num_starts 1; 0.0000s/start)
src_iseq_fetch.: 7e-05s (num_starts 2; 0.0000s/start)
obtain_live_outs.: 8.3e-05s (num_starts 1; 0.0001s/start)
src_iseq_copy.: 0.000122s (num_starts 53; 0.0000s/start)
context_constructor.solver.: 0.000199s (num_starts 1; 0.0002s/start)
context_constructor.: 0.000209s (num_starts 1; 0.0002s/start)
i386_insn_init_constants.: 0.001127s (num_starts 1; 0.0011s/start)
regset_diff.: 0.002232s (num_starts 230; 0.0000s/start)
gas_init.: 0.002556s (num_starts 1; 0.0026s/start)
opctable_init.: 0.005579s (num_starts 1; 0.0056s/start)
imm_vt_map_copy.: 0.009451s (num_starts 30024; 0.0000s/start)
regset_rename.: 0.023964s (num_starts 3336; 0.0000s/start)
src_iseq_get_usedef.: 0.074053s (num_starts 2; 0.0370s/start)
src_iseq_get_usedef_regs.: 0.074059s (num_starts 2; 0.0370s/start)
init_input_file.: 0.244528s (num_starts 1; 0.2445s/start)
insn_db_list_get_all_matches.: 0.259464s (num_starts 209; 0.0012s/start)
insn_db_get_all_matches.: 0.259996s (num_starts 209; 0.0012s/start)
src_insn_get_usedef.: 0.297849s (num_starts 223; 0.0013s/start)
src_iseq_deserialize.: 2.74246s (num_starts 44336; 0.0001s/start)
opc_init.: 3.19647s (num_starts 1; 3.1965s/start)
i386_init.: 3.19909s (num_starts 2; 1.5995s/start)
parse_consts_db.: 3.53248s (num_starts 1; 3.5325s/start)
src_usedef_tab_read_from_file.: 6.23513s (num_starts 1; 6.2351s/start)
src_usedef_tab_init.: 6.23513s (num_starts 1; 6.2351s/start)
usedef_init.: 6.23513s (num_starts 1; 6.2351s/start)

counters:

flags:

info:


Mem-stats:

 /home/sbansal/superopt-project/usr/local/bin/eqgen32 -tfg_llvm emi1.c.etfg -l /home/sbansal/superopt-project/superopt-tests/soundness/emi1.s.o.harvest.log -o /home/sbansal/superopt-project/superopt-tests/soundness/emi1.s.o.tfg -e /home/sbansal/superopt-project/superopt-tests/soundness/emi1.s.o -f ALL /home/sbansal/superopt-project/superopt-tests/soundness/emi1.s.o.harvest
Setting max_stack_push_delta = 2147483648
dst_tfg_add_stack_pointer_translation_at_function_entry 2562: out_e = L0%1%d=>L1%1%d
Executing: /home/sbansal/superopt-project/usr/local/bin/harvest-dwarf /home/sbansal/superopt-project/superopt-tests/soundness/emi1.s.o
main 469:Printing stats:

tfg_get_simplified_edge_cond_for_edge: num_starts 72 time spent: 0:0:0 [0.000103s total; 0.000001 per start]
tfg_get_simplified_assumes_for_edge: num_starts 184 time spent: 0:0:0 [0.000232s total; 0.000001 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2593 time spent: 0:0:0 [0.050909s total; 0.000020 per start]
expr_simplify_solver: num_starts 10653 time spent: 0:0:0 [0.420134s total; 0.000039 per start]
expr_simplify_syntactic: num_starts 10653 time spent: 0:0:0 [0.382399s total; 0.000036 per start]
expr_simplify_select_on_store: num_starts 108 time spent: 0:0:0 [0.108302s total; 0.001003 per start]
expr_simplify_store_on_store: num_starts 184 time spent: 0:0:0 [0.008061s total; 0.000044 per start]
expr_simplify_using_lhs_set_helper: num_starts 1247 time spent: 0:0:0 [0.934703s total; 0.000750 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 18048 time spent: 0:0:0 [0.923198s total; 0.000051 per start]
expr_evaluates_to_constant: num_starts 13228 time spent: 0:0:0 [0.046199s total; 0.000003 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 3873 time spent: 0:0:0 [0.006703s total; 0.000002 per start]
expr_simplify_eq: num_starts 1279 time spent: 0:0:0 [0.009383s total; 0.000007 per start]
expr_simplify_iff: num_starts 39 time spent: 0:0:0 [0.000020s total; 0.000001 per start]
expr_simplify_or: num_starts 29 time spent: 0:0:0 [0.000025s total; 0.000001 per start]
expr_simplify_and: num_starts 86 time spent: 0:0:0 [0.000337s total; 0.000004 per start]
expr_simplify_andnot1: num_starts 10 time spent: 0:0:0 [0.000112s total; 0.000011 per start]
expr_simplify_andnot2: num_starts 10 time spent: 0:0:0 [0.000100s total; 0.000010 per start]
expr_simplify_not: num_starts 250 time spent: 0:0:0 [0.000314s total; 0.000001 per start]
expr_simplify_implies: num_starts 9 time spent: 0:0:0 [0.000058s total; 0.000006 per start]
expr_simplify_ite: num_starts 912 time spent: 0:0:0 [0.016911s total; 0.000019 per start]
canonicalize_expr_tree: num_starts 1822 time spent: 0:0:0 [0.042699s total; 0.000023 per start]
expr_simplify_memalloc_using_memlabel: num_starts 174 time spent: 0:0:0 [0.000435s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 137 time spent: 0:0:0 [0.106474s total; 0.000777 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 28 time spent: 0:0:0 [0.010344s total; 0.000369 per start]
memlabel_contains_only_readonly_symbols: num_starts 28 time spent: 0:0:0 [0.000005s total; 0.000000 per start]
memlabels_are_independent: num_starts 191 time spent: 0:0:0 [0.000431s total; 0.000002 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 16 time spent: 0:0:0 [0.003101s total; 0.000194 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 16 time spent: 0:0:0 [0.003063s total; 0.000191 per start]
is_overlapping_atoms_pair_syntactic: num_starts 16 time spent: 0:0:0 [0.002720s total; 0.000170 per start]
is_overlapping_considering_type_constraints: num_starts 16 time spent: 0:0:0 [0.000033s total; 0.000002 per start]
find_offset_wrt_typed_variable_pointer: num_starts 16 time spent: 0:0:0 [0.000030s total; 0.000002 per start]
is_gep_inbounds_offset: num_starts 16 time spent: 0:0:0 [0.000004s total; 0.000000 per start]
get_arithmetic_addsub_atoms: num_starts 8697 time spent: 0:0:0 [0.003200s total; 0.000000 per start]
expr_is_variable_start: num_starts 16 time spent: 0:0:0 [0.000001s total; 0.000000 per start]
insn_md_assemble: num_starts 48 time spent: 0:0:0 [0.000066s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 971 time spent: 0:0:0 [0.004598s total; 0.000005 per start]
expr_is_consts_struct_constant: num_starts 1289 time spent: 0:0:0 [0.000585s total; 0.000000 per start]
expr_do_simplify_helper: num_starts 9565 time spent: 0:0:0 [0.946832s total; 0.000099 per start]
expr_do_simplify_helper_cache: num_starts 9565 time spent: 0:0:0 [0.005828s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 174 time spent: 0:0:0 [0.000043s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 174 time spent: 0:0:0 [0.000380s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 80 time spent: 0:0:0 [0.571709s total; 0.007146 per start]
alias_val_xfer_and_meet: num_starts 80 time spent: 0:0:0 [0.368597s total; 0.004607 per start]
get_sprel_map_from_avail_exprs: num_starts 103 time spent: 0:0:0 [0.011501s total; 0.000112 per start]
update_memlabels_for_memslot_locs: num_starts 22 time spent: 0:0:0 [0.002990s total; 0.000136 per start]
populate_gen_and_kill_sets_for_edge: num_starts 160 time spent: 0:0:0 [0.037280s total; 0.000233 per start]
compute_simplified_loc_exprs_for_edge: num_starts 496 time spent: 0:0:0 [0.303857s total; 0.000613 per start]
compute_locs_definitely_written_on_edge: num_starts 160 time spent: 0:0:0 [0.000259s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 151 time spent: 0:0:0 [0.041464s total; 0.000275 per start]
edge_update_memlabel_map_for_mlvars: num_starts 80 time spent: 0:0:0 [0.006153s total; 0.000077 per start]
add_new_locs_based_on_edge: num_starts 80 time spent: 0:0:0 [0.266616s total; 0.003333 per start]
alias_val_meet: num_starts 80 time spent: 0:0:0 [0.010291s total; 0.000129 per start]
expand_locset_to_include_slots_for_memmask: num_starts 205 time spent: 0:0:0 [0.002191s total; 0.000011 per start]
total: num_starts 1 time spent: 0:0:21 [21.573403s total; 21.573403 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
etfg_init.: 0s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.llvm.main.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.llvm.main.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.llvm.main.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.llvm.main.: 1e-06s (num_starts 1; 0.0000s/start)
i386_init_costfns.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.llvm.main.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_constructor.src.llvm.main.before_tfg_llvm_populate_calls.: 1e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.llvm.main.: 4e-06s (num_starts 1; 0.0000s/start)
vconstants_alloc.: 5e-06s (num_starts 1; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::conservative_dfa_val_for_newly_defined_loc.: 2.2e-05s (num_starts 2; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::conservative_dfa_val_for_newly_defined_loc.: 2.4e-05s (num_starts 2; 0.0000s/start)
i386_iseq_copy.: 3.3e-05s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 4.3e-05s (num_starts 81; 0.0000s/start)
expr_is_hidden_reg.: 5.4e-05s (num_starts 103; 0.0000s/start)
add_extra_node_at_start_pc.: 6e-05s (num_starts 1; 0.0001s/start)
expr_is_callee_save_const.: 8.1e-05s (num_starts 111; 0.0000s/start)
llptfg_constructor.: 9e-05s (num_starts 1; 0.0001s/start)
x86_assemble.: 0.00011s (num_starts 1; 0.0001s/start)
compute_sprel_relations.: 0.000132s (num_starts 1; 0.0001s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000136s (num_starts 1; 0.0001s/start)
propagate_sprels.: 0.000137s (num_starts 1; 0.0001s/start)
i386_infer_regcons_from_assembly.: 0.000179s (num_starts 1; 0.0002s/start)
dst_iseq_inv_rename.: 0.000187s (num_starts 1; 0.0002s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000187s (num_starts 30; 0.0000s/start)
peep_preprocess_using_regmap.: 0.0002s (num_starts 24; 0.0000s/start)
populate_locid2expr_map.: 0.00023s (num_starts 2; 0.0001s/start)
context_constructor.solver.: 0.000249s (num_starts 1; 0.0002s/start)
context_constructor.: 0.000257s (num_starts 1; 0.0003s/start)
regmap_assign_using_regcons.: 0.000328s (num_starts 1; 0.0003s/start)
tfg_asm_prune_implausible_pc_local_sprel_expr_assumes.: 0.000368s (num_starts 1; 0.0004s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000388s (num_starts 1; 0.0004s/start)
tfg_eliminate_hidden_regs.: 0.000415s (num_starts 24; 0.0000s/start)
dst_iseq_disassemble_with_bin_offsets.: 0.00042s (num_starts 1; 0.0004s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.000428s (num_starts 3; 0.0001s/start)
populate_dominator_and_postdominator_relations.: 0.000437s (num_starts 1; 0.0004s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.000549s (num_starts 197; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000562s (num_starts 197; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000588s (num_starts 80; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000614s (num_starts 1028; 0.0000s/start)
determinize_value_expr_map.: 0.00079s (num_starts 494; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000825s (num_starts 22; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000891s (num_starts 55; 0.0000s/start)
expr_represents_llvm_undef.: 0.000952s (num_starts 154; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000961s (num_starts 1; 0.0010s/start)
i386_insn_init_constants.: 0.001096s (num_starts 1; 0.0011s/start)
graph_locs_add_local_vars_for_edge.: 0.001099s (num_starts 52; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.001106s (num_starts 184; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.001126s (num_starts 1; 0.0011s/start)
imm_vt_map_copy.: 0.001298s (num_starts 3672; 0.0000s/start)
dst_iseq_from_string.: 0.001497s (num_starts 1; 0.0015s/start)
graph_locs_add_exvregs_for_edge.: 0.001558s (num_starts 52; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.001593s (num_starts 1; 0.0016s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.001713s (num_starts 80; 0.0000s/start)
tighten_mem_access_ml.cache_miss.: 0.00176s (num_starts 32; 0.0001s/start)
tighten_mem_access_ml.: 0.001819s (num_starts 32; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.001903s (num_starts 197; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.00216s (num_starts 11; 0.0002s/start)
identify_address_taken_local_variables.: 0.002356s (num_starts 1; 0.0024s/start)
gas_init.: 0.002744s (num_starts 1; 0.0027s/start)
graph_locs_map_update_memlabels_for_memslot_locs_with_memalloc.calling.compute_lr_status_for_expr.: 0.002844s (num_starts 34; 0.0001s/start)
expr_linear_relation_holds::visit.var.: 0.002857s (num_starts 168; 0.0000s/start)
tfg::populate_loc_definedness.before_solve.: 0.003109s (num_starts 1; 0.0031s/start)
graph_with_aliasing_constructor.src.llvm.main.: 0.003455s (num_starts 1; 0.0035s/start)
tfg::populate_loc_definedness.before_initialize.: 0.003576s (num_starts 1; 0.0036s/start)
tfg::populate_loc_definedness.: 0.003767s (num_starts 1; 0.0038s/start)
graph_with_locs_constructor.src.llvm.main.: 0.004127s (num_starts 1; 0.0041s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.004154s (num_starts 1558; 0.0000s/start)
opctable_init.: 0.004424s (num_starts 1; 0.0044s/start)
expr_substitute_using_available_exprs_submap.: 0.004956s (num_starts 213; 0.0000s/start)
graph_with_edge_structures_constructor.src.llvm.main.: 0.005441s (num_starts 1; 0.0054s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.006077s (num_starts 80; 0.0001s/start)
lr_status_meet.: 0.006334s (num_starts 3747; 0.0000s/start)
graph_with_points_constructor.src.llvm.main.: 0.006963s (num_starts 1; 0.0070s/start)
find_dominators.: 0.011466s (num_starts 32; 0.0004s/start)
populate_branch_affecting_locs.: 0.012976s (num_starts 1; 0.0130s/start)
graph_visit_exprs_const.const.: 0.013298s (num_starts 2; 0.0066s/start)
graph_with_simplified_assets_constructor.src.llvm.main.: 0.013572s (num_starts 1; 0.0136s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.014735s (num_starts 80; 0.0002s/start)
tfg_preprocess.dst.: 0.019945s (num_starts 1; 0.0199s/start)
tfg::tfg_preprocess.: 0.019949s (num_starts 1; 0.0199s/start)
graph_identify_back_edges.: 0.02117s (num_starts 29; 0.0007s/start)
graph_identify_natural_loops.: 0.021829s (num_starts 29; 0.0008s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.02225s (num_starts 209; 0.0001s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.022361s (num_starts 1; 0.0224s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.02253s (num_starts 209; 0.0001s/start)
populate_simplified_to_state.: 0.022573s (num_starts 2; 0.0113s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.022751s (num_starts 80; 0.0003s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.023301s (num_starts 80; 0.0003s/start)
compute_lr_status_for_expr.: 0.025537s (num_starts 279; 0.0001s/start)
compute_regions.: 0.029553s (num_starts 29; 0.0010s/start)
avail_exprs_create_submap.: 0.03104s (num_starts 240; 0.0001s/start)
populate_simplified_assets.: 0.031186s (num_starts 4; 0.0078s/start)
graph_with_predicates_constructor.src.llvm.main.: 0.03284s (num_starts 1; 0.0328s/start)
insn_db_list_get_all_matches.: 0.03661s (num_starts 24; 0.0015s/start)
insn_db_get_all_matches.: 0.036852s (num_starts 24; 0.0015s/start)
graph_visit_exprs.: 0.037943s (num_starts 31; 0.0012s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.051992s (num_starts 2396; 0.0000s/start)
graph_to_stream.: 0.056408s (num_starts 1; 0.0564s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.057824s (num_starts 80; 0.0007s/start)
populate_transitive_closure.: 0.057977s (num_starts 26; 0.0022s/start)
query:convert_to_z3.: 0.077293s (num_starts 1813; 0.0000s/start)
create_closure_matrix.: 0.081773s (num_starts 102; 0.0008s/start)
compute_new_lr_status_on_locs.: 0.08331s (num_starts 80; 0.0010s/start)
query:convert_from_z3.: 0.09464s (num_starts 1813; 0.0001s/start)
create_sp_version_relations_lattice_at_pc.: 0.105476s (num_starts 102; 0.0010s/start)
tfg_constructor.src.llvm.main.after_transitive_closure.: 0.114262s (num_starts 1; 0.1143s/start)
tfg_constructor.src.llvm.main.post_parsing.: 0.114266s (num_starts 1; 0.1143s/start)
tfg_constructor.src.llvm.main.after_string_contents.: 0.11427s (num_starts 1; 0.1143s/start)
tfg_constructor.src.llvm.main.after_compute_max_memlabel_varnum.: 0.114275s (num_starts 1; 0.1143s/start)
tfg_constructor.src.llvm.main.: 0.114279s (num_starts 1; 0.1143s/start)
populate_locs_potentially_modified_on_edge.: 0.141508s (num_starts 2; 0.0708s/start)
dst_insn_get_tfg.: 0.159255s (num_starts 24; 0.0066s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.1727s (num_starts 2; 0.0863s/start)
tfg_llvm_constructor.src.llvm.main.before_parsing_potential_scev_relations.: 0.18227s (num_starts 1; 0.1823s/start)
tfg_llvm_constructor.src.llvm.main.before_parsing_PC_to_line_and_column.: 0.182405s (num_starts 1; 0.1824s/start)
query:simplify-z3.: 0.26402s (num_starts 3626; 0.0001s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.294025s (num_starts 2593; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.295966s (num_starts 2396; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.349089s (num_starts 2396; 0.0001s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.368986s (num_starts 80; 0.0046s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.571789s (num_starts 80; 0.0071s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.687985s (num_starts 72; 0.0096s/start)
populate_loc_liveness.: 0.693123s (num_starts 1; 0.6931s/start)
tfg_postprocess_after_pointsto_analysis.: 0.775163s (num_starts 1; 0.7752s/start)
tfg_asm_t::tfg_postprocess_after_pointsto_analysis.: 0.783053s (num_starts 1; 0.7831s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.935956s (num_starts 1247; 0.0008s/start)
ftmap_run_pointsto_analysis.: 1.37452s (num_starts 1; 1.3745s/start)
tfg_run_pointsto_analysis_asm.: 1.3746s (num_starts 1; 1.3746s/start)
dst_parse_sym_exec_db.: 2.79181s (num_starts 1; 2.7918s/start)
opc_init.: 3.03517s (num_starts 1; 3.0352s/start)
i386_init.: 3.03831s (num_starts 1; 3.0383s/start)
parse_consts_db.: 3.64018s (num_starts 1; 3.6402s/start)
read_local_sprel_mapping_data.: 3.72621s (num_starts 1; 3.7262s/start)
dst_iseq_deserialize.: 4.45239s (num_starts 88672; 0.0001s/start)
gen_tfg_for_dst_iseq-main.: 6.02084s (num_starts 1; 6.0208s/start)
dst_usedef_tab_read_from_file.: 6.05804s (num_starts 1; 6.0580s/start)
dst_usedef_tab_init.: 6.05804s (num_starts 1; 6.0580s/start)
usedef_init.: 6.05804s (num_starts 1; 6.0580s/start)

counters:

flags:

info:

Context stats:
exprs: count: 145210
sorts: count: 179
num_proof_queries: 0
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	9565
	        hit ratio:	0.869629
m_simplify_solver:
	----------- total:	10653
	        hit ratio:	0.828968
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	1998
	        hit ratio:	0.828829
m_z3_solver_substitution:
	----------- total:	1813
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	1822
	        hit ratio:	0
m_expr_size:
	----------- total:	21930
	        hit ratio:	0.906703
m_contains_only_constants_or_sp_versions:
	----------- total:	21
	        hit ratio:	0.761905
m_expr_evaluates_to_constant_visitor:
	----------- total:	22453
	        hit ratio:	0.780787

z3_solver expr_query_cache entry size: 0

<MSG>0:00 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:09 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:15 : Converting assembly code to object file...</MSG>
<MSG>0:15 : Harvesting object code to obtain harvested assembly...</MSG>
<MSG>0:28 : Converting harvested assembly to Transfer Function Graph (TFG)...</MSG>
<MSG>0:50 : Searching for equivalence at unroll factor 3</MSG>
<MSG>0:51 : Computing equivalence for function: main...</MSG>
Computing equivalence for function: main...
remove_node_and_make_composite_edges 609: Warning : removing Lfor.cond%2%d, pdt.size() = 2 (> 1), incoming.size 1, outgoing.size 2
, max_expr_size = 38
remove_node_and_make_composite_edges 609: Warning : removing Lfor.cond2%2%d, pdt.size() = 2 (> 1), incoming.size 1, outgoing.size 2
, max_expr_size = 38
remove_node_and_make_composite_edges 609: Warning : removing Lfor.cond8%2%d, pdt.size() = 2 (> 1), incoming.size 1, outgoing.size 2
, max_expr_size = 38
remove_node_and_make_composite_edges 609: Warning : removing L16%1%d, pdt.size() = 2 (> 1), incoming.size 1, outgoing.size 2
, max_expr_size = 86
<MSG>0:51 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:52 : Constructing SSA for Assembly TFG...</MSG>
<MSG>0:56 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:56 : Computing equivalence of the two TFGs (LLVM IR and x86 assembly)...</MSG>
<MSG>0:56 : Chose (after CE propagation) product-TFG main (d:0, s:0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:57 : product-TFG main: Enumerating correlations for L0%0%d=>L9%1%bbentry[mu 1, delta 1] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Considering 3 paths to src pc Lfor.cond%1%bbentry as correlation candidates for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Attempting correlation of src pathset L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Attempting correlation of src pathset L0%0%d=>Lfor.cond%1%bbentry[mu 2, delta 2] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Attempting correlation of src pathset L0%0%d=>Lfor.cond%1%bbentry[mu 3, delta 2] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Found 18 feasible correlations for paths to src pc Lfor.cond%1%bbentry as correlation candidates for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Considering 3 paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Attempting correlation of src pathset L0%0%d=>Lfor.cond2%1%bbentry[mu 1, delta 1] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Attempting correlation of src pathset L0%0%d=>Lfor.cond2%1%bbentry[mu 2, delta 2] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Attempting correlation of src pathset L0%0%d=>Lfor.cond2%1%bbentry[mu 3, delta 3] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Found 18 feasible correlations for paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Considering 3 paths to src pc Lfor.cond8%1%bbentry as correlation candidates for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Attempting correlation of src pathset L0%0%d=>Lfor.cond8%1%bbentry[mu 1, delta 1] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Attempting correlation of src pathset L0%0%d=>Lfor.cond8%1%bbentry[mu 2, delta 2] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Attempting correlation of src pathset L0%0%d=>Lfor.cond8%1%bbentry[mu 3, delta 3] as correlation candidate for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : Found 18 feasible correlations for paths to src pc Lfor.cond8%1%bbentry as correlation candidates for L0%0%d=>L9%1%bbentry[mu 1, delta 1] at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : product-TFG main: Found 54 correlations for L0%0%d=>L9%1%bbentry[mu 1, delta 1] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:57 : product-TFG main created 54 possibilities in group main.A...</MSG>
<MSG>0:57 : Chose (for CE propagation) product-TFG main.A1 (d:0, s:0) from a frontier of size 54...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>0:57 : Finished adding lsprel-assumes for allocation to the product-TFG main.A1...</MSG>
<MSG>0:57 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A1...</MSG>
<MSG>0:58 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>0:58 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>0:58 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>0:58 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>0:58 : main.A1: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:58 : main.A1: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:58 : main.A1: Adding node Lentry%1%allocaI3_L0%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
<MSG>0:58 : main.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:58 : main.A1: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:58 : main.A1: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>0:58 : main.A1: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>0:58 : main.A1: Adding node Lentry%1%allocaI4_L0%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
<MSG>0:58 : main.A1: Getting alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>0:58 : main.A1: Found no alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
<MSG>0:58 : main.A1: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:58 : main.A1: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:58 : main.A1: Adding node Lfor.cond%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
<MSG>0:58 : main.A1: Getting alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:58 : main.A1: Found no alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:58 : main.A1: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:58 : main.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:58 : main.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:58 : main.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:58 : main.A1: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1</MSG>
<MSG>0:58 : main.A1: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L0%1%allocaI1 and propagated further.
</MSG>
<MSG>0:58 : main.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:58 : main.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:58 : main.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:58 : main.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>0:58 : main.A1: Adding edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>0:58 : main.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A1: returning 1 for =Lentry%1%d=
<MSG>0:58 : main.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:58 : main.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:58 : main.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:58 : main.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:58 : main.A1: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>0:58 : main.A1: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>0:58 : main.A1: Adding edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:58 : main.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:58 : main.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:58 : main.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:58 : main.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:58 : main.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:58 : main.A1: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:58 : main.A1: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:58 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>0:58 : Added correlation to the product-TFG main.A1 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>0:58 : Chose (after CE propagation) product-TFG main.A1 (d:0, s:0) from a frontier of size 54...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 12 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 28 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>0:58 : main.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:58 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1, Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2, Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>0:58 : main.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>0:58 : main.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: unchanged</MSG>
<MSG>0:58 : main.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:59 : main.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>0:59 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:04 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht19-prove_trivial7-prove12...</MSG>
<MSG>1:04 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:04 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:04 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:04 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:04 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:04 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:04 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:04 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed ...</MSG>
<MSG>1:05 : main.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>1:05 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:05 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed</MSG>
<MSG>1:05 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>1:05 : main.A1: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:05 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 3 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:08 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>1:08 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : main.A1: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed ...</MSG>
<MSG>1:09 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:09 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:10 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed</MSG>
<MSG>1:10 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>1:10 : main.A1: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:10 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:10 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:10 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:10 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:10 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:10 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:10 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:10 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:10 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:10 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:10 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:10 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:10 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:10 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:10 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:10 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:10 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 28 exprs and 9 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht26-prove_trivial12-prove14...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:12 : main.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:12 : main.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht6-prove_trivial0-prove6...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 6 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : main.A1: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed ...</MSG>
<MSG>1:14 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed( 1, 1 ) ...</MSG>
<MSG>1:14 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:15 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed</MSG>
<MSG>1:15 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>1:15 : main.A1: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:15 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 28 exprs and 13 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht19-prove_trivial9-prove10...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 6 exprs and 3 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>1:17 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed( 1, 0 ) ...</MSG>
<MSG>1:17 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:17 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: unchanged</MSG>
<MSG>1:17 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>1:17 : main.A1: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:17 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:18 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:18 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:18 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:18 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:18 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:18 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:18 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:18 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:18 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 9 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:18 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht7-prove_trivial5-prove2...</MSG>
<MSG>1:18 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:18 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:18 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:18 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:18 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:18 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:18 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: unchanged ...</MSG>
<MSG>1:19 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:19 : main.A1: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:19 : main.A1: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>1:19 : main.A1: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>1:19 : main.A1: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:19 : main.A1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:19 : main.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 28 exprs and 13 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht19-prove_trivial9-prove10...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 6 exprs and 3 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:20 : main.A1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:20 : main.A1: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>1:20 : main.A1: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:20 : main.A1 (d:0, s:0): checked newly added edge and inferred invariants...</MSG>
<MSG>1:20 : main.A1 (d:0, s:0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:20 : product-TFG main.A1: Enumerating correlations for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] starting at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:20 : Considering 4 paths to src pc Lfor.cond%1%bbentry as correlation candidates for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:20 : Attempting correlation of src pathset Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 0, delta 0] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:20 : Attempting correlation of src pathset Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:20 : Attempting correlation of src pathset Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 2, delta 2] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:20 : Attempting correlation of src pathset Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 3, delta 3] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:20 : Found 4 feasible correlations for paths to src pc Lfor.cond%1%bbentry as correlation candidates for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:20 : product-TFG main.A1: Found 4 correlations for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] starting at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:20 : product-TFG main.A1 created 4 possibilities in group main.A1.B...</MSG>
<MSG>1:20 : Chose (for CE propagation) product-TFG main.A1.B1 (d:0, s:0) from a frontier of size 57...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 16 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 9 counterexamples (for correlating 12 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 23 counterexamples (for correlating 28 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 0, delta 0]
<MSG>1:20 : Finished adding lsprel-assumes for allocation to the product-TFG main.A1.B1...</MSG>
<MSG>1:20 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A1.B1...</MSG>
<MSG>1:20 : Creating ssa-path for the src-tfg path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:20 : Adding a CG edge composition using the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>1:20 : Identifying common alloc-deallocs in the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>1:20 : Identified no common alloc-deallocs in the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>1:20 : Adding new edge to the product-TFG main.A1.B1 for fromPC Lfor.cond%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L9%1%bbentry, src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>1:20 : main.A1.B1: Getting alloca-ptrs on edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:20 : main.A1.B1: Found no alloca-ptrs on edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:20 : main.A1.B1: Adding edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:20 : main.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:20 : main.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:20 : main.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:21 : main.A1.B1: Propagated 15 out of 23 counter-examples across edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry</MSG>
<MSG>1:21 : main.A1.B1: Added the 15 propagated CEs at PC Lfor.cond%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>1:21 : main.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:21 : main.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>1:21 : main.A1.B1: Computing CG regions after the addition of the edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:21 : main.A1.B1: Done computing CG regions after the addition of the edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:21 : Done adding new edge to the product-TFG main.A1.B1 for fromPC Lfor.cond%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L9%1%bbentry, src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>1:21 : Done adding a CG edge composition using the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>1:21 : Added correlation to the product-TFG main.A1.B1 (d:1, s:1) and created a correlation entry...</MSG>
<MSG>1:21 : Chose (for CE propagation) product-TFG main.A1.B2 (d:0, s:0) from a frontier of size 57...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 16 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 9 counterexamples (for correlating 12 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 23 counterexamples (for correlating 28 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:21 : Finished adding lsprel-assumes for allocation to the product-TFG main.A1.B2...</MSG>
<MSG>1:21 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A1.B2...</MSG>
<MSG>1:21 : Creating ssa-path for the src-tfg path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:21 : Adding a CG edge composition using the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>1:21 : Identifying common alloc-deallocs in the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>1:21 : Identified no common alloc-deallocs in the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>1:21 : Adding new edge to the product-TFG main.A1.B2 for fromPC Lfor.cond%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L9%1%bbentry, src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>1:21 : main.A1.B2: Getting alloca-ptrs on edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:21 : main.A1.B2: Found no alloca-ptrs on edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:21 : main.A1.B2: Adding edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:21 : main.A1.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:21 : main.A1.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:21 : main.A1.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:21 : main.A1.B2: marking unstable at Lfor.cond%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L9%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 3
162930 : eq(140296, 142435) : BOOL                 : false
162931 : not(162930) : BOOL                        : true
162943 : andnot1(143690, 162931) : BOOL            : true
163775 : not(162943) : BOOL                        : false

ce =
=counter_example_begin yices.ce1589.fuzzed 17eae83839f9cdd84be26c4e7f47a2
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 536870919 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 536870920; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 536870919 { 0x20000007 +1.83e193 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 536870919 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 536870920; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, { [ 0; 1023 ], [ 1028; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
960125143
=counter_example_end


failcond-expr = not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), not(eq(1, input.dst.exreg.0.0.L9%1%bbentry)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : not(7) : BOOL
9 : andnot1(4, 8) : BOOL
10 : not(9) : BOOL
</MSG>
<MSG>1:21 : main.A1.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:22 : main.A1.B2: Finished executing CG's add edge function...</MSG>
<MSG>1:22 : main.A1.B2: Computing CG regions after the addition of the edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:22 : main.A1.B2: Done computing CG regions after the addition of the edge Lfor.cond%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:22 : Done adding new edge to the product-TFG main.A1.B2 for fromPC Lfor.cond%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L9%1%bbentry, src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>1:22 : Done adding a CG edge composition using the src path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>1:22 : Failed correlation of src pathset Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L9%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 3
162930 : eq(140296, 142435) : BOOL                 : false
162931 : not(162930) : BOOL                        : true
162943 : andnot1(143690, 162931) : BOOL            : true
163775 : not(162943) : BOOL                        : false

ce =
=counter_example_begin yices.ce1589.fuzzed 17eae83839f9cdd84be26c4e7f47a2
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 536870919 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 536870920; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 536870919 { 0x20000007 +1.83e193 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 536870919 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 536870920; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, { [ 0; 1023 ], [ 1028; 4294967295 ], } -> (RAC: m_multiplier -> 244 , m_adder -> 117), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
960125143
=counter_example_end


</MSG>
<MSG>1:22 : Discovered that the correlation was useless for the product-TFG main.A1.B2 (d:0, s:0)...</MSG>
<MSG>1:22 : Chose (for CE propagation) product-TFG main.A2 (d:0, s:0) from a frontier of size 54...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:22 : Finished adding lsprel-assumes for allocation to the product-TFG main.A2...</MSG>
<MSG>1:22 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A2...</MSG>
<MSG>1:22 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:22 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:22 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>1:22 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:22 : main.A2: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:22 : main.A2: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:22 : main.A2: Adding node Lentry%1%allocaI3_L1%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%1%d=
<MSG>1:22 : main.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:22 : main.A2: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:22 : main.A2: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
<MSG>1:22 : main.A2: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
<MSG>1:22 : main.A2: Adding node Lentry%1%allocaI4_L1%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%1%d=
<MSG>1:22 : main.A2: Getting alloca-ptrs on edge Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
<MSG>1:22 : main.A2: Found no alloca-ptrs on edge Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%1%d=
<MSG>1:22 : main.A2: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:22 : main.A2: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:22 : main.A2: Adding node Lfor.cond%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%1%d=
<MSG>1:22 : main.A2: Getting alloca-ptrs on edge Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:22 : main.A2: Found no alloca-ptrs on edge Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:22 : main.A2: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:22 : main.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:22 : main.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:22 : main.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:22 : main.A2: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1</MSG>
<MSG>1:22 : main.A2: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L1%1%allocaI1 and propagated further.
</MSG>
<MSG>1:22 : main.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:22 : main.A2: Finished executing CG's add edge function...</MSG>
<MSG>1:22 : main.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:22 : main.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1...</MSG>
<MSG>1:22 : main.A2: Adding edge Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
<MSG>1:22 : main.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A2: returning 0 for =Lentry%1%d=
<MSG>1:22 : main.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:22 : main.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:22 : main.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:22 : main.A2: Finished executing CG's add edge function...</MSG>
<MSG>1:22 : main.A2: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
<MSG>1:22 : main.A2: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2...</MSG>
<MSG>1:22 : main.A2: Adding edge Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:22 : main.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:22 : main.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:22 : main.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:22 : main.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:23 : main.A2: Finished executing CG's add edge function...</MSG>
<MSG>1:23 : main.A2: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:23 : main.A2: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:23 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:23 : Added correlation to the product-TFG main.A2 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:23 : Chose (after CE propagation) product-TFG main.A2 (d:0, s:0) from a frontier of size 54...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 24 at mu 1 delta 1)
            Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 24 => A line 24 at mu 1 delta 1)
            Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 24 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L1%1%allocaI1 (C line 14, A line 24)
                Lentry%1%allocaI3_L1%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 17 bv exprs)
            Lentry%1%allocaI4_L1%1%allocaI2 (C line 14, A line 24)
                Lentry%1%allocaI4_L1%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 17 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 27 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L1%1%spver:
  	  local.=Lentry%1%d= == input.dst.sp=L1%1%spver=sp.L1%1%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:23 : main.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:23 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1, Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2, Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:23 : main.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1) ...</MSG>
<MSG>1:23 : main.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1), result: unchanged</MSG>
<MSG>1:23 : main.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:23 : main.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1) ...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:23 : main.A2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:23 : main.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 17 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 1 proof-stats=dht15-prove_trivial2-prove13...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:29 : main.A2: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:29 : main.A2: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:30 : main.A2: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:30 : main.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1), result: changed ...</MSG>
<MSG>1:30 : main.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>1:30 : main.A2: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2) ...</MSG>
<MSG>1:30 : main.A2: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2), result: changed</MSG>
<MSG>1:30 : main.A2: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L1%1%allocaI1 ...</MSG>
<MSG>1:31 : main.A2: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2) ...</MSG>
<MSG>1:31 : main.A2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:31 : main.A2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:31 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:31 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:31 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:31 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:31 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:31 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:31 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:31 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:31 : main.A2: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:31 : main.A2: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:31 : main.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:31 : main.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:31 : main.A2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:31 : main.A2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:31 : main.A2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:31 : main.A2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:31 : main.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 17 exprs and 9 CEs across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)...</MSG>
<MSG>1:32 : main.A2: marking unstable at Lfor.cond%1%bbentry_L9%1%bbentry due to failing condition:
memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.stability-failure
failcond-expr = memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/):
1 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
3 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
4 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
6 : memmasks_are_equal(1, 2, 3, 4, 5) : BOOL
</MSG>
<MSG>1:32 : main.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2). changed = 1 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>1:32 : main.A2: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2), result: changed ...</MSG>
<MSG>1:32 : main.A2: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:32 : main.A2: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)*((Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)*(Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))) became unstable after invariant inference</MSG>
<MSG>1:32 : Chosen product-TFG main.A2 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1)*((Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2)*(Lentry%1%allocaI4_L1%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))))
</MSG>
<MSG>1:32 : Chose (for CE propagation) product-TFG main.A6 (d:0, s:0) from a frontier of size 53...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:32 : Finished adding lsprel-assumes for allocation to the product-TFG main.A6...</MSG>
<MSG>1:32 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A6...</MSG>
<MSG>1:33 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:33 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:33 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>1:33 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:33 : main.A6: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:33 : main.A6: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:33 : main.A6: Adding node Lentry%1%allocaI3_L7%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A6: returning 0 for =Lentry%1%d=
<MSG>1:33 : main.A6: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:33 : main.A6: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:33 : main.A6: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
<MSG>1:33 : main.A6: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
<MSG>1:33 : main.A6: Adding node Lentry%1%allocaI4_L7%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A6: returning 0 for =Lentry%1%d=
<MSG>1:33 : main.A6: Getting alloca-ptrs on edge Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
<MSG>1:33 : main.A6: Found no alloca-ptrs on edge Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A6: returning 0 for =Lentry%1%d=
<MSG>1:33 : main.A6: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:33 : main.A6: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:33 : main.A6: Adding node Lfor.cond%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A6: returning 0 for =Lentry%1%d=
<MSG>1:33 : main.A6: Getting alloca-ptrs on edge Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:33 : main.A6: Found no alloca-ptrs on edge Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:33 : main.A6: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:33 : main.A6: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:33 : main.A6: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:33 : main.A6: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:33 : main.A6: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1</MSG>
<MSG>1:33 : main.A6: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L7%1%allocaI1 and propagated further.
</MSG>
<MSG>1:33 : main.A6: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:33 : main.A6: Finished executing CG's add edge function...</MSG>
<MSG>1:33 : main.A6: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:33 : main.A6: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1...</MSG>
<MSG>1:33 : main.A6: Adding edge Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
<MSG>1:33 : main.A6: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A6: returning 0 for =Lentry%1%d=
<MSG>1:33 : main.A6: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:33 : main.A6: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:33 : main.A6: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:33 : main.A6: Finished executing CG's add edge function...</MSG>
<MSG>1:33 : main.A6: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
<MSG>1:33 : main.A6: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2...</MSG>
<MSG>1:33 : main.A6: Adding edge Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:33 : main.A6: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:33 : main.A6: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:33 : main.A6: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:33 : main.A6: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:33 : main.A6: Finished executing CG's add edge function...</MSG>
<MSG>1:33 : main.A6: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:33 : main.A6: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:33 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:33 : Added correlation to the product-TFG main.A6 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:33 : Chose (after CE propagation) product-TFG main.A6 (d:0, s:0) from a frontier of size 53...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 32 at mu 1 delta 1)
            Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 32 => A line 32 at mu 1 delta 1)
            Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 32 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L7%1%allocaI1 (C line 14, A line 32)
                Lentry%1%allocaI3_L7%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 26 bv exprs)
            Lentry%1%allocaI4_L7%1%allocaI2 (C line 14, A line 32)
                Lentry%1%allocaI4_L7%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 25 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L7%1%spver:
  	  local.=Lentry%1%d= == input.dst.sp=L7%1%spver=sp.L7%1%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:33 : main.A6: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:33 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1, Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2, Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:33 : main.A6: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1) ...</MSG>
<MSG>1:34 : main.A6: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1), result: unchanged</MSG>
<MSG>1:34 : main.A6: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:34 : main.A6: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1) ...</MSG>
<MSG>1:34 : main.A6: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:34 : main.A6: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:34 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:34 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:34 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:34 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:34 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:34 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:34 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:34 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:34 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:34 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:34 : main.A6: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:34 : main.A6: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:34 : main.A6: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:34 : main.A6: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:34 : main.A6: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:34 : main.A6: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:34 : main.A6: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 26 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:39 : main.A6: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 1 proof-stats=dht23-prove_trivial3-prove20...</MSG>
<MSG>1:39 : main.A6: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 6 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:39 : main.A6: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht6-prove_trivial0-prove6...</MSG>
<MSG>1:39 : main.A6: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:39 : main.A6: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:39 : main.A6: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:39 : main.A6: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:39 : main.A6: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:39 : main.A6: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:39 : main.A6: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:39 : main.A6: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:39 : main.A6: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:40 : main.A6: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:40 : main.A6: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:40 : main.A6: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:40 : main.A6: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:40 : main.A6: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:40 : main.A6: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)...</MSG>
<MSG>1:40 : main.A6: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:40 : main.A6: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1), result: changed ...</MSG>
<MSG>1:40 : main.A6: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>1:40 : main.A6: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2) ...</MSG>
<MSG>1:40 : main.A6: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2), result: changed</MSG>
<MSG>1:40 : main.A6: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L7%1%allocaI1 ...</MSG>
<MSG>1:41 : main.A6: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2) ...</MSG>
<MSG>1:41 : main.A6: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:41 : main.A6: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:41 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:41 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:41 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:41 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:41 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:41 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:41 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:41 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:41 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:41 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:41 : main.A6: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:41 : main.A6: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:41 : main.A6: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:41 : main.A6: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:41 : main.A6: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:41 : main.A6: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:41 : main.A6: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 25 exprs and 9 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:42 : main.A6: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht17-prove_trivial14-prove3...</MSG>
<MSG>1:42 : main.A6: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 6 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:42 : main.A6: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:42 : main.A6: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:42 : main.A6: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:42 : main.A6: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:42 : main.A6: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:42 : main.A6: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:42 : main.A6: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:42 : main.A6: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:42 : main.A6: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:42 : main.A6: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:42 : main.A6: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:42 : main.A6: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:43 : main.A6: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:43 : main.A6: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:43 : main.A6: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:43 : main.A6: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:43 : main.A6: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:43 : main.A6: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)...</MSG>
<MSG>1:43 : main.A6: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:43 : main.A6: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2), result: changed ...</MSG>
<MSG>1:43 : main.A6: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:43 : main.A6: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:43 : main.A6: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed</MSG>
<MSG>1:43 : main.A6: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L7%1%allocaI2 ...</MSG>
<MSG>1:43 : main.A6: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>1:43 : main.A6: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:43 : main.A6: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:43 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:43 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:43 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:43 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:43 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:43 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:43 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:43 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:43 : main.A6: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>1:44 : main.A6: marking unstable at Lfor.cond%1%bbentry_L9%1%bbentry due to failing condition:
memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.stability-failure
failcond-expr = memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/):
1 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
3 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
4 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
6 : memmasks_are_equal(1, 2, 3, 4, 5) : BOOL
</MSG>
<MSG>1:44 : main.A6: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:44 : main.A6: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed ...</MSG>
<MSG>1:44 : main.A6: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry), result: changed( 1, 1 ) ...</MSG>
<MSG>1:44 : main.A6: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)*((Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)*(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))) became unstable after invariant inference</MSG>
<MSG>1:44 : Chosen product-TFG main.A6 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1)*((Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2)*(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))))
</MSG>
<MSG>1:44 : Chose (for CE propagation) product-TFG main.A3 (d:0, s:0) from a frontier of size 52...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:44 : Finished adding lsprel-assumes for allocation to the product-TFG main.A3...</MSG>
<MSG>1:44 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A3...</MSG>
<MSG>1:44 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:44 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:44 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>1:44 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:44 : main.A3: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:44 : main.A3: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:44 : main.A3: Adding node Lentry%1%allocaI3_L3%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A3: returning 0 for =Lentry%1%d=
<MSG>1:44 : main.A3: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:44 : main.A3: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:44 : main.A3: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
<MSG>1:44 : main.A3: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
<MSG>1:44 : main.A3: Adding node Lentry%1%allocaI4_L3%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A3: returning 0 for =Lentry%1%d=
<MSG>1:44 : main.A3: Getting alloca-ptrs on edge Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
<MSG>1:44 : main.A3: Found no alloca-ptrs on edge Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A3: returning 0 for =Lentry%1%d=
<MSG>1:44 : main.A3: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:44 : main.A3: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:44 : main.A3: Adding node Lfor.cond%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A3: returning 0 for =Lentry%1%d=
<MSG>1:44 : main.A3: Getting alloca-ptrs on edge Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:44 : main.A3: Found no alloca-ptrs on edge Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:44 : main.A3: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:44 : main.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:44 : main.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:44 : main.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:44 : main.A3: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1</MSG>
<MSG>1:44 : main.A3: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L3%1%allocaI1 and propagated further.
</MSG>
<MSG>1:44 : main.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:44 : main.A3: Finished executing CG's add edge function...</MSG>
<MSG>1:44 : main.A3: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:44 : main.A3: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1...</MSG>
<MSG>1:44 : main.A3: Adding edge Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
<MSG>1:44 : main.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A3: returning 0 for =Lentry%1%d=
<MSG>1:44 : main.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:44 : main.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:44 : main.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:44 : main.A3: Finished executing CG's add edge function...</MSG>
<MSG>1:44 : main.A3: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
<MSG>1:44 : main.A3: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2...</MSG>
<MSG>1:44 : main.A3: Adding edge Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:44 : main.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:44 : main.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:44 : main.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:44 : main.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:45 : main.A3: Finished executing CG's add edge function...</MSG>
<MSG>1:45 : main.A3: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:45 : main.A3: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:45 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:45 : Added correlation to the product-TFG main.A3 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:45 : Chose (after CE propagation) product-TFG main.A3 (d:0, s:0) from a frontier of size 52...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 26 at mu 1 delta 1)
            Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 26 => A line 26 at mu 1 delta 1)
            Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 26 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L3%1%allocaI1 (C line 14, A line 26)
                Lentry%1%allocaI3_L3%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 20 bv exprs)
            Lentry%1%allocaI4_L3%1%allocaI2 (C line 14, A line 26)
                Lentry%1%allocaI4_L3%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 19 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 27 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L3%1%spver:
  	  local.=Lentry%1%d= == input.dst.sp=L3%1%spver=sp.L3%1%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:45 : main.A3: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:45 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1, Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2, Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:45 : main.A3: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1) ...</MSG>
<MSG>1:45 : main.A3: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1), result: unchanged</MSG>
<MSG>1:45 : main.A3: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:45 : main.A3: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1) ...</MSG>
<MSG>1:45 : main.A3: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:45 : main.A3: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:45 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:45 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:45 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:45 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:45 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:45 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:45 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:45 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:45 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:45 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:45 : main.A3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:45 : main.A3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:45 : main.A3: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:45 : main.A3: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:45 : main.A3: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:46 : main.A3: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:46 : main.A3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:51 : main.A3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 1 proof-stats=dht19-prove_trivial4-prove15...</MSG>
<MSG>1:51 : main.A3: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 4 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:52 : main.A3: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:52 : main.A3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:52 : main.A3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:52 : main.A3: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:52 : main.A3: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:52 : main.A3: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:52 : main.A3: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:52 : main.A3: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:52 : main.A3: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:52 : main.A3: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:52 : main.A3: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:52 : main.A3: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:52 : main.A3: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:52 : main.A3: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:52 : main.A3: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:52 : main.A3: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)...</MSG>
<MSG>1:52 : main.A3: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:52 : main.A3: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1), result: changed ...</MSG>
<MSG>1:52 : main.A3: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>1:52 : main.A3: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2) ...</MSG>
<MSG>1:52 : main.A3: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2), result: changed</MSG>
<MSG>1:52 : main.A3: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L3%1%allocaI1 ...</MSG>
<MSG>1:53 : main.A3: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2) ...</MSG>
<MSG>1:53 : main.A3: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:53 : main.A3: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:53 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:53 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:53 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:53 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:53 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:53 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:53 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:53 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:53 : main.A3: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:53 : main.A3: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:53 : main.A3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:53 : main.A3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:53 : main.A3: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:53 : main.A3: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:53 : main.A3: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:53 : main.A3: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:53 : main.A3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 9 CEs across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)...</MSG>
<MSG>1:54 : main.A3: marking unstable at Lfor.cond%1%bbentry_L9%1%bbentry due to failing condition:
memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.stability-failure
failcond-expr = memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/):
1 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
3 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
4 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
6 : memmasks_are_equal(1, 2, 3, 4, 5) : BOOL
</MSG>
<MSG>1:54 : main.A3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:54 : main.A3: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2), result: changed ...</MSG>
<MSG>1:54 : main.A3: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>1:54 : main.A3: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)*((Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)*(Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))) became unstable after invariant inference</MSG>
<MSG>1:54 : Chosen product-TFG main.A3 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1)*((Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2)*(Lentry%1%allocaI4_L3%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))))
</MSG>
<MSG>1:54 : Chose (for CE propagation) product-TFG main.A4 (d:0, s:0) from a frontier of size 51...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:54 : Finished adding lsprel-assumes for allocation to the product-TFG main.A4...</MSG>
<MSG>1:54 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A4...</MSG>
<MSG>1:55 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>1:55 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:55 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>1:55 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:55 : main.A4: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:55 : main.A4: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:55 : main.A4: Adding node Lentry%1%allocaI3_L4%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A4: returning 0 for =Lentry%1%d=
<MSG>1:55 : main.A4: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:55 : main.A4: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:55 : main.A4: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
<MSG>1:55 : main.A4: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
<MSG>1:55 : main.A4: Adding node Lentry%1%allocaI4_L4%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A4: returning 0 for =Lentry%1%d=
<MSG>1:55 : main.A4: Getting alloca-ptrs on edge Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
<MSG>1:55 : main.A4: Found no alloca-ptrs on edge Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A4: returning 0 for =Lentry%1%d=
<MSG>1:55 : main.A4: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:55 : main.A4: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:55 : main.A4: Adding node Lfor.cond%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A4: returning 0 for =Lentry%1%d=
<MSG>1:55 : main.A4: Getting alloca-ptrs on edge Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:55 : main.A4: Found no alloca-ptrs on edge Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:55 : main.A4: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:55 : main.A4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:55 : main.A4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:55 : main.A4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:55 : main.A4: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1</MSG>
<MSG>1:55 : main.A4: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L4%1%allocaI1 and propagated further.
</MSG>
<MSG>1:55 : main.A4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:55 : main.A4: Finished executing CG's add edge function...</MSG>
<MSG>1:55 : main.A4: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:55 : main.A4: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1...</MSG>
<MSG>1:55 : main.A4: Adding edge Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
<MSG>1:55 : main.A4: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A4: returning 0 for =Lentry%1%d=
<MSG>1:55 : main.A4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:55 : main.A4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:55 : main.A4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:55 : main.A4: Finished executing CG's add edge function...</MSG>
<MSG>1:55 : main.A4: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
<MSG>1:55 : main.A4: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2...</MSG>
<MSG>1:55 : main.A4: Adding edge Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:55 : main.A4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:55 : main.A4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:55 : main.A4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:55 : main.A4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:55 : main.A4: Finished executing CG's add edge function...</MSG>
<MSG>1:55 : main.A4: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:55 : main.A4: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:55 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>1:55 : Added correlation to the product-TFG main.A4 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>1:55 : Chose (after CE propagation) product-TFG main.A4 (d:0, s:0) from a frontier of size 51...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 27 at mu 1 delta 1)
            Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 27 => A line 27 at mu 1 delta 1)
            Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 27 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L4%1%allocaI1 (C line 14, A line 27)
                Lentry%1%allocaI3_L4%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 20 bv exprs)
            Lentry%1%allocaI4_L4%1%allocaI2 (C line 14, A line 27)
                Lentry%1%allocaI4_L4%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 19 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 27 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L4%1%spver:
  	  local.=Lentry%1%d= == input.dst.sp=L4%1%spver=sp.L4%1%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>1:55 : main.A4: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:55 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1, Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2, Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>1:55 : main.A4: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1) ...</MSG>
<MSG>1:55 : main.A4: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1), result: unchanged</MSG>
<MSG>1:55 : main.A4: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>1:55 : main.A4: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1) ...</MSG>
<MSG>1:55 : main.A4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:55 : main.A4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:55 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:55 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:55 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:56 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:56 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:56 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:56 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:56 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:56 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:56 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:56 : main.A4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:56 : main.A4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:56 : main.A4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:56 : main.A4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:56 : main.A4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>1:56 : main.A4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:56 : main.A4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>2:00 : main.A4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 1 proof-stats=dht16-prove_trivial3-prove13...</MSG>
<MSG>2:00 : main.A4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 5 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>2:01 : main.A4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>2:01 : main.A4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>2:01 : main.A4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:01 : main.A4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>2:01 : main.A4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:01 : main.A4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>2:01 : main.A4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:01 : main.A4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>2:01 : main.A4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:01 : main.A4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>2:01 : main.A4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:01 : main.A4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>2:01 : main.A4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:01 : main.A4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>2:01 : main.A4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:01 : main.A4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)...</MSG>
<MSG>2:01 : main.A4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:01 : main.A4: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1), result: changed ...</MSG>
<MSG>2:01 : main.A4: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>2:01 : main.A4: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2) ...</MSG>
<MSG>2:01 : main.A4: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2), result: changed</MSG>
<MSG>2:01 : main.A4: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L4%1%allocaI1 ...</MSG>
<MSG>2:02 : main.A4: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2) ...</MSG>
<MSG>2:02 : main.A4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>2:02 : main.A4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:02 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>2:02 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:02 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>2:02 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:02 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>2:02 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:02 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>2:02 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:02 : main.A4: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>2:02 : main.A4: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:02 : main.A4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>2:02 : main.A4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:02 : main.A4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>2:02 : main.A4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:02 : main.A4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>2:02 : main.A4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:02 : main.A4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 8 CEs across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)...</MSG>
<MSG>2:03 : main.A4: marking unstable at Lfor.cond%1%bbentry_L9%1%bbentry due to failing condition:
memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.stability-failure
failcond-expr = memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/):
1 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
3 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
4 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
6 : memmasks_are_equal(1, 2, 3, 4, 5) : BOOL
</MSG>
<MSG>2:03 : main.A4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:03 : main.A4: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2), result: changed ...</MSG>
<MSG>2:03 : main.A4: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>2:03 : main.A4: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)*((Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)*(Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))) became unstable after invariant inference</MSG>
<MSG>2:03 : Chosen product-TFG main.A4 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1)*((Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2)*(Lentry%1%allocaI4_L4%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))))
</MSG>
<MSG>2:03 : Chose (for CE propagation) product-TFG main.A5 (d:0, s:0) from a frontier of size 50...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>2:03 : Finished adding lsprel-assumes for allocation to the product-TFG main.A5...</MSG>
<MSG>2:03 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A5...</MSG>
<MSG>2:04 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:04 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>2:04 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>2:04 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>2:04 : main.A5: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:04 : main.A5: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:04 : main.A5: Adding node Lentry%1%allocaI3_L6%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%1%d=
<MSG>2:04 : main.A5: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:04 : main.A5: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:04 : main.A5: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
<MSG>2:04 : main.A5: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
<MSG>2:04 : main.A5: Adding node Lentry%1%allocaI4_L6%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%1%d=
<MSG>2:04 : main.A5: Getting alloca-ptrs on edge Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
<MSG>2:04 : main.A5: Found no alloca-ptrs on edge Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%1%d=
<MSG>2:04 : main.A5: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:04 : main.A5: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:04 : main.A5: Adding node Lfor.cond%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%1%d=
<MSG>2:04 : main.A5: Getting alloca-ptrs on edge Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:04 : main.A5: Found no alloca-ptrs on edge Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:04 : main.A5: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:04 : main.A5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:04 : main.A5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:04 : main.A5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:04 : main.A5: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1</MSG>
<MSG>2:04 : main.A5: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L6%1%allocaI1 and propagated further.
</MSG>
<MSG>2:04 : main.A5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:04 : main.A5: Finished executing CG's add edge function...</MSG>
<MSG>2:04 : main.A5: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:04 : main.A5: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1...</MSG>
<MSG>2:04 : main.A5: Adding edge Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
<MSG>2:04 : main.A5: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A5: returning 0 for =Lentry%1%d=
<MSG>2:04 : main.A5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:04 : main.A5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:04 : main.A5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:04 : main.A5: Finished executing CG's add edge function...</MSG>
<MSG>2:04 : main.A5: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
<MSG>2:04 : main.A5: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2...</MSG>
<MSG>2:04 : main.A5: Adding edge Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:04 : main.A5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:04 : main.A5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:04 : main.A5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:04 : main.A5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:04 : main.A5: Finished executing CG's add edge function...</MSG>
<MSG>2:04 : main.A5: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:04 : main.A5: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:04 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>2:04 : Added correlation to the product-TFG main.A5 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>2:04 : Chose (after CE propagation) product-TFG main.A5 (d:0, s:0) from a frontier of size 50...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 30 at mu 1 delta 1)
            Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 30 => A line 30 at mu 1 delta 1)
            Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry (C line 14 => C (line 17 at column 12) at mu 1 delta 1, A line 30 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L6%1%allocaI1 (C line 14, A line 30)
                Lentry%1%allocaI3_L6%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 21 bv exprs)
            Lentry%1%allocaI4_L6%1%allocaI2 (C line 14, A line 30)
                Lentry%1%allocaI4_L6%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 20 bv exprs)
            Lfor.cond%1%bbentry_L9%1%bbentry (C (line 17 at column 12), A line 36)
                Lfor.cond%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 28 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L6%1%spver:
  	  local.=Lentry%1%d= == input.dst.sp=L6%1%spver=sp.L6%1%spver

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>2:04 : main.A5: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:04 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1, Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2, Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:04 : main.A5: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1) ...</MSG>
<MSG>2:04 : main.A5: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1), result: unchanged</MSG>
<MSG>2:04 : main.A5: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>2:04 : main.A5: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1) ...</MSG>
<MSG>2:05 : main.A5: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:05 : main.A5: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:05 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:05 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:05 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:05 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:05 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:05 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:05 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:05 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:05 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:05 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:05 : main.A5: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:05 : main.A5: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:05 : main.A5: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:05 : main.A5: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:05 : main.A5: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:05 : main.A5: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:05 : main.A5: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 21 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:10 : main.A5: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 1 proof-stats=dht20-prove_trivial3-prove17...</MSG>
<MSG>2:10 : main.A5: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 6 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:10 : main.A5: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht6-prove_trivial0-prove6...</MSG>
<MSG>2:10 : main.A5: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:10 : main.A5: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:10 : main.A5: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:10 : main.A5: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:10 : main.A5: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:10 : main.A5: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:10 : main.A5: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:10 : main.A5: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:10 : main.A5: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:11 : main.A5: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:11 : main.A5: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:11 : main.A5: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:11 : main.A5: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:11 : main.A5: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:11 : main.A5: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)...</MSG>
<MSG>2:11 : main.A5: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:11 : main.A5: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1), result: changed ...</MSG>
<MSG>2:11 : main.A5: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>2:11 : main.A5: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2) ...</MSG>
<MSG>2:11 : main.A5: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2), result: changed</MSG>
<MSG>2:11 : main.A5: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L6%1%allocaI1 ...</MSG>
<MSG>2:12 : main.A5: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2) ...</MSG>
<MSG>2:12 : main.A5: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:12 : main.A5: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:12 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:12 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:12 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:12 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:12 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:12 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:12 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:12 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:12 : main.A5: Relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:12 : main.A5: Done relaxing invariant eqclass memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:12 : main.A5: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:12 : main.A5: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:12 : main.A5: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:12 : main.A5: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:12 : main.A5: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:12 : main.A5: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:12 : main.A5: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 7 CEs across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)...</MSG>
<MSG>2:13 : main.A5: marking unstable at Lfor.cond%1%bbentry_L9%1%bbentry due to failing condition:
memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.stability-failure
failcond-expr = memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/):
1 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
3 : input.dst.mem.L8%1%d : ARRAY[BV:32 -> BV:8]
4 : input.dst.mem.alloc.L8%1%d : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
6 : memmasks_are_equal(1, 2, 3, 4, 5) : BOOL
</MSG>
<MSG>2:13 : main.A5: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:13 : main.A5: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2), result: changed ...</MSG>
<MSG>2:13 : main.A5: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>2:13 : main.A5: edge composition ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)*((Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)*(Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))) became unstable after invariant inference</MSG>
<MSG>2:13 : Chosen product-TFG main.A5 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: ((L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1)*((Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2)*(Lentry%1%allocaI4_L6%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry))))
</MSG>
<MSG>2:13 : Chose (for CE propagation) product-TFG main.A19 (d:0, s:0) from a frontier of size 49...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>2:13 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19...</MSG>
<MSG>2:13 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19...</MSG>
<MSG>2:13 : Creating ssa-path for the src-tfg path L0%0%d --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:13 : Adding a CG edge composition using the src path L0%0%d --> Lfor.cond2%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>2:13 : Identifying common alloc-deallocs in the src path L0%0%d --> Lfor.cond2%1%bbentry and dst path L0%0%d --> L9%1%bbentry
</MSG>
<MSG>2:13 : Identified 2 common alloc-deallocs in the src path L0%0%d --> Lfor.cond2%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>2:13 : main.A19: Computing loop hoisting select expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:13 : main.A19: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:13 : main.A19: Adding node Lentry%1%allocaI3_L0%1%allocaI1 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19: returning 1 for =Lentry%1%d=
<MSG>2:13 : main.A19: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:13 : main.A19: Found 1 alloca-ptrs on edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:13 : main.A19: Computing loop hoisting select expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:13 : main.A19: Computing loop hoisting non-linear expressions at toPC Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:13 : main.A19: Adding node Lentry%1%allocaI4_L0%1%allocaI2 to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19: returning 1 for =Lentry%1%d=
<MSG>2:13 : main.A19: Getting alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:13 : main.A19: Found no alloca-ptrs on edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
local_is_heap_allocated 3811: main.A19: returning 1 for =Lentry%1%d=
<MSG>2:13 : main.A19: Computing loop hoisting select expressions at toPC Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:13 : main.A19: Computing loop hoisting non-linear expressions at toPC Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:13 : main.A19: Adding node Lfor.cond2%1%bbentry_L9%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19: returning 1 for =Lentry%1%d=
<MSG>2:13 : main.A19: Getting alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:13 : main.A19: Found no alloca-ptrs on edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:13 : main.A19: Adding edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:13 : main.A19: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:13 : main.A19: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:13 : main.A19: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:13 : main.A19: Propagated 0 out of 3 counter-examples across edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1</MSG>
<MSG>2:13 : main.A19: Added the 0 propagated CEs at PC Lentry%1%allocaI3_L0%1%allocaI1 and propagated further.
</MSG>
<MSG>2:13 : main.A19: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:13 : main.A19: Finished executing CG's add edge function...</MSG>
<MSG>2:13 : main.A19: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:13 : main.A19: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1...</MSG>
<MSG>2:13 : main.A19: Adding edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:13 : main.A19: CG's add edge function (corr_graph::add_edge) called...</MSG>
local_is_heap_allocated 3811: main.A19: returning 1 for =Lentry%1%d=
<MSG>2:13 : main.A19: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:13 : main.A19: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:13 : main.A19: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:13 : main.A19: Finished executing CG's add edge function...</MSG>
<MSG>2:13 : main.A19: Computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:13 : main.A19: Done computing CG regions after the addition of the edge Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2...</MSG>
<MSG>2:13 : main.A19: Adding edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:13 : main.A19: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:13 : main.A19: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:13 : main.A19: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:13 : main.A19: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:14 : main.A19: Finished executing CG's add edge function...</MSG>
<MSG>2:14 : main.A19: Computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:14 : main.A19: Done computing CG regions after the addition of the edge Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:14 : Done adding a CG edge composition using the src path L0%0%d --> Lfor.cond2%1%bbentry and dst path L0%0%d --> L9%1%bbentry</MSG>
<MSG>2:14 : Added correlation to the product-TFG main.A19 (d:0, s:0) and created a correlation entry...</MSG>
<MSG>2:14 : Chose (after CE propagation) product-TFG main.A19 (d:0, s:0) from a frontier of size 49...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 0 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 0 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: L0%0%d=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>2:14 : main.A19: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:14 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1, Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2, Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:14 : main.A19: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>2:14 : main.A19: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: unchanged</MSG>
<MSG>2:14 : main.A19: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>2:14 : main.A19: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1) ...</MSG>
<MSG>2:14 : main.A19: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:14 : main.A19: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:14 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:14 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:14 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:14 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:14 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:14 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:14 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:14 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:14 : main.A19: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:14 : main.A19: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:14 : main.A19: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:14 : main.A19: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:14 : main.A19: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:14 : main.A19: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:14 : main.A19: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:20 : main.A19: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht14-prove_trivial6-prove8...</MSG>
<MSG>2:20 : main.A19: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:20 : main.A19: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:20 : main.A19: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:20 : main.A19: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:20 : main.A19: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:20 : main.A19: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:20 : main.A19: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:20 : main.A19: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:20 : main.A19: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:20 : main.A19: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:20 : main.A19: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:21 : main.A19: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:21 : main.A19: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:21 : main.A19: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1)...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:21 : main.A19: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed ...</MSG>
<MSG>2:21 : main.A19: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1), result: changed( 0, 1 ) ...</MSG>
<MSG>2:21 : main.A19: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:21 : main.A19: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed</MSG>
<MSG>2:21 : main.A19: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>2:22 : main.A19: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:22 : main.A19: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:22 : main.A19: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:22 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:22 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:22 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:22 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:22 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:22 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:22 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:22 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:22 : main.A19: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:22 : main.A19: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:22 : main.A19: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:22 : main.A19: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:22 : main.A19: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:22 : main.A19: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:22 : main.A19: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 2 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:29 : main.A19: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 1 proof-stats=dht15-prove_trivial6-prove9...</MSG>
<MSG>2:29 : main.A19: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:29 : main.A19: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:29 : main.A19: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed ...</MSG>
<MSG>2:30 : main.A19: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: changed( 1, 1 ) ...</MSG>
<MSG>2:30 : main.A19: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:30 : main.A19: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: changed</MSG>
<MSG>2:30 : main.A19: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>2:30 : main.A19: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:30 : main.A19: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:30 : main.A19: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:31 : main.A19: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:31 : main.A19: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 11 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht25-prove_trivial11-prove14...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:32 : main.A19: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:32 : main.A19: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht6-prove_trivial0-prove6...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial1-prove4...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:33 : main.A19: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:33 : main.A19: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: changed ...</MSG>
<MSG>2:34 : main.A19: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: changed( 1, 1 ) ...</MSG>
<MSG>2:34 : main.A19: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:34 : main.A19: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: changed</MSG>
<MSG>2:34 : main.A19: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>2:34 : main.A19: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 16 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht22-prove_trivial11-prove11...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:34 : main.A19: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:34 : main.A19: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>2:34 : main.A19: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: changed( 1, 0 ) ...</MSG>
<MSG>2:34 : main.A19: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:34 : main.A19: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: unchanged</MSG>
<MSG>2:34 : main.A19: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI3_L0%1%allocaI1 ...</MSG>
<MSG>2:35 : main.A19: Relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2) ...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 12 exprs and 11 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:35 : main.A19: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht7-prove_trivial5-prove2...</MSG>
<MSG>2:35 : main.A19: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 3 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:36 : main.A19: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:36 : main.A19: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:36 : main.A19: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:36 : main.A19: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:36 : main.A19: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:36 : main.A19: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:36 : main.A19: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:36 : main.A19: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:36 : main.A19: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:36 : main.A19: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:36 : main.A19: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:36 : main.A19: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:36 : main.A19: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:36 : main.A19: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:36 : main.A19: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:36 : main.A19: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:36 : main.A19: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:36 : main.A19: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2)...</MSG>
<MSG>2:36 : main.A19: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:36 : main.A19: Done relaxing invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: unchanged ...</MSG>
<MSG>2:36 : main.A19: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:36 : main.A19: Relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:37 : main.A19: Done relaxing dst graph's memlabels for edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>2:37 : main.A19: Checking well-formedness assertions on outgoing edges from Lentry%1%allocaI4_L0%1%allocaI2 ...</MSG>
<MSG>2:37 : main.A19: Relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 16 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht22-prove_trivial11-prove11...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:37 : main.A19: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:37 : main.A19: Done relaxing invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>2:37 : main.A19: Done relaxing memlabels and invariants across the edge composition (Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:37 : main.A19 (d:0, s:0): checked newly added edge and inferred invariants...</MSG>
<MSG>2:37 : main.A19 (d:0, s:0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:38 : product-TFG main.A19: Enumerating correlations for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:38 : Considering 4 paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:38 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:38 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:38 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:38 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3] as correlation candidate for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:38 : Found 4 feasible correlations for paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:38 : product-TFG main.A19: Found 4 correlations for L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:38 : product-TFG main.A19 created 4 possibilities in group main.A19.B...</MSG>
<MSG>2:38 : Chose (for CE propagation) product-TFG main.A19.B1 (d:0, s:0) from a frontier of size 52...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 26 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0]
<MSG>2:38 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B1...</MSG>
<MSG>2:38 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B1...</MSG>
<MSG>2:38 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:38 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:38 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>2:38 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:38 : Adding new edge to the product-TFG main.A19.B1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:38 : main.A19.B1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:38 : main.A19.B1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:38 : main.A19.B1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:38 : main.A19.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:38 : main.A19.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:38 : main.A19.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:38 : main.A19.B1: Propagated 17 out of 26 counter-examples across edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>2:38 : main.A19.B1: Added the 17 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>2:38 : main.A19.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:39 : main.A19.B1: Finished executing CG's add edge function...</MSG>
<MSG>2:39 : main.A19.B1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:39 : main.A19.B1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:39 : Done adding new edge to the product-TFG main.A19.B1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:39 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:39 : Added correlation to the product-TFG main.A19.B1 (d:1, s:1) and created a correlation entry...</MSG>
<MSG>2:39 : Chose (for CE propagation) product-TFG main.A19.B2 (d:0, s:0) from a frontier of size 52...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 26 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>2:39 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2...</MSG>
<MSG>2:39 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2...</MSG>
<MSG>2:39 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:39 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:39 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>2:39 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:39 : Adding new edge to the product-TFG main.A19.B2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:39 : main.A19.B2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:39 : main.A19.B2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:39 : main.A19.B2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:39 : main.A19.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:39 : main.A19.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:39 : main.A19.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:39 : main.A19.B2: Propagated 17 out of 26 counter-examples across edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>2:40 : main.A19.B2: Added the 17 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>2:40 : main.A19.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:40 : main.A19.B2: Finished executing CG's add edge function...</MSG>
<MSG>2:40 : main.A19.B2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:40 : main.A19.B2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:40 : Done adding new edge to the product-TFG main.A19.B2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:40 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:40 : Added correlation to the product-TFG main.A19.B2 (d:0, s:1) and created a correlation entry...</MSG>
<MSG>2:40 : Chose (after CE propagation) product-TFG main.A19.B2 (d:0, s:1) from a frontier of size 52...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>2:40 : main.A19.B2: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:40 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:40 : main.A19.B2: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:40 : main.A19.B2: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>2:40 : main.A19.B2: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L9%1%bbentry ...</MSG>
<MSG>2:40 : main.A19.B2: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:40 : main.A19.B2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:40 : main.A19.B2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : main.A19.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 19 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht20-prove_trivial17-prove3...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:41 : main.A19.B2: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>2:41 : main.A19.B2: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:41 : main.A19.B2 (d:0, s:1): checked newly added edge and inferred invariants...</MSG>
<MSG>2:41 : main.A19.B2 (d:0, s:1): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:42 : product-TFG main.A19.B2: Enumerating correlations for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Considering 3 paths to src pc Lfor.cond%1%bbentry as correlation candidates for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 2, delta 2] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 3, delta 3] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Found 3 feasible correlations for paths to src pc Lfor.cond%1%bbentry as correlation candidates for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Considering 4 paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Found 4 feasible correlations for paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Considering 3 paths to src pc Lfor.cond8%1%bbentry as correlation candidates for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond8%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond8%1%bbentry[mu 2, delta 2] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond8%1%bbentry[mu 3, delta 3] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : Found 3 feasible correlations for paths to src pc Lfor.cond8%1%bbentry as correlation candidates for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : product-TFG main.A19.B2: Found 10 correlations for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:42 : product-TFG main.A19.B2 created 10 possibilities in group main.A19.B2.C...</MSG>
<MSG>2:42 : Chose (for CE propagation) product-TFG main.A19.B2.C4 (d:0, s:1) from a frontier of size 61...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0]
<MSG>2:42 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4...</MSG>
<MSG>2:42 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4...</MSG>
<MSG>2:42 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:42 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>2:42 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry
</MSG>
<MSG>2:42 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>2:42 : Adding new edge to the product-TFG main.A19.B2.C4 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>2:42 : main.A19.B2.C4: Computing loop hoisting select expressions at toPC Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:42 : main.A19.B2.C4: Computing loop hoisting non-linear expressions at toPC Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:42 : main.A19.B2.C4: Adding node Lfor.cond2%1%bbentry_L15%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19.B2.C4: returning 1 for =Lentry%1%d=
<MSG>2:42 : main.A19.B2.C4: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:42 : main.A19.B2.C4: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:42 : main.A19.B2.C4: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:42 : main.A19.B2.C4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:42 : main.A19.B2.C4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:42 : main.A19.B2.C4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:42 : main.A19.B2.C4: Propagated 11 out of 50 counter-examples across edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry</MSG>
<MSG>2:42 : main.A19.B2.C4: Added the 11 propagated CEs at PC Lfor.cond2%1%bbentry_L15%1%bbentry and propagated further.
</MSG>
<MSG>2:42 : main.A19.B2.C4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:42 : main.A19.B2.C4: Finished executing CG's add edge function...</MSG>
<MSG>2:42 : main.A19.B2.C4: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:42 : main.A19.B2.C4: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:42 : Done adding new edge to the product-TFG main.A19.B2.C4 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>2:42 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>2:42 : Added correlation to the product-TFG main.A19.B2.C4 (d:0, s:1) and created a correlation entry...</MSG>
<MSG>2:42 : Chose (after CE propagation) product-TFG main.A19.B2.C4 (d:0, s:1) from a frontier of size 61...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 11 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0]
<MSG>2:42 : main.A19.B2.C4: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:42 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:42 : main.A19.B2.C4: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry) ...</MSG>
<MSG>2:42 : main.A19.B2.C4: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged</MSG>
<MSG>2:42 : main.A19.B2.C4: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L9%1%bbentry ...</MSG>
<MSG>2:42 : main.A19.B2.C4: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry) ...</MSG>
<MSG>2:42 : main.A19.B2.C4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:42 : main.A19.B2.C4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:42 : main.A19.B2.C4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:42 : main.A19.B2.C4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:42 : main.A19.B2.C4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:42 : main.A19.B2.C4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:42 : main.A19.B2.C4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:42 : main.A19.B2.C4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:42 : main.A19.B2.C4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:42 : main.A19.B2.C4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:42 : main.A19.B2.C4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:42 : main.A19.B2.C4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:42 : main.A19.B2.C4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:42 : main.A19.B2.C4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:42 : main.A19.B2.C4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:42 : main.A19.B2.C4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:42 : main.A19.B2.C4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 28 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:44 : main.A19.B2.C4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 1 proof-stats=dht33-prove_trivial23-prove10...</MSG>
<MSG>2:44 : main.A19.B2.C4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:44 : main.A19.B2.C4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:44 : main.A19.B2.C4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:44 : main.A19.B2.C4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:44 : main.A19.B2.C4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 1 proof-stats=dht6-prove_trivial0-prove6...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 4 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 9 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial3-prove5...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: changed ...</MSG>
<MSG>2:46 : main.A19.B2.C4: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>2:46 : main.A19.B2.C4 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>2:46 : main.A19.B2.C4 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:47 : product-TFG main.A19.B2.C4: Enumerating correlations for L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:47 : Considering 4 paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:47 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0] as correlation candidate for L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:47 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1] as correlation candidate for L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:47 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2] as correlation candidate for L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:47 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3] as correlation candidate for L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:47 : Found 4 feasible correlations for paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:47 : product-TFG main.A19.B2.C4: Found 4 correlations for L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:47 : product-TFG main.A19.B2.C4 created 4 possibilities in group main.A19.B2.C4.D...</MSG>
<MSG>2:47 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D1 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0]
<MSG>2:47 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D1...</MSG>
<MSG>2:47 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D1...</MSG>
<MSG>2:47 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:47 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:47 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>2:47 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:47 : Adding new edge to the product-TFG main.A19.B2.C4.D1 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:47 : main.A19.B2.C4.D1: Propagated 18 out of 34 counter-examples across edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>2:48 : main.A19.B2.C4.D1: Added the 18 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>2:48 : main.A19.B2.C4.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:48 : main.A19.B2.C4.D1: Finished executing CG's add edge function...</MSG>
<MSG>2:48 : main.A19.B2.C4.D1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:48 : main.A19.B2.C4.D1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:48 : Done adding new edge to the product-TFG main.A19.B2.C4.D1 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:48 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:48 : Added correlation to the product-TFG main.A19.B2.C4.D1 (d:2, s:4) and created a correlation entry...</MSG>
<MSG>2:48 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>2:48 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2...</MSG>
<MSG>2:48 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2...</MSG>
<MSG>2:48 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>2:48 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:48 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>2:48 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:48 : Adding new edge to the product-TFG main.A19.B2.C4.D2 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:48 : main.A19.B2.C4.D2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:48 : main.A19.B2.C4.D2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:48 : main.A19.B2.C4.D2: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:48 : main.A19.B2.C4.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:48 : main.A19.B2.C4.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:48 : main.A19.B2.C4.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:48 : main.A19.B2.C4.D2: Propagated 0 out of 34 counter-examples across edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>2:48 : main.A19.B2.C4.D2: Added the 0 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>2:48 : main.A19.B2.C4.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Finished executing CG's add edge function...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:49 : Done adding new edge to the product-TFG main.A19.B2.C4.D2 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>2:49 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry</MSG>
<MSG>2:49 : Added correlation to the product-TFG main.A19.B2.C4.D2 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>2:49 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>2:49 : main.A19.B2.C4.D2: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:49 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L15%1%bbentry ...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:49 : main.A19.B2.C4.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 19 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht20-prove_trivial10-prove10...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>2:50 : main.A19.B2.C4.D2 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:51 : product-TFG main.A19.B2.C4.D2: Enumerating correlations for L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:51 : Considering 4 paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:51 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0] as correlation candidate for L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:51 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1] as correlation candidate for L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:51 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2] as correlation candidate for L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:51 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3] as correlation candidate for L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:51 : Found 4 feasible correlations for paths to src pc Lfor.cond2%1%bbentry as correlation candidates for L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:51 : product-TFG main.A19.B2.C4.D2: Found 4 correlations for L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:51 : product-TFG main.A19.B2.C4.D2 created 4 possibilities in group main.A19.B2.C4.D2.E...</MSG>
<MSG>2:51 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0]
<MSG>2:51 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1...</MSG>
<MSG>2:51 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1...</MSG>
<MSG>2:51 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:51 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry</MSG>
<MSG>2:51 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry
</MSG>
<MSG>2:51 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry</MSG>
<MSG>2:51 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2.E1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2.E1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2.E1: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:51 : main.A19.B2.C4.D2.E1: Propagated 17 out of 37 counter-examples across edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Added the 17 propagated CEs at PC Lfor.cond2%1%bbentry_L15%1%bbentry and propagated further.
</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Finished executing CG's add edge function...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:52 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>2:52 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry</MSG>
<MSG>2:52 : Added correlation to the product-TFG main.A19.B2.C4.D2.E1 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>2:52 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2.E1 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 51 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 0, delta 0]
<MSG>2:52 : main.A19.B2.C4.D2.E1: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:52 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry) ...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L15%1%bbentry ...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry) ...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 28 exprs and 17 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht15-prove_trivial15-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 4 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 9 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial7-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged ...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>2:52 : main.A19.B2.C4.D2.E1 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:53 : product-TFG main.A19.B2.C4.D2.E1: Enumerating correlations for L15%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:53 : Considering 3 paths to src pc E0%0%d as correlation candidates for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:53 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:53 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:53 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:53 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:53 : product-TFG main.A19.B2.C4.D2.E1: Found 3 correlations for L15%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>2:53 : product-TFG main.A19.B2.C4.D2.E1 created 3 possibilities in group main.A19.B2.C4.D2.E1.F...</MSG>
<MSG>2:53 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1.F1 (d:0, s:2) from a frontier of size 69...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 54 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>2:53 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1.F1...</MSG>
<MSG>2:53 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1.F1...</MSG>
<MSG>2:53 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>2:53 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>2:53 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d
</MSG>
<MSG>2:53 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>2:53 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F1 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: marking unstable at Lfor.cond2%1%bbentry_L15%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L15%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142388 : input.dst.exreg.0.2.L11%1%d : BV:32       : 0
144092 : eq(140284, 142388) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142447 : input.dst.exreg.0.0.L15%1%bbentry : BV:32 : 1
198525 : eq(140296, 142447) : BOOL                 : true
199933 : and(144092, 198525) : BOOL                : true
199965 : not(199933) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
199966 : or(199965, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce12448.fuzzed eee77126be1714785e49eef65150
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 2148007943 { 0x80080007 -2146959353 -1.6250083e129 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 2147483664 { 0x80000010 -2147483632 -1.190e129 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.2.L11%1%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=stack.size
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L15%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.memlabel-mem--esp_end
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 0, [ 2147483646; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 0, [ 2147483652; 2147483652 ] -> 0, [ 2147483653; 2147483653 ] -> 0, [ 2147483654; 2147483654 ] -> 0, [ 2147483655; 2147483655 ] -> 0, [ 2147483660; 2147483660 ] -> 0, [ 2147483661; 2147483661 ] -> 0, [ 2147483662; 2147483662 ] -> 0, [ 2147483663; 2147483663 ] -> 0, [ 2147745772; 2147745772 ] -> 0, [ 2147745773; 2147745773 ] -> 0, [ 2147745774; 2147745774 ] -> 0, [ 2147745775; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2242880123
=counter_example_end


failcond-expr = or(not(and(eq(0, input.dst.exreg.0.2.L11%1%d), eq(1, input.dst.exreg.0.0.L15%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.exreg.0.2.L11%1%d : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : input.dst.exreg.0.0.L15%1%bbentry : BV:32
6 : eq(4, 5) : BOOL
7 : and(3, 6) : BOOL
8 : not(7) : BOOL
9 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
10 : 2 { 0x2 +1.23e129 } : BV:32
11 : bvslt(9, 10) : BOOL
12 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
13 : bvadd(4, 12) : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : bvslt(13, 14) : BOOL
16 : not(15) : BOOL
17 : andnot1(11, 16) : BOOL
18 : or(8, 17) : BOOL
</MSG>
<MSG>2:53 : main.A19.B2.C4.D2.E1.F1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F1: Finished executing CG's add edge function...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:54 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F1 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d...</MSG>
<MSG>2:54 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>2:54 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L15%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142388 : input.dst.exreg.0.2.L11%1%d : BV:32       : 0
144092 : eq(140284, 142388) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142447 : input.dst.exreg.0.0.L15%1%bbentry : BV:32 : 1
198525 : eq(140296, 142447) : BOOL                 : true
199933 : and(144092, 198525) : BOOL                : true
199965 : not(199933) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
199966 : or(199965, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce12448.fuzzed eee77126be1714785e49eef65150
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 2148007943 { 0x80080007 -2146959353 -1.6250083e129 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 2147483664 { 0x80000010 -2147483632 -1.190e129 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.2.L11%1%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=stack.size
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L15%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.memlabel-mem--esp_end
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 0, [ 2147483646; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 0, [ 2147483652; 2147483652 ] -> 0, [ 2147483653; 2147483653 ] -> 0, [ 2147483654; 2147483654 ] -> 0, [ 2147483655; 2147483655 ] -> 0, [ 2147483660; 2147483660 ] -> 0, [ 2147483661; 2147483661 ] -> 0, [ 2147483662; 2147483662 ] -> 0, [ 2147483663; 2147483663 ] -> 0, [ 2147745772; 2147745772 ] -> 0, [ 2147745773; 2147745773 ] -> 0, [ 2147745774; 2147745774 ] -> 0, [ 2147745775; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2242880123
=counter_example_end


</MSG>
<MSG>2:54 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E1.F1 (d:0, s:2)...</MSG>
<MSG>2:54 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1.F2 (d:0, s:2) from a frontier of size 68...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 54 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>2:54 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1.F2...</MSG>
<MSG>2:54 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1.F2...</MSG>
<MSG>2:54 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>2:54 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>2:54 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d
</MSG>
<MSG>2:54 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>2:54 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F2 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F2: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F2: marking unstable at Lfor.cond2%1%bbentry_L15%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L15%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142388 : input.dst.exreg.0.2.L11%1%d : BV:32       : 0
144092 : eq(140284, 142388) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142447 : input.dst.exreg.0.0.L15%1%bbentry : BV:32 : 1
198525 : eq(140296, 142447) : BOOL                 : true
199933 : and(144092, 198525) : BOOL                : true
199965 : not(199933) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 2147483648
141488 : bvslt(141486, 140284) : BOOL              : true
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 2148007936
141507 : bvadd(140467, 140514) : BV:32             : 2148270076
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : and(true, andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)), false))
200255 : or(200253, 200254) : BOOL                 : or(false, and(true, andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)), false)))
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
200281 : or(199965, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce12448.fuzzed eee77126be1714785e49eef65150
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 2148007943 { 0x80080007 -2146959353 -1.6250083e129 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 2147483664 { 0x80000010 -2147483632 -1.190e129 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.2.L11%1%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=stack.size
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L15%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.memlabel-mem--esp_end
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 0, [ 2147483646; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 0, [ 2147483652; 2147483652 ] -> 0, [ 2147483653; 2147483653 ] -> 0, [ 2147483654; 2147483654 ] -> 0, [ 2147483655; 2147483655 ] -> 0, [ 2147483660; 2147483660 ] -> 0, [ 2147483661; 2147483661 ] -> 0, [ 2147483662; 2147483662 ] -> 0, [ 2147483663; 2147483663 ] -> 0, [ 2147745772; 2147745772 ] -> 0, [ 2147745773; 2147745773 ] -> 0, [ 2147745774; 2147745774 ] -> 0, [ 2147745775; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2242880123
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[200281](not(and(eq(0, input.dst.exreg.0.2.L11%1%d), eq(1, input.dst.exreg.0.0.L15%1%bbentry))), or[200273](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.exreg.0.2.L11%1%d : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : input.dst.exreg.0.0.L15%1%bbentry : BV:32
6 : eq(4, 5) : BOOL
7 : and(3, 6) : BOOL
8 : not(7) : BOOL
9 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
10 : 2 { 0x2 +1.23e129 } : BV:32
11 : bvslt(9, 10) : BOOL
12 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
13 : bvadd(4, 12) : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : bvslt(13, 14) : BOOL
16 : not(15) : BOOL
17 : andnot1(11, 16) : BOOL
18 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
19 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
20 : memlabel-mem--symbol.1.0 : MEMLABEL
21 : symbol.1 : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(18, 19, 20, 21, 22, 23) : BV:32
25 : bvslt(24, 1) : BOOL
26 : bvadd(4, 9) : BV:32
27 : bvslt(26, 10) : BOOL
28 : andnot1(27, 16) : BOOL
29 : andnot1(25, 28) : BOOL
30 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
31 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
32 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
33 : bvadd(31, 32) : BV:32
34 : select(18, 19, 30, 33, 22, 23) : BV:32
35 : eq(1, 34) : BOOL
36 : andnot1(35, 23) : BOOL
37 : and(25, 36) : BOOL
38 : or(29, 37) : BOOL
39 : and(11, 38) : BOOL
40 : or(17, 39) : BOOL
41 : or(8, 40) : BOOL
</MSG>
<MSG>2:54 : main.A19.B2.C4.D2.E1.F2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>2:57 : main.A19.B2.C4.D2.E1.F2: Finished executing CG's add edge function...</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:57 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F2 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d...</MSG>
<MSG>2:57 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>2:57 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L15%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142388 : input.dst.exreg.0.2.L11%1%d : BV:32       : 0
144092 : eq(140284, 142388) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142447 : input.dst.exreg.0.0.L15%1%bbentry : BV:32 : 1
198525 : eq(140296, 142447) : BOOL                 : true
199933 : and(144092, 198525) : BOOL                : true
199965 : not(199933) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 2147483648
141488 : bvslt(141486, 140284) : BOOL              : true
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 2148007936
141507 : bvadd(140467, 140514) : BV:32             : 2148270076
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : and(true, andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)), false))
200255 : or(200253, 200254) : BOOL                 : or(false, and(true, andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)), false)))
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
200281 : or(199965, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce12448.fuzzed eee77126be1714785e49eef65150
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 2148007943 { 0x80080007 -2146959353 -1.6250083e129 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 2147483664 { 0x80000010 -2147483632 -1.190e129 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.2.L11%1%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=stack.size
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L15%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.memlabel-mem--esp_end
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 0, [ 2147483646; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 0, [ 2147483652; 2147483652 ] -> 0, [ 2147483653; 2147483653 ] -> 0, [ 2147483654; 2147483654 ] -> 0, [ 2147483655; 2147483655 ] -> 0, [ 2147483660; 2147483660 ] -> 0, [ 2147483661; 2147483661 ] -> 0, [ 2147483662; 2147483662 ] -> 0, [ 2147483663; 2147483663 ] -> 0, [ 2147745772; 2147745772 ] -> 0, [ 2147745773; 2147745773 ] -> 0, [ 2147745774; 2147745774 ] -> 0, [ 2147745775; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 1 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2242880123
=counter_example_end


</MSG>
<MSG>2:57 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E1.F2 (d:0, s:2)...</MSG>
<MSG>2:57 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1.F3 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 54 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>2:57 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1.F3...</MSG>
<MSG>2:57 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1.F3...</MSG>
<MSG>2:57 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>2:57 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>2:57 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d
</MSG>
<MSG>2:57 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>2:57 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d...</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F3: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F3: Propagated 0 out of 54 counter-examples across edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F3: Added the 0 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>2:57 : main.A19.B2.C4.D2.E1.F3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:00 : main.A19.B2.C4.D2.E1.F3: Finished executing CG's add edge function...</MSG>
<MSG>3:00 : main.A19.B2.C4.D2.E1.F3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:00 : main.A19.B2.C4.D2.E1.F3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:00 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d...</MSG>
<MSG>3:00 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>3:00 : Added correlation to the product-TFG main.A19.B2.C4.D2.E1.F3 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>3:00 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2.E1.F3 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 62 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 62 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 54 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:00 : main.A19.B2.C4.D2.E1.F3: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>3:00 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:00 : main.A19.B2.C4.D2.E1.F3: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>3:01 : main.A19.B2.C4.D2.E1.F3: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d), result: changed</MSG>
<MSG>3:01 : main.A19.B2.C4.D2.E1.F3: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L15%1%bbentry ...</MSG>
<MSG>3:01 : main.A19.B2.C4.D2.E1.F3: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d), result: changed( 1, 0 ) ...</MSG>
<MSG>3:01 : main.A19.B2.C4.D2.E1.F3 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>3:01 : main.A19.B2.C4.D2.E1.F3 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:02 : product-TFG main.A19.B2.C4.D2.E1.F3: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:02 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:02 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:02 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:02 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:02 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:02 : product-TFG main.A19.B2.C4.D2.E1.F3: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:02 : product-TFG main.A19.B2.C4.D2.E1.F3 created 3 possibilities in group main.A19.B2.C4.D2.E1.F3.G...</MSG>
<MSG>3:02 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1.F3.G1 (d:0, s:2) from a frontier of size 69...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 62 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 62 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 54 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>3:02 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1.F3.G1...</MSG>
<MSG>3:02 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1.F3.G1...</MSG>
<MSG>3:02 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:02 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:02 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:02 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:02 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3.G1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:02 : main.A19.B2.C4.D2.E1.F3.G1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:02 : main.A19.B2.C4.D2.E1.F3.G1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:02 : main.A19.B2.C4.D2.E1.F3.G1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:02 : main.A19.B2.C4.D2.E1.F3.G1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:02 : main.A19.B2.C4.D2.E1.F3.G1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:02 : main.A19.B2.C4.D2.E1.F3.G1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:02 : main.A19.B2.C4.D2.E1.F3.G1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce13097.fuzzed 46b96479c861502a94372c4f346c5
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1368180485
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>3:02 : main.A19.B2.C4.D2.E1.F3.G1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G1: Finished executing CG's add edge function...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:03 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3.G1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:03 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:03 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce13097.fuzzed 46b96479c861502a94372c4f346c5
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1368180485
=counter_example_end


</MSG>
<MSG>3:03 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E1.F3.G1 (d:0, s:2)...</MSG>
<MSG>3:03 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1.F3.G2 (d:0, s:2) from a frontier of size 68...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 62 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 62 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 54 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>3:03 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1.F3.G2...</MSG>
<MSG>3:03 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1.F3.G2...</MSG>
<MSG>3:03 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:03 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:03 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:03 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:03 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3.G2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce13097.fuzzed 46b96479c861502a94372c4f346c5
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1368180485
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[201165](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200273](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>3:03 : main.A19.B2.C4.D2.E1.F3.G2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:07 : main.A19.B2.C4.D2.E1.F3.G2: Finished executing CG's add edge function...</MSG>
<MSG>3:07 : main.A19.B2.C4.D2.E1.F3.G2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:07 : main.A19.B2.C4.D2.E1.F3.G2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:07 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3.G2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:07 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:07 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce13097.fuzzed 46b96479c861502a94372c4f346c5
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1368180485
=counter_example_end


</MSG>
<MSG>3:07 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E1.F3.G2 (d:0, s:2)...</MSG>
<MSG>3:07 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E1.F3.G3 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 62 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 62 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 54 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:07 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E1.F3.G3...</MSG>
<MSG>3:07 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E1.F3.G3...</MSG>
<MSG>3:07 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:07 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:07 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:07 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:07 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3.G3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:07 : main.A19.B2.C4.D2.E1.F3.G3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:07 : main.A19.B2.C4.D2.E1.F3.G3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:07 : main.A19.B2.C4.D2.E1.F3.G3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:07 : main.A19.B2.C4.D2.E1.F3.G3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:07 : main.A19.B2.C4.D2.E1.F3.G3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:07 : main.A19.B2.C4.D2.E1.F3.G3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:07 : main.A19.B2.C4.D2.E1.F3.G3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce13097.fuzzed 46b96479c861502a94372c4f346c5
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1368180485
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141524 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[201192](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200644](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1[200241](141524, false)))), and[200580](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200571](andnot1[200569](141488, and[200449](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[200448](and[200254](141488, andnot1[200241](141524, false)), andnot1[200447](141488, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[200570](141488, andnot1[200552](141524, or[200540](and[200254](141488, andnot1[200241](141524, false)), andnot1[200538](141488, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[200618](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[200611](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[200593](and[200254](141488, andnot1[200241](141524, false)), andnot1[200590](141488, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>3:07 : main.A19.B2.C4.D2.E1.F3.G3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:10 : main.A19.B2.C4.D2.E1.F3.G3: Finished executing CG's add edge function...</MSG>
<MSG>3:10 : main.A19.B2.C4.D2.E1.F3.G3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:10 : main.A19.B2.C4.D2.E1.F3.G3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:10 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E1.F3.G3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:10 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:10 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce13097.fuzzed 46b96479c861502a94372c4f346c5
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 114 , m_adder -> 7), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1368180485
=counter_example_end


</MSG>
<MSG>3:10 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E1.F3.G3 (d:0, s:2)...</MSG>
<MSG>3:10 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>3:10 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2...</MSG>
<MSG>3:10 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2...</MSG>
<MSG>3:10 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>3:10 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry</MSG>
<MSG>3:10 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry
</MSG>
<MSG>3:10 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry</MSG>
<MSG>3:10 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>3:10 : main.A19.B2.C4.D2.E2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:10 : main.A19.B2.C4.D2.E2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:10 : main.A19.B2.C4.D2.E2: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:10 : main.A19.B2.C4.D2.E2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:10 : main.A19.B2.C4.D2.E2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:10 : main.A19.B2.C4.D2.E2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: Propagated 9 out of 37 counter-examples across edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: Added the 9 propagated CEs at PC Lfor.cond2%1%bbentry_L15%1%bbentry and propagated further.
</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: Finished executing CG's add edge function...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:11 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>3:11 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry</MSG>
<MSG>3:11 : Added correlation to the product-TFG main.A19.B2.C4.D2.E2 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>3:11 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2.E2 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 44 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 1, delta 1]
<MSG>3:11 : main.A19.B2.C4.D2.E2: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:11 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>3:11 : main.A19.B2.C4.D2.E2: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L15%1%bbentry ...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 19 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht20-prove_trivial10-prove10...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:12 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry) ...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L15%1%bbentry ...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry) ...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 28 exprs and 18 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial13-prove1...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:13 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 4 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 9 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial7-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged ...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:14 : product-TFG main.A19.B2.C4.D2.E2: Enumerating correlations for L15%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>3:14 : Considering 3 paths to src pc E0%0%d as correlation candidates for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>3:14 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>3:14 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>3:14 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>3:14 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>3:14 : product-TFG main.A19.B2.C4.D2.E2: Found 3 correlations for L15%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>3:14 : product-TFG main.A19.B2.C4.D2.E2 created 3 possibilities in group main.A19.B2.C4.D2.E2.F...</MSG>
<MSG>3:14 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2.F1 (d:0, s:2) from a frontier of size 68...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>3:14 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2.F1...</MSG>
<MSG>3:14 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2.F1...</MSG>
<MSG>3:14 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:14 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>3:14 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d
</MSG>
<MSG>3:14 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>3:14 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F1 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2.F1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2.F1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2.F1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2.F1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2.F1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2.F1: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2.F1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2.F1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2.F1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2.F1: marking unstable at Lfor.cond2%1%bbentry_L15%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L15%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142388 : input.dst.exreg.0.2.L11%1%d : BV:32       : 0
144092 : eq(140284, 142388) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142447 : input.dst.exreg.0.0.L15%1%bbentry : BV:32 : 1
198525 : eq(140296, 142447) : BOOL                 : true
199933 : and(144092, 198525) : BOOL                : true
199965 : not(199933) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
199966 : or(199965, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce13732.fuzzed d5d987a5e2a73017b2936060b516e428
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 2148007943 { 0x80080007 -2146959353 -1.6250083e129 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 2147483664 { 0x80000010 -2147483632 -1.190e129 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.2.L11%1%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=stack.size
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L15%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.memlabel-mem--esp_end
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 0, [ 2147483646; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 0, [ 2147483652; 2147483652 ] -> 0, [ 2147483653; 2147483653 ] -> 0, [ 2147483654; 2147483654 ] -> 0, [ 2147483655; 2147483655 ] -> 0, [ 2147483660; 2147483660 ] -> 0, [ 2147483661; 2147483661 ] -> 0, [ 2147483662; 2147483662 ] -> 0, [ 2147483663; 2147483663 ] -> 0, [ 2147745772; 2147745772 ] -> 0, [ 2147745773; 2147745773 ] -> 0, [ 2147745774; 2147745774 ] -> 0, [ 2147745775; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1081147418
=counter_example_end


failcond-expr = or(not(and(eq(0, input.dst.exreg.0.2.L11%1%d), eq(1, input.dst.exreg.0.0.L15%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.exreg.0.2.L11%1%d : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : input.dst.exreg.0.0.L15%1%bbentry : BV:32
6 : eq(4, 5) : BOOL
7 : and(3, 6) : BOOL
8 : not(7) : BOOL
9 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
10 : 2 { 0x2 +1.23e129 } : BV:32
11 : bvslt(9, 10) : BOOL
12 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
13 : bvadd(4, 12) : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : bvslt(13, 14) : BOOL
16 : not(15) : BOOL
17 : andnot1(11, 16) : BOOL
18 : or(8, 17) : BOOL
</MSG>
<MSG>3:14 : main.A19.B2.C4.D2.E2.F1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: Finished executing CG's add edge function...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:15 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F1 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d...</MSG>
<MSG>3:15 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>3:15 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L15%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142388 : input.dst.exreg.0.2.L11%1%d : BV:32       : 0
144092 : eq(140284, 142388) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142447 : input.dst.exreg.0.0.L15%1%bbentry : BV:32 : 1
198525 : eq(140296, 142447) : BOOL                 : true
199933 : and(144092, 198525) : BOOL                : true
199965 : not(199933) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
199966 : or(199965, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce13732.fuzzed d5d987a5e2a73017b2936060b516e428
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 2148007943 { 0x80080007 -2146959353 -1.6250083e129 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 2147483664 { 0x80000010 -2147483632 -1.190e129 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.2.L11%1%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=stack.size
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L15%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.memlabel-mem--esp_end
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 0, [ 2147483646; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 0, [ 2147483652; 2147483652 ] -> 0, [ 2147483653; 2147483653 ] -> 0, [ 2147483654; 2147483654 ] -> 0, [ 2147483655; 2147483655 ] -> 0, [ 2147483660; 2147483660 ] -> 0, [ 2147483661; 2147483661 ] -> 0, [ 2147483662; 2147483662 ] -> 0, [ 2147483663; 2147483663 ] -> 0, [ 2147745772; 2147745772 ] -> 0, [ 2147745773; 2147745773 ] -> 0, [ 2147745774; 2147745774 ] -> 0, [ 2147745775; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1081147418
=counter_example_end


</MSG>
<MSG>3:15 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E2.F1 (d:0, s:2)...</MSG>
<MSG>3:15 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2.F2 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>3:15 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2.F2...</MSG>
<MSG>3:15 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2.F2...</MSG>
<MSG>3:15 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:15 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>3:15 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d
</MSG>
<MSG>3:15 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>3:15 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F2 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F2: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:15 : main.A19.B2.C4.D2.E2.F2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: marking unstable at Lfor.cond2%1%bbentry_L15%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L15%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142388 : input.dst.exreg.0.2.L11%1%d : BV:32       : 0
144092 : eq(140284, 142388) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142447 : input.dst.exreg.0.0.L15%1%bbentry : BV:32 : 1
198525 : eq(140296, 142447) : BOOL                 : true
199933 : and(144092, 198525) : BOOL                : true
199965 : not(199933) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 2147483648
141488 : bvslt(141486, 140284) : BOOL              : true
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 2148007936
141507 : bvadd(140467, 140514) : BV:32             : 2148270076
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : and(true, andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)), false))
200255 : or(200253, 200254) : BOOL                 : or(false, and(true, andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)), false)))
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
200281 : or(199965, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce13732.fuzzed d5d987a5e2a73017b2936060b516e428
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 2148007943 { 0x80080007 -2146959353 -1.6250083e129 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 2147483664 { 0x80000010 -2147483632 -1.190e129 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.2.L11%1%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=stack.size
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L15%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.memlabel-mem--esp_end
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 0, [ 2147483646; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 0, [ 2147483652; 2147483652 ] -> 0, [ 2147483653; 2147483653 ] -> 0, [ 2147483654; 2147483654 ] -> 0, [ 2147483655; 2147483655 ] -> 0, [ 2147483660; 2147483660 ] -> 0, [ 2147483661; 2147483661 ] -> 0, [ 2147483662; 2147483662 ] -> 0, [ 2147483663; 2147483663 ] -> 0, [ 2147745772; 2147745772 ] -> 0, [ 2147745773; 2147745773 ] -> 0, [ 2147745774; 2147745774 ] -> 0, [ 2147745775; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1081147418
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[200281](not(and(eq(0, input.dst.exreg.0.2.L11%1%d), eq(1, input.dst.exreg.0.0.L15%1%bbentry))), or[200273](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.exreg.0.2.L11%1%d : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : input.dst.exreg.0.0.L15%1%bbentry : BV:32
6 : eq(4, 5) : BOOL
7 : and(3, 6) : BOOL
8 : not(7) : BOOL
9 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
10 : 2 { 0x2 +1.23e129 } : BV:32
11 : bvslt(9, 10) : BOOL
12 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
13 : bvadd(4, 12) : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : bvslt(13, 14) : BOOL
16 : not(15) : BOOL
17 : andnot1(11, 16) : BOOL
18 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
19 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
20 : memlabel-mem--symbol.1.0 : MEMLABEL
21 : symbol.1 : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(18, 19, 20, 21, 22, 23) : BV:32
25 : bvslt(24, 1) : BOOL
26 : bvadd(4, 9) : BV:32
27 : bvslt(26, 10) : BOOL
28 : andnot1(27, 16) : BOOL
29 : andnot1(25, 28) : BOOL
30 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
31 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
32 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
33 : bvadd(31, 32) : BV:32
34 : select(18, 19, 30, 33, 22, 23) : BV:32
35 : eq(1, 34) : BOOL
36 : andnot1(35, 23) : BOOL
37 : and(25, 36) : BOOL
38 : or(29, 37) : BOOL
39 : and(11, 38) : BOOL
40 : or(17, 39) : BOOL
41 : or(8, 40) : BOOL
</MSG>
<MSG>3:16 : main.A19.B2.C4.D2.E2.F2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:18 : main.A19.B2.C4.D2.E2.F2: Finished executing CG's add edge function...</MSG>
<MSG>3:18 : main.A19.B2.C4.D2.E2.F2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:18 : main.A19.B2.C4.D2.E2.F2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:18 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F2 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d...</MSG>
<MSG>3:18 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>3:18 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L15%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L15%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L15%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
142388 : input.dst.exreg.0.2.L11%1%d : BV:32       : 0
144092 : eq(140284, 142388) : BOOL                 : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142447 : input.dst.exreg.0.0.L15%1%bbentry : BV:32 : 1
198525 : eq(140296, 142447) : BOOL                 : true
199933 : and(144092, 198525) : BOOL                : true
199965 : not(199933) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 2147483648
141488 : bvslt(141486, 140284) : BOOL              : true
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 2148007936
141507 : bvadd(140467, 140514) : BV:32             : 2148270076
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : and(true, andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)), false))
200255 : or(200253, 200254) : BOOL                 : or(false, and(true, andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 2148270076, 4, false)), false)))
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
200281 : or(199965, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce13732.fuzzed d5d987a5e2a73017b2936060b516e428
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 2148007936 { 0x80080000 -2146959360 -1.6250000e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 2148007943 { 0x80080007 -2146959353 -1.6250083e129 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 2147483664 { 0x80000010 -2147483632 -1.190e129 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483647 ] -> 0, [ 2147483652; 2147483655 ] -> 0, [ 2147483660; 2147483663 ] -> 0, [ 2147745772; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1073741823 ] -> memlabel-mem--heap, [ 1073741824; 2148007935 ] -> memlabel-mem--esp, [ 2148007936; 2148007943 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2148007944; 3221225471 ] -> memlabel-mem--esp, [ 3221225472; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.2.L11%1%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=stack.size
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L15%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.memlabel-mem--esp_end
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 2147483644; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 0, [ 2147483646; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 0, [ 2147483652; 2147483652 ] -> 0, [ 2147483653; 2147483653 ] -> 0, [ 2147483654; 2147483654 ] -> 0, [ 2147483655; 2147483655 ] -> 0, [ 2147483660; 2147483660 ] -> 0, [ 2147483661; 2147483661 ] -> 0, [ 2147483662; 2147483662 ] -> 0, [ 2147483663; 2147483663 ] -> 0, [ 2147745772; 2147745772 ] -> 0, [ 2147745773; 2147745773 ] -> 0, [ 2147745774; 2147745774 ] -> 0, [ 2147745775; 2147745775 ] -> 0, { [ 0; 1023 ], [ 1028; 2147483643 ], [ 2147483648; 2147483651 ], [ 2147483656; 2147483659 ], [ 2147483664; 2147745771 ], [ 2147745776; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 11), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1081147418
=counter_example_end


</MSG>
<MSG>3:18 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E2.F2 (d:0, s:2)...</MSG>
<MSG>3:18 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2.F3 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:18 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2.F3...</MSG>
<MSG>3:18 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2.F3...</MSG>
<MSG>3:18 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:18 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>3:18 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d
</MSG>
<MSG>3:18 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>3:18 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d...</MSG>
<MSG>3:18 : main.A19.B2.C4.D2.E2.F3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:18 : main.A19.B2.C4.D2.E2.F3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:18 : main.A19.B2.C4.D2.E2.F3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:18 : main.A19.B2.C4.D2.E2.F3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:18 : main.A19.B2.C4.D2.E2.F3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:18 : main.A19.B2.C4.D2.E2.F3: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:18 : main.A19.B2.C4.D2.E2.F3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:18 : main.A19.B2.C4.D2.E2.F3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:18 : main.A19.B2.C4.D2.E2.F3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F3: Propagated 0 out of 47 counter-examples across edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F3: Added the 0 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>3:19 : main.A19.B2.C4.D2.E2.F3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:21 : main.A19.B2.C4.D2.E2.F3: Finished executing CG's add edge function...</MSG>
<MSG>3:21 : main.A19.B2.C4.D2.E2.F3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:21 : main.A19.B2.C4.D2.E2.F3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:21 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d...</MSG>
<MSG>3:21 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L15%1%bbentry --> E0%0%d</MSG>
<MSG>3:21 : Added correlation to the product-TFG main.A19.B2.C4.D2.E2.F3 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>3:21 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2.E2.F3 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 62 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:21 : main.A19.B2.C4.D2.E2.F3: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>3:21 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:21 : main.A19.B2.C4.D2.E2.F3: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>3:22 : main.A19.B2.C4.D2.E2.F3: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>3:22 : main.A19.B2.C4.D2.E2.F3: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L15%1%bbentry ...</MSG>
<MSG>3:22 : main.A19.B2.C4.D2.E2.F3: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:22 : main.A19.B2.C4.D2.E2.F3 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>3:22 : main.A19.B2.C4.D2.E2.F3 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:23 : product-TFG main.A19.B2.C4.D2.E2.F3: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:23 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:23 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:23 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:23 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:23 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:23 : product-TFG main.A19.B2.C4.D2.E2.F3: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:23 : product-TFG main.A19.B2.C4.D2.E2.F3 created 3 possibilities in group main.A19.B2.C4.D2.E2.F3.G...</MSG>
<MSG>3:23 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2.F3.G1 (d:0, s:2) from a frontier of size 68...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 62 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>3:23 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2.F3.G1...</MSG>
<MSG>3:23 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2.F3.G1...</MSG>
<MSG>3:23 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:23 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:23 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:23 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:23 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3.G1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3.G1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3.G1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3.G1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3.G1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3.G1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3.G1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3.G1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce14327.fuzzed 94f71f267eaee7bfdf37f7b3708c4b20
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1607223260
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>3:23 : main.A19.B2.C4.D2.E2.F3.G1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G1: Finished executing CG's add edge function...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:24 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3.G1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:24 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:24 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce14327.fuzzed 94f71f267eaee7bfdf37f7b3708c4b20
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1607223260
=counter_example_end


</MSG>
<MSG>3:24 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E2.F3.G1 (d:0, s:2)...</MSG>
<MSG>3:24 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2.F3.G2 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 62 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>3:24 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2.F3.G2...</MSG>
<MSG>3:24 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2.F3.G2...</MSG>
<MSG>3:24 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:24 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:24 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:24 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:24 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3.G2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce14327.fuzzed 94f71f267eaee7bfdf37f7b3708c4b20
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1607223260
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[201165](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200273](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>3:24 : main.A19.B2.C4.D2.E2.F3.G2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:28 : main.A19.B2.C4.D2.E2.F3.G2: Finished executing CG's add edge function...</MSG>
<MSG>3:28 : main.A19.B2.C4.D2.E2.F3.G2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:28 : main.A19.B2.C4.D2.E2.F3.G2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:28 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3.G2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:28 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:28 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce14327.fuzzed 94f71f267eaee7bfdf37f7b3708c4b20
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1607223260
=counter_example_end


</MSG>
<MSG>3:28 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E2.F3.G2 (d:0, s:2)...</MSG>
<MSG>3:28 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E2.F3.G3 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[8]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 62 => A E0%0%d at mu 1 delta 1)
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:28 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E2.F3.G3...</MSG>
<MSG>3:28 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E2.F3.G3...</MSG>
<MSG>3:28 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:28 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:28 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:28 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:28 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3.G3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:28 : main.A19.B2.C4.D2.E2.F3.G3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:28 : main.A19.B2.C4.D2.E2.F3.G3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:28 : main.A19.B2.C4.D2.E2.F3.G3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:28 : main.A19.B2.C4.D2.E2.F3.G3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:28 : main.A19.B2.C4.D2.E2.F3.G3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:28 : main.A19.B2.C4.D2.E2.F3.G3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:28 : main.A19.B2.C4.D2.E2.F3.G3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce14327.fuzzed 94f71f267eaee7bfdf37f7b3708c4b20
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1607223260
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141524 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[201192](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200644](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1[200241](141524, false)))), and[200580](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200571](andnot1[200569](141488, and[200449](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[200448](and[200254](141488, andnot1[200241](141524, false)), andnot1[200447](141488, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[200570](141488, andnot1[200552](141524, or[200540](and[200254](141488, andnot1[200241](141524, false)), andnot1[200538](141488, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[200618](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[200611](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[200593](and[200254](141488, andnot1[200241](141524, false)), andnot1[200590](141488, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>3:28 : main.A19.B2.C4.D2.E2.F3.G3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:32 : main.A19.B2.C4.D2.E2.F3.G3: Finished executing CG's add edge function...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E2.F3.G3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E2.F3.G3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:32 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E2.F3.G3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:32 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:32 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce14327.fuzzed 94f71f267eaee7bfdf37f7b3708c4b20
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1607223260
=counter_example_end


</MSG>
<MSG>3:32 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E2.F3.G3 (d:0, s:2)...</MSG>
<MSG>3:32 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E3 (d:0, s:2) from a frontier of size 65...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2]
<MSG>3:32 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E3...</MSG>
<MSG>3:32 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E3...</MSG>
<MSG>3:32 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>3:32 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry</MSG>
<MSG>3:32 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry
</MSG>
<MSG>3:32 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry</MSG>
<MSG>3:32 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E3 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Propagated 0 out of 37 counter-examples across edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Added the 0 propagated CEs at PC Lfor.cond2%1%bbentry_L15%1%bbentry and propagated further.
</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>3:32 : main.A19.B2.C4.D2.E3: Finished executing CG's add edge function...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:32 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E3 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>3:32 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry</MSG>
<MSG>3:32 : Added correlation to the product-TFG main.A19.B2.C4.D2.E3 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>3:32 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2.E3 (d:0, s:2) from a frontier of size 65...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2]
<MSG>3:32 : main.A19.B2.C4.D2.E3: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:32 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry) ...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L15%1%bbentry ...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry) ...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 28 exprs and 17 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht15-prove_trivial13-prove2...</MSG>
<MSG>3:32 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 4 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 9 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial7-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged ...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>3:33 : main.A19.B2.C4.D2.E3 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:34 : product-TFG main.A19.B2.C4.D2.E3: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:34 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:34 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:34 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:34 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:34 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:34 : product-TFG main.A19.B2.C4.D2.E3: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:34 : product-TFG main.A19.B2.C4.D2.E3 created 3 possibilities in group main.A19.B2.C4.D2.E3.F...</MSG>
<MSG>3:34 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E3.F1 (d:0, s:2) from a frontier of size 67...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>3:34 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E3.F1...</MSG>
<MSG>3:34 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E3.F1...</MSG>
<MSG>3:34 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:34 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:34 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:34 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:34 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E3.F1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3.F1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3.F1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3.F1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3.F1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3.F1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3.F1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3.F1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3.F1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3.F1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3.F1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce14798.fuzzed 307152d165fc8de3e8b6b39527dd7e66
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2732884941
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>3:34 : main.A19.B2.C4.D2.E3.F1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: Finished executing CG's add edge function...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:36 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E3.F1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:36 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:36 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce14798.fuzzed 307152d165fc8de3e8b6b39527dd7e66
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2732884941
=counter_example_end


</MSG>
<MSG>3:36 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E3.F1 (d:0, s:2)...</MSG>
<MSG>3:36 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E3.F2 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>3:36 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E3.F2...</MSG>
<MSG>3:36 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E3.F2...</MSG>
<MSG>3:36 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:36 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:36 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:36 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:36 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E3.F2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce14798.fuzzed 307152d165fc8de3e8b6b39527dd7e66
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2732884941
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[201165](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200273](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>3:36 : main.A19.B2.C4.D2.E3.F2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:39 : main.A19.B2.C4.D2.E3.F2: Finished executing CG's add edge function...</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:39 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E3.F2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:39 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:39 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce14798.fuzzed 307152d165fc8de3e8b6b39527dd7e66
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2732884941
=counter_example_end


</MSG>
<MSG>3:39 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E3.F2 (d:0, s:2)...</MSG>
<MSG>3:39 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E3.F3 (d:0, s:2) from a frontier of size 65...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:39 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E3.F3...</MSG>
<MSG>3:39 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E3.F3...</MSG>
<MSG>3:39 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:39 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:39 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:39 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:39 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E3.F3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce14798.fuzzed 307152d165fc8de3e8b6b39527dd7e66
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2732884941
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141524 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[201192](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200644](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1[200241](141524, false)))), and[200580](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200571](andnot1[200569](141488, and[200449](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[200448](and[200254](141488, andnot1[200241](141524, false)), andnot1[200447](141488, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[200570](141488, andnot1[200552](141524, or[200540](and[200254](141488, andnot1[200241](141524, false)), andnot1[200538](141488, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[200618](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[200611](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[200593](and[200254](141488, andnot1[200241](141524, false)), andnot1[200590](141488, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>3:39 : main.A19.B2.C4.D2.E3.F3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:43 : main.A19.B2.C4.D2.E3.F3: Finished executing CG's add edge function...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E3.F3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E3.F3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:43 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E3.F3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:43 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:43 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce14798.fuzzed 307152d165fc8de3e8b6b39527dd7e66
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 39 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2732884941
=counter_example_end


</MSG>
<MSG>3:43 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E3.F3 (d:0, s:2)...</MSG>
<MSG>3:43 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E4 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3]
<MSG>3:43 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E4...</MSG>
<MSG>3:43 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E4...</MSG>
<MSG>3:43 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L15%1%bbentry
</MSG>
<MSG>3:43 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry</MSG>
<MSG>3:43 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry
</MSG>
<MSG>3:43 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry</MSG>
<MSG>3:43 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E4 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Propagated 0 out of 37 counter-examples across edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Added the 0 propagated CEs at PC Lfor.cond2%1%bbentry_L15%1%bbentry and propagated further.
</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>3:43 : main.A19.B2.C4.D2.E4: Finished executing CG's add edge function...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:43 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E4 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>3:43 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L15%1%bbentry</MSG>
<MSG>3:43 : Added correlation to the product-TFG main.A19.B2.C4.D2.E4 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>3:43 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D2.E4 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3]
<MSG>3:43 : main.A19.B2.C4.D2.E4: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:43 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry) ...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L15%1%bbentry ...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry) ...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:43 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:44 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:44 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:44 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:44 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:44 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:44 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 28 exprs and 17 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:44 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht15-prove_trivial13-prove2...</MSG>
<MSG>3:44 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:44 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:44 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 4 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 9 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial7-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry)...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged ...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>3:45 : main.A19.B2.C4.D2.E4 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:46 : product-TFG main.A19.B2.C4.D2.E4: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:46 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:46 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:46 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:46 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:46 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:46 : product-TFG main.A19.B2.C4.D2.E4: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:46 : product-TFG main.A19.B2.C4.D2.E4 created 3 possibilities in group main.A19.B2.C4.D2.E4.F...</MSG>
<MSG>3:46 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E4.F1 (d:0, s:2) from a frontier of size 66...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>3:46 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E4.F1...</MSG>
<MSG>3:46 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E4.F1...</MSG>
<MSG>3:46 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:46 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:46 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:46 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:46 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E4.F1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4.F1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4.F1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4.F1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4.F1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4.F1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4.F1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4.F1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4.F1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4.F1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4.F1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce15269.fuzzed 401f2dd526284776c85a7e1ef67bd273
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1025; 1025 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3218280958
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>3:46 : main.A19.B2.C4.D2.E4.F1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: Finished executing CG's add edge function...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E4.F1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:48 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:48 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce15269.fuzzed 401f2dd526284776c85a7e1ef67bd273
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1025; 1025 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3218280958
=counter_example_end


</MSG>
<MSG>3:48 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E4.F1 (d:0, s:2)...</MSG>
<MSG>3:48 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E4.F2 (d:0, s:2) from a frontier of size 65...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>3:48 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E4.F2...</MSG>
<MSG>3:48 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E4.F2...</MSG>
<MSG>3:48 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:48 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:48 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:48 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:48 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E4.F2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce15269.fuzzed 401f2dd526284776c85a7e1ef67bd273
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1025; 1025 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3218280958
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[201165](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200273](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>3:48 : main.A19.B2.C4.D2.E4.F2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:51 : main.A19.B2.C4.D2.E4.F2: Finished executing CG's add edge function...</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E4.F2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:51 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:51 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce15269.fuzzed 401f2dd526284776c85a7e1ef67bd273
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1025; 1025 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3218280958
=counter_example_end


</MSG>
<MSG>3:51 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E4.F2 (d:0, s:2)...</MSG>
<MSG>3:51 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D2.E4.F3 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[7]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 62 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 62 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>3:51 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D2.E4.F3...</MSG>
<MSG>3:51 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D2.E4.F3...</MSG>
<MSG>3:51 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:51 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:51 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:51 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:51 : Adding new edge to the product-TFG main.A19.B2.C4.D2.E4.F3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce15269.fuzzed 401f2dd526284776c85a7e1ef67bd273
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1025; 1025 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3218280958
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141524 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[201192](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200644](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1[200241](141524, false)))), and[200580](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200571](andnot1[200569](141488, and[200449](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[200448](and[200254](141488, andnot1[200241](141524, false)), andnot1[200447](141488, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[200570](141488, andnot1[200552](141524, or[200540](and[200254](141488, andnot1[200241](141524, false)), andnot1[200538](141488, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[200618](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[200611](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[200593](and[200254](141488, andnot1[200241](141524, false)), andnot1[200590](141488, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>3:51 : main.A19.B2.C4.D2.E4.F3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>3:55 : main.A19.B2.C4.D2.E4.F3: Finished executing CG's add edge function...</MSG>
<MSG>3:55 : main.A19.B2.C4.D2.E4.F3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:55 : main.A19.B2.C4.D2.E4.F3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:55 : Done adding new edge to the product-TFG main.A19.B2.C4.D2.E4.F3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:55 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:55 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce15269.fuzzed 401f2dd526284776c85a7e1ef67bd273
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1025; 1025 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 58), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3218280958
=counter_example_end


</MSG>
<MSG>3:55 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D2.E4.F3 (d:0, s:2)...</MSG>
<MSG>3:55 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D3 (d:0, s:2) from a frontier of size 63...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2]
<MSG>3:55 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D3...</MSG>
<MSG>3:55 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D3...</MSG>
<MSG>3:55 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:55 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry</MSG>
<MSG>3:55 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>3:55 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry</MSG>
<MSG>3:55 : Adding new edge to the product-TFG main.A19.B2.C4.D3 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>3:55 : main.A19.B2.C4.D3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>3:55 : main.A19.B2.C4.D3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>3:55 : main.A19.B2.C4.D3: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>3:55 : main.A19.B2.C4.D3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:55 : main.A19.B2.C4.D3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:55 : main.A19.B2.C4.D3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:55 : main.A19.B2.C4.D3: Propagated 0 out of 34 counter-examples across edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>3:55 : main.A19.B2.C4.D3: Added the 0 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>3:55 : main.A19.B2.C4.D3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>3:56 : main.A19.B2.C4.D3: Finished executing CG's add edge function...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>3:56 : Done adding new edge to the product-TFG main.A19.B2.C4.D3 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>3:56 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry</MSG>
<MSG>3:56 : Added correlation to the product-TFG main.A19.B2.C4.D3 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>3:56 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D3 (d:0, s:2) from a frontier of size 63...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2]
<MSG>3:56 : main.A19.B2.C4.D3: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:56 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L15%1%bbentry ...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:56 : main.A19.B2.C4.D3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 19 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht20-prove_trivial10-prove10...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>3:57 : main.A19.B2.C4.D3 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:58 : product-TFG main.A19.B2.C4.D3: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:59 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:59 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:59 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:59 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:59 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:59 : product-TFG main.A19.B2.C4.D3: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>3:59 : product-TFG main.A19.B2.C4.D3 created 3 possibilities in group main.A19.B2.C4.D3.E...</MSG>
<MSG>3:59 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D3.E1 (d:0, s:2) from a frontier of size 65...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>3:59 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D3.E1...</MSG>
<MSG>3:59 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D3.E1...</MSG>
<MSG>3:59 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:59 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:59 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>3:59 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>3:59 : Adding new edge to the product-TFG main.A19.B2.C4.D3.E1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3.E1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3.E1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3.E1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:59 : main.A19.B2.C4.D3.E1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce15743.fuzzed b9e124165af49d90c362e6eae2e1926b
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
802189313
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>3:59 : main.A19.B2.C4.D3.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E1: Finished executing CG's add edge function...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:00 : Done adding new edge to the product-TFG main.A19.B2.C4.D3.E1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:00 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:00 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce15743.fuzzed b9e124165af49d90c362e6eae2e1926b
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
802189313
=counter_example_end


</MSG>
<MSG>4:00 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D3.E1 (d:0, s:2)...</MSG>
<MSG>4:00 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D3.E2 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>4:00 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D3.E2...</MSG>
<MSG>4:00 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D3.E2...</MSG>
<MSG>4:00 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:00 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:00 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:00 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:00 : Adding new edge to the product-TFG main.A19.B2.C4.D3.E2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce15743.fuzzed b9e124165af49d90c362e6eae2e1926b
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
802189313
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[201165](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200273](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>4:00 : main.A19.B2.C4.D3.E2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:04 : main.A19.B2.C4.D3.E2: Finished executing CG's add edge function...</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:04 : Done adding new edge to the product-TFG main.A19.B2.C4.D3.E2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:04 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:04 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce15743.fuzzed b9e124165af49d90c362e6eae2e1926b
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
802189313
=counter_example_end


</MSG>
<MSG>4:04 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D3.E2 (d:0, s:2)...</MSG>
<MSG>4:04 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D3.E3 (d:0, s:2) from a frontier of size 63...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>4:04 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D3.E3...</MSG>
<MSG>4:04 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D3.E3...</MSG>
<MSG>4:04 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:04 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:04 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:04 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:04 : Adding new edge to the product-TFG main.A19.B2.C4.D3.E3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce15743.fuzzed b9e124165af49d90c362e6eae2e1926b
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
802189313
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141524 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[201192](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200644](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1[200241](141524, false)))), and[200580](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200571](andnot1[200569](141488, and[200449](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[200448](and[200254](141488, andnot1[200241](141524, false)), andnot1[200447](141488, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[200570](141488, andnot1[200552](141524, or[200540](and[200254](141488, andnot1[200241](141524, false)), andnot1[200538](141488, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[200618](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[200611](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[200593](and[200254](141488, andnot1[200241](141524, false)), andnot1[200590](141488, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>4:04 : main.A19.B2.C4.D3.E3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:07 : main.A19.B2.C4.D3.E3: Finished executing CG's add edge function...</MSG>
<MSG>4:07 : main.A19.B2.C4.D3.E3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:07 : main.A19.B2.C4.D3.E3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:07 : Done adding new edge to the product-TFG main.A19.B2.C4.D3.E3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:07 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:07 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce15743.fuzzed b9e124165af49d90c362e6eae2e1926b
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 205 , m_adder -> 36), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
802189313
=counter_example_end


</MSG>
<MSG>4:07 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D3.E3 (d:0, s:2)...</MSG>
<MSG>4:07 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D4 (d:0, s:2) from a frontier of size 62...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3]
<MSG>4:07 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D4...</MSG>
<MSG>4:07 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D4...</MSG>
<MSG>4:07 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:07 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:07 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>4:07 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:07 : Adding new edge to the product-TFG main.A19.B2.C4.D4 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>4:07 : main.A19.B2.C4.D4: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:07 : main.A19.B2.C4.D4: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:07 : main.A19.B2.C4.D4: Adding edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:07 : main.A19.B2.C4.D4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:07 : main.A19.B2.C4.D4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:07 : main.A19.B2.C4.D4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:07 : main.A19.B2.C4.D4: Propagated 0 out of 34 counter-examples across edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>4:07 : main.A19.B2.C4.D4: Added the 0 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>4:07 : main.A19.B2.C4.D4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>4:08 : main.A19.B2.C4.D4: Finished executing CG's add edge function...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:08 : Done adding new edge to the product-TFG main.A19.B2.C4.D4 for fromPC Lfor.cond2%1%bbentry_L15%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>4:08 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L15%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:08 : Added correlation to the product-TFG main.A19.B2.C4.D4 (d:0, s:2) and created a correlation entry...</MSG>
<MSG>4:08 : Chose (after CE propagation) product-TFG main.A19.B2.C4.D4 (d:0, s:2) from a frontier of size 62...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L15%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3]
<MSG>4:08 : main.A19.B2.C4.D4: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:08 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L15%1%bbentry ...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:08 : main.A19.B2.C4.D4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 19 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:09 : main.A19.B2.C4.D4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht20-prove_trivial10-prove10...</MSG>
<MSG>4:09 : main.A19.B2.C4.D4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4 (d:0, s:2): checked newly added edge and inferred invariants...</MSG>
<MSG>4:10 : main.A19.B2.C4.D4 (d:0, s:2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:11 : product-TFG main.A19.B2.C4.D4: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:11 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:11 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:11 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:11 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:11 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:11 : product-TFG main.A19.B2.C4.D4: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:11 : product-TFG main.A19.B2.C4.D4 created 3 possibilities in group main.A19.B2.C4.D4.E...</MSG>
<MSG>4:11 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D4.E1 (d:0, s:2) from a frontier of size 64...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>4:11 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D4.E1...</MSG>
<MSG>4:11 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D4.E1...</MSG>
<MSG>4:11 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:11 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:11 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:11 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:11 : Adding new edge to the product-TFG main.A19.B2.C4.D4.E1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4.E1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4.E1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4.E1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:11 : main.A19.B2.C4.D4.E1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce16217.fuzzed 94f71f267eaee7bfdf37f7b3708c4b20
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1607223260
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>4:11 : main.A19.B2.C4.D4.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E1: Finished executing CG's add edge function...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:13 : Done adding new edge to the product-TFG main.A19.B2.C4.D4.E1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:13 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:13 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce16217.fuzzed 94f71f267eaee7bfdf37f7b3708c4b20
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1607223260
=counter_example_end


</MSG>
<MSG>4:13 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D4.E1 (d:0, s:2)...</MSG>
<MSG>4:13 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D4.E2 (d:0, s:2) from a frontier of size 63...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>4:13 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D4.E2...</MSG>
<MSG>4:13 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D4.E2...</MSG>
<MSG>4:13 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:13 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:13 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:13 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:13 : Adding new edge to the product-TFG main.A19.B2.C4.D4.E2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce16217.fuzzed 94f71f267eaee7bfdf37f7b3708c4b20
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1607223260
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[201165](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200273](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>4:13 : main.A19.B2.C4.D4.E2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:17 : main.A19.B2.C4.D4.E2: Finished executing CG's add edge function...</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:17 : Done adding new edge to the product-TFG main.A19.B2.C4.D4.E2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:17 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:17 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce16217.fuzzed 94f71f267eaee7bfdf37f7b3708c4b20
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1607223260
=counter_example_end


</MSG>
<MSG>4:17 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D4.E2 (d:0, s:2)...</MSG>
<MSG>4:17 : Chose (for CE propagation) product-TFG main.A19.B2.C4.D4.E3 (d:0, s:2) from a frontier of size 62...</MSG>
<cg>
  Edges[6]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 0 delta 0, A line 36 => A line 62 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 62 => A line 36 at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L15%1%bbentry (C (line 18 at column 19), A line 62)
                Lfor.cond2%1%bbentry_L15%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 28 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 53 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>4:17 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C4.D4.E3...</MSG>
<MSG>4:17 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C4.D4.E3...</MSG>
<MSG>4:17 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:17 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:17 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:17 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:17 : Adding new edge to the product-TFG main.A19.B2.C4.D4.E3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce16217.fuzzed 94f71f267eaee7bfdf37f7b3708c4b20
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1607223260
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141524 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[201192](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200644](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1[200241](141524, false)))), and[200580](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200571](andnot1[200569](141488, and[200449](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[200448](and[200254](141488, andnot1[200241](141524, false)), andnot1[200447](141488, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[200570](141488, andnot1[200552](141524, or[200540](and[200254](141488, andnot1[200241](141524, false)), andnot1[200538](141488, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[200618](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[200611](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[200593](and[200254](141488, andnot1[200241](141524, false)), andnot1[200590](141488, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>4:17 : main.A19.B2.C4.D4.E3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:20 : main.A19.B2.C4.D4.E3: Finished executing CG's add edge function...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:20 : main.A19.B2.C4.D4.E3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:20 : Done adding new edge to the product-TFG main.A19.B2.C4.D4.E3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:20 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:20 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce16217.fuzzed 94f71f267eaee7bfdf37f7b3708c4b20
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 169 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1607223260
=counter_example_end


</MSG>
<MSG>4:20 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C4.D4.E3 (d:0, s:2)...</MSG>
<MSG>4:20 : Chose (for CE propagation) product-TFG main.A19.B2.C8 (d:0, s:1) from a frontier of size 61...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond8%1%bbentry[mu 1, delta 1]
<MSG>4:20 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C8...</MSG>
<MSG>4:20 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C8...</MSG>
<MSG>4:20 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry ending at Lfor.cond8%1%bbentry_L15%1%bbentry
</MSG>
<MSG>4:20 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>4:20 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry
</MSG>
<MSG>4:20 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>4:20 : Adding new edge to the product-TFG main.A19.B2.C8 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond8%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C8: Computing loop hoisting select expressions at toPC Lfor.cond8%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C8: Computing loop hoisting non-linear expressions at toPC Lfor.cond8%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C8: Adding node Lfor.cond8%1%bbentry_L15%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19.B2.C8: returning 1 for =Lentry%1%d=
<MSG>4:20 : main.A19.B2.C8: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond8%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C8: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond8%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C8: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond8%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C8: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:20 : main.A19.B2.C8: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:20 : main.A19.B2.C8: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:20 : main.A19.B2.C8: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond8%1%bbentry_L15%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 2147483648
143687 : bvsign(142284) : BV:1                     : 1
143690 : eq(140809, 143687) : BOOL                 : true
143693 : not(143690) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 2147483648
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : true
194287 : and(140555, 141488) : BOOL                : false
206990 : or(143693, 194287) : BOOL                 : false

ce =
=counter_example_begin yices.ce9585.fuzzed 26d97b2e174adbf6151a9ff55ee4bd1
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 537133063 { 0x20040007 +1.3125083e193 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, { [ 0; 1023 ], [ 1028; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2414824484
=counter_example_end


failcond-expr = or(not(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry))), and(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : not(4) : BOOL
6 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvslt(6, 7) : BOOL
9 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-mem--symbol.1.0 : MEMLABEL
12 : symbol.1 : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(9, 10, 11, 12, 13, 14) : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : bvslt(15, 16) : BOOL
18 : and(8, 17) : BOOL
19 : or(5, 18) : BOOL
</MSG>
<MSG>4:20 : main.A19.B2.C8: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:20 : main.A19.B2.C8: Finished executing CG's add edge function...</MSG>
<MSG>4:20 : main.A19.B2.C8: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond8%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C8: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond8%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : Done adding new edge to the product-TFG main.A19.B2.C8 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond8%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>4:20 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond8%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>4:20 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond8%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond8%1%bbentry_L15%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 2147483648
143687 : bvsign(142284) : BV:1                     : 1
143690 : eq(140809, 143687) : BOOL                 : true
143693 : not(143690) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 2147483648
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : true
194287 : and(140555, 141488) : BOOL                : false
206990 : or(143693, 194287) : BOOL                 : false

ce =
=counter_example_begin yices.ce9585.fuzzed 26d97b2e174adbf6151a9ff55ee4bd1
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 537133063 { 0x20040007 +1.3125083e193 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, { [ 0; 1023 ], [ 1028; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2414824484
=counter_example_end


</MSG>
<MSG>4:20 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C8 (d:0, s:1)...</MSG>
<MSG>4:20 : Chose (for CE propagation) product-TFG main.A19.B2.C1 (d:0, s:1) from a frontier of size 60...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta 1]
<MSG>4:20 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C1...</MSG>
<MSG>4:20 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C1...</MSG>
<MSG>4:20 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L15%1%bbentry
</MSG>
<MSG>4:20 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>4:20 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry
</MSG>
<MSG>4:20 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>4:20 : Adding new edge to the product-TFG main.A19.B2.C1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C1: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C1: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C1: Adding node Lfor.cond%1%bbentry_L15%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19.B2.C1: returning 1 for =Lentry%1%d=
<MSG>4:20 : main.A19.B2.C1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:20 : main.A19.B2.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:20 : main.A19.B2.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:20 : main.A19.B2.C1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L15%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 4294967295
143687 : bvsign(142284) : BV:1                     : 1
143690 : eq(140809, 143687) : BOOL                 : true
143693 : not(143690) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 0
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : true
140556 : not(140555) : BOOL                        : false
206996 : or(143693, 140556) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce7785 8acca6736ae3b3139ba3912bebe5a83f
=input.dst.exreg.0.2
1 : 334671758 { 0x13f2af8e +1.89598250e168 } : BV:32
=input.dst.exreg.0.4
1 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
=input.dst.exreg.6.0
1 : 1933591321 { 0x73404319 +1.50204765e103 } : BV:32
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.local_alloc_count.=L0%0%d=
1 : 244005246 { 0xe8b397e +1.8769202e158 } : COUNT
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%cmp3.Lfor.inc17%1%d
1 : 1 { 0x1 } : BOOL
=input.src.llvm-%0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.llvm-%e.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%cmp3.Lfor.cond2%1%bbentry
1 : 1 { 0x1 } : BOOL
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.src.llvm-%d.0.phi.tmpvar.for.body.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local_alloc_count.Lfor.cond%1%bbentry
1 : 244005247 { 0xe8b397f +1.8769214e158 } : COUNT
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.5.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.4.L3%1%spver
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.exreg.0.4.L4%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.4.L6%1%spver
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.mem.L0%2%d
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%2%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L0%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%2%d
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%2%d
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L0%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.1.L1%1%spver
1 : 2147483664 { 0x80000010 -2147483632 -1.190e129 } : BV:32
=input.dst.exreg.0.4.L7%1%spver
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.exreg.6.0.L1%1%spver
1 : 1933591432 { 0x73404388 +1.50206089e103 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.mem.L2%1%d
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L2%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L2%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L2%1%d
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L2%1%d
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L2%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.0.L3%1%spver
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.mem.L3%1%spver
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.sp=L3%1%spver=sp.L3%1%spver
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.exreg.0.4.L4%1%d
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.mem.L4%1%d
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L4%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L4%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L4%1%d
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L4%1%d
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L4%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.mem.L4%1%spver
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.sp=L4%1%spver=sp.L4%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.4.L5%1%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L5%1%d
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L5%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L5%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L5%1%d
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L5%1%d
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L5%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.5.L6%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L6%1%spver
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 16, [ 2147483645; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 128, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.sp=L6%1%spver=sp.L6%1%spver
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.exreg.0.4.L7%1%d
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.mem.L7%1%d
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 16, [ 2147483645; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 128, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L7%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L7%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L7%1%d
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L7%1%d
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L7%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.6.0.L7%1%spver
1 : 1933591304 { 0x73404308 +1.50204563e103 } : BV:32
=input.dst.exreg.7.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.10.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.11.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.12.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.13.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.15.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.sp=L7%1%spver=sp.L7%1%spver
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 16, [ 2147483645; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 128, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L8%1%d
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L8%1%d
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L8%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.1.L9%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.exreg.6.0.L9%1%bbentry
1 : 1933591304 { 0x73404308 +1.50204563e103 } : BV:32
=input.dst.exreg.0.2.L9%1%bbentry
1 : 334671758 { 0x13f2af8e +1.89598250e168 } : BV:32
=input.dst.exreg.10.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.11.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.12.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.13.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.15.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.ghostvar.itervar.2.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=stack.size
1 : 1144070144 { 0x44312000 +1.38378906e9 } : BV:32
=input.dst.exreg.10.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.11.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.12.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.13.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.15.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.7.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.16.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.7.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 1627959296 { 0x6108b000 +1.6787109e67 } : BV:32
=input.memlabel-mem--esp_end
1 : 2772029439 { 0xa539cfff -1522937857 -1.45166003e203 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.mem.L0%1%allocaI2
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%1%allocaI2
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%1%allocaI2
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%1%allocaI2
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.mem.L0%1%allocaI2.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lentry%1%allocaI4.mem.L0%1%allocaI2.cluster.memlabel-mem--symbol.1.0
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=unaliased_memslot.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
2948406950
=counter_example_end


failcond-expr = or(not(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry))), not(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : not(4) : BOOL
6 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvslt(6, 7) : BOOL
9 : not(8) : BOOL
10 : or(5, 9) : BOOL
</MSG>
<MSG>4:20 : main.A19.B2.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:20 : main.A19.B2.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:20 : main.A19.B2.C1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : Done adding new edge to the product-TFG main.A19.B2.C1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>4:20 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>4:20 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L15%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 4294967295
143687 : bvsign(142284) : BV:1                     : 1
143690 : eq(140809, 143687) : BOOL                 : true
143693 : not(143690) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 0
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : true
140556 : not(140555) : BOOL                        : false
206996 : or(143693, 140556) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce7785 8acca6736ae3b3139ba3912bebe5a83f
=input.dst.exreg.0.2
1 : 334671758 { 0x13f2af8e +1.89598250e168 } : BV:32
=input.dst.exreg.0.4
1 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
=input.dst.exreg.6.0
1 : 1933591321 { 0x73404319 +1.50204765e103 } : BV:32
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.local_alloc_count.=L0%0%d=
1 : 244005246 { 0xe8b397e +1.8769202e158 } : COUNT
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%cmp3.Lfor.inc17%1%d
1 : 1 { 0x1 } : BOOL
=input.src.llvm-%0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.llvm-%e.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%cmp3.Lfor.cond2%1%bbentry
1 : 1 { 0x1 } : BOOL
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.src.llvm-%d.0.phi.tmpvar.for.body.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.local_alloc_count.Lfor.cond%1%bbentry
1 : 244005247 { 0xe8b397f +1.8769214e158 } : COUNT
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.5.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.4.L3%1%spver
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.exreg.0.4.L4%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.4.L6%1%spver
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.mem.L0%2%d
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%2%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L0%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%2%d
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%2%d
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L0%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.1.L1%1%spver
1 : 2147483664 { 0x80000010 -2147483632 -1.190e129 } : BV:32
=input.dst.exreg.0.4.L7%1%spver
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.exreg.6.0.L1%1%spver
1 : 1933591432 { 0x73404388 +1.50206089e103 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.mem.L2%1%d
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L2%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L2%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L2%1%d
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L2%1%d
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L2%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.0.L3%1%spver
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.mem.L3%1%spver
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.sp=L3%1%spver=sp.L3%1%spver
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.exreg.0.4.L4%1%d
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.mem.L4%1%d
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L4%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L4%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L4%1%d
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L4%1%d
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L4%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.mem.L4%1%spver
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.sp=L4%1%spver=sp.L4%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.4.L5%1%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L5%1%d
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L5%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L5%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L5%1%d
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L5%1%d
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L5%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.5.L6%1%spver
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L6%1%spver
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 16, [ 2147483645; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 128, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.sp=L6%1%spver=sp.L6%1%spver
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.exreg.0.4.L7%1%d
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.mem.L7%1%d
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 16, [ 2147483645; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 128, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L7%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L7%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L7%1%d
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L7%1%d
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L7%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.6.0.L7%1%spver
1 : 1933591304 { 0x73404308 +1.50204563e103 } : BV:32
=input.dst.exreg.7.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.10.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.11.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.12.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.13.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L7%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.15.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L7%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.sp=L7%1%spver=sp.L7%1%spver
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 2147483632 { 0x7ffffff0 +1.99999809e128 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 16, [ 2147483645; 2147483646 ] -> 0, [ 2147483647; 2147483647 ] -> 128, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L8%1%d
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L8%1%d
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.L8%1%d
1 : 0 { 0x0 } : BOOL
=input.dst.exreg.0.1.L9%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.exreg.6.0.L9%1%bbentry
1 : 1933591304 { 0x73404308 +1.50204563e103 } : BV:32
=input.dst.exreg.0.2.L9%1%bbentry
1 : 334671758 { 0x13f2af8e +1.89598250e168 } : BV:32
=input.dst.exreg.10.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.11.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.12.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.13.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.15.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.ghostvar.itervar.2.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=stack.size
1 : 1144070144 { 0x44312000 +1.38378906e9 } : BV:32
=input.dst.exreg.10.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.11.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.12.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.13.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.14.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.15.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.16.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.7.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L1%1%spver
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L1%1%spver
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.16.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.7.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.dst.exreg.8.0.L9%1%bbentry
1 : 1 { 0x1 } : BV:1
=input.dst.exreg.9.0.L9%1%bbentry
1 : 0 { 0x0 } : BV:1
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 1627959296 { 0x6108b000 +1.6787109e67 } : BV:32
=input.memlabel-mem--esp_end
1 : 2772029439 { 0xa539cfff -1522937857 -1.45166003e203 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___main__x__=Lentry%1%d=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.mem.L0%1%allocaI2
1 : ([ 0; 1023 ] -> 0, [ 1024; 1027 ] -> 255, [ 1028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L0%1%allocaI2
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 1627959295 ] -> memlabel-mem--heap, [ 1627959296; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 2147483655 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 2147483656; 2772029439 ] -> memlabel-mem--esp, [ 2772029440; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.L0%1%allocaI2
1 : 1632360158 { 0x614bd6de +1.59249472e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.L0%1%allocaI2
1 : 1957447216 { 0x74ac4630 +1.34589195e106 } : BV:32
=input.dst.mem.L0%1%allocaI2.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lentry%1%allocaI4.mem.L0%1%allocaI2.cluster.memlabel-mem--symbol.1.0
1 : ([ 0; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=unaliased_memslot.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
2948406950
=counter_example_end


</MSG>
<MSG>4:20 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C1 (d:0, s:1)...</MSG>
<MSG>4:20 : Chose (for CE propagation) product-TFG main.A19.B2.C2 (d:0, s:1) from a frontier of size 54...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 2, delta 2]
<MSG>4:20 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C2...</MSG>
<MSG>4:20 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C2...</MSG>
<MSG>4:20 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L15%1%bbentry
</MSG>
<MSG>4:20 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>4:20 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry
</MSG>
<MSG>4:20 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>4:20 : Adding new edge to the product-TFG main.A19.B2.C2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C2: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C2: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C2: Adding node Lfor.cond%1%bbentry_L15%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19.B2.C2: returning 1 for =Lentry%1%d=
<MSG>4:20 : main.A19.B2.C2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:20 : main.A19.B2.C2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:20 : main.A19.B2.C2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:20 : main.A19.B2.C2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:20 : main.A19.B2.C2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L15%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 2147483648
143687 : bvsign(142284) : BV:1                     : 1
143690 : eq(140809, 143687) : BOOL                 : true
143693 : not(143690) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 2147483648
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
207006 : not(199976) : BOOL                        : true
207109 : andnot1(141488, 207006) : BOOL            : false
207111 : and(140555, 207109) : BOOL                : false
207432 : or(143693, 207111) : BOOL                 : false

ce =
=counter_example_begin yices.ce9585.fuzzed 26d97b2e174adbf6151a9ff55ee4bd1
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 537133063 { 0x20040007 +1.3125083e193 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, { [ 0; 1023 ], [ 1028; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2414824484
=counter_example_end


failcond-expr = or(not(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry))), and(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), andnot1(bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0), not(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : not(4) : BOOL
6 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvslt(6, 7) : BOOL
9 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-mem--symbol.1.0 : MEMLABEL
12 : symbol.1 : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(9, 10, 11, 12, 13, 14) : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : bvslt(15, 16) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6) : BV:32
20 : bvslt(19, 7) : BOOL
21 : not(20) : BOOL
22 : andnot1(17, 21) : BOOL
23 : and(8, 22) : BOOL
24 : or(5, 23) : BOOL
</MSG>
<MSG>4:20 : main.A19.B2.C2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:21 : main.A19.B2.C2: Finished executing CG's add edge function...</MSG>
<MSG>4:21 : main.A19.B2.C2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:21 : main.A19.B2.C2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:21 : Done adding new edge to the product-TFG main.A19.B2.C2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>4:21 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>4:21 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 2, delta 2] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L15%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 2147483648
143687 : bvsign(142284) : BV:1                     : 1
143690 : eq(140809, 143687) : BOOL                 : true
143693 : not(143690) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 2147483648
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
207006 : not(199976) : BOOL                        : true
207109 : andnot1(141488, 207006) : BOOL            : false
207111 : and(140555, 207109) : BOOL                : false
207432 : or(143693, 207111) : BOOL                 : false

ce =
=counter_example_begin yices.ce9585.fuzzed 26d97b2e174adbf6151a9ff55ee4bd1
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 537133063 { 0x20040007 +1.3125083e193 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, { [ 0; 1023 ], [ 1028; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2414824484
=counter_example_end


</MSG>
<MSG>4:21 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C2 (d:0, s:1)...</MSG>
<MSG>4:21 : Chose (for CE propagation) product-TFG main.A19.B2.C3 (d:0, s:1) from a frontier of size 53...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 1 delta 1, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 3, delta 3]
<MSG>4:21 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B2.C3...</MSG>
<MSG>4:21 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B2.C3...</MSG>
<MSG>4:21 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry ending at Lfor.cond%1%bbentry_L15%1%bbentry
</MSG>
<MSG>4:21 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>4:21 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry
</MSG>
<MSG>4:21 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>4:21 : Adding new edge to the product-TFG main.A19.B2.C3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>4:21 : main.A19.B2.C3: Computing loop hoisting select expressions at toPC Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:21 : main.A19.B2.C3: Computing loop hoisting non-linear expressions at toPC Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:21 : main.A19.B2.C3: Adding node Lfor.cond%1%bbentry_L15%1%bbentry to the product-TFG...</MSG>
local_is_heap_allocated 3811: main.A19.B2.C3: returning 1 for =Lentry%1%d=
<MSG>4:21 : main.A19.B2.C3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:21 : main.A19.B2.C3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:21 : main.A19.B2.C3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:21 : main.A19.B2.C3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:21 : main.A19.B2.C3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:21 : main.A19.B2.C3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:21 : main.A19.B2.C3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L15%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 2147483648
143687 : bvsign(142284) : BV:1                     : 1
143690 : eq(140809, 143687) : BOOL                 : true
143693 : not(143690) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 2147483648
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
207454 : not(200445) : BOOL                        : true
207455 : andnot1(141488, 207454) : BOOL            : false
207456 : and(199976, 207455) : BOOL                : false
207526 : andnot1(141488, 207456) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 537133056
141507 : bvadd(140467, 140514) : BV:32             : 537395196
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 537395196, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 537395196, 4, false))
194154 : not(141488) : BOOL                        : false
207517 : andnot1(141524, 194154) : BOOL            : andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 537395196, 4, false)), false)
207527 : and(141488, 207517) : BOOL                : and(true, andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 537395196, 4, false)), false))
207528 : or(207526, 207527) : BOOL                 : or(false, and(true, andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 537395196, 4, false)), false)))
207537 : and(140555, 207528) : BOOL                : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
200590 : andnot1(141488, 140295) : BOOL            : false
207552 : and(194172, 200590) : BOOL                : false
207556 : andnot1(140555, 207552) : BOOL            : false
207558 : or(207537, 207556) : BOOL                 : false
207566 : or(143693, 207558) : BOOL                 : false

ce =
=counter_example_begin yices.ce9585.fuzzed 26d97b2e174adbf6151a9ff55ee4bd1
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 537133063 { 0x20040007 +1.3125083e193 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, { [ 0; 1023 ], [ 1028; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2414824484
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[207566](not(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry))), or[207558](and[207537](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[207528](andnot1[207526](141488, and[207456](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), andnot1[207455](141488, not(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2))))), and[207527](141488, andnot1[207517](eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), not[194154](141488))))), andnot1[207556](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[207552](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), andnot1[200590](141488, false))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : not(4) : BOOL
6 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvslt(6, 7) : BOOL
9 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-mem--symbol.1.0 : MEMLABEL
12 : symbol.1 : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(9, 10, 11, 12, 13, 14) : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : bvslt(15, 16) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6) : BV:32
20 : bvslt(19, 7) : BOOL
21 : bvadd(7, 6) : BV:32
22 : bvslt(21, 7) : BOOL
23 : not(22) : BOOL
24 : andnot1(17, 23) : BOOL
25 : and(20, 24) : BOOL
26 : andnot1(17, 25) : BOOL
27 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
28 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
29 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
30 : bvadd(28, 29) : BV:32
31 : select(9, 10, 27, 30, 13, 14) : BV:32
32 : eq(16, 31) : BOOL
33 : not(17) : BOOL
34 : andnot1(32, 33) : BOOL
35 : and(17, 34) : BOOL
36 : or(26, 35) : BOOL
37 : and(8, 36) : BOOL
38 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
39 : bvadd(18, 38) : BV:32
40 : 3 { 0x3 +1.35e129 } : BV:32
41 : bvslt(39, 40) : BOOL
42 : andnot1(17, 14) : BOOL
43 : and(41, 42) : BOOL
44 : andnot1(8, 43) : BOOL
45 : or(37, 44) : BOOL
46 : or(5, 45) : BOOL
</MSG>
<MSG>4:21 : main.A19.B2.C3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>4:21 : main.A19.B2.C3: Finished executing CG's add edge function...</MSG>
<MSG>4:21 : main.A19.B2.C3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:21 : main.A19.B2.C3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond%1%bbentry_L15%1%bbentry...</MSG>
<MSG>4:21 : Done adding new edge to the product-TFG main.A19.B2.C3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond%1%bbentry_L15%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry...</MSG>
<MSG>4:21 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond%1%bbentry and dst path L9%1%bbentry --> L15%1%bbentry</MSG>
<MSG>4:21 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>Lfor.cond%1%bbentry[mu 3, delta 3] as correlation candidate for L9%1%bbentry=>L15%1%bbentry[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcLfor.cond%1%bbentry_L15%1%bbentry-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 2147483648
143687 : bvsign(142284) : BV:1                     : 1
143690 : eq(140809, 143687) : BOOL                 : true
143693 : not(143690) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 2
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 2147483648
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : true
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
188384 : bvadd(140296, 140554) : BV:32             : 3
199976 : bvslt(188384, 140311) : BOOL              : false
200444 : bvadd(140311, 140554) : BV:32             : 4
200445 : bvslt(200444, 140311) : BOOL              : false
207454 : not(200445) : BOOL                        : true
207455 : andnot1(141488, 207454) : BOOL            : false
207456 : and(199976, 207455) : BOOL                : false
207526 : andnot1(141488, 207456) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 537133056
141507 : bvadd(140467, 140514) : BV:32             : 537395196
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 537395196, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 537395196, 4, false))
194154 : not(141488) : BOOL                        : false
207517 : andnot1(141524, 194154) : BOOL            : andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 537395196, 4, false)), false)
207527 : and(141488, 207517) : BOOL                : and(true, andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 537395196, 4, false)), false))
207528 : or(207526, 207527) : BOOL                 : or(false, and(true, andnot1(eq(0, select(([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 537395196, 4, false)), false)))
207537 : and(140555, 207528) : BOOL                : false
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 0
141593 : bvadd(140296, 140551) : BV:32             : 1
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
200590 : andnot1(141488, 140295) : BOOL            : false
207552 : and(194172, 200590) : BOOL                : false
207556 : andnot1(140555, 207552) : BOOL            : false
207558 : or(207537, 207556) : BOOL                 : false
207566 : or(143693, 207558) : BOOL                 : false

ce =
=counter_example_begin yices.ce9585.fuzzed 26d97b2e174adbf6151a9ff55ee4bd1
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 537133056 { 0x20040000 +1.3125000e193 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 536870912; 2147483647 ] -> 0, { [ 0; 1023 ], [ 1028; 536870911 ], [ 2147483648; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 537133063 { 0x20040007 +1.3125083e193 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1026 ] -> 0, [ 1027; 1027 ] -> 128, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 537133055 ] -> memlabel-mem--esp, [ 537133056; 537133063 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 537133064; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.mem.L8%1%d.cluster.memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp
1 : ([ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--rodata
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--heap
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.2.0
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem--symbol.1.0
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 128, { [ 0; 1023 ], [ 1028; 4294967295 ], } -> (RAC: m_multiplier -> 151 , m_adder -> 59), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2414824484
=counter_example_end


</MSG>
<MSG>4:21 : Discovered that the correlation was useless for the product-TFG main.A19.B2.C3 (d:0, s:1)...</MSG>
<MSG>4:21 : Chose (for CE propagation) product-TFG main.A19.B3 (d:0, s:0) from a frontier of size 52...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 26 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2]
<MSG>4:21 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B3...</MSG>
<MSG>4:21 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B3...</MSG>
<MSG>4:21 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:21 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:21 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>4:21 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:21 : Adding new edge to the product-TFG main.A19.B3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>4:21 : main.A19.B3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:21 : main.A19.B3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:21 : main.A19.B3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:21 : main.A19.B3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:21 : main.A19.B3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:21 : main.A19.B3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:21 : main.A19.B3: Propagated 17 out of 26 counter-examples across edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>4:22 : main.A19.B3: Added the 17 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>4:22 : main.A19.B3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>4:23 : main.A19.B3: Finished executing CG's add edge function...</MSG>
<MSG>4:23 : main.A19.B3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:23 : main.A19.B3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:23 : Done adding new edge to the product-TFG main.A19.B3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>4:23 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:23 : Added correlation to the product-TFG main.A19.B3 (d:0, s:1) and created a correlation entry...</MSG>
<MSG>4:23 : Chose (after CE propagation) product-TFG main.A19.B3 (d:0, s:1) from a frontier of size 52...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 48 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 2, delta 2]
<MSG>4:23 : main.A19.B3: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:23 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>4:23 : main.A19.B3: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>4:23 : main.A19.B3: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L9%1%bbentry ...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:23 : main.A19.B3: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:23 : main.A19.B3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:23 : main.A19.B3: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:23 : main.A19.B3: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:23 : main.A19.B3: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:23 : main.A19.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:23 : main.A19.B3: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:23 : main.A19.B3: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 21 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:23 : main.A19.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht19-prove_trivial17-prove2...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:23 : main.A19.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:23 : main.A19.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : main.A19.B3: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>4:24 : main.A19.B3: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:24 : main.A19.B3 (d:0, s:1): checked newly added edge and inferred invariants...</MSG>
<MSG>4:24 : main.A19.B3 (d:0, s:1): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:25 : product-TFG main.A19.B3: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:25 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:25 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:25 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:25 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:25 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:25 : product-TFG main.A19.B3: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:25 : product-TFG main.A19.B3 created 3 possibilities in group main.A19.B3.C...</MSG>
<MSG>4:25 : Chose (for CE propagation) product-TFG main.A19.B3.C1 (d:0, s:1) from a frontier of size 54...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 51 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>4:25 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B3.C1...</MSG>
<MSG>4:25 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B3.C1...</MSG>
<MSG>4:25 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:25 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:25 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:25 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:25 : Adding new edge to the product-TFG main.A19.B3.C1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:25 : main.A19.B3.C1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:25 : main.A19.B3.C1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:25 : main.A19.B3.C1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:25 : main.A19.B3.C1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:25 : main.A19.B3.C1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:25 : main.A19.B3.C1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:25 : main.A19.B3.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:25 : main.A19.B3.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:25 : main.A19.B3.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:25 : main.A19.B3.C1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 1
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : true
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 1
141593 : bvadd(140296, 140551) : BV:32             : 2
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce17749.fuzzed 21fb35fdde52cc3704430b81294104f
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3766132981
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>4:25 : main.A19.B3.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:26 : main.A19.B3.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:26 : main.A19.B3.C1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:26 : main.A19.B3.C1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:26 : Done adding new edge to the product-TFG main.A19.B3.C1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:26 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:26 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 1
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : true
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 1
141593 : bvadd(140296, 140551) : BV:32             : 2
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce17749.fuzzed 21fb35fdde52cc3704430b81294104f
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3766132981
=counter_example_end


</MSG>
<MSG>4:26 : Discovered that the correlation was useless for the product-TFG main.A19.B3.C1 (d:0, s:1)...</MSG>
<MSG>4:26 : Chose (for CE propagation) product-TFG main.A19.B3.C2 (d:0, s:1) from a frontier of size 53...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 51 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>4:26 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B3.C2...</MSG>
<MSG>4:26 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B3.C2...</MSG>
<MSG>4:26 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:26 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:26 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:26 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:26 : Adding new edge to the product-TFG main.A19.B3.C2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:26 : main.A19.B3.C2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:26 : main.A19.B3.C2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:26 : main.A19.B3.C2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:26 : main.A19.B3.C2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:26 : main.A19.B3.C2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:26 : main.A19.B3.C2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:26 : main.A19.B3.C2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:26 : main.A19.B3.C2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:26 : main.A19.B3.C2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:26 : main.A19.B3.C2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 1
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : true
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 1
141593 : bvadd(140296, 140551) : BV:32             : 2
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 2
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce17749.fuzzed 21fb35fdde52cc3704430b81294104f
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3766132981
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[201165](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200273](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>4:26 : main.A19.B3.C2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:30 : main.A19.B3.C2: Finished executing CG's add edge function...</MSG>
<MSG>4:30 : main.A19.B3.C2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : Done adding new edge to the product-TFG main.A19.B3.C2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:30 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:30 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 1
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : true
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 1
141593 : bvadd(140296, 140551) : BV:32             : 2
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 2
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce17749.fuzzed 21fb35fdde52cc3704430b81294104f
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3766132981
=counter_example_end


</MSG>
<MSG>4:30 : Discovered that the correlation was useless for the product-TFG main.A19.B3.C2 (d:0, s:1)...</MSG>
<MSG>4:30 : Chose (for CE propagation) product-TFG main.A19.B3.C3 (d:0, s:1) from a frontier of size 52...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 2 delta 2, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 51 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>4:30 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B3.C3...</MSG>
<MSG>4:30 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B3.C3...</MSG>
<MSG>4:30 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:30 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:30 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:30 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:30 : Adding new edge to the product-TFG main.A19.B3.C3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:30 : main.A19.B3.C3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:30 : main.A19.B3.C3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:30 : main.A19.B3.C3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:30 : main.A19.B3.C3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:30 : main.A19.B3.C3: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 1
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : true
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 1
141593 : bvadd(140296, 140551) : BV:32             : 2
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 2
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 3
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce17749.fuzzed 21fb35fdde52cc3704430b81294104f
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3766132981
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);141524 = eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false));or[201192](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200644](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1[200241](141524, false)))), and[200580](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200571](andnot1[200569](141488, and[200449](bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), or[200448](and[200254](141488, andnot1[200241](141524, false)), andnot1[200447](141488, andnot1(bvslt(bvadd(2, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))))))), and[200570](141488, andnot1[200552](141524, or[200540](and[200254](141488, andnot1[200241](141524, false)), andnot1[200538](141488, not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))))))), andnot1[200618](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), and[200611](bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3), or[200593](and[200254](141488, andnot1[200241](141524, false)), andnot1[200590](141488, false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : bvadd(11, 10) : BV:32
43 : bvslt(42, 11) : BOOL
44 : andnot1(43, 17) : BOOL
45 : andnot1(27, 44) : BOOL
46 : or(39, 45) : BOOL
47 : and(29, 46) : BOOL
48 : andnot1(27, 47) : BOOL
49 : andnot1(27, 17) : BOOL
50 : or(39, 49) : BOOL
51 : andnot1(37, 50) : BOOL
52 : and(27, 51) : BOOL
53 : or(48, 52) : BOOL
54 : and(12, 53) : BOOL
55 : andnot1(27, 24) : BOOL
56 : or(39, 55) : BOOL
57 : and(16, 56) : BOOL
58 : andnot1(12, 57) : BOOL
59 : or(18, 41, 54, 58) : BOOL
60 : or(9, 59) : BOOL
</MSG>
<MSG>4:30 : main.A19.B3.C3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:33 : main.A19.B3.C3: Finished executing CG's add edge function...</MSG>
<MSG>4:33 : main.A19.B3.C3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:33 : main.A19.B3.C3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:33 : Done adding new edge to the product-TFG main.A19.B3.C3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:33 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:33 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 1
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : true
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 1
141593 : bvadd(140296, 140551) : BV:32             : 2
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : true
199956 : not(194172) : BOOL                        : false
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 2
199976 : bvslt(188384, 140311) : BOOL              : false
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200444 : bvadd(140311, 140554) : BV:32             : 3
200445 : bvslt(200444, 140311) : BOOL              : false
200446 : andnot1(200445, 199956) : BOOL            : false
200447 : andnot1(141488, 200446) : BOOL            : false
200448 : or(200254, 200447) : BOOL                 : false
200449 : and(199976, 200448) : BOOL                : false
200569 : andnot1(141488, 200449) : BOOL            : false
200538 : andnot1(141488, 199956) : BOOL            : false
200540 : or(200254, 200538) : BOOL                 : false
200552 : andnot1(141524, 200540) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200570 : and(141488, 200552) : BOOL                : false
200571 : or(200569, 200570) : BOOL                 : false
200580 : and(140555, 200571) : BOOL                : false
200590 : andnot1(141488, 140295) : BOOL            : false
200593 : or(200254, 200590) : BOOL                 : false
200611 : and(194172, 200593) : BOOL                : false
200618 : andnot1(140555, 200611) : BOOL            : false
200644 : or(199959, 200264, 200580, 200618) : BOOL : false
201192 : or(201160, 200644) : BOOL                 : false

ce =
=counter_example_begin yices.ce17749.fuzzed 21fb35fdde52cc3704430b81294104f
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 156), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3766132981
=counter_example_end


</MSG>
<MSG>4:33 : Discovered that the correlation was useless for the product-TFG main.A19.B3.C3 (d:0, s:1)...</MSG>
<MSG>4:33 : Chose (for CE propagation) product-TFG main.A19.B4 (d:0, s:0) from a frontier of size 51...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 26 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3]
<MSG>4:33 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B4...</MSG>
<MSG>4:33 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B4...</MSG>
<MSG>4:33 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry ending at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:33 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:33 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry
</MSG>
<MSG>4:33 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:33 : Adding new edge to the product-TFG main.A19.B4 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>4:33 : main.A19.B4: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:33 : main.A19.B4: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:33 : main.A19.B4: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:33 : main.A19.B4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:33 : main.A19.B4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:33 : main.A19.B4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:33 : main.A19.B4: Propagated 17 out of 26 counter-examples across edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry</MSG>
<MSG>4:34 : main.A19.B4: Added the 17 propagated CEs at PC Lfor.cond2%1%bbentry_L9%1%bbentry and propagated further.
</MSG>
<MSG>4:34 : main.A19.B4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
<MSG>4:35 : main.A19.B4: Finished executing CG's add edge function...</MSG>
<MSG>4:35 : main.A19.B4: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:35 : main.A19.B4: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:35 : Done adding new edge to the product-TFG main.A19.B4 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC Lfor.cond2%1%bbentry_L9%1%bbentry, src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry...</MSG>
<MSG>4:35 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> Lfor.cond2%1%bbentry and dst path L9%1%bbentry --> L9%1%bbentry</MSG>
<MSG>4:35 : Added correlation to the product-TFG main.A19.B4 (d:0, s:1) and created a correlation entry...</MSG>
<MSG>4:35 : Chose (after CE propagation) product-TFG main.A19.B4 (d:0, s:1) from a frontier of size 51...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>L9%1%bbentry[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>Lfor.cond2%1%bbentry[mu 3, delta 3]
<MSG>4:35 : main.A19.B4: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:35 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry...</MSG>
<MSG>4:35 : main.A19.B4: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>4:35 : main.A19.B4: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged</MSG>
<MSG>4:35 : main.A19.B4: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L9%1%bbentry ...</MSG>
<MSG>4:35 : main.A19.B4: Relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry) ...</MSG>
<MSG>4:35 : main.A19.B4: Relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:35 : main.A19.B4: Done relaxing invariant eqclass mem-allocs-equality (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : main.A19.B4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:35 : main.A19.B4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.1.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : main.A19.B4: Relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:35 : main.A19.B4: Done relaxing invariant eqclass memory-equality-memlabel-mem--symbol.2.0 (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : main.A19.B4: Relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:35 : main.A19.B4: Done relaxing invariant eqclass memory-equality-memlabel-mem--heap (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : main.A19.B4: Relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) with 2 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:35 : main.A19.B4: Done relaxing invariant eqclass memory-equality-memlabel-mem--rodata (type ARR_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : main.A19.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:35 : main.A19.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : main.A19.B4: Relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:35 : main.A19.B4: Done relaxing invariant eqclass memlabel-is-absent (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : main.A19.B4: Relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:35 : main.A19.B4: Done relaxing invariant eqclass sp-below-isp (type HOUDINI_EXPECTS_STABILITY) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : main.A19.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 32 exprs and 20 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:36 : main.A19.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht20-prove_trivial17-prove3...</MSG>
<MSG>4:36 : main.A19.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:36 : main.A19.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:36 : main.A19.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:36 : main.A19.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:36 : main.A19.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:36 : main.A19.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:36 : main.A19.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry (type BV_CONST_INEQ) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:37 : main.A19.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:37 : main.A19.B4: Relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) with 7 exprs and 3 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariant eqclass expr-group-region_agrees_with_memlabel (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:37 : main.A19.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:37 : main.A19.B4: Relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariant eqclass nonarg-locals-iscontiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:37 : main.A19.B4: Relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariant eqclass nonarg-locals-isprobably-contiguous (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:37 : main.A19.B4: Relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) with 2 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariant eqclass sp-ml-lb-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:37 : main.A19.B4: Relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariant eqclass ml-lb-ub-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:37 : main.A19.B4: Relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariant eqclass ml-lb-ub-ineq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:37 : main.A19.B4: Relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) with 1 exprs and 0 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariant eqclass ml-lb-addr-eq (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:37 : main.A19.B4: Relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariant eqclass locals-ub-upper-bound (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:37 : main.A19.B4: Relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) with 1 exprs and 1 CEs across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry)...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariant eqclass local-eq-lsprel-guess (type HOUDINI) across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged ...</MSG>
<MSG>4:37 : main.A19.B4: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:37 : main.A19.B4 (d:0, s:1): checked newly added edge and inferred invariants...</MSG>
<MSG>4:37 : main.A19.B4 (d:0, s:1): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:38 : product-TFG main.A19.B4: Enumerating correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:38 : Considering 3 paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:38 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:38 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:38 : Attempting correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:38 : Found 3 feasible correlations for paths to src pc E0%0%d as correlation candidates for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:38 : product-TFG main.A19.B4: Found 3 correlations for L9%1%bbentry=>E0%0%d[mu 1, delta 1] starting at Lfor.cond2%1%bbentry_L9%1%bbentry
</MSG>
<MSG>4:38 : product-TFG main.A19.B4 created 3 possibilities in group main.A19.B4.C...</MSG>
<MSG>4:38 : Chose (for CE propagation) product-TFG main.A19.B4.C1 (d:0, s:1) from a frontier of size 53...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1]
<MSG>4:38 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B4.C1...</MSG>
<MSG>4:38 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B4.C1...</MSG>
<MSG>4:38 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:38 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:38 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:38 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:38 : Adding new edge to the product-TFG main.A19.B4.C1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:38 : main.A19.B4.C1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:38 : main.A19.B4.C1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:38 : main.A19.B4.C1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:38 : main.A19.B4.C1: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:38 : main.A19.B4.C1: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:38 : main.A19.B4.C1: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:38 : main.A19.B4.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:38 : main.A19.B4.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:38 : main.A19.B4.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:38 : main.A19.B4.C1: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 0
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : true
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 2
141593 : bvadd(140296, 140551) : BV:32             : 3
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : false
199956 : not(194172) : BOOL                        : true
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce19177.fuzzed b724c458d9cb3c1635c4de63f245f9d6
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
877216748
=counter_example_end


failcond-expr = or(not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>4:38 : main.A19.B4.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:39 : main.A19.B4.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:39 : main.A19.B4.C1: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:39 : main.A19.B4.C1: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:39 : Done adding new edge to the product-TFG main.A19.B4.C1 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:39 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:39 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 1, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 0
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : true
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 2
141593 : bvadd(140296, 140551) : BV:32             : 3
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : false
199956 : not(194172) : BOOL                        : true
199959 : andnot1(140555, 199956) : BOOL            : false
201161 : or(201160, 199959) : BOOL                 : false

ce =
=counter_example_begin yices.ce19177.fuzzed b724c458d9cb3c1635c4de63f245f9d6
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
877216748
=counter_example_end


</MSG>
<MSG>4:39 : Discovered that the correlation was useless for the product-TFG main.A19.B4.C1 (d:0, s:1)...</MSG>
<MSG>4:39 : Chose (for CE propagation) product-TFG main.A19.B4.C2 (d:0, s:1) from a frontier of size 52...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1]
<MSG>4:39 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B4.C2...</MSG>
<MSG>4:39 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B4.C2...</MSG>
<MSG>4:39 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:39 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:39 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:39 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:39 : Adding new edge to the product-TFG main.A19.B4.C2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:39 : main.A19.B4.C2: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:39 : main.A19.B4.C2: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:39 : main.A19.B4.C2: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:39 : main.A19.B4.C2: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:39 : main.A19.B4.C2: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:39 : main.A19.B4.C2: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:39 : main.A19.B4.C2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:39 : main.A19.B4.C2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:39 : main.A19.B4.C2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:39 : main.A19.B4.C2: marking unstable at Lfor.cond2%1%bbentry_L9%1%bbentry due to failing condition:
wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 0
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : true
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 2
141593 : bvadd(140296, 140551) : BV:32             : 3
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : false
199956 : not(194172) : BOOL                        : true
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 1
199976 : bvslt(188384, 140311) : BOOL              : true
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce19177.fuzzed b724c458d9cb3c1635c4de63f245f9d6
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
877216748
=counter_example_end


failcond-expr = 141488 = bvslt(select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0, symbol.1, 4, false), 0);or[201165](not(andnot1(eq(1, bvsign(input.dst.exreg.0.1.L9%1%bbentry)), eq(1, input.dst.exreg.0.0.L9%1%bbentry))), or[200273](andnot1(bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3))), and[200264](bvslt(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 2), or[200255](andnot1[200253](141488, andnot1(bvslt(bvadd(1, input.src.llvm-%d.0.Lfor.cond2%1%bbentry), 2), not(bvslt(bvadd(1, input.src.llvm-%e.0.Lfor.cond%1%bbentry), 3)))), and[200254](141488, andnot1(eq(0, select(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, bvadd(262140, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3), 4, false)), false)))))):
1 : 1 { 0x1 } : BV:1
2 : input.dst.exreg.0.1.L9%1%bbentry : BV:32
3 : bvsign(2) : BV:1
4 : eq(1, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : input.dst.exreg.0.0.L9%1%bbentry : BV:32
7 : eq(5, 6) : BOOL
8 : andnot1(4, 7) : BOOL
9 : not(8) : BOOL
10 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvslt(10, 11) : BOOL
13 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32
14 : bvadd(5, 13) : BV:32
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : bvslt(14, 15) : BOOL
17 : not(16) : BOOL
18 : andnot1(12, 17) : BOOL
19 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
20 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL]
21 : memlabel-mem--symbol.1.0 : MEMLABEL
22 : symbol.1 : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(19, 20, 21, 22, 23, 24) : BV:32
26 : 0 { 0x0 +1.0e129 } : BV:32
27 : bvslt(25, 26) : BOOL
28 : bvadd(5, 10) : BV:32
29 : bvslt(28, 11) : BOOL
30 : andnot1(29, 17) : BOOL
31 : andnot1(27, 30) : BOOL
32 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL
33 : 262140 { 0x3fffc +1.3124952e129 } : BV:32
34 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32
35 : bvadd(33, 34) : BV:32
36 : select(19, 20, 32, 35, 23, 24) : BV:32
37 : eq(26, 36) : BOOL
38 : andnot1(37, 24) : BOOL
39 : and(27, 38) : BOOL
40 : or(31, 39) : BOOL
41 : and(12, 40) : BOOL
42 : or(18, 41) : BOOL
43 : or(9, 42) : BOOL
</MSG>
<MSG>4:39 : main.A19.B4.C2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:43 : main.A19.B4.C2: Finished executing CG's add edge function...</MSG>
<MSG>4:43 : main.A19.B4.C2: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C2: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : Done adding new edge to the product-TFG main.A19.B4.C2 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:43 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:43 : Failed correlation of src pathset Lfor.cond2%1%bbentry=>E0%0%d[mu 2, delta 1] as correlation candidate for L9%1%bbentry=>E0%0%d[mu 1, delta 1] at Lfor.cond2%1%bbentry_L9%1%bbentry: failcond = wfcond.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140809 : 1 { 0x1 } : BV:1                          : 1
142284 : input.dst.exreg.0.1.L9%1%bbentry : BV:32  : 0
143687 : bvsign(142284) : BV:1                     : 0
143690 : eq(140809, 143687) : BOOL                 : false
140296 : 1 { 0x1 +1.11e129 } : BV:32               : 1
142435 : input.dst.exreg.0.0.L9%1%bbentry : BV:32  : 1
162930 : eq(140296, 142435) : BOOL                 : true
201126 : andnot1(143690, 162930) : BOOL            : true
201160 : not(201126) : BOOL                        : false
140554 : input.src.llvm-%d.0.Lfor.cond2%1%bbentry : BV:32 : 0
140311 : 2 { 0x2 +1.23e129 } : BV:32               : 2
140555 : bvslt(140554, 140311) : BOOL              : true
140551 : input.src.llvm-%e.0.Lfor.cond%1%bbentry : BV:32 : 2
141593 : bvadd(140296, 140551) : BV:32             : 3
140315 : 3 { 0x3 +1.35e129 } : BV:32               : 3
194172 : bvslt(141593, 140315) : BOOL              : false
199956 : not(194172) : BOOL                        : true
199959 : andnot1(140555, 199956) : BOOL            : false
140527 : input.src.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8] : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), )
140528 : input.src.llvm-mem.alloc.Lentry%1%allocaI4 : ARRAY[BV:32 -> MEMLABEL] : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, )
140278 : memlabel-mem--symbol.1.0 : MEMLABEL       : memlabel-mem--symbol.1.0
258 : symbol.1 : BV:32                             : 1024
140349 : 4 { 0x4 +1.0e1025 } : INT                 : 4
140295 : 0 { 0x0 } : BOOL                          : false
141486 : select(140527, 140528, 140278, 258, 140349, 140295) : BV:32 : 0
140284 : 0 { 0x0 +1.0e129 } : BV:32                : 0
141488 : bvslt(141486, 140284) : BOOL              : false
188384 : bvadd(140296, 140554) : BV:32             : 1
199976 : bvslt(188384, 140311) : BOOL              : true
199977 : andnot1(199976, 199956) : BOOL            : false
200253 : andnot1(141488, 199977) : BOOL            : false
140291 : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/ : MEMLABEL : memlabel-mem--local./*___y___main__x__=Lentry%1%d=/
140467 : 262140 { 0x3fffc +1.3124952e129 } : BV:32 : 262140
140514 : input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 : BV:32 : 805044224
141507 : bvadd(140467, 140514) : BV:32             : 805306364
141513 : select(140527, 140528, 140291, 141507, 140349, 140295) : BV:32 : select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)
141524 : eq(140284, 141513) : BOOL                 : eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false))
200241 : andnot1(141524, 140295) : BOOL            : andnot1(eq(0, select(([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ), ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ), memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, 805306364, 4, false)), false)
200254 : and(141488, 200241) : BOOL                : false
200255 : or(200253, 200254) : BOOL                 : false
200264 : and(140555, 200255) : BOOL                : false
200273 : or(199959, 200264) : BOOL                 : false
201165 : or(201160, 200273) : BOOL                 : false

ce =
=counter_example_begin yices.ce19177.fuzzed b724c458d9cb3c1635c4de63f245f9d6
=symbol.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=symbol.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=dst_symbol_addr.1
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=dst_symbol_addr.2
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=callee_save_const.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=callee_save_const.3
1 : 0 { 0x0 +1.0e129 } : BV:32
=retaddr_const
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.sp=L0%0%d=sp
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4
1 : 805044224 { 0x2ffc0000 +1.96875000e224 } : BV:32
=input.src.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ) : ARRAY[BV:32 -> BV:8]
=input.src.llvm-mem.alloc.Lentry%1%allocaI4
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4
1 : 805044231 { 0x2ffc0007 +1.96875083e224 } : BV:32
=input.src.llvm-%e.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.llvm-%conv.Lfor.cond%1%bbentry
1 : 65535 { 0xffff -1 } : BV:16
=input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4
1 : 0 { 0x0 } : BOOL
=input.src.llvm-%d.0.Lfor.cond2%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-%cmp.Lfor.body%1%intermediateVal0
1 : 1 { 0x1 } : BOOL
=input.dst.exreg.0.3.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.6.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.7.L0%1%spver
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.4.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.sp=L0%1%spver=sp.L0%1%spver
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.4.L0%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.exreg.0.1.L1%1%spver
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.sp=L1%1%spver=sp.L1%1%spver
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.4.L2%1%d
1 : 1073741816 { 0x3ffffff8 +1.99999904e0 } : BV:32
=input.dst.exreg.0.5.L6%1%spver
1 : 1073741808 { 0x3ffffff0 +1.99999809e0 } : BV:32
=input.dst.exreg.0.4.L8%1%d
1 : 1073741792 { 0x3fffffe0 +1.99999618e0 } : BV:32
=input.dst.mem.L8%1%d
1 : ([ 1024; 1027 ] -> 0, [ 1073741804; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741815 ] -> 0, [ 1073741820; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ) : ARRAY[BV:32 -> BV:8]
=input.dst.mem.alloc.L8%1%d
1 : ([ 0; 1023 ] -> memlabel-mem--heap, [ 1024; 1027 ] -> memlabel-mem--symbol.1.0, [ 1028; 536870911 ] -> memlabel-mem--heap, [ 536870912; 805044223 ] -> memlabel-mem--esp, [ 805044224; 805044231 ] -> memlabel-mem--local./*___y___main__x__=Lentry%1%d=/, [ 805044232; 2147483647 ] -> memlabel-mem--esp, [ 2147483648; 4294965246 ] -> memlabel-mem--heap, [ 4294965247; 4294965296 ] -> memlabel-mem--symbol.2.0, [ 4294965297; 4294967288 ] -> memlabel-mem--heap, [ 4294967289; 4294967295 ] -> memlabel-mem--rodata, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_size.=Lentry%1%d=.L8%1%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.exreg.0.1.L9%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.exreg.0.0.L9%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=stack.size
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.memlabel-mem--symbol.1.0_begin
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.memlabel-mem--symbol.1.0_end
1 : 1027 { 0x403 +1.12242e129 } : BV:32
=input.memlabel-mem--symbol.2.0_begin
1 : 4294965247 { 0xfffff7ff -2049 -1.99975574e128 } : BV:32
=input.memlabel-mem--symbol.2.0_end
1 : 4294965296 { 0xfffff830 -2000 -1.99976158e128 } : BV:32
=input.memlabel-mem--esp_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.memlabel-mem--esp_end
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=rodata.size
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.memlabel-mem--rodata_begin
1 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
=input.memlabel-mem--rodata_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=unaliased_memslot.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=commonMEM.llvm-mem.Lfor.cond%1%bbentry.mem.L8%1%d.cluster.memlabel-mem-may-straddle-symbol.1.0-symbol.2.0-local./*___y___main__x__=Lentry%1%d=/-esp-heap-rodata
1 : ([ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1073741804; 1073741804 ] -> 0, [ 1073741805; 1073741805 ] -> 0, [ 1073741806; 1073741806 ] -> 0, [ 1073741807; 1073741807 ] -> 64, [ 1073741812; 1073741812 ] -> 0, [ 1073741813; 1073741813 ] -> 0, [ 1073741814; 1073741814 ] -> 0, [ 1073741815; 1073741815 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, { [ 0; 1023 ], [ 1028; 1073741803 ], [ 1073741808; 1073741811 ], [ 1073741816; 1073741819 ], [ 1073741824; 4294967295 ], } -> (RAC: m_multiplier -> 16 , m_adder -> 46), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
877216748
=counter_example_end


</MSG>
<MSG>4:43 : Discovered that the correlation was useless for the product-TFG main.A19.B4.C2 (d:0, s:1)...</MSG>
<MSG>4:43 : Chose (for CE propagation) product-TFG main.A19.B4.C3 (d:0, s:1) from a frontier of size 51...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 36 => A line 36 at mu 1 delta 1)
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>4:43 : Finished adding lsprel-assumes for allocation to the product-TFG main.A19.B4.C3...</MSG>
<MSG>4:43 : Finished adding lsprel-assumes for deallocation to the product-TFG main.A19.B4.C3...</MSG>
<MSG>4:43 : Creating ssa-path for the src-tfg path Lfor.cond2%1%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>4:43 : Adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:43 : Identifying common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d
</MSG>
<MSG>4:43 : Identified no common alloc-deallocs in the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:43 : Adding new edge to the product-TFG main.A19.B4.C3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C3: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C3: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C3: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>4:43 : main.A19.B4.C3: Getting alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C3: Found no alloca-ptrs on edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C3: Adding edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:43 : main.A19.B4.C3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:43 : main.A19.B4.C3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:43 : main.A19.B4.C3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:43 : main.A19.B4.C3: Propagated 7 out of 50 counter-examples across edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>4:43 : main.A19.B4.C3: Added the 7 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>4:43 : main.A19.B4.C3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(Lfor.cond8%1%bbentry=>Lfor.body11%1%d)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body11%5%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*(Lfor.body11%1%d=>Lfor.body11%5%d))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.body5%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.body5%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*(Lfor.body5%1%d=>Lfor.body5%3%d))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.body5%3%intermediateVal2,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry))))))
operator() 10397: r.m_ec.at(pu) = (((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*(Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.end%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry)))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*(((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.end13%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry))))))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lif.then%1%intermediateVal0,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0))))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*(Lfor.body5%3%d=>Lif.then%1%intermediateVal0)))
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body%1%intermediateVal0,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body11%5%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.body5%3%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond2%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond8%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.end%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lif.end13%1%bbentry,-1}
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.cond%1%bbentry,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry)))
operator() 10397: r.m_ec.at(pu) = ((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*(Lfor.inc17%1%d=>Lfor.cond%1%bbentry))
operator() 10394: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10395: pu = {Lfor.inc17%1%d,-1}
operator() 10396: new_te = ((((Lfor.cond2%1%bbentry=>Lfor.body5%1%d)*((Lfor.body5%1%d=>Lfor.body5%3%d)*((((Lfor.body5%3%d=>Lfor.body5%3%intermediateVal2)*(Lfor.body5%3%intermediateVal2=>Lif.end13%1%bbentry))+((Lfor.body5%3%d=>Lif.then%1%intermediateVal0)*((Lif.then%1%intermediateVal0=>Lfor.cond8%1%bbentry)*((((Lfor.cond8%1%bbentry=>Lfor.body11%1%d)*((Lfor.body11%1%d=>Lfor.body11%5%d)*(Lfor.body11%5%d=>Lfor.end%1%bbentry)))+(Lfor.cond8%1%bbentry=>Lfor.end%1%bbentry))*(Lfor.end%1%bbentry=>Lif.end13%1%bbentry)))))*(Lif.end13%1%bbentry=>Lfor.cond2%1%bbentry))))+((Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)*((Lfor.inc17%1%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond2%1%bbentry)))))*(Lfor.cond2%1%bbentry=>Lfor.inc17%1%d))
operator() 10397: r.m_ec.at(pu) = (Lfor.cond2%1%bbentry=>Lfor.inc17%1%d)
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.cond%1%bbentry,-1}
operator() 10406: WARNING: the same pc-with-unroll is appearing twice in the graph-ec
operator() 10407: pu = {Lfor.inc17%1%d,-1}
<MSG>4:47 : main.A19.B4.C3: Finished executing CG's add edge function...</MSG>
<MSG>4:47 : main.A19.B4.C3: Computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:47 : main.A19.B4.C3: Done computing CG regions after the addition of the edge Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:47 : Done adding new edge to the product-TFG main.A19.B4.C3 for fromPC Lfor.cond2%1%bbentry_L9%1%bbentry and toPC E0%0%d_E0%0%d, src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d...</MSG>
<MSG>4:47 : Done adding a CG edge composition using the src path Lfor.cond2%1%bbentry --> E0%0%d and dst path L9%1%bbentry --> E0%0%d</MSG>
<MSG>4:47 : Added correlation to the product-TFG main.A19.B4.C3 (d:0, s:1) and created a correlation entry...</MSG>
<MSG>4:47 : Chose (after CE propagation) product-TFG main.A19.B4.C3 (d:0, s:1) from a frontier of size 51...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1 (C L0%0%d => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2 (C line 14 => C line 14 at mu 1 delta 1, A line 22 => A line 22 at mu 1 delta 1)
            Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry (C line 14 => C (line 18 at column 19) at mu 1 delta 1, A line 22 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19) => C (line 18 at column 19) at mu 3 delta 3, A line 36 => A line 36 at mu 1 delta 1)
            Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d (C (line 18 at column 19) => C E0%0%d at mu 3 delta 1, A line 36 => A E0%0%d at mu 1 delta 1)
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A line 22)
                L0%0%d_L0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
            Lentry%1%allocaI3_L0%1%allocaI1 (C line 14, A line 22)
                Lentry%1%allocaI3_L0%1%allocaI1 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lentry%1%allocaI4_L0%1%allocaI2 (C line 14, A line 22)
                Lentry%1%allocaI4_L0%1%allocaI2 [inductive-invariants] contains 11 counterexamples (for correlating 12 bv exprs)
            Lfor.cond2%1%bbentry_L9%1%bbentry (C (line 18 at column 19), A line 36)
                Lfor.cond2%1%bbentry_L9%1%bbentry [inductive-invariants] contains 50 counterexamples (for correlating 32 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 1 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:
  	L0%1%spver:
  	  local.=Lentry%1%d= == input.dst.local./*___y___main__x__=Lentry%1%d=/

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L9%1%bbentry=>E0%0%d[mu 1, delta 1]
  src-full-pathset: Lfor.cond2%1%bbentry=>E0%0%d[mu 3, delta 1]
<MSG>4:47 : main.A19.B4.C3: Updating invariants over the newly added edges in edge composition Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>4:47 : Constructed infer_invariants_dfa with initial worklist Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>4:47 : main.A19.B4.C3: Relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>4:47 : main.A19.B4.C3: Done relaxing dst graph's memlabels for edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>4:47 : main.A19.B4.C3: Checking well-formedness assertions on outgoing edges from Lfor.cond2%1%bbentry_L9%1%bbentry ...</MSG>
<MSG>4:48 : main.A19.B4.C3: Done relaxing memlabels and invariants across the edge composition (Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:48 : main.A19.B4.C3 (d:0, s:1): checked newly added edge and inferred invariants...</MSG>
<MSG>4:48 : main.A19.B4.C3 (d:0, s:1): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:48 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>4:48 : Checking equivalence proof...</MSG>
<MSG>4:57 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d:
  Invariant state (0 classes):

Lentry%1%allocaI3_L0%1%allocaI1:
  Invariant state (18 classes):
    eqclass 0:
    smallest point cover name mem-allocs-equality, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->eq(input.src.llvm-mem.alloc, input.dst.mem.alloc) ; 
    1 preds:
      0.: eq(input.src.llvm-mem.alloc, input.dst.mem.alloc)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 1:
    smallest point cover name memory-equality-memlabel-mem--symbol.1.0, type ARR_EQ, exprs [2]: 2-->memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--symbol.1.0) ; 3-->memmask(input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--symbol.1.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem, input.src.llvm-mem.alloc, input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--symbol.1.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 2:
    smallest point cover name memory-equality-memlabel-mem--symbol.2.0, type ARR_EQ, exprs [2]: 4-->memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--symbol.2.0) ; 5-->memmask(input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--symbol.2.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem, input.src.llvm-mem.alloc, input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--symbol.2.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 3:
    smallest point cover name memory-equality-memlabel-mem--heap, type ARR_EQ, exprs [2]: 6-->memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--heap) ; 7-->memmask(input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--heap) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem, input.src.llvm-mem.alloc, input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--heap)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 4:
    smallest point cover name memory-equality-memlabel-mem--rodata, type ARR_EQ, exprs [2]: 8-->memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--rodata) ; 9-->memmask(input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--rodata) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem, input.src.llvm-mem.alloc, input.dst.mem.L0%1%spver, input.dst.mem.alloc, memlabel-mem--rodata)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 5:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 10-->and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--symbol.1.0_end), eq(input.memlabel-mem--symbol.1.0_end, bvadd(input.memlabel-mem--symbol.1.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(50, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end)), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_end)))), andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end)))))), eq(bvand(symbol.1, 3), 0)), and(eq(symbol.1, input.memlabel-mem--symbol.1.0_begin), eq(symbol.2, input.memlabel-mem--symbol.2.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--symbol.1.0_end), eq(input.memlabel-mem--symbol.1.0_end, bvadd(input.memlabel-mem--symbol.1.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(50, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end)), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_end)))), andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end)))))), eq(bvand(symbol.1, 3), 0)), and(eq(symbol.1, input.memlabel-mem--symbol.1.0_begin), eq(symbol.2, input.memlabel-mem--symbol.2.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)))  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 6:
    smallest point cover name memlabel-is-absent, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 11-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, memlabel_is_absent(input.src.llvm-mem.alloc, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, memlabel_is_absent(input.src.llvm-mem.alloc, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 7:
    smallest point cover name sp-below-isp, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 12-->bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp) ; 
    1 preds:
      0.: bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 8:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [12]: 13-->input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 ; 14-->retaddr_const ; 15-->input.dst.sp=L0%0%d=sp ; 16-->input.dst.sp=L0%1%spver=sp.L0%1%spver ; 17-->input.dst.exreg.0.5.L0%1%spver ; 18-->input.dst.exreg.0.3.L0%1%spver ; 19-->input.dst.exreg.0.4.L0%1%spver ; 20-->input.dst.exreg.0.6.L0%1%spver ; 21-->input.dst.exreg.0.7.L0%1%spver ; 22-->input.dst.local./*___y___main__x__=Lentry%1%d=/ ; 23-->input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1 ; 24-->select(input.dst.mem.L0%1%spver, input.dst.mem.alloc, mlvar.dst.2, input.dst.sp=L0%0%d=sp, 4, false) ; 
    6 preds:
      0.: 8                     ==  input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1
      1.: input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3  ==  input.dst.local./*___y___main__x__=Lentry%1%d=/
      2.: 12                    ==  bvextract(input.dst.sp=L0%0%d=sp, 3, 0)
      3.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.exreg.0.4.L0%1%spver)
      4.: retaddr_const         ==  select(input.dst.mem.L0%1%spver, input.dst.mem.alloc, mlvar.dst.2, input.dst.sp=L0%0%d=sp, 4, false)
      5.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.sp=L0%1%spver=sp.L0%1%spver)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce6404      1.:z3.ce6601      2.:z3.ce6362      3.:z3v487.ce6363      4.:z3v487.ce6502      5.:z3.ce6503      6.:z3.ce6405      7.:z3v487.ce6691      8.:z3v487.ce6642      9.:z3v487.ce6600
    eqclass 9:
    smallest point cover name expr-group-region_agrees_with_memlabel, type HOUDINI, exprs [3]: 25-->region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%0%d=sp, 4, memlabel-mem--esp) ; 26-->region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 27-->region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 
    3 preds:
      0.: region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
      1.: region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
      2.: region_agrees_with_memlabel(input.dst.mem.alloc, input.dst.sp=L0%0%d=sp, 4, memlabel-mem--esp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [1]: 28-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 11:
    smallest point cover name nonarg-locals-iscontiguous, type HOUDINI, exprs [1]: 29-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, iscontiguous_memlabel(input.src.llvm-mem.alloc, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce6362
    eqclass 12:
    smallest point cover name nonarg-locals-isprobably-contiguous, type HOUDINI, exprs [1]: 30-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 13:
    smallest point cover name sp-ml-lb-ineq, type HOUDINI, exprs [2]: 31-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin)) ; 32-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1))) ; 
    2 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1)))  ==  true
      1.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 14:
    smallest point cover name ml-lb-ub-eq, type HOUDINI, exprs [1]: 33-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6732
    eqclass 15:
    smallest point cover name ml-lb-ub-ineq, type HOUDINI, exprs [1]: 34-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 16:
    smallest point cover name ml-lb-addr-eq, type HOUDINI, exprs [1]: 35-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 17:
    smallest point cover name local-eq-lsprel-guess, type HOUDINI, exprs [1]: 36-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI3, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces

Lentry%1%allocaI4_L0%1%allocaI2:
  Invariant state (19 classes):
    eqclass 0:
    smallest point cover name mem-allocs-equality, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 37-->eq(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI2) ; 
    1 preds:
      0.: eq(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.alloc.L0%1%allocaI2)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name memory-equality-memlabel-mem--symbol.1.0, type ARR_EQ, exprs [2]: 38-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0) ; 39-->memmask(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--symbol.1.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--symbol.1.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 2:
    smallest point cover name memory-equality-memlabel-mem--symbol.2.0, type ARR_EQ, exprs [2]: 40-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.2.0) ; 41-->memmask(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--symbol.2.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--symbol.2.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 3:
    smallest point cover name memory-equality-memlabel-mem--heap, type ARR_EQ, exprs [2]: 42-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--heap) ; 43-->memmask(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--heap) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--heap)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 4:
    smallest point cover name memory-equality-memlabel-mem--rodata, type ARR_EQ, exprs [2]: 44-->memmask(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--rodata) ; 45-->memmask(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--rodata) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lentry%1%allocaI4, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, memlabel-mem--rodata)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 5:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 10-->and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--symbol.1.0_end), eq(input.memlabel-mem--symbol.1.0_end, bvadd(input.memlabel-mem--symbol.1.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(50, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end)), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_end)))), andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end)))))), eq(bvand(symbol.1, 3), 0)), and(eq(symbol.1, input.memlabel-mem--symbol.1.0_begin), eq(symbol.2, input.memlabel-mem--symbol.2.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--symbol.1.0_end), eq(input.memlabel-mem--symbol.1.0_end, bvadd(input.memlabel-mem--symbol.1.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(50, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end)), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_end)))), andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end)))))), eq(bvand(symbol.1, 3), 0)), and(eq(symbol.1, input.memlabel-mem--symbol.1.0_begin), eq(symbol.2, input.memlabel-mem--symbol.2.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)))  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 6:
    smallest point cover name memlabel-is-absent, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 46-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 7:
    smallest point cover name sp-below-isp, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 12-->bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp) ; 
    1 preds:
      0.: bvule(input.dst.exreg.0.4.L0%1%spver, input.dst.sp=L0%0%d=sp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 8:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [12]: 13-->input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 ; 14-->retaddr_const ; 15-->input.dst.sp=L0%0%d=sp ; 16-->input.dst.sp=L0%1%spver=sp.L0%1%spver ; 17-->input.dst.exreg.0.5.L0%1%spver ; 18-->input.dst.exreg.0.3.L0%1%spver ; 19-->input.dst.exreg.0.4.L0%1%spver ; 20-->input.dst.exreg.0.6.L0%1%spver ; 21-->input.dst.exreg.0.7.L0%1%spver ; 22-->input.dst.local./*___y___main__x__=Lentry%1%d=/ ; 23-->input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1 ; 47-->select(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, mlloc.dst.51, input.dst.sp=L0%0%d=sp, 4, false) ; 
    7 preds:
      0.: retaddr_const         ==  select(input.dst.mem.L0%1%allocaI2, input.dst.mem.alloc.L0%1%allocaI2, mlloc.dst.51, input.dst.sp=L0%0%d=sp, 4, false)
      1.: 8                     ==  input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1
      2.: input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3  ==  input.dst.local./*___y___main__x__=Lentry%1%d=/
      3.: 12                    ==  bvextract(input.dst.sp=L0%0%d=sp, 3, 0)
      4.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.exreg.0.4.L0%1%spver)
      5.: 0                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.sp=L0%1%spver=sp.L0%1%spver)
      6.: 0                     ==  bvextract(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, 1, 0)
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3v487.ce7152      1.:z3v487.ce6404      2.:z3.ce6503      3.:z3.ce6885      4.:z3v487.ce7263      5.:z3.ce7151      6.:z3.ce6962      7.:z3.ce7039      8.:z3v487.ce6773      9.:z3.ce6774      10.:z3v487.ce7040
    eqclass 9:
    smallest point cover name expr-group-region_agrees_with_memlabel, type HOUDINI, exprs [3]: 48-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%0%d=sp, 4, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 49-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 50-->region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 
    3 preds:
      0.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%1%spver=sp.L0%1%spver, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
      1.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
      2.: region_agrees_with_memlabel(input.dst.mem.alloc.L0%1%allocaI2, input.dst.sp=L0%0%d=sp, 4, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [1]: 51-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 11:
    smallest point cover name nonarg-locals-iscontiguous, type HOUDINI, exprs [1]: 52-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 12:
    smallest point cover name nonarg-locals-isprobably-contiguous, type HOUDINI, exprs [1]: 53-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 13:
    smallest point cover name sp-ml-lb-ineq, type HOUDINI, exprs [2]: 54-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L0%1%spver, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4)) ; 55-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L0%1%spver, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6404
    eqclass 14:
    smallest point cover name ml-lb-ub-eq, type HOUDINI, exprs [1]: 56-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 
    1 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 15:
    smallest point cover name ml-lb-ub-ineq, type HOUDINI, exprs [1]: 57-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L0%1%allocaI1, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 16:
    smallest point cover name ml-lb-addr-eq, type HOUDINI, exprs [1]: 58-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 17:
    smallest point cover name locals-ub-upper-bound, type HOUDINI, exprs [1]: 59-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvult(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, input.dst.sp=L0%0%d=sp)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6773
    eqclass 18:
    smallest point cover name local-eq-lsprel-guess, type HOUDINI, exprs [1]: 60-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces

Lfor.cond2%1%bbentry_L9%1%bbentry:
  Invariant state (24 classes):
    eqclass 0:
    smallest point cover name mem-allocs-equality, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 61-->eq(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.alloc.L8%1%d) ; 
    1 preds:
      0.: eq(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.alloc.L8%1%d)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name memory-equality-memlabel-mem--symbol.1.0, type ARR_EQ, exprs [2]: 62-->memmask(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.1.0) ; 63-->memmask(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--symbol.1.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--symbol.1.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 2:
    smallest point cover name memory-equality-memlabel-mem--symbol.2.0, type ARR_EQ, exprs [2]: 64-->memmask(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--symbol.2.0) ; 65-->memmask(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--symbol.2.0) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--symbol.2.0)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 3:
    smallest point cover name memory-equality-memlabel-mem--heap, type ARR_EQ, exprs [2]: 66-->memmask(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--heap) ; 67-->memmask(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--heap) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--heap)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 4:
    smallest point cover name memory-equality-memlabel-mem--rodata, type ARR_EQ, exprs [2]: 68-->memmask(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--rodata) ; 69-->memmask(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--rodata) ; 
    1 preds:
      0.: memmasks_are_equal(input.src.llvm-mem.Lfor.cond%1%bbentry, input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--rodata)  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 5:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 10-->and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--symbol.1.0_end), eq(input.memlabel-mem--symbol.1.0_end, bvadd(input.memlabel-mem--symbol.1.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(50, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end)), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_end)))), andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end)))))), eq(bvand(symbol.1, 3), 0)), and(eq(symbol.1, input.memlabel-mem--symbol.1.0_begin), eq(symbol.2, input.memlabel-mem--symbol.2.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--symbol.1.0_end), eq(input.memlabel-mem--symbol.1.0_end, bvadd(input.memlabel-mem--symbol.1.0_begin, bvadd(4, 4294967295)))), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--symbol.2.0_end)), eq(input.memlabel-mem--symbol.2.0_end, bvadd(input.memlabel-mem--symbol.2.0_begin, bvadd(50, 4294967295)))), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--esp_end)), eq(input.memlabel-mem--esp_end, bvadd(input.memlabel-mem--esp_begin, bvadd(stack.size, 4294967295)))), bvugt(stack.size, 0)), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--rodata_end)), eq(input.memlabel-mem--rodata_end, bvadd(input.memlabel-mem--rodata_begin, bvadd(rodata.size, 4294967295)))), bvugt(rodata.size, 0)), and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--esp_end)))), andnot1(and(bvuge(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.1.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--esp_end))))), andnot1(and(bvuge(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--symbol.2.0_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_begin, input.memlabel-mem--rodata_end)), not(and(bvuge(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_begin), bvule(input.memlabel-mem--esp_end, input.memlabel-mem--rodata_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.1.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.1.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--symbol.2.0_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--symbol.2.0_end))))), andnot1(and(bvuge(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_begin, input.memlabel-mem--esp_end)), not(and(bvuge(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_begin), bvule(input.memlabel-mem--rodata_end, input.memlabel-mem--esp_end)))))), eq(bvand(symbol.1, 3), 0)), and(eq(symbol.1, input.memlabel-mem--symbol.1.0_begin), eq(symbol.2, input.memlabel-mem--symbol.2.0_begin))), and(bvule(input.memlabel-mem--esp_begin, input.dst.sp=L0%0%d=sp), and(and(bvule(input.dst.sp=L0%0%d=sp, bvadd(input.dst.sp=L0%0%d=sp, 3)), bvule(bvadd(input.dst.sp=L0%0%d=sp, 3), input.memlabel-mem--esp_end)), islangaligned(bvadd(input.dst.sp=L0%0%d=sp, 4), 16)))), and(eq(bvand(input.memlabel-mem--esp_begin, 4294963200), input.memlabel-mem--esp_begin), eq(bvand(bvadd(input.memlabel-mem--esp_end, 1), 4294963200), bvadd(input.memlabel-mem--esp_end, 1)))), bvugt(input.memlabel-mem--esp_begin, 0)), and(eq(symbol.1, dst_symbol_addr.1), eq(symbol.2, dst_symbol_addr.2)))  ==  true
     is_assumed_eqclass : 1
    0 visited ces
    eqclass 6:
    smallest point cover name memlabel-is-absent, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 46-->eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, memlabel_is_absent(input.src.llvm-mem.alloc.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 7:
    smallest point cover name sp-below-isp, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 70-->bvule(input.dst.exreg.0.4.L8%1%d, input.dst.sp=L0%0%d=sp) ; 
    1 preds:
      0.: bvule(input.dst.exreg.0.4.L8%1%d, input.dst.sp=L0%0%d=sp)  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 8:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [32]: 13-->input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3 ; 14-->retaddr_const ; 15-->input.dst.sp=L0%0%d=sp ; 18-->input.dst.exreg.0.3.L0%1%spver ; 20-->input.dst.exreg.0.6.L0%1%spver ; 21-->input.dst.exreg.0.7.L0%1%spver ; 22-->input.dst.local./*___y___main__x__=Lentry%1%d=/ ; 71-->input.src.llvm-%cmp.Lfor.body%1%intermediateVal0 ; 72-->input.src.llvm-%cmp3.Lfor.cond2%1%bbentry ; 73-->input.src.llvm-%d.0.Lfor.cond2%1%bbentry ; 74-->input.src.llvm-%e.0.Lfor.cond%1%bbentry ; 75-->0 ; 76-->1 ; 77-->input.dst.local_size.=Lentry%1%d=.L8%1%d ; 78-->input.dst.exreg.0.4.L8%1%d ; 79-->input.dst.exreg.0.5.L6%1%spver ; 80-->input.dst.exreg.0.1.L9%1%bbentry ; 81-->input.dst.exreg.0.0.L9%1%bbentry ; 82-->select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.9, dst_symbol_addr.1, 4, false) ; 83-->select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--symbol.1.0, symbol.1, 4, false) ; 84-->bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver) ; 85-->bvuge(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 12) ; 86-->not(bvuge(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 12)) ; 87-->ite(not(bvuge(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 12)), 1, 0) ; 88-->xor(eq(1, bvextract(bvadd(4294967272, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4)), eq(1, bvextract(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4))) ; 89-->ite(xor(eq(1, bvextract(bvadd(4294967272, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4)), eq(1, bvextract(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4))), 1, 0) ; 90-->ite(eq(1, bvextract(bvadd(4294967272, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 31, 31)), 1, 0) ; 91-->ite(eq(3, bvextract(input.dst.sp=L0%1%spver=sp.L0%1%spver, 31, 3)), 1, 0) ; 92-->select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.4, bvadd(4294967292, bvand(input.dst.sp=L0%0%d=sp, 4294967288)), 4, false) ; 93-->select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.5, bvadd(4294967288, bvand(input.dst.sp=L0%0%d=sp, 4294967288)), 4, false) ; 94-->select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.6, bvadd(4294967284, bvand(input.dst.sp=L0%0%d=sp, 4294967288)), 4, false) ; 95-->select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlloc.dst.24, input.dst.sp=L0%0%d=sp, 4, false) ; 
    20 preds:
      0.: 4                     ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.6, bvadd(bvand(input.dst.sp=L0%0%d=sp, 4294967288), 4294967284), 4, false))
      1.: retaddr_const         ==  select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.4, bvadd(4294967292, bvand(input.dst.sp=L0%0%d=sp, 4294967288)), 4, false)
      2.: 0                     ==  bvzero_ext(ite(eq(3, bvextract(input.dst.sp=L0%1%spver=sp.L0%1%spver, 31, 3)), 1, 0), 31)
      3.: retaddr_const         ==  select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlloc.dst.24, input.dst.sp=L0%0%d=sp, 4, false)
      4.: 0                     ==  bvconcat(0, ite(xor(eq(1, bvextract(bvadd(4294967272, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4)), eq(1, bvextract(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4))), 1, 0))
      5.: 0                     ==  bvconcat(0, bool_to_bv(xor(eq(1, bvextract(bvadd(4294967272, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4)), eq(1, bvextract(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 4, 4)))))
      6.: 0                     ==  bvconcat(0, ite(not(bvuge(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 12)), 1, 0))
      7.: 0                     ==  bvextract(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, 1, 0)
      8.: 4294967268            ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.exreg.0.4.L8%1%d)
      9.: 12                    ==  bvextract(input.dst.sp=L0%0%d=sp, 3, 0)
      10.: 1                     ==  bvconcat(0, bool_to_bv(input.src.llvm-%cmp.Lfor.body%1%intermediateVal0))
      11.: 4294967292            ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver))
      12.: bvadd(3, bvneg(input.src.llvm-%e.0.Lfor.cond%1%bbentry))  ==  input.dst.exreg.0.0.L9%1%bbentry
      13.: 1                     ==  bvconcat(0, bool_to_bv(bvuge(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 12)))
      14.: 0                     ==  input.src.llvm-%d.0.Lfor.cond2%1%bbentry
      15.: 0                     ==  bvadd(select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, mlvar.dst.9, dst_symbol_addr.1, 4, false), bvmul(4294967295, input.dst.exreg.0.1.L9%1%bbentry))
      16.: 4294967284            ==  bvadd(bvmul(input.dst.sp=L0%0%d=sp, 4294967295), input.dst.exreg.0.5.L6%1%spver)
      17.: 0                     ==  bvadd(select(input.dst.mem.L8%1%d, input.dst.mem.alloc.L8%1%d, memlabel-mem--symbol.1.0, symbol.1, 4, false), bvmul(4294967295, input.dst.exreg.0.1.L9%1%bbentry))
      18.: 8                     ==  input.dst.local_size.=Lentry%1%d=.L8%1%d
      19.: 0                     ==  bvconcat(0, bool_to_bv(not(bvuge(bvadd(4294967284, bvand(4294967288, input.dst.sp=L0%1%spver=sp.L0%1%spver)), 12))))
     is_assumed_eqclass : 0
    20 visited ces:
      0.:z3v487.ce7152      1.:z3v487.ce6404      2.:z3.ce6503      3.:z3.ce6885      4.:z3v487.ce7858      5.:z3v487.ce7489      6.:z3v487.ce7263      7.:z3v487.ce7710      8.:z3.ce7151      9.:z3.ce6962      10.:z3.ce7039      11.:z3v487.ce6773      12.:z3.ce6774      13.:z3v487.ce7040      14.:z3.ce7341      15.:z3v487.ce7340      16.:yices.ce17948      17.:cvc4.ce17971      18.:z3v487.ce17994      19.:z3v487.ce18522
    eqclass 9:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 74-->input.src.llvm-%e.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.src.llvm-%e.0.Lfor.cond%1%bbentry, 2)  ==  true
      1.: bvsle(input.src.llvm-%e.0.Lfor.cond%1%bbentry, 2)  ==  true
      2.: bvsge(input.src.llvm-%e.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce6404      1.:z3v487.ce17994      2.:z3v487.ce18522
    eqclass 10:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 73-->input.src.llvm-%d.0.Lfor.cond2%1%bbentry ; 
    3 preds:
      0.: bvule(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 0)  ==  true
      1.: bvsle(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 0)  ==  true
      2.: bvsge(input.src.llvm-%d.0.Lfor.cond2%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6404
    eqclass 11:
    smallest point cover name dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry, type BV_CONST_INEQ, exprs [1]: 80-->input.dst.exreg.0.1.L9%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce6404      1.:z3v487.ce7562      2.:z3v487.ce7710      3.:z3.ce7488      4.:z3v487.ce7414      5.:z3.ce7784      6.:z3v487.ce6773      7.:z3.ce7636
    eqclass 12:
    smallest point cover name dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry, type BV_CONST_INEQ, exprs [1]: 81-->input.dst.exreg.0.0.L9%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.exreg.0.0.L9%1%bbentry, 3)  ==  true
      1.: bvuge(input.dst.exreg.0.0.L9%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.exreg.0.0.L9%1%bbentry, 3)  ==  true
      3.: bvsge(input.dst.exreg.0.0.L9%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce6404      1.:z3v487.ce17994      2.:z3v487.ce18522
    eqclass 13:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 96-->bvslt(input.dst.exreg.0.1.L9%1%bbentry, input.dst.exreg.0.0.L9%1%bbentry) ; 97-->bvult(input.dst.exreg.0.1.L9%1%bbentry, input.dst.exreg.0.0.L9%1%bbentry) ; 98-->bvslt(input.dst.exreg.0.0.L9%1%bbentry, input.dst.exreg.0.1.L9%1%bbentry) ; 99-->bvult(input.dst.exreg.0.0.L9%1%bbentry, input.dst.exreg.0.1.L9%1%bbentry) ; 100-->bvsle(input.dst.exreg.0.1.L9%1%bbentry, input.dst.exreg.0.0.L9%1%bbentry) ; 101-->bvule(input.dst.exreg.0.1.L9%1%bbentry, input.dst.exreg.0.0.L9%1%bbentry) ; 102-->bvsle(input.dst.exreg.0.0.L9%1%bbentry, input.dst.exreg.0.1.L9%1%bbentry) ; 103-->bvule(input.dst.exreg.0.0.L9%1%bbentry, input.dst.exreg.0.1.L9%1%bbentry) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce6404      1.:z3v487.ce6773
    eqclass 14:
    smallest point cover name expr-group-region_agrees_with_memlabel, type HOUDINI, exprs [7]: 104-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, dst_symbol_addr.1, 4, memlabel-mem--symbol.1.0) ; 105-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, symbol.1, 4, memlabel-mem--symbol.1.0) ; 106-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, bvadd(4294967292, bvand(input.dst.sp=L0%0%d=sp, 4294967288)), 4, memlabel-mem--esp) ; 107-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, bvadd(4294967288, bvand(input.dst.sp=L0%0%d=sp, 4294967288)), 4, memlabel-mem--esp) ; 108-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, bvadd(bvand(input.dst.sp=L0%0%d=sp, 4294967288), 4294967284), 4, memlabel-mem--esp) ; 109-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, input.dst.sp=L0%0%d=sp, 4, memlabel-mem--esp) ; 110-->region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp) ; 
    3 preds:
      0.: region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, input.dst.sp=L0%0%d=sp, 1, memlabel-mem-may-straddle-local./*___y___main__x__=Lentry%1%d=/-esp)  ==  true
      1.: region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, symbol.1, 4, memlabel-mem--symbol.1.0)  ==  true
      2.: region_agrees_with_memlabel(input.dst.mem.alloc.L8%1%d, dst_symbol_addr.1, 4, memlabel-mem--symbol.1.0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce7858      1.:z3v487.ce7930      2.:z3v487.ce7785
    eqclass 15:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [1]: 111-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L8%1%d)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local_size.=Lentry%1%d=.Lentry%1%allocaI3, input.dst.local_size.=Lentry%1%d=.L8%1%d))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 16:
    smallest point cover name nonarg-locals-iscontiguous, type HOUDINI, exprs [1]: 52-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, iscontiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 17:
    smallest point cover name nonarg-locals-isprobably-contiguous, type HOUDINI, exprs [1]: 53-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, isprobably_contiguous_memlabel(input.src.llvm-mem.alloc.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, memlabel-mem--local./*___y___main__x__=Lentry%1%d=/))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 18:
    smallest point cover name sp-ml-lb-ineq, type HOUDINI, exprs [2]: 112-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L8%1%d, input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4)) ; 113-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(input.dst.exreg.0.4.L8%1%d, bvsub(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L8%1%d))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6404
    eqclass 19:
    smallest point cover name ml-lb-ub-eq, type HOUDINI, exprs [1]: 114-->xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L8%1%d, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 
    1 preds:
      0.: xor(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L8%1%d, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 20:
    smallest point cover name ml-lb-ub-ineq, type HOUDINI, exprs [1]: 115-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L8%1%d, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvule(bvadd(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.dst.local_size.=Lentry%1%d=.L8%1%d, 4294967295), input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 21:
    smallest point cover name ml-lb-addr-eq, type HOUDINI, exprs [1]: 58-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3)) ; 
    1 preds:
      0.: or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_begin.Lentry%1%allocaI4, input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3))  ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 22:
    smallest point cover name locals-ub-upper-bound, type HOUDINI, exprs [1]: 59-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, bvult(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_end.Lentry%1%allocaI4, input.dst.sp=L0%0%d=sp)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce6773
    eqclass 23:
    smallest point cover name local-eq-lsprel-guess, type HOUDINI, exprs [1]: 60-->or(input.src.memlabel-mem--local./*___y___main__x__=Lentry%1%d=/_is-absent.Lentry%1%allocaI4, eq(input.src.local./*___y___main__x__=Lentry%1%d=/.Lentry%1%allocaI3, input.dst.local./*___y___main__x__=Lentry%1%d=/)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce17994

E0%0%d_E0%0%d:
  Invariant state (0 classes):


<MSG>4:57 : Checking safety of the product-CFG...</MSG>
check_safety 381: checking safety for zero divisors
check_safety_for 337: Solving src_must_be_unsafe dfa
check_safety_for 339: Done src_must_be_unsafe dfa
check_safety_for 343: Solving dst_may_be_unsafe dfa
check_safety_for 345: Done dst_may_be_unsafe dfa
check_safety 386: safety check passed for zero divisors
check_safety 387: checking safety for unsafe heap accesses
check_safety_for 337: Solving src_must_be_unsafe dfa
check_safety_for 339: Done src_must_be_unsafe dfa
check_safety_for 343: Solving dst_may_be_unsafe dfa
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
check_safety_for 345: Done dst_may_be_unsafe dfa
check_safety 392: safety check passed for unsafe heap accesses
<MSG>4:57 : Safety check passed on product-CFG...</MSG>
check_safety_for 337: Solving src_must_be_unsafe dfa
check_safety_for 339: Done src_must_be_unsafe dfa
check_safety_for 343: Solving dst_may_be_unsafe dfa
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
predicate_get_query_type_from_comment 1683: returning pred-type-unknown for or-combination
xfer_and_meet 285: FOUND FAILURE
check_safety_for 345: Done dst_may_be_unsafe dfa
check_eq 273: DST TFG memlabel check failed on CG!
<MSG>5:02 : DST Memlabel check failed on product-CFG!</MSG>
FAIL equivalence check for function main. 250.68s, query:smt.: 48.2932s (num_starts 668; 0.0723s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 83.3536s (num_starts 1682; 0.0496s/start)ftmap_run_pointsto_analysis.: 4.38439s (num_starts 2; 2.1922s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 1.9e-05s (num_starts 1; 0.0000s/start)
check_wfconds_on_edge.Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry.: 2.7e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 3.5e-05s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 3.8e-05s (num_starts 4; 0.0000s/start)
check_wfconds_on_edge.Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry.: 3.9e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 4.4e-05s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 4.7e-05s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.: 6.3e-05s (num_starts 6; 0.0000s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.: 6.7e-05s (num_starts 6; 0.0000s/start)
compute_tfg_pred_eqclass.: 6.8e-05s (num_starts 26; 0.0000s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 7.5e-05s (num_starts 8; 0.0000s/start)
get_paths_with_matching_to_pc.: 7.6e-05s (num_starts 20; 0.0000s/start)
check_wfconds_on_edge.Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry.: 8.2e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 8.2e-05s (num_starts 8; 0.0000s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 8.4e-05s (num_starts 8; 0.0000s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI4_L0%1%allocaI2.: 9.7e-05s (num_starts 6; 0.0000s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.: 9.8e-05s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.000105s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.L0%0%d_L0%0%d.: 0.000135s (num_starts 7; 0.0000s/start)
check_wfconds_on_edge.Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.000174s (num_starts 4; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.000215s (num_starts 24; 0.0000s/start)
remove_complex_bv_exprs.: 0.000275s (num_starts 26; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.00039s (num_starts 26; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000435s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000436s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000437s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000452s (num_starts 1; 0.0005s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000484s (num_starts 1; 0.0005s/start)
add_fresh_counterexample_at_pc_and_propagate.Lfor.cond%1%bbentry_L9%1%bbentry.inductive-invariants.: 0.000498s (num_starts 3; 0.0002s/start)
src_tfg_counter_example_translate_on_edge_composition.delta0.: 0.000504s (num_starts 175; 0.0000s/start)
determinize_value_expr_map.: 0.000675s (num_starts 191; 0.0000s/start)
prove_trivial.: 0.000683s (num_starts 909; 0.0000s/start)
graph_visit_exprs_const.const.: 0.000766s (num_starts 4; 0.0002s/start)
get_memlabel_set_from_mlvarnames.: 0.000843s (num_starts 188; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 0.000898s (num_starts 1523; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.000932s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.000935s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.000939s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.000943s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.000961s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.000965s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.000968s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.000972s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.000992s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.000995s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.000996s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.001s (num_starts 1; 0.0010s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::conservative_dfa_val_for_newly_defined_loc.: 0.001071s (num_starts 68; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::conservative_dfa_val_for_newly_defined_loc.: 0.001075s (num_starts 68; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001143s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001145s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-trivial.: 0.001146s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00115s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001159s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001189s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001193s (num_starts 1; 0.0012s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.001198s (num_starts 222; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001239s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001295s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-addr-eq-houdini-guess;-trivial.: 0.001298s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001299s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001303s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-addr-eq-houdini-guess.: 0.001306s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001311s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.00138s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001382s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001383s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001384s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001385s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);-trivial.: 0.001385s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.001388s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001389s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-ineq-houdini-guess.: 0.00139s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.001395s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon);outgoing_edges_cover_all_possibilities..: 0.0014s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(epsilon).: 0.001407s (num_starts 1; 0.0014s/start)
prune_dst_memslots.: 0.001423s (num_starts 26; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001425s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001426s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001427s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.00143s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001432s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001432s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-eq-lsprel-guess-houdini-guess.: 0.001434s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-below-isp-houdini-guess;-trivial.: 0.001434s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001436s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.00144s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.001442s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001443s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.001447s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);sp-below-isp-houdini-guess.: 0.001448s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);sp-below-isp-houdini-guess.: 0.001457s (num_starts 1; 0.0015s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.001483s (num_starts 26; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.001511s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.00152s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.001523s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);sp-below-isp-houdini-guess.: 0.00153s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;sp-below-isp-houdini-guess;-trivial.: 0.001534s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001534s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);sp-below-isp-houdini-guess.: 0.001557s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.00156s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;ml-lb-addr-eq-houdini-guess;-trivial.: 0.001562s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001564s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001568s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;ml-lb-addr-eq-houdini-guess.: 0.001571s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001575s (num_starts 1; 0.0016s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.001627s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001734s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;sp-below-isp-houdini-guess;-trivial.: 0.001737s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.00174s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-below-isp-houdini-guess.: 0.001751s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-below-isp-houdini-guess.: 0.001758s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.00177s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memlabel-is-absent-houdini-guess;-trivial.: 0.001776s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.001777s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001781s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001783s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.001784s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.001788s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.001789s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;local-eq-lsprel-guess-houdini-guess.: 0.001791s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.001796s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.001798s (num_starts 1; 0.0018s/start)
graph_locs_add_all_llvmvars.: 0.001805s (num_starts 2; 0.0009s/start)
graph_edge_contains_unknown_function_call.: 0.001811s (num_starts 379; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001814s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ml-lb-addr-eq-houdini-guess;-trivial.: 0.001816s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001816s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.001817s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001818s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001818s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.001819s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001819s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-addr-eq-houdini-guess;-trivial.: 0.00182s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ml-lb-ub-eq-houdini-guess;-trivial.: 0.001821s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.001822s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.001822s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.001823s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001826s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;ml-lb-ub-ineq-houdini-guess.: 0.001826s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.001828s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.001828s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-addr-eq-houdini-guess.: 0.001829s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ml-lb-addr-eq-houdini-guess.: 0.001831s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;nonarg-locals-iscontiguous-houdini-guess.: 0.001831s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.001831s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.001832s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ml-lb-ub-eq-houdini-guess.: 0.001835s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.001835s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001851s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;memlabel-is-absent-houdini-guess;-trivial.: 0.001852s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.001853s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-below-isp-houdini-guess;-trivial.: 0.001854s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.001856s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess.: 0.001864s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;memlabel-is-absent-houdini-guess.: 0.001866s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);sp-below-isp-houdini-guess.: 0.001867s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;sp-below-isp-houdini-guess;-trivial.: 0.001867s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.001869s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);sp-below-isp-houdini-guess.: 0.001877s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess.: 0.001878s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.001878s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.001879s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;sp-below-isp-houdini-guess.: 0.001881s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001884s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001885s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.001889s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.001893s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.001895s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ml-lb-ub-ineq-houdini-guess.: 0.001898s (num_starts 1; 0.0019s/start)
populate_suffixpaths.: 0.001914s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality;-trivial.: 0.001918s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;mem-allocs-equality;-trivial.: 0.001918s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.001921s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.001923s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.001924s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality.: 0.001928s (num_starts 1; 0.0019s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.001928s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.001929s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.00193s (num_starts 2; 0.0010s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.00193s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;mem-allocs-equality.: 0.001932s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;sp-ml-lb-ineq-houdini-guess.: 0.001934s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.001935s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;sp-below-isp-houdini-guess;-trivial.: 0.001939s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.001939s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.001941s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001941s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.001942s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001943s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001944s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.001944s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.001945s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality;-trivial.: 0.001946s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;mem-allocs-equality;-trivial.: 0.001947s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;memlabel-is-absent-houdini-guess;-trivial.: 0.001947s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality;-trivial.: 0.001948s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.001948s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess.: 0.00195s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.001953s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.001953s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;sp-below-isp-houdini-guess.: 0.001953s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.001955s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality.: 0.001956s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess.: 0.001957s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ml-lb-ub-ineq-houdini-guess.: 0.001957s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess.: 0.001957s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;local-sizes-are-equal-houdini-guess;-trivial.: 0.00196s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;mem-allocs-equality.: 0.00196s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;memlabel-is-absent-houdini-guess.: 0.00196s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.00196s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.001962s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.001962s (num_starts 1; 0.0020s/start)
graph_locs_add_all_local_vars.: 0.001964s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess.: 0.001966s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality.: 0.001967s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.001971s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001973s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;local-sizes-are-equal-houdini-guess.: 0.001974s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001974s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.001976s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.001979s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-ineq-houdini-guess.: 0.001983s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.001989s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.002005s (num_starts 1; 0.0020s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.002005s (num_starts 1; 0.0020s/start)
graph_with_paths::path_modifies_memalloc.: 0.002009s (num_starts 141; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.002011s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.002016s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.002022s (num_starts 1; 0.0020s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.002074s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002086s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002088s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.00209s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002093s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.002093s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.002095s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-eq-lsprel-guess-houdini-guess.: 0.002096s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ml-lb-ub-eq-houdini-guess;-trivial.: 0.002097s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002098s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.002099s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.002102s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.002106s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.002108s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-addr-eq-houdini-guess;-trivial.: 0.002109s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.002109s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.002111s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ml-lb-ub-eq-houdini-guess.: 0.002111s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ml-lb-addr-eq-houdini-guess;-trivial.: 0.002112s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.002115s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.002115s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.002116s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-addr-eq-houdini-guess.: 0.002118s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.002122s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.002124s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002124s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ml-lb-addr-eq-houdini-guess.: 0.002127s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.00213s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.002132s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002143s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002144s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002146s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002146s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002148s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.002152s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.002152s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-ineq-houdini-guess.: 0.002155s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.00216s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.002171s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.002177s (num_starts 1; 0.0022s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.00225s (num_starts 1682; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.00229s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002292s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002292s (num_starts 1; 0.0023s/start)
populate_locid2expr_map.: 0.002293s (num_starts 23; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.002296s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-eq-lsprel-guess-houdini-guess.: 0.0023s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.002306s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002332s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002338s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.002405s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.002409s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.002412s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.00242s (num_starts 1; 0.0024s/start)
graph_locs_add_local_vars_for_edge.: 0.002469s (num_starts 77; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002488s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002491s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.002492s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.002495s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.002504s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002558s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002563s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002566s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002574s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002579s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002588s (num_starts 1; 0.0026s/start)
expr_is_hidden_reg.: 0.002615s (num_starts 3407; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.002633s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.002643s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002676s (num_starts 1; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002677s (num_starts 1; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.002678s (num_starts 1; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.002682s (num_starts 1; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.002691s (num_starts 1; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.002739s (num_starts 1; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.002739s (num_starts 1; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memlabel-is-absent-houdini-guess;-trivial.: 0.002741s (num_starts 1; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.002752s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.002752s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-sizes-are-equal-houdini-guess;-trivial.: 0.002755s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.002758s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;lb-signed;-trivial.: 0.002763s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.002763s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.002765s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed;-trivial.: 0.002766s (num_starts 1; 0.0028s/start)
compute_sprel_relations.: 0.002767s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;local-sizes-are-equal-houdini-guess.: 0.002773s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.002782s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002792s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002793s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002803s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;abstract-memlabel-asserts-houdini-guess.: 0.002806s (num_starts 1; 0.0028s/start)
propagate_sprels.: 0.002809s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002831s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002833s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002834s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002843s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;abstract-memlabel-asserts-houdini-guess.: 0.002846s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002851s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002877s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002881s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002887s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.002892s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002905s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002906s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002909s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.002909s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002916s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.002928s (num_starts 1; 0.0029s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.002941s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.002958s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.002962s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;outgoing_edges_cover_all_possibilities.;-trivial.: 0.002964s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess.: 0.002969s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.002997s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.003002s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.003002s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003004s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.003007s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned;-trivial.: 0.003007s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;lb-unsigned;-trivial.: 0.00301s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.003012s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned;-trivial.: 0.003012s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.003021s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.003024s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.003025s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003029s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.00303s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;mem-allocs-equality;-trivial.: 0.003037s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.003038s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003045s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.003054s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.003058s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003067s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.003067s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.003077s (num_starts 1; 0.0031s/start)
tfg::collect_assumes_around_edge.: 0.003079s (num_starts 247; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.003101s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess.: 0.003112s (num_starts 1; 0.0031s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.003113s (num_starts 1; 0.0031s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.00312s (num_starts 1; 0.0031s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.003123s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ml-lb-addr-eq-houdini-guess;-trivial.: 0.003177s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.003178s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003179s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.00319s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ml-lb-addr-eq-houdini-guess.: 0.003192s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.003205s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-below-isp-houdini-guess;-trivial.: 0.003207s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.003207s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.003208s (num_starts 1; 0.0032s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.003209s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);sp-below-isp-houdini-guess.: 0.003219s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;sp-below-isp-houdini-guess;-trivial.: 0.003222s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.003223s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);sp-below-isp-houdini-guess.: 0.003231s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.003233s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;sp-below-isp-houdini-guess.: 0.003237s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.003244s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.003254s (num_starts 1; 0.0033s/start)
pth_collect_preds_using_atom_func.: 0.003261s (num_starts 132; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003271s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.003275s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.00328s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.003284s (num_starts 1; 0.0033s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.003286s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;local-sizes-are-equal-houdini-guess;-trivial.: 0.003289s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.00329s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.0033s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;local-sizes-are-equal-houdini-guess.: 0.003304s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003318s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003327s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003331s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003332s (num_starts 1; 0.0033s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L7%1%allocaI2.: 0.003332s (num_starts 1; 0.0033s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.003335s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.003338s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.003339s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003342s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003346s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.003349s (num_starts 1; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;nonarg-locals-iscontiguous-houdini-guess.: 0.003354s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.00336s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.003369s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.00337s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003375s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.00338s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.003389s (num_starts 1; 0.0034s/start)
graph_locs_add_all_exvregs.: 0.003389s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003393s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.003396s (num_starts 1; 0.0034s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.003419s (num_starts 5; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.003419s (num_starts 1; 0.0034s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.003425s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.003428s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.003428s (num_starts 1; 0.0034s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.003431s (num_starts 1; 0.0034s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.003432s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003433s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003435s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.003438s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.003445s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ml-lb-ub-eq-houdini-guess;-trivial.: 0.003445s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003446s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.003448s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ml-lb-ub-ineq-houdini-guess.: 0.003448s (num_starts 1; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memlabel-is-absent-houdini-guess;-trivial.: 0.003454s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003457s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.003458s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ml-lb-ub-eq-houdini-guess.: 0.003461s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;sp-below-isp-houdini-guess;-trivial.: 0.003473s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.003474s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;memlabel-is-absent-houdini-guess;-trivial.: 0.003478s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.00348s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.00348s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.003484s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;sp-below-isp-houdini-guess.: 0.003487s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.00349s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;memlabel-is-absent-houdini-guess.: 0.003493s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003497s (num_starts 1; 0.0035s/start)
get_mask_ranges_for_memlabel.: 0.003515s (num_starts 254; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ml-lb-addr-eq-houdini-guess;-trivial.: 0.003523s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003524s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.003534s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ml-lb-addr-eq-houdini-guess.: 0.003537s (num_starts 1; 0.0035s/start)
expr_is_callee_save_const.: 0.003547s (num_starts 3773; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;local-sizes-are-equal-houdini-guess;-trivial.: 0.003556s (num_starts 1; 0.0036s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.003557s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.003558s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.003567s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;local-sizes-are-equal-houdini-guess.: 0.00357s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003572s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.003573s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003584s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;memlabel-is-absent-houdini-guess;-trivial.: 0.003584s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.003585s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.003587s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.003587s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.003588s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.003588s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.00359s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.003592s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.003595s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.003596s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;memlabel-is-absent-houdini-guess.: 0.003599s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.003602s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;nonarg-locals-iscontiguous-houdini-guess.: 0.003602s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;nonarg-locals-iscontiguous-houdini-guess.: 0.003605s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.00361s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003644s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.003645s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ml-lb-ub-eq-houdini-guess;-trivial.: 0.003653s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.003654s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.003655s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ml-lb-ub-ineq-houdini-guess.: 0.003659s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.003664s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ml-lb-ub-eq-houdini-guess.: 0.003667s (num_starts 1; 0.0037s/start)
graph_locs_add_exvregs_for_edge.: 0.003759s (num_starts 77; 0.0000s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.003877s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;sp-below-isp-houdini-guess;-trivial.: 0.003884s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.003885s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess.: 0.003894s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;sp-below-isp-houdini-guess.: 0.003898s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.0039s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;local-sizes-are-equal-houdini-guess;-trivial.: 0.003904s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.003906s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.003923s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003925s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;local-sizes-are-equal-houdini-guess.: 0.00393s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;memlabel-is-absent-houdini-guess;-trivial.: 0.003936s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.003939s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);mem-allocs-equality;-trivial.: 0.003939s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.003941s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;mem-allocs-equality;-trivial.: 0.003944s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);mem-allocs-equality;-trivial.: 0.003947s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ml-lb-addr-eq-houdini-guess;-trivial.: 0.003953s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.003955s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003964s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.003965s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ml-lb-addr-eq-houdini-guess.: 0.003968s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);mem-allocs-equality.: 0.003975s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.003981s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;lb-signed;-trivial.: 0.003985s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed;-trivial.: 0.003988s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;local-sizes-are-equal-houdini-guess;-trivial.: 0.003992s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);mem-allocs-equality.: 0.003993s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.003994s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.004004s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;local-sizes-are-equal-houdini-guess.: 0.004006s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;memlabel-is-absent-houdini-guess;-trivial.: 0.004007s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.004008s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess.: 0.004018s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;memlabel-is-absent-houdini-guess.: 0.004022s (num_starts 1; 0.0040s/start)
tfg_edge_composition_get_assumes.: 0.004035s (num_starts 132; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;lb-unsigned;-trivial.: 0.004039s (num_starts 2; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned;-trivial.: 0.004041s (num_starts 2; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-trivial.: 0.004044s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004046s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-trivial.: 0.004048s (num_starts 1; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.004051s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004051s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004054s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004062s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004066s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004068s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.00407s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004079s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004083s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004083s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned.: 0.004084s (num_starts 2; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;lb-unsigned.: 0.004089s (num_starts 2; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004092s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004094s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.004104s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;nonarg-locals-iscontiguous-houdini-guess.: 0.004108s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.00412s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.004121s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.004123s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.00413s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ml-lb-ub-ineq-houdini-guess.: 0.004134s (num_starts 1; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.00415s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;local-sizes-are-equal-houdini-guess;-trivial.: 0.004155s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004158s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004167s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;local-sizes-are-equal-houdini-guess.: 0.004175s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ml-lb-ub-eq-houdini-guess;-trivial.: 0.004181s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.004183s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-eq-lsprel-guess-houdini-guess.: 0.004188s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004188s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.004193s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ml-lb-ub-eq-houdini-guess.: 0.004196s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;mem-allocs-equality;-trivial.: 0.004213s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality;-trivial.: 0.004214s (num_starts 1; 0.0042s/start)
identify_address_taken_local_variables.: 0.004217s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ub-unsigned;-trivial.: 0.004223s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality.: 0.004224s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-trivial.: 0.004225s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;mem-allocs-equality.: 0.004227s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;sp-below-isp-houdini-guess;-trivial.: 0.004239s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.00424s (num_starts 1; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004249s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.00425s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;sp-below-isp-houdini-guess.: 0.004254s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004266s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess;-trivial.: 0.004273s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.004278s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;sp-ml-lb-ineq-houdini-guess.: 0.00429s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;local-sizes-are-equal-houdini-guess;-trivial.: 0.004293s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.004294s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ml-lb-addr-eq-houdini-guess;-trivial.: 0.004296s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.004299s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;memlabel-is-absent-houdini-guess;-trivial.: 0.004299s (num_starts 1; 0.0043s/start)
simplify_bv_add_atomic.: 0.004299s (num_starts 168; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.0043s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.004305s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;local-sizes-are-equal-houdini-guess.: 0.004308s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.004309s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.004311s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ml-lb-addr-eq-houdini-guess.: 0.004312s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;memlabel-is-absent-houdini-guess.: 0.004314s (num_starts 1; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-addr-eq-houdini-guess.: 0.004348s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004361s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.004365s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-sizes-are-equal-houdini-guess;-trivial.: 0.004366s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.004368s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004369s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004374s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004374s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004377s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004383s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004384s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004384s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;local-sizes-are-equal-houdini-guess.: 0.004384s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004389s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.004394s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004396s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;nonarg-locals-iscontiguous-houdini-guess.: 0.004398s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate;-trivial.: 0.004402s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;false-predicate;-trivial.: 0.004405s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate;-trivial.: 0.004406s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate.: 0.004413s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;false-predicate.: 0.004416s (num_starts 1; 0.0044s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.004418s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;sp-below-isp-houdini-guess;-trivial.: 0.004437s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.004438s (num_starts 1; 0.0044s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.004441s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.004448s (num_starts 1; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;sp-below-isp-houdini-guess.: 0.004452s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.004454s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ub-unsigned;-trivial.: 0.004463s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;memlabel-is-absent-houdini-guess;-trivial.: 0.004464s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-trivial.: 0.004467s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.004468s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ml-lb-ub-eq-houdini-guess;-trivial.: 0.004471s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.004472s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004473s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004474s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004474s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004478s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.004482s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ml-lb-ub-eq-houdini-guess.: 0.004486s (num_starts 1; 0.0045s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.004493s (num_starts 65; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.004495s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004495s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.004512s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-trivial.: 0.004515s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.004516s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-trivial.: 0.004517s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.00452s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.004525s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.004525s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.004554s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.004557s (num_starts 1; 0.0046s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.004559s (num_starts 16; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.004561s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;mem-allocs-equality;-trivial.: 0.004561s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004562s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004568s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.004571s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004571s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004572s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;memlabel-is-absent-houdini-guess;-trivial.: 0.004573s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.004574s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004575s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;mem-allocs-equality.: 0.004576s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.004577s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.004583s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.004584s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.004584s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;local-sizes-are-equal-houdini-guess;-trivial.: 0.004586s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ml-lb-addr-eq-houdini-guess;-trivial.: 0.004586s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ml-lb-ub-ineq-houdini-guess.: 0.004587s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-ineq-houdini-guess.: 0.004587s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.004588s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;memlabel-is-absent-houdini-guess.: 0.004588s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.004589s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-ml-lb-ineq-houdini-guess.: 0.004591s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.004599s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.0046s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ml-lb-addr-eq-houdini-guess.: 0.004603s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;local-sizes-are-equal-houdini-guess.: 0.004604s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004612s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality;-trivial.: 0.004614s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004615s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.004616s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.00462s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality.: 0.004623s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.004624s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004625s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.004627s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-ml-lb-ineq-houdini-guess.: 0.004632s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004636s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.004641s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004645s (num_starts 1; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004657s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.004657s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.004658s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.004668s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;nonarg-locals-iscontiguous-houdini-guess.: 0.004671s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004715s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-sizes-are-equal-houdini-guess;-trivial.: 0.00472s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004724s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004732s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;local-sizes-are-equal-houdini-guess.: 0.004739s (num_starts 1; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004751s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;mem-allocs-equality;-trivial.: 0.00477s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.004772s (num_starts 1; 0.0048s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.004774s (num_starts 132; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.004782s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;mem-allocs-equality.: 0.004785s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ml-lb-ub-eq-houdini-guess;-trivial.: 0.004819s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.00482s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.00483s (num_starts 1; 0.0048s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.004831s (num_starts 10; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ml-lb-ub-eq-houdini-guess.: 0.004834s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.004839s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.00484s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.004846s (num_starts 3; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.00485s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ml-lb-ub-ineq-houdini-guess.: 0.004854s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;sp-below-isp-houdini-guess;-trivial.: 0.004863s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.004864s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess.: 0.004874s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;sp-below-isp-houdini-guess.: 0.004878s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ub-unsigned;-trivial.: 0.00488s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-trivial.: 0.004882s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.004931s (num_starts 3; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;lb-signed;-trivial.: 0.004942s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed;-trivial.: 0.004945s (num_starts 1; 0.0049s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.004954s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.004996s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.005007s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.00501s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ml-lb-addr-eq-houdini-guess;-trivial.: 0.005011s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.005012s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.005018s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.005021s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.005023s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.005024s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ml-lb-addr-eq-houdini-guess.: 0.005027s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.00503s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;sp-ml-lb-ineq-houdini-guess.: 0.005037s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;memlabel-is-absent-houdini-guess;-trivial.: 0.005045s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.005047s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.005047s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;mem-allocs-equality;-trivial.: 0.005049s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.00505s (num_starts 1; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-trivial.: 0.005054s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;lb-unsigned;-trivial.: 0.005054s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess.: 0.005057s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.00506s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.00506s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;memlabel-is-absent-houdini-guess.: 0.005061s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;mem-allocs-equality.: 0.005063s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.005064s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;local-sizes-are-equal-houdini-guess;-trivial.: 0.005066s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.005068s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.005077s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.005078s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.005079s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;local-sizes-are-equal-houdini-guess.: 0.005082s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.005089s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;nonarg-locals-iscontiguous-houdini-guess.: 0.005093s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005121s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005121s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005131s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005136s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;sp-below-isp-houdini-guess;-trivial.: 0.005145s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.005147s (num_starts 1; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.005157s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;sp-below-isp-houdini-guess.: 0.005161s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.005209s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.005211s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.005221s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ml-lb-ub-ineq-houdini-guess.: 0.005225s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality;-trivial.: 0.005232s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;mem-allocs-equality;-trivial.: 0.005232s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality.: 0.005242s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;mem-allocs-equality.: 0.005247s (num_starts 1; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ml-lb-ub-eq-houdini-guess;-trivial.: 0.005266s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.005269s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.005279s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ml-lb-ub-eq-houdini-guess.: 0.005282s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;local-sizes-are-equal-houdini-guess;-trivial.: 0.005325s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.005326s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ml-lb-addr-eq-houdini-guess;-trivial.: 0.005326s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.005329s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.005336s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.005339s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;local-sizes-are-equal-houdini-guess.: 0.00534s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ml-lb-addr-eq-houdini-guess.: 0.005342s (num_starts 1; 0.0053s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.005349s (num_starts 1; 0.0053s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005381s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005411s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005415s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;sp-below-isp-houdini-guess;-trivial.: 0.005415s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.005418s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005425s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.005427s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.005428s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;lb-signed;-trivial.: 0.005428s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005428s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed;-trivial.: 0.00543s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;sp-below-isp-houdini-guess.: 0.005431s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.005436s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.00544s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.005448s (num_starts 1; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;memlabel-is-absent-houdini-guess;-trivial.: 0.005454s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.005457s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005457s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed.: 0.00546s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.005468s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;lb-signed.: 0.005468s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;memlabel-is-absent-houdini-guess.: 0.005471s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005502s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005507s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005517s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005521s (num_starts 1; 0.0055s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.005552s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.005572s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.005572s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.005582s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ub-unsigned;-trivial.: 0.005583s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-trivial.: 0.005587s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;nonarg-locals-iscontiguous-houdini-guess.: 0.005587s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ml-lb-ub-eq-houdini-guess;-trivial.: 0.005589s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.005592s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;local-sizes-are-equal-houdini-guess;-trivial.: 0.005598s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.0056s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.005603s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ml-lb-ub-eq-houdini-guess.: 0.005606s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.00561s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;local-sizes-are-equal-houdini-guess.: 0.005613s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned.: 0.005617s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ub-unsigned.: 0.005625s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.005626s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.005634s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;mem-allocs-equality;-trivial.: 0.005648s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.005649s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.005659s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;mem-allocs-equality.: 0.005664s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005668s (num_starts 2; 0.0028s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.005681s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.005689s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.005692s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.005692s (num_starts 2; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.005702s (num_starts 1; 0.0057s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.005705s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ml-lb-ub-ineq-houdini-guess.: 0.005706s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;memlabel-is-absent-houdini-guess;-trivial.: 0.005731s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.005732s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.005743s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;memlabel-is-absent-houdini-guess.: 0.005747s (num_starts 1; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ml-lb-addr-eq-houdini-guess;-trivial.: 0.005768s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.005769s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;mem-allocs-equality;-trivial.: 0.005775s (num_starts 1; 0.0058s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L7%1%allocaI2.: 0.005776s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.005777s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.005779s (num_starts 1; 0.0058s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L7%1%allocaI2.: 0.00578s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ml-lb-addr-eq-houdini-guess.: 0.005784s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.005787s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;mem-allocs-equality.: 0.005791s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.005811s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.005812s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.005823s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;nonarg-locals-iscontiguous-houdini-guess.: 0.005827s (num_starts 1; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.00587s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.005878s (num_starts 1; 0.0059s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L7%1%allocaI2.: 0.005901s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005907s (num_starts 2; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005918s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.005921s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.00593s (num_starts 2; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005933s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.005936s (num_starts 1; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.005965s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.005966s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.005976s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ml-lb-ub-ineq-houdini-guess.: 0.00598s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ml-lb-ub-eq-houdini-guess;-trivial.: 0.005986s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.005987s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.005997s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ml-lb-ub-eq-houdini-guess.: 0.006002s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.006031s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.006138s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.006148s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.006191s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;sp-below-isp-houdini-guess;-trivial.: 0.006198s (num_starts 2; 0.0031s/start)
guarded_predicate_set_eliminate_axpreds.: 0.006198s (num_starts 773; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.006221s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.006229s (num_starts 1; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;sp-below-isp-houdini-guess.: 0.00623s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.006237s (num_starts 1; 0.0062s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI4_L7%1%allocaI2.: 0.006254s (num_starts 1; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.006255s (num_starts 1; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;mem-allocs-equality;-trivial.: 0.006258s (num_starts 1; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.006266s (num_starts 1; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;mem-allocs-equality.: 0.006273s (num_starts 1; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ml-lb-addr-eq-houdini-guess;-trivial.: 0.006312s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ml-lb-addr-eq-houdini-guess.: 0.006342s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-trivial.: 0.006367s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;memlabel-is-absent-houdini-guess;-trivial.: 0.006371s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.006396s (num_starts 2; 0.0032s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.006396s (num_starts 222; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;memlabel-is-absent-houdini-guess.: 0.006405s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ml-lb-ub-eq-houdini-guess;-trivial.: 0.006412s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.006424s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;local-sizes-are-equal-houdini-guess;-trivial.: 0.006427s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;nonarg-locals-iscontiguous-houdini-guess.: 0.006427s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ml-lb-ub-eq-houdini-guess.: 0.006442s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ml-lb-ub-ineq-houdini-guess.: 0.006454s (num_starts 2; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;local-sizes-are-equal-houdini-guess.: 0.006457s (num_starts 2; 0.0032s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.00651s (num_starts 1; 0.0065s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed;-trivial.: 0.006552s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;lb-signed;-trivial.: 0.006559s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed;-trivial.: 0.006566s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed.: 0.006594s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;lb-signed.: 0.0066s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-trivial.: 0.006613s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed.: 0.006616s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ub-signed;-trivial.: 0.006621s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006625s (num_starts 1; 0.0066s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006625s (num_starts 1; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-trivial.: 0.006626s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006626s (num_starts 1; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.006637s (num_starts 1; 0.0066s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.006652s (num_starts 1; 0.0067s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006659s (num_starts 1; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006664s (num_starts 1; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006665s (num_starts 1; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.006691s (num_starts 1; 0.0067s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.00671s (num_starts 1; 0.0067s/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 0.006734s (num_starts 50; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.006738s (num_starts 2; 0.0034s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.006741s (num_starts 1; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.006743s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.006747s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006747s (num_starts 1; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006754s (num_starts 1; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.006757s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006757s (num_starts 1; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-ml-lb-ineq-houdini-guess.: 0.006765s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.006778s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.00678s (num_starts 1; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.006785s (num_starts 1; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-dst-edgecond-implies-src-edgecond;-trivial.: 0.006785s (num_starts 1; 0.0068s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.006787s (num_starts 1; 0.0068s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.006788s (num_starts 1; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.006789s (num_starts 1; 0.0068s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.006796s (num_starts 1; 0.0068s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.006819s (num_starts 1; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;sp-below-isp-houdini-guess;-trivial.: 0.006856s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.006928s (num_starts 1; 0.0069s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.006937s (num_starts 4; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.006938s (num_starts 1; 0.0069s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.006946s (num_starts 1; 0.0069s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.007141s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.007188s (num_starts 2; 0.0036s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.007227s (num_starts 2; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.007238s (num_starts 2; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ub-signed;-trivial.: 0.007252s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-trivial.: 0.007256s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.007277s (num_starts 2; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed.: 0.007296s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;ub-signed.: 0.007306s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;memeq-;-trivial.: 0.007345s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-;-trivial.: 0.00735s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.007354s (num_starts 2; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ub-signed;-trivial.: 0.007362s (num_starts 2; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-trivial.: 0.007371s (num_starts 2; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;dst-ineq-houdini-guess;-trivial.: 0.007374s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.007377s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.007382s (num_starts 1; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-.: 0.007388s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;memeq-.: 0.007398s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-addr-eq-houdini-guess;-trivial.: 0.007399s (num_starts 2; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.0074s (num_starts 1; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess.: 0.007418s (num_starts 4; 0.0019s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.00742s (num_starts 126; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;dst-ineq-houdini-guess.: 0.007428s (num_starts 4; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007437s (num_starts 1; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-addr-eq-houdini-guess.: 0.007445s (num_starts 2; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007446s (num_starts 1; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007448s (num_starts 1; 0.0074s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-trivial.: 0.007463s (num_starts 3; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ub-unsigned;-trivial.: 0.007472s (num_starts 3; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.007473s (num_starts 1; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-trivial.: 0.007476s (num_starts 3; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.007491s (num_starts 1; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.007528s (num_starts 2; 0.0038s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.007563s (num_starts 1; 0.0076s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess;-trivial.: 0.007578s (num_starts 5; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.00758s (num_starts 2; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.00769s (num_starts 2; 0.0038s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);sp-below-isp-houdini-guess.: 0.007712s (num_starts 5; 0.0015s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.007717s (num_starts 1; 0.0077s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-;-trivial.: 0.007741s (num_starts 4; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.007742s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;memeq-;-trivial.: 0.007752s (num_starts 4; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-;-trivial.: 0.007755s (num_starts 4; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.007773s (num_starts 1; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.007784s (num_starts 1; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-.: 0.00779s (num_starts 4; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;memeq-.: 0.0078s (num_starts 4; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-.: 0.007814s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess;-trivial.: 0.007861s (num_starts 5; 0.0016s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.007963s (num_starts 1421; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memlabel-is-absent-houdini-guess.: 0.007978s (num_starts 5; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.007988s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008017s (num_starts 1; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008025s (num_starts 1; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008026s (num_starts 1; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.008054s (num_starts 1; 0.0081s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.008073s (num_starts 1; 0.0081s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008078s (num_starts 1; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008081s (num_starts 1; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.008084s (num_starts 1; 0.0081s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.008118s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.008121s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.008123s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.008131s (num_starts 2; 0.0041s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.008137s (num_starts 1; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-ml-lb-ineq-houdini-guess.: 0.008139s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;local-sizes-are-equal-houdini-guess;-trivial.: 0.008149s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.008151s (num_starts 2; 0.0041s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.008168s (num_starts 1; 0.0082s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.008243s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.008253s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;lb-unsigned;-trivial.: 0.008257s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.008258s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned;-trivial.: 0.008259s (num_starts 2; 0.0041s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 0.008262s (num_starts 70; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.008268s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned.: 0.008282s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.008285s (num_starts 2; 0.0041s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.008295s (num_starts 2; 0.0041s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.008322s (num_starts 1; 0.0083s/start)
proof_query_is_trivial_helper.: 0.008352s (num_starts 1818; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.00839s (num_starts 1; 0.0084s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ub-signed;-trivial.: 0.008461s (num_starts 2; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-trivial.: 0.008465s (num_starts 2; 0.0042s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.008511s (num_starts 1; 0.0085s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.008772s (num_starts 1; 0.0088s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.008789s (num_starts 1; 0.0088s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);linear;-trivial.: 0.008821s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);linear;-trivial.: 0.008843s (num_starts 6; 0.0015s/start)
sp_version_relations_val_t::meet.: 0.008873s (num_starts 13920; 0.0000s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.009024s (num_starts 1; 0.0090s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.009098s (num_starts 222; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-unsigned;-trivial.: 0.009231s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;lb-unsigned;-trivial.: 0.009234s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-unsigned;-trivial.: 0.009236s (num_starts 3; 0.0031s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.009245s (num_starts 177; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.009257s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;lb-unsigned.: 0.009266s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.009281s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.009422s (num_starts 1; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;local-sizes-are-equal-houdini-guess;-trivial.: 0.009427s (num_starts 1; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-sizes-are-equal-houdini-guess;-trivial.: 0.009431s (num_starts 1; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.009439s (num_starts 1; 0.0094s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);local-sizes-are-equal-houdini-guess.: 0.009459s (num_starts 1; 0.0095s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.009664s (num_starts 1; 0.0097s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;lb-unsigned;-trivial.: 0.009775s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-trivial.: 0.009779s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.009801s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;lb-unsigned.: 0.009808s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.009811s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.009823s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.009854s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.009871s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.009904s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.009909s (num_starts 3; 0.0033s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.009921s (num_starts 1911; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.009926s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.00994s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.009947s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.009962s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ub-signed;-trivial.: 0.010164s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-trivial.: 0.010184s (num_starts 2; 0.0051s/start)
tfg_suffixpath_get_expr_helper.: 0.010213s (num_starts 19; 0.0005s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.010249s (num_starts 25; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.010249s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.010263s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.01027s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.010285s (num_starts 3; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.010307s (num_starts 3; 0.0034s/start)
tfg::populate_loc_definedness.post_dfa.: 0.010386s (num_starts 10; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.010464s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.010486s (num_starts 3; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.010552s (num_starts 1; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.010555s (num_starts 1; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-ub-eq-houdini-guess;-trivial.: 0.010556s (num_starts 1; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.01056s (num_starts 1; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.010564s (num_starts 1; 0.0106s/start)
compute_ssa_vars_renaming_map.: 0.010653s (num_starts 2; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;lb-unsigned;-trivial.: 0.010657s (num_starts 2; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned;-trivial.: 0.01066s (num_starts 2; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned.: 0.010687s (num_starts 2; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;lb-unsigned.: 0.010695s (num_starts 2; 0.0053s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess;-trivial.: 0.01072s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;mem-allocs-equality;-trivial.: 0.010758s (num_starts 2; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;mem-allocs-equality.: 0.010789s (num_starts 2; 0.0054s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-ml-lb-ineq-houdini-guess.: 0.01086s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.010932s (num_starts 3; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.010952s (num_starts 3; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.010969s (num_starts 3; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011105s (num_starts 1; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.011114s (num_starts 1; 0.0111s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.011116s (num_starts 3; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.011125s (num_starts 3; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess.: 0.011151s (num_starts 3; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess.: 0.011176s (num_starts 3; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011186s (num_starts 1; 0.0112s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011188s (num_starts 1; 0.0112s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.011198s (num_starts 1; 0.0112s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;abstract-memlabel-asserts-houdini-guess.: 0.011201s (num_starts 1; 0.0112s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.011244s (num_starts 4; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.01138s (num_starts 1; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.011384s (num_starts 1; 0.0114s/start)
set_result_and_counter_example.: 0.011532s (num_starts 668; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;dst-ineq-houdini-guess;-trivial.: 0.011619s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.011625s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.011633s (num_starts 1; 0.0116s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-eq-houdini-guess;-trivial.: 0.011637s (num_starts 1; 0.0116s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.011637s (num_starts 1; 0.0116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.011639s (num_starts 1; 0.0116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.011641s (num_starts 1; 0.0116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess.: 0.011662s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;dst-ineq-houdini-guess.: 0.011673s (num_starts 4; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.011712s (num_starts 3; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.01172s (num_starts 3; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.011743s (num_starts 3; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.011768s (num_starts 3; 0.0039s/start)
graph_with_paths::collect_writable_memlabels_for_path.: 0.011862s (num_starts 188; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011871s (num_starts 1; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011873s (num_starts 1; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.011883s (num_starts 1; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;abstract-memlabel-asserts-houdini-guess.: 0.011886s (num_starts 1; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.012053s (num_starts 3; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.012065s (num_starts 3; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.012071s (num_starts 1; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.012075s (num_starts 1; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.012114s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-;-trivial.: 0.012118s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-.: 0.012166s (num_starts 4; 0.0030s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.012277s (num_starts 435; 0.0000s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.L0%0%d_L0%0%d.: 0.012617s (num_starts 7; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.012622s (num_starts 1; 0.0126s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012689s (num_starts 1; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.012691s (num_starts 3; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.012699s (num_starts 1; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.012715s (num_starts 3; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.012977s (num_starts 4; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.013017s (num_starts 4; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.013081s (num_starts 2; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;lb-unsigned;-trivial.: 0.013085s (num_starts 2; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned;-trivial.: 0.013089s (num_starts 2; 0.0065s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.01309s (num_starts 1; 0.0131s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.013096s (num_starts 7; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;memeq-;-trivial.: 0.013096s (num_starts 4; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.0131s (num_starts 7; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.013102s (num_starts 4; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned.: 0.013115s (num_starts 2; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;lb-unsigned.: 0.013124s (num_starts 2; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.013143s (num_starts 4; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;memeq-.: 0.013153s (num_starts 4; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.01317s (num_starts 7; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memlabel-is-absent-houdini-guess;-trivial.: 0.013188s (num_starts 5; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.013189s (num_starts 7; 0.0019s/start)
wp_pred.apply_trans_funs_simplified.: 0.013215s (num_starts 24; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ub-signed;-trivial.: 0.013282s (num_starts 3; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-trivial.: 0.01329s (num_starts 3; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.013319s (num_starts 3; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-sizes-are-equal-houdini-guess;-trivial.: 0.013386s (num_starts 2; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.01344s (num_starts 3; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.013477s (num_starts 3; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.013559s (num_starts 4; 0.0034s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.L0%0%d_L0%0%d.: 0.013576s (num_starts 7; 0.0019s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.L0%0%d_L0%0%d.: 0.013648s (num_starts 7; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);sp-below-isp-houdini-guess.: 0.013656s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;memlabel-is-absent-houdini-guess;-trivial.: 0.013657s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;memlabel-is-absent-houdini-guess.: 0.013725s (num_starts 4; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.013811s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.013904s (num_starts 4; 0.0035s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.013907s (num_starts 1911; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.013925s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.013938s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.013942s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.013971s (num_starts 3; 0.0047s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.013984s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.01399s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.013994s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.014009s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.014025s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.01405s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memlabel-is-absent-houdini-guess.: 0.014087s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.01409s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.014101s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;memeq-;-trivial.: 0.014159s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.014165s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.014203s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;memeq-.: 0.014211s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.014254s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.014266s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.014348s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.014361s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.01442s (num_starts 3; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.014422s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.014439s (num_starts 5; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.014507s (num_starts 4; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);abstract-memlabel-asserts-houdini-guess.: 0.014553s (num_starts 5; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.014603s (num_starts 1; 0.0146s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.014612s (num_starts 1; 0.0146s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.014732s (num_starts 3; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess;-trivial.: 0.01474s (num_starts 3; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess.: 0.014769s (num_starts 3; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-eq-lsprel-guess-houdini-guess.: 0.014802s (num_starts 3; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-trivial.: 0.014825s (num_starts 4; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.014832s (num_starts 4; 0.0037s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.014863s (num_starts 1; 0.0149s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.014907s (num_starts 4; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.014917s (num_starts 4; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-below-isp-houdini-guess;-trivial.: 0.015072s (num_starts 3; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.015121s (num_starts 2; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.015172s (num_starts 3; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.015173s (num_starts 3; 0.0051s/start)
graph_visit_exprs.: 0.015181s (num_starts 5; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.015216s (num_starts 3; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.015216s (num_starts 5; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.015234s (num_starts 3; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;dst-ineq-houdini-guess;-trivial.: 0.015523s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.01553s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess.: 0.01557s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;dst-ineq-houdini-guess.: 0.015579s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.015725s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.015837s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.015936s (num_starts 4; 0.0040s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI4_L7%1%allocaI2.inductive-invariants.: 0.015943s (num_starts 1; 0.0159s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality;-trivial.: 0.015976s (num_starts 4; 0.0040s/start)
invariant_inference_xfer.sp-below-isp.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.015994s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.016057s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);mem-allocs-equality.: 0.016071s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.016152s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;memeq-;-trivial.: 0.016183s (num_starts 4; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-;-trivial.: 0.016187s (num_starts 4; 0.0040s/start)
graph_visit_exprs_and_keys.: 0.016214s (num_starts 2; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-.: 0.016228s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;memeq-.: 0.016239s (num_starts 4; 0.0041s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.016298s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.016323s (num_starts 4; 0.0041s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.016395s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.01642s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.016492s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.016508s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memeq-;-trivial.: 0.016527s (num_starts 4; 0.0041s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.016539s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;memeq-;-trivial.: 0.016543s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memeq-;-trivial.: 0.016553s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.016559s (num_starts 3; 0.0055s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.016567s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.016573s (num_starts 3; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.016588s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.016609s (num_starts 3; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.016609s (num_starts 4; 0.0042s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.016609s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.01664s (num_starts 3; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.016664s (num_starts 4; 0.0042s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.016679s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.016719s (num_starts 3; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.016724s (num_starts 3; 0.0056s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.016737s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.016758s (num_starts 3; 0.0056s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.016761s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.016769s (num_starts 3; 0.0056s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.016792s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;mem-allocs-equality;-trivial.: 0.016844s (num_starts 3; 0.0056s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memeq-;-trivial.: 0.016896s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.016909s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memeq-;-trivial.: 0.016912s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memeq-;-trivial.: 0.016919s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.016964s (num_starts 8; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.017009s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.01702s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed;-trivial.: 0.017097s (num_starts 6; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.017124s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.01713s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.017151s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.017168s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.017173s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.017178s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;mem-allocs-equality;-trivial.: 0.017182s (num_starts 5; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.017183s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.017186s (num_starts 3; 0.0057s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.017206s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.01722s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ub-unsigned;-trivial.: 0.017227s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-trivial.: 0.017228s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.017256s (num_starts 3; 0.0058s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.01726s (num_starts 3; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;memlabel-is-absent-houdini-guess;-trivial.: 0.017288s (num_starts 6; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;memlabel-is-absent-houdini-guess.: 0.017365s (num_starts 6; 0.0029s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.017368s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;memeq-;-trivial.: 0.017397s (num_starts 4; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.017402s (num_starts 4; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.017442s (num_starts 4; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;memeq-.: 0.017451s (num_starts 4; 0.0044s/start)
populate_dominator_and_postdominator_relations.: 0.01746s (num_starts 16; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;lb-signed;-trivial.: 0.017506s (num_starts 3; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-trivial.: 0.017514s (num_starts 3; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.01755s (num_starts 3; 0.0059s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality;-trivial.: 0.017572s (num_starts 5; 0.0035s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.017606s (num_starts 4; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01761s (num_starts 1; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.017611s (num_starts 1; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.017621s (num_starts 1; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;abstract-memlabel-asserts-houdini-guess.: 0.017625s (num_starts 1; 0.0176s/start)
proof_query_is_trivial.: 0.017767s (num_starts 1682; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);mem-allocs-equality.: 0.017822s (num_starts 5; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess;-trivial.: 0.018047s (num_starts 5; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.018092s (num_starts 9; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;mem-allocs-equality;-trivial.: 0.018152s (num_starts 5; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-addr-eq-houdini-guess.: 0.018287s (num_starts 5; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;memeq-;-trivial.: 0.018398s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.018404s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memeq-;-trivial.: 0.018413s (num_starts 4; 0.0046s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.018428s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memeq-;-trivial.: 0.01843s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memeq-;-trivial.: 0.018437s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.018443s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;memeq-.: 0.018453s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018472s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018473s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.018483s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.018485s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;abstract-memlabel-asserts-houdini-guess.: 0.018487s (num_starts 1; 0.0185s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.018583s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.018595s (num_starts 4; 0.0046s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.018602s (num_starts 4; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-signed;-trivial.: 0.018698s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;lb-signed;-trivial.: 0.01871s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-signed;-trivial.: 0.018718s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.018741s (num_starts 4; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-signed.: 0.01876s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-signed;-trivial.: 0.018772s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;lb-signed.: 0.018773s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ub-signed;-trivial.: 0.018783s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.018784s (num_starts 3; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-signed;-trivial.: 0.018788s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);lb-signed.: 0.018797s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.018811s (num_starts 3; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-signed.: 0.018829s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.018836s (num_starts 4; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ub-signed.: 0.018846s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-signed.: 0.018869s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.019059s (num_starts 3; 0.0064s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.019064s (num_starts 625; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.019066s (num_starts 3; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.019102s (num_starts 3; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.019112s (num_starts 3; 0.0064s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-trivial.: 0.019125s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memeq-;-trivial.: 0.019172s (num_starts 4; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memeq-;-trivial.: 0.019191s (num_starts 4; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.019218s (num_starts 4; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.019327s (num_starts 4; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.019341s (num_starts 1; 0.0193s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.019342s (num_starts 1; 0.0193s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.019352s (num_starts 1; 0.0194s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;abstract-memlabel-asserts-houdini-guess.: 0.019356s (num_starts 1; 0.0194s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess;-trivial.: 0.019502s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memlabel-is-absent-houdini-guess.: 0.019592s (num_starts 4; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-addr-eq-houdini-guess;-trivial.: 0.019846s (num_starts 4; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;dst-ineq-houdini-guess;-trivial.: 0.019887s (num_starts 4; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.019893s (num_starts 4; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess.: 0.019935s (num_starts 4; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;dst-ineq-houdini-guess.: 0.019946s (num_starts 4; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-addr-eq-houdini-guess.: 0.01995s (num_starts 4; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.019957s (num_starts 4; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.020053s (num_starts 4; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.020055s (num_starts 4; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.020161s (num_starts 4; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.020297s (num_starts 3; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.020301s (num_starts 3; 0.0068s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.020303s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.020339s (num_starts 3; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.020352s (num_starts 3; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;memeq-;-trivial.: 0.020363s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-;-trivial.: 0.020369s (num_starts 4; 0.0051s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.020388s (num_starts 1; 0.0204s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.020396s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-.: 0.020409s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;memeq-.: 0.020419s (num_starts 4; 0.0051s/start)
def_analysis::xfer_and_meet.: 0.020489s (num_starts 326; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.020735s (num_starts 3; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.020737s (num_starts 3; 0.0069s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.020764s (num_starts 4; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.020767s (num_starts 3; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.020777s (num_starts 4; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.020778s (num_starts 3; 0.0069s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess;-trivial.: 0.020794s (num_starts 4; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-addr-eq-houdini-guess;-trivial.: 0.020799s (num_starts 6; 0.0035s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.020876s (num_starts 6; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-addr-eq-houdini-guess.: 0.020892s (num_starts 4; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-addr-eq-houdini-guess.: 0.020914s (num_starts 6; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.021029s (num_starts 4; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.021091s (num_starts 7; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.021122s (num_starts 4; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.021157s (num_starts 7; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);linear;-trivial.: 0.021243s (num_starts 4; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);linear;-trivial.: 0.02127s (num_starts 4; 0.0053s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-unsigned;-trivial.: 0.021422s (num_starts 6; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ub-unsigned;-trivial.: 0.021428s (num_starts 6; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-unsigned;-trivial.: 0.021431s (num_starts 6; 0.0036s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.021473s (num_starts 1; 0.0215s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.021527s (num_starts 6; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;memeq-;-trivial.: 0.021597s (num_starts 4; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.021604s (num_starts 4; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.021676s (num_starts 4; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;memeq-.: 0.021687s (num_starts 4; 0.0054s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.021707s (num_starts 21; 0.0010s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.021774s (num_starts 1091; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;exit.memeq;-trivial.: 0.022252s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.memeq;-trivial.: 0.022255s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.memeq.: 0.02229s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;exit.memeq.: 0.022299s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;exit.memeq;-trivial.: 0.022343s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.memeq;-trivial.: 0.022345s (num_starts 3; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.memeq.: 0.022399s (num_starts 3; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;exit.memeq.: 0.022407s (num_starts 3; 0.0075s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality;-trivial.: 0.022612s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.022651s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);mem-allocs-equality.: 0.022707s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;memeq-;-trivial.: 0.022737s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.022744s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.022766s (num_starts 4; 0.0057s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.022784s (num_starts 1116; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.022785s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;memeq-.: 0.022795s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.022801s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.022808s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.022994s (num_starts 2; 0.0115s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.023552s (num_starts 6; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.023653s (num_starts 2; 0.0118s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-trivial.: 0.023661s (num_starts 2; 0.0118s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.023792s (num_starts 2; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;abstract-memlabel-asserts-houdini-guess.: 0.023824s (num_starts 2; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.023953s (num_starts 4; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.023956s (num_starts 10; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.023986s (num_starts 4; 0.0060s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.024252s (num_starts 2; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-trivial.: 0.024262s (num_starts 2; 0.0121s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.024287s (num_starts 2; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.024295s (num_starts 2; 0.0121s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.L0%0%d_L0%0%d.: 0.024426s (num_starts 7; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;local-sizes-are-equal-houdini-guess;-trivial.: 0.024596s (num_starts 3; 0.0082s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.024606s (num_starts 4; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);nonarg-locals-iscontiguous-houdini-guess.: 0.024703s (num_starts 4; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-trivial.: 0.025004s (num_starts 4; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;memeq-;-trivial.: 0.02508s (num_starts 8; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.025102s (num_starts 4; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;memeq-.: 0.025202s (num_starts 8; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.025215s (num_starts 1; 0.0252s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.025217s (num_starts 1; 0.0252s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.025225s (num_starts 3; 0.0084s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.025227s (num_starts 1; 0.0252s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;abstract-memlabel-asserts-houdini-guess.: 0.025231s (num_starts 1; 0.0252s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-addr-eq-houdini-guess;-trivial.: 0.025278s (num_starts 6; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-addr-eq-houdini-guess.: 0.025407s (num_starts 6; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.025827s (num_starts 1; 0.0258s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.025828s (num_starts 1; 0.0258s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);-trivial.: 0.025836s (num_starts 5; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.025838s (num_starts 1; 0.0258s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;abstract-memlabel-asserts-houdini-guess.: 0.025842s (num_starts 1; 0.0258s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.026793s (num_starts 773; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-trivial.: 0.02682s (num_starts 4; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-trivial.: 0.026839s (num_starts 4; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-.: 0.026855s (num_starts 4; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.02693s (num_starts 1; 0.0269s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.026933s (num_starts 1; 0.0269s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.026943s (num_starts 1; 0.0269s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;abstract-memlabel-asserts-houdini-guess.: 0.026946s (num_starts 1; 0.0269s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.027049s (num_starts 1; 0.0270s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.027057s (num_starts 1; 0.0271s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);-trivial.: 0.027132s (num_starts 7; 0.0039s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.027397s (num_starts 6; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;linear;-trivial.: 0.02765s (num_starts 15; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-trivial.: 0.027669s (num_starts 15; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear.: 0.027813s (num_starts 15; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;linear.: 0.027843s (num_starts 15; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.027953s (num_starts 3; 0.0093s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.027962s (num_starts 3; 0.0093s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.02801s (num_starts 3; 0.0093s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.028029s (num_starts 3; 0.0093s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.028502s (num_starts 7; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.028513s (num_starts 7; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.028582s (num_starts 7; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.028599s (num_starts 7; 0.0041s/start)
add_fresh_counterexample_at_pc_and_propagate.Lfor.cond2%1%bbentry_L15%1%bbentry.inductive-invariants.: 0.028707s (num_starts 12; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-ub-eq-houdini-guess;-trivial.: 0.028806s (num_starts 3; 0.0096s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ub-signed;-trivial.: 0.028853s (num_starts 9; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;lb-signed;-trivial.: 0.028856s (num_starts 9; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-trivial.: 0.028865s (num_starts 9; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-trivial.: 0.028869s (num_starts 9; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.02893s (num_starts 9; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.028935s (num_starts 9; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ub-signed.: 0.028949s (num_starts 9; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;lb-signed.: 0.028955s (num_starts 9; 0.0032s/start)
graph_identify_back_edges.: 0.029058s (num_starts 156; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.029159s (num_starts 5; 0.0058s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);-trivial.: 0.02941s (num_starts 7; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;linear;-trivial.: 0.030091s (num_starts 10; 0.0030s/start)
graph_identify_natural_loops.: 0.03081s (num_starts 156; 0.0002s/start)
invariant_inference_xfer.sp-below-isp.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.030924s (num_starts 8; 0.0039s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.031075s (num_starts 6; 0.0052s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 0.031289s (num_starts 7; 0.0045s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.031318s (num_starts 8; 0.0039s/start)
invariant_inference_xfer.ml-lb-addr-eq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.031398s (num_starts 8; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-trivial.: 0.031494s (num_starts 2; 0.0157s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.031616s (num_starts 8; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.031747s (num_starts 3; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.031768s (num_starts 3; 0.0106s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);-trivial.: 0.031801s (num_starts 7; 0.0045s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.031931s (num_starts 8; 0.0040s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.032046s (num_starts 8; 0.0040s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.032067s (num_starts 8; 0.0040s/start)
invariant_inference_xfer.memlabel-is-absent.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.032077s (num_starts 8; 0.0040s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.032139s (num_starts 8; 0.0040s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.032234s (num_starts 8; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);pred-type-unknown;-trivial.: 0.032544s (num_starts 1; 0.0325s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.032546s (num_starts 1; 0.0325s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;pred-type-unknown;-trivial.: 0.032548s (num_starts 1; 0.0325s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);pred-type-unknown;-trivial.: 0.032551s (num_starts 1; 0.0326s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.032768s (num_starts 8; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);linear;-trivial.: 0.03283s (num_starts 14; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);linear;-trivial.: 0.032899s (num_starts 14; 0.0023s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.032901s (num_starts 8; 0.0041s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.032916s (num_starts 125; 0.0003s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.033014s (num_starts 6; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.033033s (num_starts 5; 0.0066s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-trivial.: 0.033209s (num_starts 10; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.033623s (num_starts 5; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.034514s (num_starts 10; 0.0035s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.034609s (num_starts 6; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.034665s (num_starts 10; 0.0035s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.034675s (num_starts 6; 0.0058s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.034767s (num_starts 6; 0.0058s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);-trivial.: 0.03524s (num_starts 11; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);linear;-trivial.: 0.035246s (num_starts 5; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;linear;-trivial.: 0.035268s (num_starts 5; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);linear;-trivial.: 0.035284s (num_starts 5; 0.0071s/start)
expr_represents_llvm_undef.: 0.035572s (num_starts 6641; 0.0000s/start)
graph_with_guessing_sync_preds.: 0.035701s (num_starts 1682; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memeq-;-trivial.: 0.035715s (num_starts 2; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memeq-;-trivial.: 0.035718s (num_starts 2; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memeq-;-trivial.: 0.03572s (num_starts 2; 0.0179s/start)
sort_exprs_and_compute_bv_eqclass.: 0.035725s (num_starts 26; 0.0014s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.035952s (num_starts 6; 0.0060s/start)
compute_bv_bool_eqclass.: 0.035974s (num_starts 26; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned;-trivial.: 0.036009s (num_starts 8; 0.0045s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L6%1%allocaI1.inductive-invariants.: 0.036089s (num_starts 1; 0.0361s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned.: 0.036253s (num_starts 8; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.036338s (num_starts 7; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.036352s (num_starts 7; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.036423s (num_starts 7; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.036441s (num_starts 7; 0.0052s/start)
compute_vars_reaching_definitions.: 0.036809s (num_starts 2; 0.0184s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L4%1%allocaI1.inductive-invariants.: 0.0373s (num_starts 1; 0.0373s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.038036s (num_starts 3; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-trivial.: 0.038044s (num_starts 3; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.038065s (num_starts 3; 0.0127s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);linear;-trivial.: 0.038779s (num_starts 7; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;linear;-trivial.: 0.038802s (num_starts 7; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);linear;-trivial.: 0.038819s (num_starts 7; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);linear;-trivial.: 0.039148s (num_starts 5; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;linear;-trivial.: 0.039157s (num_starts 5; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);linear;-trivial.: 0.039165s (num_starts 5; 0.0078s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.039521s (num_starts 8; 0.0049s/start)
collect_dst_to_src_submap_preds.: 0.039623s (num_starts 1682; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.039957s (num_starts 4; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.040008s (num_starts 4; 0.0100s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.04021s (num_starts 1; 0.0402s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.04022s (num_starts 1; 0.0402s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.040226s (num_starts 1; 0.0402s/start)
decide_hoare_triple_helper;per-query-type;local-eq-lsprel-guess-houdini-guess;-trivial.: 0.040236s (num_starts 14; 0.0029s/start)
tfg::populate_loc_definedness.before_solve.: 0.040285s (num_starts 10; 0.0040s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.040664s (num_starts 8; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-trivial.: 0.041004s (num_starts 21; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);linear;-trivial.: 0.041358s (num_starts 5; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);linear;-trivial.: 0.041401s (num_starts 5; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;memeq-;-trivial.: 0.04199s (num_starts 8; 0.0052s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-trivial.: 0.042082s (num_starts 12; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.042341s (num_starts 12; 0.0035s/start)
operator().computeWP_for_pred_across_ec.: 0.042477s (num_starts 426; 0.0001s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.L0%0%d_L0%0%d.: 0.042671s (num_starts 7; 0.0061s/start)
decide_hoare_triple_helper;per-query-type;sp-ml-lb-ineq-houdini-guess;-trivial.: 0.043472s (num_starts 16; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.04453s (num_starts 3; 0.0148s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.044578s (num_starts 6; 0.0074s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.memeq;-trivial.: 0.044583s (num_starts 6; 0.0074s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.memeq.: 0.044739s (num_starts 6; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.044755s (num_starts 1; 0.0448s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.04476s (num_starts 1; 0.0448s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.044788s (num_starts 1; 0.0448s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;-dst-edgecond-implies-src-edgecond.: 0.044792s (num_starts 1; 0.0448s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.04482s (num_starts 12; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;sp-below-isp-houdini-guess;-trivial.: 0.045263s (num_starts 6; 0.0075s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.045297s (num_starts 4; 0.0113s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;sp-below-isp-houdini-guess.: 0.045338s (num_starts 6; 0.0076s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.045473s (num_starts 38; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.045727s (num_starts 6; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;abstract-memlabel-asserts-houdini-guess.: 0.045798s (num_starts 6; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.046031s (num_starts 1; 0.0460s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.046035s (num_starts 1; 0.0460s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.046059s (num_starts 1; 0.0461s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;-dst-edgecond-implies-src-edgecond.: 0.046063s (num_starts 1; 0.0461s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.memeq;-trivial.: 0.046192s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.046199s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;exit.memeq;-trivial.: 0.04621s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.memeq;-trivial.: 0.046218s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.memeq.: 0.046303s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;exit.memeq.: 0.046319s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.046335s (num_starts 4; 0.0116s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-trivial.: 0.046335s (num_starts 12; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.memeq.: 0.046346s (num_starts 6; 0.0077s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.046417s (num_starts 4; 0.0116s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.046591s (num_starts 12; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.046784s (num_starts 1; 0.0468s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.046792s (num_starts 1; 0.0468s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.0468s (num_starts 1; 0.0468s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed.: 0.0469s (num_starts 4; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ub-signed.: 0.046911s (num_starts 4; 0.0117s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed.: 0.046935s (num_starts 4; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-trivial.: 0.047274s (num_starts 13; 0.0036s/start)
tfg::populate_loc_definedness.before_initialize.: 0.047714s (num_starts 10; 0.0048s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L1%1%allocaI1.inductive-invariants.: 0.047811s (num_starts 1; 0.0478s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.048277s (num_starts 1; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.048282s (num_starts 1; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.048304s (num_starts 1; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;-dst-edgecond-implies-src-edgecond.: 0.048307s (num_starts 1; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned.: 0.049854s (num_starts 2; 0.0249s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;lb-unsigned.: 0.049862s (num_starts 2; 0.0249s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-unsigned.: 0.049879s (num_starts 2; 0.0249s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L3%1%allocaI1.inductive-invariants.: 0.049888s (num_starts 1; 0.0499s/start)
tfg::populate_loc_definedness.: 0.050205s (num_starts 10; 0.0050s/start)
find_dominators.: 0.050694s (num_starts 203; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;linear;-trivial.: 0.051901s (num_starts 10; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.051925s (num_starts 10; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.052273s (num_starts 1; 0.0523s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.052278s (num_starts 1; 0.0523s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.052302s (num_starts 1; 0.0523s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;lb-unsigned.: 0.052307s (num_starts 1; 0.0523s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.052571s (num_starts 9; 0.0058s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.052723s (num_starts 65; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.053457s (num_starts 10; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.053785s (num_starts 1; 0.0538s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.053791s (num_starts 1; 0.0538s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.053801s (num_starts 1; 0.0538s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-dst-edgecond-implies-src-edgecond.: 0.053805s (num_starts 1; 0.0538s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.053877s (num_starts 1; 0.0539s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.053884s (num_starts 1; 0.0539s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.053891s (num_starts 1; 0.0539s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.053971s (num_starts 1; 0.0540s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.053978s (num_starts 1; 0.0540s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.053998s (num_starts 1; 0.0540s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;dst_edge_composition_proves_false.: 0.054002s (num_starts 1; 0.0540s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054098s (num_starts 1; 0.0541s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054103s (num_starts 1; 0.0541s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.054113s (num_starts 1; 0.0541s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054218s (num_starts 1; 0.0542s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.054225s (num_starts 1; 0.0542s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.05427s (num_starts 1; 0.0543s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054274s (num_starts 1; 0.0543s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.054281s (num_starts 1; 0.0543s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-dst-edgecond-implies-src-edgecond.: 0.054287s (num_starts 1; 0.0543s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.05436s (num_starts 16; 0.0034s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 0.05438s (num_starts 16; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.054383s (num_starts 6; 0.0091s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess.: 0.054703s (num_starts 16; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054747s (num_starts 1; 0.0547s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.054753s (num_starts 1; 0.0548s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.054775s (num_starts 1; 0.0548s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;-dst-edgecond-implies-src-edgecond.: 0.054781s (num_starts 1; 0.0548s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.055041s (num_starts 1; 0.0550s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.055048s (num_starts 1; 0.0550s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.055057s (num_starts 1; 0.0551s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-dst-edgecond-implies-src-edgecond.: 0.055062s (num_starts 1; 0.0551s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);false-predicate;-trivial.: 0.055517s (num_starts 1; 0.0555s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;false-predicate;-trivial.: 0.055521s (num_starts 1; 0.0555s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);false-predicate;-trivial.: 0.055523s (num_starts 1; 0.0555s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.05591s (num_starts 1; 0.0559s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.055916s (num_starts 1; 0.0559s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.055936s (num_starts 1; 0.0559s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;-dst-edgecond-implies-src-edgecond.: 0.055941s (num_starts 1; 0.0559s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-;-trivial.: 0.055941s (num_starts 16; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.055959s (num_starts 1; 0.0560s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.055965s (num_starts 1; 0.0560s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);-trivial.: 0.055975s (num_starts 14; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.055976s (num_starts 1; 0.0560s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-dst-edgecond-implies-src-edgecond.: 0.055979s (num_starts 1; 0.0560s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1.: 0.056024s (num_starts 1; 0.0560s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.056222s (num_starts 1; 0.0562s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.056227s (num_starts 1; 0.0562s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.056252s (num_starts 1; 0.0563s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;-dst-edgecond-implies-src-edgecond.: 0.056257s (num_starts 1; 0.0563s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);memeq-.: 0.056296s (num_starts 16; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.056395s (num_starts 1; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.056403s (num_starts 1; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.056404s (num_starts 1; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.056409s (num_starts 1; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.056419s (num_starts 1; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.056421s (num_starts 1; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-dst-edgecond-implies-src-edgecond.: 0.056424s (num_starts 1; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;lb-unsigned.: 0.056426s (num_starts 1; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-trivial.: 0.056605s (num_starts 4; 0.0142s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.056881s (num_starts 1; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.056887s (num_starts 1; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.056914s (num_starts 1; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;-dst-edgecond-implies-src-edgecond.: 0.056918s (num_starts 1; 0.0569s/start)
invariant_inference_xfer.dst-ineq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.05713s (num_starts 8; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-trivial.: 0.057144s (num_starts 4; 0.0143s/start)
get_unrolled_loop_paths_from.: 0.057343s (num_starts 19; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-trivial.: 0.057434s (num_starts 23; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.057516s (num_starts 1; 0.0575s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;linear;-trivial.: 0.057517s (num_starts 23; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.057524s (num_starts 1; 0.0575s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-trivial.: 0.057555s (num_starts 23; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-trivial.: 0.057613s (num_starts 1; 0.0576s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-trivial.: 0.057615s (num_starts 1; 0.0576s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-trivial.: 0.057616s (num_starts 1; 0.0576s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;dst_edge_composition_proves_false;-trivial.: 0.057617s (num_starts 1; 0.0576s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.057633s (num_starts 1; 0.0576s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.058202s (num_starts 1; 0.0582s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.058206s (num_starts 1; 0.0582s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.05823s (num_starts 1; 0.0582s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;-dst-edgecond-implies-src-edgecond.: 0.058235s (num_starts 1; 0.0582s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.058298s (num_starts 4; 0.0146s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.058395s (num_starts 4; 0.0146s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.059129s (num_starts 2093; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.059209s (num_starts 1; 0.0592s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.059213s (num_starts 1; 0.0592s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);-trivial.: 0.059213s (num_starts 12; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.059221s (num_starts 1; 0.0592s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.059225s (num_starts 1; 0.0592s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.059235s (num_starts 1; 0.0592s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;lb-unsigned.: 0.059242s (num_starts 1; 0.0592s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.059246s (num_starts 1; 0.0592s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);-trivial.: 0.059286s (num_starts 12; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.05958s (num_starts 1; 0.0596s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.059606s (num_starts 1; 0.0596s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.059655s (num_starts 1; 0.0597s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.059663s (num_starts 1; 0.0597s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.059691s (num_starts 1; 0.0597s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;lb-unsigned.: 0.059697s (num_starts 1; 0.0597s/start)
compute_regions.: 0.059747s (num_starts 156; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.059924s (num_starts 2; 0.0300s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);-trivial.: 0.06015s (num_starts 12; 0.0050s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.060206s (num_starts 171; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.060431s (num_starts 12; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.060471s (num_starts 1; 0.0605s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.060496s (num_starts 1; 0.0605s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.060536s (num_starts 12; 0.0050s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1.: 0.06062s (num_starts 1; 0.0606s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.060881s (num_starts 4; 0.0152s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;linear;-trivial.: 0.061181s (num_starts 10; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.061203s (num_starts 10; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.062187s (num_starts 1; 0.0622s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.062197s (num_starts 1; 0.0622s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.062231s (num_starts 1; 0.0622s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.062514s (num_starts 1; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06252s (num_starts 1; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.062524s (num_starts 1; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.062533s (num_starts 1; 0.0625s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.063093s (num_starts 16; 0.0039s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.063317s (num_starts 6; 0.0106s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.063359s (num_starts 4; 0.0158s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063513s (num_starts 1; 0.0635s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063513s (num_starts 1; 0.0635s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.06352s (num_starts 1; 0.0635s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063724s (num_starts 1; 0.0637s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.063734s (num_starts 1; 0.0637s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063908s (num_starts 1; 0.0639s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063917s (num_starts 1; 0.0639s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.063923s (num_starts 1; 0.0639s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.063934s (num_starts 1; 0.0639s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.063951s (num_starts 1; 0.0640s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1.: 0.064231s (num_starts 1; 0.0642s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.064372s (num_starts 1; 0.0644s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06438s (num_starts 1; 0.0644s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.064386s (num_starts 1; 0.0644s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.064397s (num_starts 1; 0.0644s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.064414s (num_starts 1; 0.0644s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.065025s (num_starts 16; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.065038s (num_starts 1; 0.0650s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.065046s (num_starts 1; 0.0650s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.065051s (num_starts 1; 0.0651s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.065062s (num_starts 1; 0.0651s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.065081s (num_starts 1; 0.0651s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.065397s (num_starts 16; 0.0041s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1.: 0.065461s (num_starts 1; 0.0655s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.065586s (num_starts 12; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.065936s (num_starts 12; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066077s (num_starts 1; 0.0661s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066086s (num_starts 1; 0.0661s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066093s (num_starts 1; 0.0661s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.066104s (num_starts 1; 0.0661s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.066124s (num_starts 1; 0.0661s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memlabel-is-absent-houdini-guess.: 0.066197s (num_starts 2; 0.0331s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066207s (num_starts 1; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066214s (num_starts 1; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066219s (num_starts 1; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.066228s (num_starts 1; 0.0662s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.066245s (num_starts 1; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066309s (num_starts 1; 0.0663s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066315s (num_starts 1; 0.0663s/start)
get_sprel_map_pair.: 0.066317s (num_starts 1513; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.066332s (num_starts 1; 0.0663s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-addr-neq-zero.: 0.066339s (num_starts 1; 0.0663s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.066575s (num_starts 4; 0.0166s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066621s (num_starts 1; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06663s (num_starts 1; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066636s (num_starts 1; 0.0666s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.066647s (num_starts 1; 0.0666s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.066661s (num_starts 1; 0.0667s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.066673s (num_starts 4; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;linear;-trivial.: 0.066689s (num_starts 13; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memlabel-is-absent-houdini-guess.: 0.066697s (num_starts 2; 0.0333s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-trivial.: 0.066711s (num_starts 13; 0.0051s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1.: 0.066853s (num_starts 1; 0.0669s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.067124s (num_starts 1; 0.0671s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067387s (num_starts 1; 0.0674s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.0674s (num_starts 1; 0.0674s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);mem-allocs-equality.: 0.067428s (num_starts 1; 0.0674s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);mem-allocs-equality.: 0.067446s (num_starts 1; 0.0674s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;lb-unsigned.: 0.067547s (num_starts 3; 0.0225s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067559s (num_starts 1; 0.0676s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067562s (num_starts 1; 0.0676s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.067571s (num_starts 1; 0.0676s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067687s (num_starts 1; 0.0677s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067693s (num_starts 1; 0.0677s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.067719s (num_starts 1; 0.0677s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;-dst-edgecond-implies-src-edgecond.: 0.067724s (num_starts 1; 0.0677s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.067916s (num_starts 1; 0.0679s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068144s (num_starts 1; 0.0681s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.06818s (num_starts 1; 0.0682s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068864s (num_starts 1; 0.0689s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068894s (num_starts 1; 0.0689s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memlabel-is-absent-houdini-guess.: 0.068968s (num_starts 3; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;memlabel-is-absent-houdini-guess.: 0.069041s (num_starts 2; 0.0345s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L4%1%allocaI1.: 0.069201s (num_starts 1; 0.0692s/start)
removeMostPromising.: 0.069365s (num_starts 94; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memlabel-is-absent-houdini-guess.: 0.069599s (num_starts 2; 0.0348s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069612s (num_starts 1; 0.0696s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069627s (num_starts 1; 0.0696s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);mem-allocs-equality.: 0.069662s (num_starts 1; 0.0697s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);mem-allocs-equality.: 0.069695s (num_starts 1; 0.0697s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070128s (num_starts 1; 0.0701s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.070182s (num_starts 1; 0.0702s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070225s (num_starts 1; 0.0702s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070355s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07036s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.070381s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;-dst-edgecond-implies-src-edgecond.: 0.070386s (num_starts 1; 0.0704s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070492s (num_starts 1; 0.0705s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070501s (num_starts 1; 0.0705s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070507s (num_starts 1; 0.0705s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.070518s (num_starts 1; 0.0705s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.070535s (num_starts 1; 0.0705s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070582s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070589s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070593s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.070602s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.070619s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;memlabel-is-absent-houdini-guess.: 0.070739s (num_starts 2; 0.0354s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070758s (num_starts 1; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070762s (num_starts 1; 0.0708s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.070765s (num_starts 4; 0.0177s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.070799s (num_starts 1; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;mem-allocs-equality.: 0.070806s (num_starts 4; 0.0177s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071039s (num_starts 1; 0.0710s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);-trivial.: 0.071039s (num_starts 12; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.071076s (num_starts 1; 0.0711s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07117s (num_starts 1; 0.0712s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071196s (num_starts 1; 0.0712s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.071508s (num_starts 1; 0.0715s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071616s (num_starts 1; 0.0716s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071633s (num_starts 1; 0.0716s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);mem-allocs-equality.: 0.071669s (num_starts 1; 0.0717s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);mem-allocs-equality.: 0.071687s (num_starts 1; 0.0717s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072033s (num_starts 1; 0.0720s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072044s (num_starts 1; 0.0720s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072048s (num_starts 1; 0.0720s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.072078s (num_starts 1; 0.0721s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-neq-zero.: 0.072085s (num_starts 1; 0.0721s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.072096s (num_starts 1; 0.0721s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072131s (num_starts 1; 0.0721s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072132s (num_starts 1; 0.0721s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072148s (num_starts 1; 0.0721s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.072158s (num_starts 1; 0.0722s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072159s (num_starts 1; 0.0722s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072161s (num_starts 1; 0.0722s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);mem-allocs-equality.: 0.072187s (num_starts 1; 0.0722s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072188s (num_starts 1; 0.0722s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);mem-allocs-equality.: 0.072205s (num_starts 1; 0.0722s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;linear;-trivial.: 0.072337s (num_starts 10; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.07236s (num_starts 10; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;mem-allocs-equality.: 0.072369s (num_starts 6; 0.0121s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.072496s (num_starts 1; 0.0725s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.072504s (num_starts 1; 0.0725s/start)
invariant_inference_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.072692s (num_starts 1; 0.0727s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073005s (num_starts 1; 0.0730s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073017s (num_starts 1; 0.0730s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073024s (num_starts 1; 0.0730s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.073048s (num_starts 1; 0.0730s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-neq-zero.: 0.073053s (num_starts 1; 0.0731s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.073062s (num_starts 1; 0.0731s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;abstract-memlabel-asserts-houdini-guess.: 0.073353s (num_starts 2; 0.0367s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073708s (num_starts 1; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073714s (num_starts 1; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.073734s (num_starts 1; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-region-was-stack.: 0.073742s (num_starts 1; 0.0737s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073752s (num_starts 1; 0.0738s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07376s (num_starts 1; 0.0738s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073764s (num_starts 1; 0.0738s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.073774s (num_starts 1; 0.0738s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.073794s (num_starts 1; 0.0738s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073975s (num_starts 1; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073983s (num_starts 1; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.074004s (num_starts 1; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-addr-no-overflow.: 0.074011s (num_starts 1; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;linear;-trivial.: 0.074263s (num_starts 19; 0.0039s/start)
cg_src_dst_tfg_copy.: 0.074631s (num_starts 7; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;linear;-trivial.: 0.074968s (num_starts 17; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.074999s (num_starts 17; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.075126s (num_starts 12; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.07517s (num_starts 12; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075233s (num_starts 1; 0.0752s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.07527s (num_starts 1; 0.0753s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-.: 0.075294s (num_starts 12; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075338s (num_starts 1; 0.0753s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-.: 0.075353s (num_starts 12; 0.0063s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.075659s (num_starts 12; 0.0063s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075778s (num_starts 1; 0.0758s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075786s (num_starts 1; 0.0758s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075791s (num_starts 1; 0.0758s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memlabel-is-absent-houdini-guess.: 0.075798s (num_starts 6; 0.0126s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.075801s (num_starts 1; 0.0758s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.075816s (num_starts 1; 0.0758s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.075979s (num_starts 12; 0.0063s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076147s (num_starts 1; 0.0761s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076158s (num_starts 1; 0.0762s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076163s (num_starts 1; 0.0762s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.076183s (num_starts 1; 0.0762s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-neq-zero.: 0.07619s (num_starts 1; 0.0762s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.076199s (num_starts 1; 0.0762s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07622s (num_starts 1; 0.0762s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076265s (num_starts 1; 0.0763s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076275s (num_starts 1; 0.0763s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.076317s (num_starts 1; 0.0763s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.076336s (num_starts 1; 0.0763s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076565s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076577s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076583s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.076611s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-geq-sp.: 0.076618s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.076628s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076705s (num_starts 1; 0.0767s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07671s (num_starts 1; 0.0767s/start)
do_ssa_transformation.: 0.076711s (num_starts 2; 0.0384s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076713s (num_starts 1; 0.0767s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076726s (num_starts 1; 0.0767s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.076733s (num_starts 1; 0.0767s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.076744s (num_starts 1; 0.0767s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.077016s (num_starts 1; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;abstract-memlabel-asserts-houdini-guess.: 0.077251s (num_starts 2; 0.0386s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;nonarg-locals-iscontiguous-houdini-guess.: 0.07739s (num_starts 3; 0.0258s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.077578s (num_starts 1; 0.0776s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;abstract-memlabel-asserts-houdini-guess.: 0.078005s (num_starts 2; 0.0390s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078222s (num_starts 1; 0.0782s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078233s (num_starts 1; 0.0782s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07824s (num_starts 1; 0.0782s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.078268s (num_starts 1; 0.0783s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-geq-sp.: 0.078274s (num_starts 1; 0.0783s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.078285s (num_starts 1; 0.0783s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-ub-ineq-houdini-guess.: 0.078824s (num_starts 2; 0.0394s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;local-eq-lsprel-guess-houdini-guess.: 0.078913s (num_starts 2; 0.0395s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L1%1%allocaI1.: 0.07905s (num_starts 1; 0.0790s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L7%1%allocaI1.inductive-invariants.: 0.079108s (num_starts 2; 0.0396s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.0792s (num_starts 16; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079391s (num_starts 1; 0.0794s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079424s (num_starts 1; 0.0794s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079432s (num_starts 1; 0.0794s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.079471s (num_starts 1; 0.0795s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079482s (num_starts 1; 0.0795s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079493s (num_starts 1; 0.0795s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.079495s (num_starts 1; 0.0795s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.0795s (num_starts 1; 0.0795s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.079527s (num_starts 1; 0.0795s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.07953s (num_starts 16; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-is-aligned.: 0.079534s (num_starts 1; 0.0795s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.079546s (num_starts 1; 0.0795s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.079868s (num_starts 1; 0.0799s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080252s (num_starts 1; 0.0803s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.080277s (num_starts 6; 0.0134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08029s (num_starts 1; 0.0803s/start)
decide_hoare_triple_helper;per-query-type;sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08029s (num_starts 1; 0.0803s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-ml-lb-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080298s (num_starts 1; 0.0803s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-ml-lb-ineq-houdini-guess.: 0.08034s (num_starts 1; 0.0803s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);sp-ml-lb-ineq-houdini-guess.: 0.080396s (num_starts 1; 0.0804s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080424s (num_starts 1; 0.0804s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080435s (num_starts 1; 0.0804s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080441s (num_starts 1; 0.0804s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.080466s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-neq-zero.: 0.080471s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.08048s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;abstract-memlabel-asserts-houdini-guess.: 0.080568s (num_starts 2; 0.0403s/start)
populate_simplified_to_state.: 0.081028s (num_starts 115; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;linear;-trivial.: 0.081033s (num_starts 13; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-trivial.: 0.081054s (num_starts 13; 0.0062s/start)
invariant_inference_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.081086s (num_starts 1; 0.0811s/start)
aliasing_constraints.convert_to_expr.: 0.081132s (num_starts 773; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081331s (num_starts 1; 0.0813s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.081356s (num_starts 1; 0.0814s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);-trivial.: 0.081405s (num_starts 24; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08162s (num_starts 1; 0.0816s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081631s (num_starts 1; 0.0816s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081637s (num_starts 1; 0.0816s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.08166s (num_starts 1; 0.0817s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-is-aligned.: 0.081667s (num_starts 1; 0.0817s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.08168s (num_starts 1; 0.0817s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082115s (num_starts 1; 0.0821s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;local-eq-lsprel-guess-houdini-guess.: 0.082162s (num_starts 2; 0.0411s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082197s (num_starts 1; 0.0822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082203s (num_starts 1; 0.0822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.082245s (num_starts 1; 0.0822s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082263s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.082274s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082275s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082281s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.082308s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-neq-zero.: 0.082314s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.082323s (num_starts 1; 0.0823s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082393s (num_starts 1; 0.0824s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082404s (num_starts 1; 0.0824s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082411s (num_starts 1; 0.0824s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.08243s (num_starts 1; 0.0824s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-region-was-stack.: 0.082434s (num_starts 1; 0.0824s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.082441s (num_starts 1; 0.0824s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.082933s (num_starts 1; 0.0829s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083132s (num_starts 1; 0.0831s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083143s (num_starts 1; 0.0831s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083151s (num_starts 1; 0.0832s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.083173s (num_starts 1; 0.0832s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-geq-sp.: 0.083179s (num_starts 1; 0.0832s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.083192s (num_starts 1; 0.0832s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083393s (num_starts 1; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083402s (num_starts 1; 0.0834s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083442s (num_starts 1; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.083456s (num_starts 1; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;nonarg-locals-iscontiguous-houdini-guess.: 0.083473s (num_starts 1; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08357s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083578s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.083595s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.083599s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-alloca-addr-is-aligned.: 0.083606s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083612s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083623s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083628s (num_starts 1; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.083651s (num_starts 1; 0.0837s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;-alloca-addr-no-overflow.: 0.083658s (num_starts 1; 0.0837s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.08367s (num_starts 1; 0.0837s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-trivial.: 0.083814s (num_starts 27; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;abstract-memlabel-asserts-houdini-guess.: 0.08387s (num_starts 2; 0.0419s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.08433s (num_starts 1; 0.0843s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085059s (num_starts 1; 0.0851s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.085178s (num_starts 4; 0.0213s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.085273s (num_starts 4; 0.0213s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.085284s (num_starts 4; 0.0213s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.085735s (num_starts 2041; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memeq-.: 0.085899s (num_starts 5; 0.0172s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);memeq-.: 0.085939s (num_starts 5; 0.0172s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086032s (num_starts 1; 0.0860s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086038s (num_starts 1; 0.0860s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086044s (num_starts 1; 0.0860s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.086066s (num_starts 1; 0.0861s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-is-aligned.: 0.086072s (num_starts 1; 0.0861s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.086108s (num_starts 1; 0.0861s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08612s (num_starts 1; 0.0861s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.086146s (num_starts 1; 0.0861s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.086738s (num_starts 2; 0.0434s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087077s (num_starts 1; 0.0871s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08708s (num_starts 1; 0.0871s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.087122s (num_starts 1; 0.0871s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.087188s (num_starts 1; 0.0872s/start)
corr_graph_enumerate_correlations.: 0.087308s (num_starts 20; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087605s (num_starts 1; 0.0876s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087609s (num_starts 1; 0.0876s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.087629s (num_starts 1; 0.0876s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;lb-unsigned.: 0.087636s (num_starts 1; 0.0876s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memeq-.: 0.08784s (num_starts 5; 0.0176s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);memeq-.: 0.087881s (num_starts 5; 0.0176s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.087883s (num_starts 1; 0.0879s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088204s (num_starts 1; 0.0882s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088209s (num_starts 1; 0.0882s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.088228s (num_starts 1; 0.0882s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;sp-ml-lb-ineq-houdini-guess.: 0.088622s (num_starts 3; 0.0295s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.088706s (num_starts 27; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088757s (num_starts 1; 0.0888s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08877s (num_starts 1; 0.0888s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088775s (num_starts 1; 0.0888s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.088803s (num_starts 1; 0.0888s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-is-aligned.: 0.088809s (num_starts 1; 0.0888s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.08882s (num_starts 1; 0.0888s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.088859s (num_starts 26; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089491s (num_starts 1; 0.0895s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089504s (num_starts 1; 0.0895s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089512s (num_starts 1; 0.0895s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.089542s (num_starts 1; 0.0895s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-geq-sp.: 0.089549s (num_starts 1; 0.0895s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.08956s (num_starts 1; 0.0896s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;linear;-trivial.: 0.090241s (num_starts 17; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.090273s (num_starts 17; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memeq-.: 0.090692s (num_starts 5; 0.0181s/start)
graph_to_stream.: 0.090722s (num_starts 2; 0.0454s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);memeq-.: 0.090739s (num_starts 5; 0.0181s/start)
decide_hoare_triple_helper;per-query-type;exit.memeq;-trivial.: 0.090788s (num_starts 12; 0.0076s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.09091s (num_starts 2041; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.090955s (num_starts 1; 0.0910s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.09098s (num_starts 1; 0.0910s/start)
decide_hoare_triple_helper;per-query-type;exit.memeq.: 0.091055s (num_starts 12; 0.0076s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.091124s (num_starts 1; 0.0911s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.091135s (num_starts 1; 0.0911s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.091141s (num_starts 1; 0.0911s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.091172s (num_starts 1; 0.0912s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-is-aligned.: 0.091179s (num_starts 1; 0.0912s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.09119s (num_starts 1; 0.0912s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memeq-.: 0.091483s (num_starts 5; 0.0183s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);memeq-.: 0.09153s (num_starts 5; 0.0183s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.092171s (num_starts 1; 0.0922s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.092182s (num_starts 1; 0.0922s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.09219s (num_starts 1; 0.0922s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.092222s (num_starts 1; 0.0922s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-geq-sp.: 0.092229s (num_starts 1; 0.0922s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-geq-sp.: 0.092239s (num_starts 1; 0.0922s/start)
construct_linear_combination_exprs.: 0.093216s (num_starts 5596; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;lb-unsigned.: 0.093305s (num_starts 2; 0.0467s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.094012s (num_starts 9; 0.0104s/start)
invariant_inference_xfer.src-branches-const-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.094493s (num_starts 9; 0.0105s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-iscontiguous-houdini-guess;-trivial.: 0.094529s (num_starts 20; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.094559s (num_starts 3; 0.0315s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094674s (num_starts 1; 0.0947s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094689s (num_starts 1; 0.0947s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094716s (num_starts 1; 0.0947s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.094731s (num_starts 1; 0.0947s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.094836s (num_starts 1; 0.0948s/start)
generate_aliasing_constraints_from_expr.: 0.095026s (num_starts 25585; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;memeq-;-trivial.: 0.095383s (num_starts 10; 0.0095s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.096205s (num_starts 1; 0.0962s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096425s (num_starts 1; 0.0964s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096431s (num_starts 1; 0.0964s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.096455s (num_starts 1; 0.0965s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;lb-unsigned.: 0.096462s (num_starts 1; 0.0965s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-eq-houdini-guess;-trivial.: 0.09871s (num_starts 17; 0.0058s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098931s (num_starts 1; 0.0989s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098942s (num_starts 1; 0.0989s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.098947s (num_starts 28; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098948s (num_starts 1; 0.0989s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-below-isp-houdini-guess.: 0.098959s (num_starts 1; 0.0990s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);sp-below-isp-houdini-guess.: 0.098978s (num_starts 1; 0.0990s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.099544s (num_starts 28; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.099639s (num_starts 3; 0.0332s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-;-trivial.: 0.100307s (num_starts 16; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.100424s (num_starts 3; 0.0335s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);memeq-.: 0.100666s (num_starts 16; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;linear;-trivial.: 0.100675s (num_starts 23; 0.0044s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.100706s (num_starts 31; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;sp-below-isp-houdini-guess.: 0.100837s (num_starts 2; 0.0504s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101075s (num_starts 1; 0.1011s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101081s (num_starts 1; 0.1011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;outgoing_edges_cover_all_possibilities.;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101089s (num_starts 1; 0.1011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101095s (num_starts 1; 0.1011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.101127s (num_starts 1; 0.1011s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.101143s (num_starts 1; 0.1011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;abstract-memlabel-asserts-houdini-guess.: 0.101287s (num_starts 6; 0.0169s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101671s (num_starts 1; 0.1017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101682s (num_starts 1; 0.1017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101691s (num_starts 1; 0.1017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-below-isp-houdini-guess.: 0.101702s (num_starts 1; 0.1017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);sp-below-isp-houdini-guess.: 0.101719s (num_starts 1; 0.1017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;sp-below-isp-houdini-guess.: 0.103258s (num_starts 2; 0.0516s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103345s (num_starts 1; 0.1033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103368s (num_starts 1; 0.1034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);mem-allocs-equality.: 0.103379s (num_starts 1; 0.1034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);mem-allocs-equality.: 0.103393s (num_starts 1; 0.1034s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-ineq-houdini-guess;-trivial.: 0.103771s (num_starts 24; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103961s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103969s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103973s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103973s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103981s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-below-isp-houdini-guess.: 0.103982s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.103986s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);mem-allocs-equality.: 0.103996s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);sp-below-isp-houdini-guess.: 0.103999s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);mem-allocs-equality.: 0.10401s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;outgoing_edges_cover_all_possibilities..: 0.104124s (num_starts 4; 0.0260s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.10414s (num_starts 4; 0.0260s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;local-sizes-are-equal-houdini-guess.: 0.104186s (num_starts 2; 0.0521s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.104352s (num_starts 1; 0.1044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.104373s (num_starts 1; 0.1044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);mem-allocs-equality.: 0.104384s (num_starts 1; 0.1044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);mem-allocs-equality.: 0.104396s (num_starts 1; 0.1044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.10507s (num_starts 2; 0.0525s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.10508s (num_starts 2; 0.0525s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.105126s (num_starts 2; 0.0526s/start)
populate_transitive_closure.: 0.105452s (num_starts 278; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.105459s (num_starts 1; 0.1055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.105472s (num_starts 1; 0.1055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);mem-allocs-equality.: 0.10548s (num_starts 1; 0.1055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);mem-allocs-equality.: 0.10549s (num_starts 1; 0.1055s/start)
populate_simplified_assets.: 0.105504s (num_starts 230; 0.0005s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-isprobably-contiguous-houdini-guess;-trivial.: 0.105595s (num_starts 28; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;sp-below-isp-houdini-guess.: 0.105743s (num_starts 2; 0.0529s/start)
create_closure_matrix.: 0.10601s (num_starts 819; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.106054s (num_starts 12; 0.0088s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.106492s (num_starts 1; 0.1065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.106505s (num_starts 1; 0.1065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);mem-allocs-equality.: 0.106516s (num_starts 1; 0.1065s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);mem-allocs-equality.: 0.10653s (num_starts 1; 0.1065s/start)
decide_hoare_triple_helper;per-query-type;memlabel-is-absent-houdini-guess;-trivial.: 0.106774s (num_starts 32; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.107245s (num_starts 2; 0.0536s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.10729s (num_starts 2; 0.0536s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;mem-allocs-equality.: 0.107983s (num_starts 2; 0.0540s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.108096s (num_starts 3; 0.0360s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;abstract-memlabel-asserts-houdini-guess.: 0.108112s (num_starts 4; 0.0270s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.110464s (num_starts 1; 0.1105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.110474s (num_starts 1; 0.1105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.110483s (num_starts 1; 0.1105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-below-isp-houdini-guess.: 0.110494s (num_starts 1; 0.1105s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);sp-below-isp-houdini-guess.: 0.110514s (num_starts 1; 0.1105s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.110799s (num_starts 2151; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.11154s (num_starts 2; 0.0558s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.11164s (num_starts 625; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113046s (num_starts 2; 0.0565s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113055s (num_starts 2; 0.0565s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.113104s (num_starts 2; 0.0566s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;-dst-edgecond-implies-src-edgecond.: 0.113112s (num_starts 2; 0.0566s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;sp-below-isp-houdini-guess.: 0.113725s (num_starts 2; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed.: 0.114357s (num_starts 3; 0.0381s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.114397s (num_starts 2; 0.0572s/start)
decide_hoare_triple_helper;per-query-type;mem-allocs-equality;-trivial.: 0.115245s (num_starts 27; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.115787s (num_starts 2; 0.0579s/start)
src_tfg_counter_example_translate_on_edge_composition.delta2.: 0.116395s (num_starts 69; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.11696s (num_starts 11; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear.: 0.117569s (num_starts 14; 0.0084s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.117648s (num_starts 1; 0.1176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.117652s (num_starts 1; 0.1177s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved.: 0.117684s (num_starts 1; 0.1177s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;exit.sp-preserved.: 0.117691s (num_starts 1; 0.1177s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.117826s (num_starts 1; 0.1178s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.117836s (num_starts 1; 0.1178s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.117843s (num_starts 1; 0.1178s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.117865s (num_starts 1; 0.1179s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-region-was-stack.: 0.117868s (num_starts 1; 0.1179s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.117875s (num_starts 1; 0.1179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.118445s (num_starts 2; 0.0592s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;linear;-trivial.: 0.118586s (num_starts 17; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.118616s (num_starts 17; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned.: 0.11892s (num_starts 3; 0.0396s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.119239s (num_starts 1; 0.1192s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.119242s (num_starts 1; 0.1192s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.11925s (num_starts 1; 0.1192s/start)
decide_hoare_triple_helper;per-query-type;local-sizes-are-equal-houdini-guess;-trivial.: 0.119506s (num_starts 24; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.121199s (num_starts 2; 0.0606s/start)
decide_hoare_triple_helper;per-query-type;sp-below-isp-houdini-guess;-trivial.: 0.121603s (num_starts 28; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.121622s (num_starts 1; 0.1216s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.121634s (num_starts 1; 0.1216s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.12164s (num_starts 1; 0.1216s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.121666s (num_starts 1; 0.1217s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-addr-no-overflow.: 0.121672s (num_starts 1; 0.1217s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.121682s (num_starts 1; 0.1217s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.121927s (num_starts 1; 0.1219s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.121938s (num_starts 1; 0.1219s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.121944s (num_starts 1; 0.1219s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.121969s (num_starts 1; 0.1220s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;-alloca-region-was-stack.: 0.121972s (num_starts 1; 0.1220s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.121979s (num_starts 1; 0.1220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.122343s (num_starts 2; 0.0612s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.122839s (num_starts 1; 0.1228s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.122852s (num_starts 1; 0.1229s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.12286s (num_starts 1; 0.1229s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.122889s (num_starts 1; 0.1229s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;-alloca-addr-no-overflow.: 0.122895s (num_starts 1; 0.1229s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.122906s (num_starts 1; 0.1229s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);-trivial.: 0.123876s (num_starts 50; 0.0025s/start)
decide_hoare_triple_helper;per-query-type;sp-ml-lb-ineq-houdini-guess.: 0.124079s (num_starts 17; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.124201s (num_starts 3; 0.0414s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);sp-below-isp-houdini-guess.: 0.125346s (num_starts 3; 0.0418s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed.: 0.125884s (num_starts 4; 0.0315s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-addr-eq-houdini-guess;-trivial.: 0.125951s (num_starts 34; 0.0037s/start)
expr_linear_relation_holds::visit.var.: 0.126251s (num_starts 6990; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-addr-eq-houdini-guess.: 0.126739s (num_starts 34; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.127467s (num_starts 1; 0.1275s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.127478s (num_starts 1; 0.1275s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.127485s (num_starts 1; 0.1275s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-below-isp-houdini-guess.: 0.127497s (num_starts 1; 0.1275s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);sp-below-isp-houdini-guess.: 0.127514s (num_starts 1; 0.1275s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.127603s (num_starts 1; 0.1276s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.127614s (num_starts 1; 0.1276s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.127619s (num_starts 1; 0.1276s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.12765s (num_starts 1; 0.1277s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-addr-no-overflow.: 0.127657s (num_starts 1; 0.1277s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.127668s (num_starts 1; 0.1277s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;sp-below-isp-houdini-guess.: 0.128954s (num_starts 2; 0.0645s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.130174s (num_starts 8; 0.0163s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.130919s (num_starts 2; 0.0655s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131055s (num_starts 2; 0.0655s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13174s (num_starts 2; 0.0659s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memeq-;-trivial.: 0.131752s (num_starts 16; 0.0082s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131773s (num_starts 2; 0.0659s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131949s (num_starts 2; 0.0660s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.132026s (num_starts 2; 0.0660s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.134241s (num_starts 2; 0.0671s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.134251s (num_starts 2; 0.0671s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.134291s (num_starts 2; 0.0671s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-region-was-stack.: 0.134296s (num_starts 2; 0.0671s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.134459s (num_starts 1; 0.1345s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.134464s (num_starts 2; 0.0672s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13447s (num_starts 1; 0.1345s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.134473s (num_starts 2; 0.0672s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.134476s (num_starts 1; 0.1345s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.134503s (num_starts 1; 0.1345s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-region-was-stack.: 0.134507s (num_starts 1; 0.1345s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.13451s (num_starts 2; 0.0673s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.134515s (num_starts 1; 0.1345s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-region-was-stack.: 0.134516s (num_starts 2; 0.0673s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.134982s (num_starts 3; 0.0450s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13536s (num_starts 1; 0.1354s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13537s (num_starts 1; 0.1354s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.135376s (num_starts 1; 0.1354s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.135405s (num_starts 1; 0.1354s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;-alloca-addr-no-overflow.: 0.13541s (num_starts 1; 0.1354s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.135419s (num_starts 1; 0.1354s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ub-unsigned;-trivial.: 0.135644s (num_starts 13; 0.0104s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-trivial.: 0.135657s (num_starts 13; 0.0104s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.135726s (num_starts 2; 0.0679s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;mem-allocs-equality.: 0.136569s (num_starts 6; 0.0228s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.136781s (num_starts 2; 0.0684s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.136788s (num_starts 2; 0.0684s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.136824s (num_starts 2; 0.0684s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-no-overflow.: 0.136834s (num_starts 2; 0.0684s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.13911s (num_starts 17; 0.0082s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);abstract-memlabel-asserts-houdini-guess.: 0.139225s (num_starts 3; 0.0464s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.139325s (num_starts 2; 0.0697s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.140386s (num_starts 2; 0.0702s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.140392s (num_starts 2; 0.0702s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.140427s (num_starts 2; 0.0702s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-is-aligned.: 0.140437s (num_starts 2; 0.0702s/start)
smallest_point_cover_arr.recompute_preds_for_points.: 0.140456s (num_starts 2413; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.141669s (num_starts 2; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.141676s (num_starts 2; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.141718s (num_starts 2; 0.0709s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear.: 0.141788s (num_starts 6; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.14346s (num_starts 3; 0.0478s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.143486s (num_starts 3; 0.0478s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.143591s (num_starts 2; 0.0718s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.143603s (num_starts 2; 0.0718s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.143673s (num_starts 2; 0.0718s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.143723s (num_starts 2; 0.0719s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.143731s (num_starts 2; 0.0719s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.143772s (num_starts 2; 0.0719s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.143777s (num_starts 2; 0.0719s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-addr-neq-zero.: 0.143782s (num_starts 2; 0.0719s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.143786s (num_starts 2; 0.0719s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.14386s (num_starts 2; 0.0719s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144282s (num_starts 2; 0.0721s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144293s (num_starts 2; 0.0721s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.144372s (num_starts 2; 0.0722s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;memeq-;-trivial.: 0.144388s (num_starts 20; 0.0072s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.14479s (num_starts 163; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-trivial.: 0.14521s (num_starts 10; 0.0145s/start)
src_tfg_counter_example_translate_on_edge_composition.delta3.: 0.145338s (num_starts 69; 0.0021s/start)
interesting_wp_exprs_apply_trans_funs.: 0.145465s (num_starts 163; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.145615s (num_starts 2; 0.0728s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.145624s (num_starts 2; 0.0728s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-trivial.: 0.145666s (num_starts 3; 0.0486s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.145697s (num_starts 2; 0.0728s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.145717s (num_starts 2; 0.0729s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.145796s (num_starts 2; 0.0729s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.145845s (num_starts 2; 0.0729s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.145856s (num_starts 2; 0.0729s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.145935s (num_starts 2; 0.0730s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146377s (num_starts 2; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146388s (num_starts 2; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146448s (num_starts 2; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146457s (num_starts 2; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.146481s (num_starts 2; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.146493s (num_starts 2; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-alloca-addr-neq-zero.: 0.1465s (num_starts 2; 0.0732s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146882s (num_starts 2; 0.0734s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146915s (num_starts 2; 0.0735s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147223s (num_starts 2; 0.0736s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.147305s (num_starts 2; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147319s (num_starts 2; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.147355s (num_starts 2; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147904s (num_starts 2; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147912s (num_starts 2; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.147956s (num_starts 2; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-addr-no-overflow.: 0.147967s (num_starts 2; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.148368s (num_starts 2; 0.0742s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.14846s (num_starts 2; 0.0742s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-dst-edgecond-implies-src-edgecond.: 0.148523s (num_starts 3; 0.0495s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149134s (num_starts 2; 0.0746s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.149217s (num_starts 2; 0.0746s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.150687s (num_starts 2; 0.0753s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.150712s (num_starts 2; 0.0754s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.151851s (num_starts 2; 0.0759s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.151924s (num_starts 2; 0.0760s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152353s (num_starts 2; 0.0762s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-trivial.: 0.152858s (num_starts 16; 0.0096s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.154249s (num_starts 2; 0.0771s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.154458s (num_starts 2; 0.0772s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.15447s (num_starts 2; 0.0772s/start)
tighten_mem_access_ml.cache_miss.: 0.154698s (num_starts 510; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.15567s (num_starts 6; 0.0259s/start)
tighten_mem_access_ml.: 0.155855s (num_starts 576; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156704s (num_starts 2; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156714s (num_starts 2; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157353s (num_starts 2; 0.0787s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157368s (num_starts 2; 0.0787s/start)
identify_assumed_eqclasses.: 0.15748s (num_starts 70; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157684s (num_starts 1; 0.1577s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157692s (num_starts 1; 0.1577s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.157701s (num_starts 1; 0.1577s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.15778s (num_starts 6; 0.0263s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158015s (num_starts 2; 0.0790s/start)
ldr_decomposition.: 0.15831s (num_starts 435; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.158605s (num_starts 3; 0.0529s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.158633s (num_starts 3; 0.0529s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;local-eq-lsprel-guess-houdini-guess.: 0.15866s (num_starts 6; 0.0264s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158961s (num_starts 1; 0.1590s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158966s (num_starts 1; 0.1590s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv.: 0.158994s (num_starts 1; 0.1590s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;exit.boolbv.: 0.158999s (num_starts 1; 0.1590s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;nonarg-locals-iscontiguous-houdini-guess.: 0.159931s (num_starts 5; 0.0320s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160405s (num_starts 2; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160413s (num_starts 2; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.160457s (num_starts 2; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;-alloca-addr-is-aligned.: 0.16047s (num_starts 2; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;local-sizes-are-equal-houdini-guess.: 0.160631s (num_starts 4; 0.0402s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed.: 0.160778s (num_starts 3; 0.0536s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;lb-signed.: 0.160789s (num_starts 3; 0.0536s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;nonarg-locals-iscontiguous-houdini-guess.: 0.161105s (num_starts 5; 0.0322s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161126s (num_starts 2; 0.0806s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161415s (num_starts 2; 0.0807s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-eq-lsprel-guess-houdini-guess.: 0.161491s (num_starts 6; 0.0269s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161649s (num_starts 2; 0.0808s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned.: 0.161652s (num_starts 3; 0.0539s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161652s (num_starts 2; 0.0808s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ub-unsigned.: 0.161664s (num_starts 3; 0.0539s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);locals-ub-upper-bound-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161728s (num_starts 1; 0.1617s/start)
decide_hoare_triple_helper;per-query-type;locals-ub-upper-bound-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16173s (num_starts 1; 0.1617s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;locals-ub-upper-bound-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161731s (num_starts 1; 0.1617s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);locals-ub-upper-bound-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.161742s (num_starts 1; 0.1617s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);locals-ub-upper-bound-houdini-guess.: 0.161779s (num_starts 1; 0.1618s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;locals-ub-upper-bound-houdini-guess.: 0.161788s (num_starts 1; 0.1618s/start)
decide_hoare_triple_helper;per-query-type;locals-ub-upper-bound-houdini-guess.: 0.161795s (num_starts 1; 0.1618s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);locals-ub-upper-bound-houdini-guess.: 0.161802s (num_starts 1; 0.1618s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);-trivial.: 0.162024s (num_starts 57; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.162146s (num_starts 3; 0.0540s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.162183s (num_starts 3; 0.0541s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.162242s (num_starts 2; 0.0811s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-ub-ineq-houdini-guess.: 0.162365s (num_starts 4; 0.0406s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162771s (num_starts 1; 0.1628s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;dst_edge_composition_proves_false.: 0.162776s (num_starts 3; 0.0543s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.162779s (num_starts 1; 0.1628s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.164405s (num_starts 1; 0.1644s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.164425s (num_starts 1; 0.1644s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.16445s (num_starts 1; 0.1645s/start)
graph_locs_map_update_memlabels_for_memslot_locs_with_memalloc.calling.compute_lr_status_for_expr.: 0.165437s (num_starts 527; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.165577s (num_starts 1; 0.1656s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.165591s (num_starts 1; 0.1656s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.1656s (num_starts 1; 0.1656s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.165632s (num_starts 1; 0.1656s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;-alloca-region-was-stack.: 0.165636s (num_starts 1; 0.1656s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.165644s (num_starts 1; 0.1656s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166162s (num_starts 2; 0.0831s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166735s (num_starts 3; 0.0556s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166746s (num_starts 3; 0.0556s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.166812s (num_starts 3; 0.0556s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ub-unsigned.: 0.166825s (num_starts 3; 0.0556s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16763s (num_starts 3; 0.0559s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167638s (num_starts 3; 0.0559s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.167729s (num_starts 3; 0.0559s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;lb-signed.: 0.167742s (num_starts 3; 0.0559s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16839s (num_starts 1; 0.1684s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168398s (num_starts 1; 0.1684s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv.: 0.168429s (num_starts 1; 0.1684s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;exit.boolbv.: 0.168432s (num_starts 1; 0.1684s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169146s (num_starts 3; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169153s (num_starts 3; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.169233s (num_starts 3; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;lb-signed.: 0.169248s (num_starts 3; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.170107s (num_starts 3; 0.0567s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.170114s (num_starts 3; 0.0567s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.170122s (num_starts 3; 0.0567s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.170127s (num_starts 3; 0.0567s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed.: 0.17018s (num_starts 4; 0.0425s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.170189s (num_starts 3; 0.0567s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.170202s (num_starts 3; 0.0567s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;ub-signed.: 0.170202s (num_starts 3; 0.0567s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;ub-signed.: 0.170209s (num_starts 4; 0.0426s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ub-unsigned.: 0.170216s (num_starts 3; 0.0567s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-.: 0.170912s (num_starts 4; 0.0427s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.17113s (num_starts 3; 0.0570s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.171143s (num_starts 3; 0.0570s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.171758s (num_starts 2; 0.0859s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;mem-allocs-equality.: 0.171822s (num_starts 2; 0.0859s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.172679s (num_starts 8; 0.0216s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172721s (num_starts 1; 0.1727s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172722s (num_starts 1; 0.1727s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172725s (num_starts 1; 0.1727s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172726s (num_starts 1; 0.1727s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.172734s (num_starts 1; 0.1727s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main;dst_edge_composition_proves_false.: 0.172736s (num_starts 1; 0.1727s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.172739s (num_starts 1; 0.1727s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.17349s (num_starts 3; 0.0578s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.173552s (num_starts 3; 0.0579s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.174985s (num_starts 2; 0.0875s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.175004s (num_starts 37066; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;mem-allocs-equality.: 0.175059s (num_starts 2; 0.0875s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175547s (num_starts 3; 0.0585s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.175612s (num_starts 3; 0.0585s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175954s (num_starts 3; 0.0587s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175965s (num_starts 3; 0.0587s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.176042s (num_starts 3; 0.0587s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;ub-signed.: 0.176058s (num_starts 3; 0.0587s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176121s (num_starts 2; 0.0881s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;mem-allocs-equality.: 0.176188s (num_starts 2; 0.0881s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ml-lb-ub-eq-houdini-guess.: 0.176837s (num_starts 3; 0.0589s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.177584s (num_starts 1; 0.1776s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.177584s (num_starts 1; 0.1776s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.177584s (num_starts 1; 0.1776s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate.: 0.177594s (num_starts 1; 0.1776s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;false-predicate.: 0.177598s (num_starts 1; 0.1776s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.177609s (num_starts 2; 0.0888s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.178154s (num_starts 3; 0.0594s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.178217s (num_starts 3; 0.0594s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.178282s (num_starts 1; 0.1783s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.178287s (num_starts 1; 0.1783s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved.: 0.178318s (num_starts 1; 0.1783s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;exit.sp-preserved.: 0.178325s (num_starts 1; 0.1783s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.179953s (num_starts 3; 0.0600s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.179964s (num_starts 3; 0.0600s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.180044s (num_starts 3; 0.0600s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.180076s (num_starts 4; 0.0450s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.180089s (num_starts 4; 0.0450s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;dst-ineq-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.180108s (num_starts 4; 0.0450s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.180123s (num_starts 4; 0.0450s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess.: 0.1802s (num_starts 4; 0.0450s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;dst-ineq-houdini-guess.: 0.180215s (num_starts 4; 0.0451s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);dst-ineq-houdini-guess.: 0.180241s (num_starts 4; 0.0451s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.180268s (num_starts 2; 0.0901s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.180285s (num_starts 2; 0.0901s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;mem-allocs-equality.: 0.180739s (num_starts 3; 0.0602s/start)
invariant_inference_xfer.dst-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.181347s (num_starts 4; 0.0453s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);local-sizes-are-equal-houdini-guess.: 0.181825s (num_starts 4; 0.0455s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);false-predicate.: 0.18203s (num_starts 2; 0.0910s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-eq-houdini-guess.: 0.185582s (num_starts 4; 0.0464s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ml-lb-ub-ineq-houdini-guess.: 0.185832s (num_starts 4; 0.0465s/start)
check_safety.: 0.192485s (num_starts 1; 0.1925s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198571s (num_starts 3; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198586s (num_starts 3; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198615s (num_starts 3; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198628s (num_starts 3; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.198677s (num_starts 3; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.198684s (num_starts 3; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ub-unsigned.: 0.198688s (num_starts 3; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;lb-signed.: 0.198697s (num_starts 3; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198966s (num_starts 3; 0.0663s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198978s (num_starts 3; 0.0663s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.199041s (num_starts 3; 0.0663s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ub-signed.: 0.199057s (num_starts 3; 0.0664s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.200197s (num_starts 3; 0.0667s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.200211s (num_starts 3; 0.0667s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.200273s (num_starts 3; 0.0668s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;ub-unsigned.: 0.200285s (num_starts 3; 0.0668s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.20088s (num_starts 31; 0.0065s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.202557s (num_starts 4; 0.0506s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.202686s (num_starts 3; 0.0676s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.2027s (num_starts 3; 0.0676s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.202766s (num_starts 3; 0.0676s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;lb-signed.: 0.202779s (num_starts 3; 0.0676s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.205984s (num_starts 3; 0.0687s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.205995s (num_starts 3; 0.0687s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.20606s (num_starts 3; 0.0687s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;ub-signed.: 0.206072s (num_starts 3; 0.0687s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.207271s (num_starts 3; 0.0691s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;linear;-trivial.: 0.212853s (num_starts 35; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214037s (num_starts 1; 0.2140s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214044s (num_starts 1; 0.2140s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214048s (num_starts 1; 0.2140s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.214061s (num_starts 1; 0.2141s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;ml-lb-ub-eq-houdini-guess.: 0.214066s (num_starts 1; 0.2141s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.214073s (num_starts 1; 0.2141s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.219339s (num_starts 3; 0.0731s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.220728s (num_starts 1; 0.2207s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.220734s (num_starts 1; 0.2207s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.220736s (num_starts 1; 0.2207s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.220747s (num_starts 1; 0.2207s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;ml-lb-ub-eq-houdini-guess.: 0.220751s (num_starts 1; 0.2208s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.220756s (num_starts 1; 0.2208s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.221925s (num_starts 2; 0.1110s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.222359s (num_starts 3; 0.0741s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.222412s (num_starts 3; 0.0741s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.222431s (num_starts 3; 0.0741s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-trivial.: 0.222435s (num_starts 54; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.22717s (num_starts 3; 0.0757s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);mem-allocs-equality.: 0.227297s (num_starts 3; 0.0758s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;sp-below-isp-houdini-guess.: 0.228877s (num_starts 4; 0.0572s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.229093s (num_starts 1; 0.2291s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1.: 0.230425s (num_starts 3; 0.0768s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.230804s (num_starts 1; 0.2308s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.230805s (num_starts 1; 0.2308s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.230806s (num_starts 1; 0.2308s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);false-predicate.: 0.230814s (num_starts 1; 0.2308s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;false-predicate.: 0.230822s (num_starts 1; 0.2308s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);false-predicate.: 0.23083s (num_starts 1; 0.2308s/start)
populate_locs_potentially_modified_on_edge.: 0.232049s (num_starts 115; 0.0020s/start)
check_node_stability_after_CE_addition.: 0.232163s (num_starts 618; 0.0004s/start)
compute_expr_eqclasses_at_pc.: 0.232653s (num_starts 26; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-ub-ineq-houdini-guess.: 0.232665s (num_starts 6; 0.0388s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 0.234892s (num_starts 20; 0.0117s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.235518s (num_starts 5181; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.23553s (num_starts 4; 0.0589s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-.: 0.23556s (num_starts 4; 0.0589s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.237851s (num_starts 1; 0.2379s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.237854s (num_starts 1; 0.2379s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.237854s (num_starts 1; 0.2379s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);false-predicate.: 0.237864s (num_starts 1; 0.2379s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;false-predicate.: 0.23787s (num_starts 1; 0.2379s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);false-predicate.: 0.23788s (num_starts 1; 0.2379s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.238068s (num_starts 4; 0.0595s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.238688s (num_starts 40; 0.0060s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.239388s (num_starts 6; 0.0399s/start)
populate_branch_affecting_locs.: 0.241227s (num_starts 10; 0.0241s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.244977s (num_starts 19; 0.0129s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;linear.: 0.245023s (num_starts 19; 0.0129s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.245669s (num_starts 1; 0.2457s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.245671s (num_starts 1; 0.2457s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.245674s (num_starts 1; 0.2457s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);false-predicate.: 0.245684s (num_starts 1; 0.2457s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;false-predicate.: 0.245689s (num_starts 1; 0.2457s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);false-predicate.: 0.245697s (num_starts 1; 0.2457s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.246387s (num_starts 20; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;linear.: 0.246433s (num_starts 20; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;local-sizes-are-equal-houdini-guess.: 0.247192s (num_starts 6; 0.0412s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear.: 0.247199s (num_starts 15; 0.0165s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;linear.: 0.247238s (num_starts 15; 0.0165s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ml-lb-ub-eq-houdini-guess.: 0.248325s (num_starts 6; 0.0414s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.249316s (num_starts 51; 0.0049s/start)
check_wfconds_on_edge.Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry.: 0.251138s (num_starts 4; 0.0628s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.255086s (num_starts 773; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.256333s (num_starts 1; 0.2563s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.256345s (num_starts 1; 0.2563s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.256358s (num_starts 1; 0.2564s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.256369s (num_starts 1; 0.2564s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.2567s (num_starts 1; 0.2567s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.256705s (num_starts 1; 0.2567s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.256709s (num_starts 1; 0.2567s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.25672s (num_starts 1; 0.2567s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;ml-lb-ub-eq-houdini-guess.: 0.256723s (num_starts 1; 0.2567s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.256728s (num_starts 1; 0.2567s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memeq-.: 0.258274s (num_starts 5; 0.0517s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);memeq-.: 0.258326s (num_starts 5; 0.0517s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.258852s (num_starts 4; 0.0647s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-.: 0.25889s (num_starts 4; 0.0647s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.260227s (num_starts 6; 0.0434s/start)
cg_add_node.: 0.260326s (num_starts 51; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.261828s (num_starts 1; 0.2618s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.261829s (num_starts 1; 0.2618s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.261829s (num_starts 1; 0.2618s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);false-predicate.: 0.261839s (num_starts 1; 0.2618s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;false-predicate.: 0.261844s (num_starts 1; 0.2618s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);false-predicate.: 0.261853s (num_starts 1; 0.2619s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.264452s (num_starts 6; 0.0441s/start)
check_wfconds_on_edge.Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.271009s (num_starts 4; 0.0678s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.271343s (num_starts 9; 0.0301s/start)
decide_hoare_triple_helper;per-path;Lfor.cond%1%bbentry_L9%1%bbentry;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.272312s (num_starts 1; 0.2723s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.272314s (num_starts 1; 0.2723s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.272319s (num_starts 1; 0.2723s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lfor.cond%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.27232s (num_starts 1; 0.2723s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lfor.cond%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.27235s (num_starts 1; 0.2723s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;dst_edge_composition_proves_false.: 0.272352s (num_starts 1; 0.2724s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.272357s (num_starts 1; 0.2724s/start)
decide_hoare_triple_helper;per-path;Lfor.cond%1%bbentry_L9%1%bbentry;(epsilon).: 0.27236s (num_starts 1; 0.2724s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.273578s (num_starts 2246; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.274474s (num_starts 4; 0.0686s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.274707s (num_starts 4; 0.0687s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.276646s (num_starts 3; 0.0922s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.276673s (num_starts 3; 0.0922s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.276694s (num_starts 3; 0.0922s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.276727s (num_starts 3; 0.0922s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.276741s (num_starts 3; 0.0922s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.276765s (num_starts 3; 0.0923s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.277559s (num_starts 2; 0.1388s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.277568s (num_starts 2; 0.1388s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.279847s (num_starts 2; 0.1399s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.279856s (num_starts 2; 0.1399s/start)
invariant_inference_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.281362s (num_starts 4; 0.0703s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed.: 0.282571s (num_starts 3; 0.0942s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;lb-signed.: 0.282581s (num_starts 3; 0.0942s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.284445s (num_starts 4; 0.0711s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-unsigned.: 0.284642s (num_starts 4; 0.0712s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned.: 0.284793s (num_starts 3; 0.0949s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ub-unsigned.: 0.28481s (num_starts 3; 0.0949s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.284951s (num_starts 2; 0.1425s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.284963s (num_starts 2; 0.1425s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.287867s (num_starts 5; 0.0576s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.289675s (num_starts 5; 0.0579s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.289885s (num_starts 4; 0.0725s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.289903s (num_starts 4; 0.0725s/start)
invariant_inference_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.290014s (num_starts 4; 0.0725s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.291261s (num_starts 4; 0.0728s/start)
invariant_inference_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.29175s (num_starts 4; 0.0729s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.292304s (num_starts 4; 0.0731s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ub-unsigned.: 0.292501s (num_starts 6; 0.0488s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;lb-signed.: 0.292603s (num_starts 6; 0.0488s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.293961s (num_starts 5; 0.0588s/start)
invariant_inference_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.294007s (num_starts 4; 0.0735s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.294115s (num_starts 4; 0.0735s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);-trivial.: 0.294392s (num_starts 62; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.294455s (num_starts 4; 0.0736s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.294498s (num_starts 4; 0.0736s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.29453s (num_starts 4; 0.0736s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.294576s (num_starts 4; 0.0736s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.294595s (num_starts 4; 0.0736s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.29463s (num_starts 4; 0.0737s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.294699s (num_starts 4; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed.: 0.295219s (num_starts 4; 0.0738s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;ub-signed.: 0.295237s (num_starts 4; 0.0738s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.295904s (num_starts 2; 0.1480s/start)
check_wfconds_on_edge.Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.295978s (num_starts 4; 0.0740s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved.: 0.29604s (num_starts 2; 0.1480s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.297443s (num_starts 3; 0.0991s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.297555s (num_starts 3; 0.0992s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.299092s (num_starts 38; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.299273s (num_starts 38; 0.0079s/start)
create_sp_version_relations_lattice_at_pc.: 0.299566s (num_starts 819; 0.0004s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.299625s (num_starts 4; 0.0749s/start)
invariant_inference_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L0%1%allocaI1.: 0.299669s (num_starts 4; 0.0749s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.300569s (num_starts 5; 0.0601s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.30063s (num_starts 5; 0.0601s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memeq-.: 0.300674s (num_starts 5; 0.0601s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);memeq-.: 0.30072s (num_starts 5; 0.0601s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;ub-signed.: 0.30153s (num_starts 7; 0.0431s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.302544s (num_starts 4; 0.0756s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.303673s (num_starts 2; 0.1518s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.304032s (num_starts 1; 0.3040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.304054s (num_starts 1; 0.3041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.304309s (num_starts 1; 0.3043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.304333s (num_starts 1; 0.3043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.305691s (num_starts 1; 0.3057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.305693s (num_starts 1; 0.3057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.305723s (num_starts 1; 0.3057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1;dst_edge_composition_proves_false.: 0.305726s (num_starts 1; 0.3057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-ineq-houdini-guess.: 0.30738s (num_starts 6; 0.0512s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.310078s (num_starts 3; 0.1034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.310098s (num_starts 2; 0.1550s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;-dst-edgecond-implies-src-edgecond.: 0.310144s (num_starts 3; 0.1034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;-dst-edgecond-implies-src-edgecond.: 0.311035s (num_starts 5; 0.0622s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.314186s (num_starts 1; 0.3142s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.314188s (num_starts 1; 0.3142s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2.F3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.314211s (num_starts 1; 0.3142s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2.F3;dst_edge_composition_proves_false.: 0.314215s (num_starts 1; 0.3142s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;local-sizes-are-equal-houdini-guess.: 0.316113s (num_starts 6; 0.0527s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.L0%0%d_L0%0%d.: 0.317893s (num_starts 5; 0.0636s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.318947s (num_starts 6; 0.0532s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear.: 0.319064s (num_starts 7; 0.0456s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.319277s (num_starts 6; 0.0532s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.322868s (num_starts 1; 0.3229s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.322891s (num_starts 1; 0.3229s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.323852s (num_starts 1; 0.3239s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.32387s (num_starts 1; 0.3239s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.323874s (num_starts 1; 0.3239s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.323888s (num_starts 1; 0.3239s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;ml-lb-ub-eq-houdini-guess.: 0.323892s (num_starts 1; 0.3239s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);ml-lb-ub-eq-houdini-guess.: 0.3239s (num_starts 1; 0.3239s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.324403s (num_starts 1; 0.3244s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.324406s (num_starts 1; 0.3244s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.324429s (num_starts 1; 0.3244s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;dst_edge_composition_proves_false.: 0.324432s (num_starts 1; 0.3244s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.327321s (num_starts 2; 0.1637s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv.: 0.327447s (num_starts 2; 0.1637s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.328117s (num_starts 3; 0.1094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.328131s (num_starts 3; 0.1094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.328191s (num_starts 3; 0.1094s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;lb-signed.: 0.328205s (num_starts 3; 0.1094s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.328977s (num_starts 5; 0.0658s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.329065s (num_starts 5; 0.0658s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memeq-.: 0.329115s (num_starts 5; 0.0658s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);memeq-.: 0.329172s (num_starts 5; 0.0658s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.329672s (num_starts 2; 0.1648s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.329703s (num_starts 2; 0.1649s/start)
parse_yices_model.: 0.329767s (num_starts 46; 0.0072s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.330195s (num_starts 5; 0.0660s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.330303s (num_starts 5; 0.0661s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memeq-.: 0.33036s (num_starts 5; 0.0661s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);memeq-.: 0.330426s (num_starts 5; 0.0661s/start)
parse_cvc4_model.: 0.333358s (num_starts 39; 0.0085s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.333587s (num_starts 5; 0.0667s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.333642s (num_starts 5; 0.0667s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.333684s (num_starts 5; 0.0667s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.333743s (num_starts 5; 0.0667s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.333771s (num_starts 5; 0.0668s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.333814s (num_starts 5; 0.0668s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.335074s (num_starts 1; 0.3351s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.335076s (num_starts 1; 0.3351s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E1.F3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.335102s (num_starts 1; 0.3351s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.335103s (num_starts 1; 0.3351s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.335104s (num_starts 1; 0.3351s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.335106s (num_starts 1; 0.3351s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E1.F3;dst_edge_composition_proves_false.: 0.335106s (num_starts 1; 0.3351s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);false-predicate.: 0.335115s (num_starts 1; 0.3351s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;false-predicate.: 0.33512s (num_starts 1; 0.3351s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);false-predicate.: 0.33513s (num_starts 1; 0.3351s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.337918s (num_starts 115; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.338892s (num_starts 5; 0.0678s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.338974s (num_starts 5; 0.0678s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memeq-.: 0.339058s (num_starts 5; 0.0678s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);memeq-.: 0.33912s (num_starts 5; 0.0678s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;linear;-trivial.: 0.340098s (num_starts 56; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.341826s (num_starts 3; 0.1139s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);sp-below-isp-houdini-guess.: 0.341848s (num_starts 3; 0.1139s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.342366s (num_starts 5; 0.0685s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-region-was-stack.: 0.342599s (num_starts 5; 0.0685s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.342601s (num_starts 3; 0.1142s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.342618s (num_starts 3; 0.1142s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.342685s (num_starts 3; 0.1142s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.343409s (num_starts 2; 0.1717s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;ml-lb-ub-eq-houdini-guess.: 0.343492s (num_starts 2; 0.1717s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.345209s (num_starts 31; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.346625s (num_starts 3; 0.1155s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.346639s (num_starts 3; 0.1155s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.346709s (num_starts 3; 0.1156s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;lb-signed.: 0.346725s (num_starts 3; 0.1156s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.347223s (num_starts 5; 0.0694s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-.: 0.347255s (num_starts 8; 0.0434s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.347383s (num_starts 3; 0.1158s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.347394s (num_starts 3; 0.1158s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.347412s (num_starts 5; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.347453s (num_starts 3; 0.1158s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ub-signed.: 0.34747s (num_starts 3; 0.1158s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.34748s (num_starts 5; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memeq-.: 0.347523s (num_starts 5; 0.0695s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);memeq-.: 0.347571s (num_starts 5; 0.0695s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-ineq-houdini-guess.: 0.347588s (num_starts 5; 0.0695s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.348241s (num_starts 3; 0.1161s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.348253s (num_starts 3; 0.1161s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.348317s (num_starts 3; 0.1161s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ub-unsigned.: 0.348331s (num_starts 3; 0.1161s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-.: 0.349095s (num_starts 8; 0.0436s/start)
tfg::get_aliasing_constraints_for_edge.: 0.350323s (num_starts 5753; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.350368s (num_starts 3; 0.1168s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.35038s (num_starts 3; 0.1168s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.350444s (num_starts 3; 0.1168s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;ub-unsigned.: 0.350461s (num_starts 3; 0.1168s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.351752s (num_starts 5; 0.0704s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-iscontiguous-houdini-guess.: 0.352112s (num_starts 5; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.353431s (num_starts 3; 0.1178s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.353445s (num_starts 3; 0.1178s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.353514s (num_starts 3; 0.1178s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;ub-signed.: 0.353528s (num_starts 3; 0.1178s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ub-signed.: 0.35603s (num_starts 6; 0.0593s/start)
get_sprel_map_pair_at_pc.: 0.356325s (num_starts 773; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.356432s (num_starts 5; 0.0713s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-neq-zero.: 0.35667s (num_starts 5; 0.0713s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.358559s (num_starts 5; 0.0717s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.358577s (num_starts 5; 0.0717s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-no-overflow.: 0.358858s (num_starts 5; 0.0718s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);nonarg-locals-isprobably-contiguous-houdini-guess.: 0.358924s (num_starts 5; 0.0718s/start)
copy_masked_mappings.: 0.359962s (num_starts 13670; 0.0000s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363363s (num_starts 1; 0.3634s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363367s (num_starts 1; 0.3634s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363391s (num_starts 1; 0.3634s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363879s (num_starts 2; 0.1819s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;dst_edge_composition_proves_false.: 0.363949s (num_starts 2; 0.1820s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.364492s (num_starts 2; 0.1822s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E3;dst_edge_composition_proves_false.: 0.364558s (num_starts 2; 0.1823s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.36564s (num_starts 5; 0.0731s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.365877s (num_starts 5; 0.0732s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.368525s (num_starts 5; 0.0737s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.368633s (num_starts 5; 0.0737s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-sizes-are-equal-houdini-guess.: 0.368885s (num_starts 5; 0.0738s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);local-eq-lsprel-guess-houdini-guess.: 0.36901s (num_starts 5; 0.0738s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.36951s (num_starts 3; 0.1232s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.369525s (num_starts 3; 0.1232s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.369584s (num_starts 3; 0.1232s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.372651s (num_starts 5; 0.0745s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);ml-lb-ub-eq-houdini-guess.: 0.373036s (num_starts 5; 0.0746s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.374814s (num_starts 6; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.376251s (num_starts 3; 0.1254s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.376266s (num_starts 3; 0.1254s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.376334s (num_starts 3; 0.1254s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI4_L7%1%allocaI2.: 0.379989s (num_starts 1; 0.3800s/start)
invariant_inference_xfer.sp-below-isp.from.Lentry%1%allocaI4_L0%1%allocaI2.: 0.381094s (num_starts 6; 0.0635s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.384309s (num_starts 5; 0.0769s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-alloca-addr-is-aligned.: 0.384568s (num_starts 5; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-.: 0.386307s (num_starts 5; 0.0773s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);memeq-.: 0.38636s (num_starts 5; 0.0773s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;lb-signed.: 0.387164s (num_starts 6; 0.0645s/start)
decide_hoare_triple_helper;per-query-type;memlabel-is-absent-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.388139s (num_starts 6; 0.0647s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L7%1%allocaI2;(Lentry%1%allocaI4_L7%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry).: 0.389469s (num_starts 6; 0.0649s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.389496s (num_starts 3; 0.1298s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.389528s (num_starts 3; 0.1298s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.393409s (num_starts 3; 0.1311s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;ub-unsigned.: 0.393626s (num_starts 6; 0.0656s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.395102s (num_starts 3; 0.1317s/start)
invariant_inference_xfer.memlabel-is-absent.from.L0%0%d_L0%0%d.: 0.395559s (num_starts 7; 0.0565s/start)
get_next_potential_correlations.: 0.397103s (num_starts 16; 0.0248s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.400225s (num_starts 6; 0.0667s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--rodata.from.L0%0%d_L0%0%d.: 0.400769s (num_starts 7; 0.0573s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.402419s (num_starts 6; 0.0671s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--heap.from.L0%0%d_L0%0%d.: 0.403108s (num_starts 7; 0.0576s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.404221s (num_starts 11; 0.0367s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.406876s (num_starts 5; 0.0814s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L1%1%allocaI1;(epsilon).: 0.407222s (num_starts 5; 0.0814s/start)
invariant_inference_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.407318s (num_starts 1; 0.4073s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.2.0.from.L0%0%d_L0%0%d.: 0.407524s (num_starts 7; 0.0582s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.407831s (num_starts 6; 0.0680s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;sp-below-isp-houdini-guess.: 0.408602s (num_starts 6; 0.0681s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.408861s (num_starts 1; 0.4089s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.408863s (num_starts 1; 0.4089s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.408892s (num_starts 1; 0.4089s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2;dst_edge_composition_proves_false.: 0.408895s (num_starts 1; 0.4089s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.408903s (num_starts 71; 0.0058s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2.: 0.410737s (num_starts 1; 0.4107s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.411147s (num_starts 2; 0.2056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.411155s (num_starts 2; 0.2056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.411196s (num_starts 2; 0.2056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B3;dst_edge_composition_proves_false.: 0.411202s (num_starts 2; 0.2056s/start)
invariant_inference_xfer.memory-equality-memlabel-mem--symbol.1.0.from.L0%0%d_L0%0%d.: 0.416422s (num_starts 7; 0.0595s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;memeq-.: 0.416993s (num_starts 10; 0.0417s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-geq-sp;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.419604s (num_starts 5; 0.0839s/start)
collect_assumes_around_edge.: 0.419771s (num_starts 70; 0.0060s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-geq-sp.: 0.41988s (num_starts 5; 0.0840s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;memeq-.: 0.421099s (num_starts 10; 0.0421s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.422666s (num_starts 68; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.424661s (num_starts 6; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.424728s (num_starts 6; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.424776s (num_starts 6; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.424856s (num_starts 6; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.424885s (num_starts 6; 0.0708s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.424936s (num_starts 6; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;memeq-.: 0.424998s (num_starts 10; 0.0425s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.428805s (num_starts 4; 0.1072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.429228s (num_starts 4; 0.1073s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.4301s (num_starts 3; 0.1434s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;dst_edge_composition_proves_false.: 0.430195s (num_starts 3; 0.1434s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.430606s (num_starts 1; 0.4306s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.430608s (num_starts 1; 0.4306s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.43064s (num_starts 1; 0.4306s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;dst_edge_composition_proves_false.: 0.430644s (num_starts 1; 0.4306s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.431234s (num_starts 2; 0.2156s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.431255s (num_starts 2; 0.2156s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.431297s (num_starts 2; 0.2156s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved.: 0.431375s (num_starts 2; 0.2157s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;exit.sp-preserved.: 0.431386s (num_starts 2; 0.2157s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.sp-preserved.: 0.431409s (num_starts 2; 0.2157s/start)
decide_hoare_triple_helper;per-query-type;expr-group-region_agrees_with_memlabel-houdini-guess;-trivial.: 0.432245s (num_starts 77; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.433324s (num_starts 2; 0.2167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.433348s (num_starts 2; 0.2167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;memeq-.: 0.434715s (num_starts 24; 0.0181s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-iscontiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.4352s (num_starts 6; 0.0725s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.43781s (num_starts 5; 0.0876s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.438672s (num_starts 2; 0.2193s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.438687s (num_starts 2; 0.2193s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.438695s (num_starts 2; 0.2193s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.439967s (num_starts 6; 0.0733s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.44005s (num_starts 6; 0.0733s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-isprobably-contiguous-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.440739s (num_starts 6; 0.0735s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.442042s (num_starts 7; 0.0631s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.44337s (num_starts 1; 0.4434s/start)
get_masked_array_constant.: 0.446842s (num_starts 254; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.44718s (num_starts 5; 0.0894s/start)
decide_hoare_triple_helper;per-query-type;expr-group-region_agrees_with_memlabel-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.447199s (num_starts 5; 0.0894s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;expr-group-region_agrees_with_memlabel-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.447228s (num_starts 5; 0.0894s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.447248s (num_starts 5; 0.0894s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.447628s (num_starts 3; 0.1492s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.44765s (num_starts 3; 0.1492s/start)
decide_hoare_triple_helper;per-query-type;local-eq-lsprel-guess-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.44805s (num_starts 6; 0.0747s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ml-lb-ub-eq-houdini-guess.: 0.449646s (num_starts 6; 0.0749s/start)
evaluate_memmask.: 0.456855s (num_starts 254; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.457978s (num_starts 2; 0.2290s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.457998s (num_starts 2; 0.2290s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.458052s (num_starts 2; 0.2290s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;dst_edge_composition_proves_false.: 0.45806s (num_starts 2; 0.2290s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.458396s (num_starts 8; 0.0573s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.458428s (num_starts 8; 0.0573s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.45848s (num_starts 8; 0.0573s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.461363s (num_starts 24807; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;memeq-.: 0.470546s (num_starts 16; 0.0294s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.471087s (num_starts 5961; 0.0001s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.471336s (num_starts 5; 0.0943s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L4%1%allocaI1;(epsilon).: 0.471711s (num_starts 5; 0.0943s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2.: 0.475306s (num_starts 1; 0.4753s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.475311s (num_starts 6; 0.0792s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.475422s (num_starts 6; 0.0792s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.475492s (num_starts 6; 0.0792s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.475575s (num_starts 6; 0.0793s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.478089s (num_starts 1; 0.4781s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.478099s (num_starts 1; 0.4781s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);linear.: 0.478132s (num_starts 1; 0.4781s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);linear.: 0.478143s (num_starts 1; 0.4781s/start)
lr_status_meet.: 0.479007s (num_starts 191568; 0.0000s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.481073s (num_starts 9225; 0.0001s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.482471s (num_starts 5961; 0.0001s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.48654s (num_starts 5; 0.0973s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L3%1%allocaI1;(epsilon).: 0.486915s (num_starts 5; 0.0974s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.488305s (num_starts 7; 0.0698s/start)
bv_const_ref_map2expr_map.: 0.488456s (num_starts 5596; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;local-eq-lsprel-guess-houdini-guess.: 0.488924s (num_starts 20; 0.0244s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.489761s (num_starts 50; 0.0098s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2.: 0.49048s (num_starts 1; 0.4905s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.492343s (num_starts 7; 0.0703s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.492371s (num_starts 7; 0.0703s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.494235s (num_starts 8; 0.0618s/start)
decide_hoare_triple_helper;per-query-type;memlabel-is-absent-houdini-guess.: 0.495817s (num_starts 38; 0.0130s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.49944s (num_starts 8; 0.0624s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.50481s (num_starts 6; 0.0841s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.5084s (num_starts 20; 0.0254s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4;linear.: 0.508452s (num_starts 20; 0.0254s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.512422s (num_starts 14; 0.0366s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear.: 0.514593s (num_starts 15; 0.0343s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E4;linear.: 0.514633s (num_starts 15; 0.0343s/start)
src_tfg_counter_example_translate_on_edge_composition.delta1.: 0.514846s (num_starts 384; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);memeq-.: 0.521443s (num_starts 12; 0.0435s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.523001s (num_starts 8; 0.0654s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.530293s (num_starts 5; 0.1061s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-iscontiguous-houdini-guess.: 0.530562s (num_starts 26; 0.0204s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L6%1%allocaI1;(epsilon).: 0.530672s (num_starts 5; 0.1061s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.532949s (num_starts 9; 0.0592s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.53306s (num_starts 60; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.533071s (num_starts 1; 0.5331s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.533073s (num_starts 1; 0.5331s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.533105s (num_starts 1; 0.5331s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;dst_edge_composition_proves_false.: 0.533108s (num_starts 1; 0.5331s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.533443s (num_starts 9; 0.0593s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2.: 0.534133s (num_starts 1; 0.5341s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.541432s (num_starts 1; 0.5414s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.541434s (num_starts 1; 0.5414s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.541465s (num_starts 1; 0.5415s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;dst_edge_composition_proves_false.: 0.541468s (num_starts 1; 0.5415s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.544079s (num_starts 625; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.545744s (num_starts 6; 0.0910s/start)
decide_hoare_triple_helper;per-query-type;nonarg-locals-isprobably-contiguous-houdini-guess.: 0.547323s (num_starts 34; 0.0161s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.548477s (num_starts 5; 0.1097s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L7%1%allocaI1;(epsilon).: 0.548877s (num_starts 5; 0.1098s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.550385s (num_starts 6400; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.551127s (num_starts 8; 0.0689s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.551521s (num_starts 6; 0.0919s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2.: 0.552463s (num_starts 1; 0.5525s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;memeq-.: 0.558988s (num_starts 10; 0.0559s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.559517s (num_starts 12; 0.0466s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);lb-signed.: 0.56329s (num_starts 12; 0.0469s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.564765s (num_starts 4; 0.1412s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.564817s (num_starts 4; 0.1412s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.564969s (num_starts 6; 0.0942s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned.: 0.571113s (num_starts 12; 0.0476s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.574503s (num_starts 15; 0.0383s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;ub-unsigned.: 0.574537s (num_starts 15; 0.0383s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.574673s (num_starts 6; 0.0958s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.574919s (num_starts 6; 0.0958s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.578692s (num_starts 4; 0.1447s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-trivial.: 0.585334s (num_starts 69; 0.0085s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.585702s (num_starts 8; 0.0732s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.585748s (num_starts 8; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.586988s (num_starts 20; 0.0293s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);-trivial.: 0.590075s (num_starts 108; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.591637s (num_starts 6; 0.0986s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 0.591845s (num_starts 6; 0.0986s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.591926s (num_starts 18; 0.0329s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;linear;-trivial.: 0.595833s (num_starts 81; 0.0074s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-signed.: 0.598767s (num_starts 16; 0.0374s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.603355s (num_starts 10; 0.0603s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.605737s (num_starts 9; 0.0673s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.606029s (num_starts 10; 0.0606s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.606079s (num_starts 10; 0.0606s/start)
invariant_inference_xfer.sp-below-isp.from.L0%0%d_L0%0%d.: 0.613351s (num_starts 7; 0.0876s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);-trivial.: 0.61752s (num_starts 100; 0.0062s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.618843s (num_starts 3; 0.2063s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.623199s (num_starts 4; 0.1558s/start)
ce_perform_memory_fuzzing.: 0.63321s (num_starts 303; 0.0021s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L3%1%allocaI1;(Lentry%1%allocaI3_L3%1%allocaI1=>Lentry%1%allocaI4_L3%1%allocaI2).: 0.648807s (num_starts 10; 0.0649s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2.E2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.657181s (num_starts 20; 0.0329s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D2;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.658431s (num_starts 20; 0.0329s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2;linear.: 0.658498s (num_starts 20; 0.0329s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.660469s (num_starts 5961; 0.0001s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d).: 0.668268s (num_starts 10; 0.0668s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 0.669586s (num_starts 25; 0.0268s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.672681s (num_starts 10; 0.0673s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.673419s (num_starts 11; 0.0612s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.675528s (num_starts 2; 0.3378s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.67556s (num_starts 2; 0.3378s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);linear.: 0.675631s (num_starts 2; 0.3378s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);linear.: 0.675654s (num_starts 2; 0.3378s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.677423s (num_starts 10; 0.0677s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.677473s (num_starts 10; 0.0677s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;memeq-.: 0.683332s (num_starts 24; 0.0285s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.683628s (num_starts 5; 0.1367s/start)
decide_hoare_triple_helper;per-query-type;memeq-;-trivial.: 0.685063s (num_starts 116; 0.0059s/start)
invariant_inference_xfer.mem-allocs-equality.from.L0%0%d_L0%0%d.: 0.699316s (num_starts 7; 0.0999s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.705146s (num_starts 3940; 0.0002s/start)
pth_collect_simplified_preds_using_atom_func.: 0.71667s (num_starts 3808; 0.0002s/start)
tfg_run_pointsto_analysis.: 0.71954s (num_starts 1; 0.7195s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.721383s (num_starts 10; 0.0721s/start)
query:convert_to_z3.: 0.722704s (num_starts 15666; 0.0000s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);-trivial.: 0.722882s (num_starts 184; 0.0039s/start)
decide_hoare_triple_helper;per-query-type;exit.sp-preserved;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.727159s (num_starts 4; 0.1818s/start)
decide_hoare_triple_helper;per-query-type;exit.sp-preserved.: 0.727429s (num_starts 4; 0.1819s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.731798s (num_starts 10; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D3;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 0.739014s (num_starts 20; 0.0370s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D3;linear.: 0.739075s (num_starts 20; 0.0370s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.739919s (num_starts 2; 0.3700s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.739951s (num_starts 2; 0.3700s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);linear.: 0.740009s (num_starts 2; 0.3700s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);linear.: 0.740031s (num_starts 2; 0.3700s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-neq-zero;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.740345s (num_starts 10; 0.0740s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-neq-zero.: 0.740787s (num_starts 10; 0.0741s/start)
create_new_corr_graph_edge.new_node.: 0.757905s (num_starts 50; 0.0152s/start)
decide_hoare_triple_helper;per-query-type;local-sizes-are-equal-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.771957s (num_starts 10; 0.0772s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.773805s (num_starts 4; 0.1935s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.773834s (num_starts 4; 0.1935s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.773847s (num_starts 4; 0.1935s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D2.E2;linear.: 0.774854s (num_starts 34; 0.0228s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.780167s (num_starts 697; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned.: 0.781473s (num_starts 7; 0.1116s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;ub-unsigned.: 0.781492s (num_starts 7; 0.1116s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);ub-unsigned.: 0.781528s (num_starts 7; 0.1116s/start)
create_new_corr_graph_edge.: 0.782797s (num_starts 70; 0.0112s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.783007s (num_starts 7; 0.1119s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.784891s (num_starts 773; 0.0010s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 0.809099s (num_starts 3; 0.2697s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-is-aligned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.811356s (num_starts 10; 0.0811s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-is-aligned.: 0.811838s (num_starts 10; 0.0812s/start)
collect_assumes_around_path_helper.: 0.81241s (num_starts 1911; 0.0004s/start)
get_unrolled_paths_from.: 0.817495s (num_starts 124; 0.0066s/start)
graph_with_paths::collect_assumes_around_path.: 0.818679s (num_starts 1911; 0.0004s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.819235s (num_starts 4; 0.2048s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.820894s (num_starts 2; 0.4104s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.820921s (num_starts 2; 0.4105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.820936s (num_starts 2; 0.4105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv.: 0.82101s (num_starts 2; 0.4105s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;exit.boolbv.: 0.821017s (num_starts 2; 0.4105s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);exit.boolbv.: 0.821034s (num_starts 2; 0.4105s/start)
cg_with_dst_ml_check::get_aliasing_constraints_for_edge.: 0.823074s (num_starts 44; 0.0187s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.823834s (num_starts 4; 0.2060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;memeq-.: 0.825365s (num_starts 15; 0.0550s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.834438s (num_starts 38; 0.0220s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-ineq-houdini-guess.: 0.836612s (num_starts 34; 0.0246s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.84173s (num_starts 25029; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear.: 0.842021s (num_starts 13; 0.0648s/start)
counter_example_falsifies_preds.: 0.846919s (num_starts 1089; 0.0008s/start)
counter_example_satisfies_preds.: 0.85024s (num_starts 8513; 0.0001s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L6%1%allocaI1;(Lentry%1%allocaI3_L6%1%allocaI1=>Lentry%1%allocaI4_L6%1%allocaI2).: 0.851665s (num_starts 11; 0.0774s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.851962s (num_starts 15; 0.0568s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);-trivial.: 0.855106s (num_starts 136; 0.0063s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.855888s (num_starts 3; 0.2853s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.855963s (num_starts 3; 0.2853s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.858049s (num_starts 12; 0.0715s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.865363s (num_starts 24807; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);memeq-.: 0.867453s (num_starts 20; 0.0434s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.876137s (num_starts 4; 0.2190s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.884723s (num_starts 8; 0.1106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);linear.: 0.88919s (num_starts 17; 0.0523s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);linear.: 0.889306s (num_starts 17; 0.0523s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.892432s (num_starts 12; 0.0744s/start)
decide_hoare_triple_helper;per-query-type;local-sizes-are-equal-houdini-guess.: 0.892549s (num_starts 34; 0.0263s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 0.893005s (num_starts 12; 0.0744s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L7%1%allocaI1.: 0.893187s (num_starts 1; 0.8932s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.894056s (num_starts 12; 0.0745s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 0.894638s (num_starts 12; 0.0746s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.897731s (num_starts 12; 0.0748s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 0.89833s (num_starts 12; 0.0749s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L6%1%allocaI1.: 0.903126s (num_starts 1; 0.9031s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L4%1%allocaI1;(Lentry%1%allocaI3_L4%1%allocaI1=>Lentry%1%allocaI4_L4%1%allocaI2).: 0.9038s (num_starts 11; 0.0822s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.904504s (num_starts 10; 0.0905s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear.: 0.90758s (num_starts 59; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.915523s (num_starts 12; 0.0763s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L3%1%allocaI1.: 0.920185s (num_starts 1; 0.9202s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.945689s (num_starts 177; 0.0053s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-no-overflow;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.949658s (num_starts 10; 0.0950s/start)
decide_hoare_triple_helper;per-query-type;-alloca-addr-no-overflow.: 0.950161s (num_starts 10; 0.0950s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.960208s (num_starts 1; 0.9602s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.960222s (num_starts 1; 0.9602s/start)
decide_hoare_triple_helper;per-query-type;-alloca-region-was-stack;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.964591s (num_starts 10; 0.0965s/start)
decide_hoare_triple_helper;per-query-type;-alloca-region-was-stack.: 0.965017s (num_starts 10; 0.0965s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);linear.: 0.969168s (num_starts 7; 0.1385s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);linear.: 0.969206s (num_starts 7; 0.1385s/start)
check_wfconds_on_edge.Lfor.cond2%1%bbentry_L15%1%bbentry=>E0%0%d_E0%0%d.: 0.969862s (num_starts 2; 0.4849s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;expr-group-region_agrees_with_memlabel-houdini-guess.: 0.991265s (num_starts 20; 0.0496s/start)
add_fresh_counterexample_at_pc_and_propagate.Lfor.cond2%1%bbentry_L9%1%bbentry.inductive-invariants.: 1.01558s (num_starts 66; 0.0154s/start)
decide_hoare_triple_helper;per-query-type;mem-allocs-equality;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.0316s (num_starts 12; 0.0860s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 1.03655s (num_starts 5853; 0.0002s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 1.04524s (num_starts 5853; 0.0002s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI4_L0%1%allocaI2.inductive-invariants.: 1.05727s (num_starts 38; 0.0278s/start)
predicate_canonicalized.: 1.06439s (num_starts 7853; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.06784s (num_starts 12; 0.0890s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);lb-signed.: 1.06842s (num_starts 12; 0.0890s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.07201s (num_starts 12; 0.0893s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-signed.: 1.07261s (num_starts 12; 0.0894s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L4%1%allocaI1.: 1.07335s (num_starts 1; 1.0734s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.0848s (num_starts 7; 0.1550s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08606s (num_starts 10; 0.1086s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08612s (num_starts 10; 0.1086s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 1.08857s (num_starts 4; 0.2721s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08969s (num_starts 12; 0.0908s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);ub-unsigned.: 1.09029s (num_starts 12; 0.0909s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear.: 1.10915s (num_starts 17; 0.0652s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 1.11249s (num_starts 4; 0.2781s/start)
query:convert_from_z3.: 1.14318s (num_starts 15666; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;mem-allocs-equality.: 1.14802s (num_starts 39; 0.0294s/start)
decide_hoare_triple_helper;per-query-type;exit.boolbv;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.14824s (num_starts 4; 0.2871s/start)
decide_hoare_triple_helper;per-query-type;exit.boolbv.: 1.14846s (num_starts 4; 0.2871s/start)
decide_hoare_triple_helper;per-query-type;sp-below-isp-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.15782s (num_starts 10; 0.1158s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4.D4;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 1.15884s (num_starts 20; 0.0579s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4.D4;linear.: 1.15891s (num_starts 20; 0.0579s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.16257s (num_starts 11; 0.1057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.16901s (num_starts 9; 0.1299s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L0%1%allocaI1.: 1.17179s (num_starts 4; 0.2929s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.18255s (num_starts 4; 0.2956s/start)
compute_lr_status_for_expr.: 1.18584s (num_starts 8718; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20259s (num_starts 6; 0.2004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20263s (num_starts 6; 0.2004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20265s (num_starts 6; 0.2004s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI4_L0%1%allocaI2.: 1.21496s (num_starts 6; 0.2025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-unsigned.: 1.22423s (num_starts 12; 0.1020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;ub-unsigned.: 1.22426s (num_starts 12; 0.1020s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);ub-unsigned.: 1.22431s (num_starts 12; 0.1020s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L1%1%allocaI1;(Lentry%1%allocaI3_L1%1%allocaI1=>Lentry%1%allocaI4_L1%1%allocaI2).: 1.24252s (num_starts 16; 0.0777s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.2521s (num_starts 4; 0.3130s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.27218s (num_starts 12; 0.1060s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.27275s (num_starts 10; 0.1273s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.27292s (num_starts 10; 0.1273s/start)
decide_hoare_triple_helper;per-query-type;sp-below-isp-houdini-guess.: 1.28033s (num_starts 38; 0.0337s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d).: 1.29884s (num_starts 10; 0.1299s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;expr-group-region_agrees_with_memlabel-houdini-guess.: 1.3018s (num_starts 17; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A4;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);linear.: 1.31221s (num_starts 15; 0.0875s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);linear.: 1.31235s (num_starts 15; 0.0875s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);-trivial.: 1.31314s (num_starts 176; 0.0075s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 1.32148s (num_starts 24807; 0.0001s/start)
ldr_decompose_and_linear_solve.: 1.3587s (num_starts 435; 0.0031s/start)
bv_linear_solve.: 1.39286s (num_starts 435; 0.0032s/start)
query:bv_solve.: 1.39512s (num_starts 435; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.41067s (num_starts 10; 0.1411s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.41073s (num_starts 10; 0.1411s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.41076s (num_starts 10; 0.1411s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L1%1%allocaI1.: 1.42746s (num_starts 1; 1.4275s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.46351s (num_starts 15; 0.0976s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);expr-group-region_agrees_with_memlabel-houdini-guess.: 1.46452s (num_starts 15; 0.0976s/start)
ce_reconcile_sorts.: 1.46486s (num_starts 281; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B2.C4;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear.: 1.46877s (num_starts 33; 0.0445s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B2.C4;linear.: 1.46884s (num_starts 33; 0.0445s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);linear.: 1.46899s (num_starts 33; 0.0445s/start)
add_fresh_counterexample_at_pc_and_propagate.Lentry%1%allocaI3_L0%1%allocaI1.inductive-invariants.: 1.47885s (num_starts 18; 0.0822s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 1.48428s (num_starts 127; 0.0117s/start)
corr_graph::get_aliasing_constraints_for_edge.: 1.48465s (num_starts 127; 0.0117s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.48884s (num_starts 6; 0.2481s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 1.50898s (num_starts 887; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.53907s (num_starts 10; 0.1539s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.53921s (num_starts 10; 0.1539s/start)
invariant_inference_xfer.src-branches-const-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 1.55252s (num_starts 8; 0.1941s/start)
parse_z3_model_neo.: 1.55913s (num_starts 196; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);linear.: 1.5606s (num_starts 14; 0.1115s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);linear.: 1.56071s (num_starts 14; 0.1115s/start)
bv_solve_returning_intermediate_structures.: 1.56218s (num_starts 435; 0.0036s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 1.58734s (num_starts 79; 0.0201s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.60104s (num_starts 11; 0.1455s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.6012s (num_starts 11; 0.1456s/start)
check_wfconds_on_edge.Lfor.cond2%1%bbentry_L9%1%bbentry=>E0%0%d_E0%0%d.: 1.60542s (num_starts 2; 0.8027s/start)
lhs_set_sort.: 1.60861s (num_starts 773; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.61392s (num_starts 10; 0.1614s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear.: 1.63101s (num_starts 18; 0.0906s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.63912s (num_starts 10; 0.1639s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A3;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);linear.: 1.64017s (num_starts 18; 0.0911s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);linear.: 1.64033s (num_starts 18; 0.0911s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.64129s (num_starts 8; 0.2052s/start)
tfg_asm_t::tfg_postprocess_after_pointsto_analysis.: 1.66135s (num_starts 1; 1.6614s/start)
counter_example_evaluate_preds.: 1.67802s (num_starts 9602; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear.: 1.6845s (num_starts 22; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 1.70271s (num_starts 69; 0.0247s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 1.71793s (num_starts 28; 0.0614s/start)
segment_memory_and_perform_commonMEM_optimization.: 1.72273s (num_starts 773; 0.0022s/start)
bvsolve_cache_query.miss1.: 1.73725s (num_starts 435; 0.0040s/start)
bvsolve_cache_query.: 1.74574s (num_starts 435; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.7739s (num_starts 14; 0.1267s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.77414s (num_starts 14; 0.1267s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.80722s (num_starts 25; 0.0723s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A5;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);linear.: 1.80961s (num_starts 19; 0.0952s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);linear.: 1.8098s (num_starts 19; 0.0953s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(epsilon).: 1.80988s (num_starts 26; 0.0696s/start)
check_wfconds_on_edge.Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2.: 1.82821s (num_starts 5; 0.3656s/start)
tfg_postprocess_after_pointsto_analysis.: 1.84237s (num_starts 2; 0.9212s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.86359s (num_starts 11; 0.1694s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 1.86397s (num_starts 1932; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 1.91653s (num_starts 20; 0.0958s/start)
invariant_inference_xfer.expr-group-region_agrees_with_memlabel.from.L0%0%d_L0%0%d.: 1.95407s (num_starts 7; 0.2792s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);false-predicate;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.96223s (num_starts 9; 0.2180s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.96225s (num_starts 9; 0.2180s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;false-predicate;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.96228s (num_starts 9; 0.2180s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);false-predicate;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.96231s (num_starts 9; 0.2180s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.97316s (num_starts 12; 0.1644s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.97323s (num_starts 12; 0.1644s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.97329s (num_starts 12; 0.1644s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);pred-type-unknown;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.97335s (num_starts 12; 0.1644s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.9971s (num_starts 17; 0.1175s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.99739s (num_starts 17; 0.1175s/start)
compute_new_lr_status_on_locs.: 1.99827s (num_starts 625; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);pred-type-unknown.: 2.00631s (num_starts 13; 0.1543s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;pred-type-unknown.: 2.00635s (num_starts 13; 0.1543s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 2.0064s (num_starts 13; 0.1543s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);pred-type-unknown.: 2.00644s (num_starts 13; 0.1543s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.01279s (num_starts 12; 0.1677s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A19.B4.C3;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);false-predicate.: 2.01813s (num_starts 10; 0.2018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;false-predicate.: 2.01817s (num_starts 10; 0.2018s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);false-predicate.: 2.01823s (num_starts 10; 0.2018s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.03683s (num_starts 10; 0.2037s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 2.03735s (num_starts 10; 0.2037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A6;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);linear.: 2.039s (num_starts 22; 0.0927s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);linear.: 2.03921s (num_starts 22; 0.0927s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A4;linear.: 2.05228s (num_starts 17; 0.1207s/start)
solve_for_bv_points.: 2.07285s (num_starts 435; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.07923s (num_starts 12; 0.1733s/start)
guarded_predicate_set_and.: 2.09762s (num_starts 773; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A3;linear.: 2.11836s (num_starts 19; 0.1115s/start)
collect_inductive_preds_around_path.: 2.12869s (num_starts 1848; 0.0012s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 2.16846s (num_starts 386; 0.0056s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.17372s (num_starts 17; 0.1279s/start)
gen_pred_from_coeff_row.simplify.: 2.18085s (num_starts 5596; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-eq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.18197s (num_starts 16; 0.1364s/start)
reconcile_memvar_using_constituents.: 2.19599s (num_starts 1502; 0.0015s/start)
reconcile_segmentation_in_counter_example.: 2.21569s (num_starts 204; 0.0109s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L7%1%allocaI1;(Lentry%1%allocaI3_L7%1%allocaI1=>Lentry%1%allocaI4_L7%1%allocaI2).: 2.25865s (num_starts 41; 0.0551s/start)
read_counter_examples_from_channel.: 2.27848s (num_starts 118; 0.0193s/start)
decide_hoare_triple_helper;per-query-type;ml-lb-ub-eq-houdini-guess.: 2.28177s (num_starts 33; 0.0691s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.30287s (num_starts 15; 0.1535s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 2.31498s (num_starts 773; 0.0030s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 2.32457s (num_starts 129; 0.0180s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.34571s (num_starts 23; 0.1020s/start)
propagate_nodece_across_edge.: 2.34775s (num_starts 363; 0.0065s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lentry%1%allocaI4_L0%1%allocaI2.: 2.40464s (num_starts 6; 0.4008s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 2.42779s (num_starts 177; 0.0137s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 2.44927s (num_starts 3924; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.44959s (num_starts 16; 0.1531s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A5;linear.: 2.48531s (num_starts 21; 0.1183s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.49937s (num_starts 11; 0.2272s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 2.50079s (num_starts 435; 0.0057s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.50612s (num_starts 30; 0.0835s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 2.51652s (num_starts 773; 0.0033s/start)
collect_aliasing_constraints_around_path_helper.: 2.52154s (num_starts 794; 0.0032s/start)
collect_aliasing_constraints_around_path.: 2.52242s (num_starts 452; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A2;linear.: 2.52983s (num_starts 21; 0.1205s/start)
query:simplify-z3.: 2.55444s (num_starts 31332; 0.0001s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.5697s (num_starts 19; 0.1352s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L15%1%bbentry;(epsilon).: 2.57087s (num_starts 19; 0.1353s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.57329s (num_starts 16; 0.1608s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.57505s (num_starts 31; 0.0831s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 2.59612s (num_starts 1324; 0.0020s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 2.59653s (num_starts 57; 0.0456s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);linear.: 2.61508s (num_starts 37; 0.0707s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 2.67764s (num_starts 62; 0.0432s/start)
put_smtlib_string_in_file.: 2.69372s (num_starts 1336; 0.0020s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.73519s (num_starts 26; 0.1052s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L4%1%allocaI1).: 2.79702s (num_starts 38; 0.0736s/start)
apply_mask_and_overlay_array_constant.: 2.84703s (num_starts 3924; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.85322s (num_starts 20; 0.1427s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 2.85479s (num_starts 773; 0.0037s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.89862s (num_starts 25; 0.1159s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A6;linear.: 2.92832s (num_starts 39; 0.0751s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19.B4.C3;linear.: 2.96461s (num_starts 53; 0.0559s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.97235s (num_starts 40; 0.0743s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.99666s (num_starts 24; 0.1249s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 3.00628s (num_starts 9660; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.01955s (num_starts 26; 0.1161s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry).: 3.0252s (num_starts 75; 0.0403s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.02731s (num_starts 19; 0.1593s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.03222s (num_starts 20; 0.1516s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L1%1%allocaI1).: 3.03322s (num_starts 35; 0.0867s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L15%1%bbentry).: 3.07521s (num_starts 207; 0.0149s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L3%1%allocaI1).: 3.07715s (num_starts 40; 0.0769s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);linear.: 3.11312s (num_starts 46; 0.0677s/start)
invariant_inference_xfer.expr-group-bvs.from.Lfor.cond2%1%bbentry_L9%1%bbentry.: 3.13147s (num_starts 4; 0.7829s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 3.2142s (num_starts 80; 0.0402s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 3.26889s (num_starts 1932; 0.0017s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.30922s (num_starts 34; 0.0973s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.3429s (num_starts 12; 0.2786s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 3.40115s (num_starts 13; 0.2616s/start)
graph_edge_composition_get_simplified_edge_cond.: 3.41528s (num_starts 34637; 0.0001s/start)
counter_example_translate_on_edge_composition_helper.: 3.46993s (num_starts 5623; 0.0006s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 3.51159s (num_starts 17; 0.2066s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.54114s (num_starts 31; 0.1142s/start)
invariant_inference_xfer.src-branches-const-ineq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 3.54428s (num_starts 16; 0.2215s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L6%1%allocaI1).: 3.60239s (num_starts 43; 0.0838s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);linear.: 3.61996s (num_starts 89; 0.0407s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.63185s (num_starts 23; 0.1579s/start)
tfg_run_pointsto_analysis_asm.: 3.66497s (num_starts 1; 3.6650s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.67305s (num_starts 34; 0.1080s/start)
decide_hoare_triple_helper;per-query-type;memeq-;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.732s (num_starts 51; 0.0732s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L7%1%allocaI1).: 3.74605s (num_starts 46; 0.0814s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.93183s (num_starts 26; 0.1512s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.93225s (num_starts 26; 0.1512s/start)
expr_substitute_using_available_exprs_submap.: 3.96485s (num_starts 6231; 0.0006s/start)
gen_pred_from_coeff_row.: 4.03651s (num_starts 5596; 0.0007s/start)
compute_preds_for_bv_points.: 4.12056s (num_starts 325; 0.0127s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 4.12219s (num_starts 381; 0.0108s/start)
invariant_inference_xfer.expr-group-bvs.from.Lfor.cond2%1%bbentry_L15%1%bbentry.: 4.15439s (num_starts 8; 0.5193s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.18259s (num_starts 38; 0.1101s/start)
liveness_analysis_conservative::xfer_and_meet.: 4.19559s (num_starts 412; 0.0102s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A19;linear.: 4.22948s (num_starts 104; 0.0407s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;main.A1;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);linear.: 4.23246s (num_starts 64; 0.0661s/start)
decide_hoare_triple_helper;per-path-and-query-type;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);linear.: 4.23296s (num_starts 64; 0.0661s/start)
populate_loc_liveness.: 4.24106s (num_starts 10; 0.4241s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>Lentry%1%allocaI3_L0%1%allocaI1).: 4.34767s (num_starts 95; 0.0458s/start)
ftmap_run_pointsto_analysis.: 4.38439s (num_starts 2; 2.1922s/start)
tfg_populate_structs_after_ssa_construction.: 4.42128s (num_starts 2; 2.2106s/start)
decide_hoare_triple_helper;per-query-type;memeq-.: 4.42132s (num_starts 167; 0.0265s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 4.50072s (num_starts 56; 0.0804s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 4.50626s (num_starts 2; 2.2531s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.51072s (num_starts 32; 0.1410s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.67633s (num_starts 51; 0.0917s/start)
decide_hoare_triple_helper;per-query-type;expr-group-region_agrees_with_memlabel-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.89527s (num_starts 54; 0.0907s/start)
check_dst_mls.: 4.98831s (num_starts 1; 4.9883s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 5.15358s (num_starts 73; 0.0706s/start)
invariant_inference_xfer.ml-lb-ub-eq.from.L0%0%d_L0%0%d.: 5.1785s (num_starts 7; 0.7398s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 5.2452s (num_starts 625; 0.0084s/start)
decide_hoare_triple_helper;-trivial.: 5.5133s (num_starts 1015; 0.0054s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(Lfor.cond2%1%bbentry_L9%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry).: 5.53816s (num_starts 187; 0.0296s/start)
edge_composition_apply_trans_funs_on_pred.: 5.73552s (num_starts 1696; 0.0034s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 5.73642s (num_starts 1932; 0.0030s/start)
decide_hoare_triple_helper;per-query-type;expr-group-region_agrees_with_memlabel-houdini-guess.: 5.7793s (num_starts 136; 0.0425s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.82487s (num_starts 24; 0.2427s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond2%1%bbentry_L9%1%bbentry).: 5.83038s (num_starts 208; 0.0280s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 5.87146s (num_starts 95; 0.0618s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 5.88353s (num_starts 25; 0.2353s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.93064s (num_starts 80; 0.0741s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI4_L0%1%allocaI2.: 6.16487s (num_starts 6; 1.0275s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 6.16904s (num_starts 625; 0.0099s/start)
decide_hoare_triple_helper;per-query-type;linear;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.22956s (num_starts 66; 0.0944s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.45791s (num_starts 44; 0.1468s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L15%1%bbentry;(Lfor.cond2%1%bbentry_L15%1%bbentry=>Lfor.cond2%1%bbentry_L9%1%bbentry).: 6.5289s (num_starts 188; 0.0347s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.63073s (num_starts 43; 0.1542s/start)
graph_ec_apply_trans_funs_helper.0.: 6.71461s (num_starts 24443; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;main.A1;linear.: 6.97289s (num_starts 99; 0.0704s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI4_L0%1%allocaI2;(Lentry%1%allocaI4_L0%1%allocaI2=>Lfor.cond%1%bbentry_L9%1%bbentry).: 7.08024s (num_starts 144; 0.0492s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 7.27816s (num_starts 38; 0.1915s/start)
avail_exprs_create_submap.: 7.33083s (num_starts 1875; 0.0039s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.37913s (num_starts 74; 0.0997s/start)
decide_hoare_triple_helper;per-path;Lentry%1%allocaI3_L0%1%allocaI1;(Lentry%1%allocaI3_L0%1%allocaI1=>Lentry%1%allocaI4_L0%1%allocaI2).: 7.68159s (num_starts 136; 0.0565s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon);-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.69818s (num_starts 40; 0.1925s/start)
decide_hoare_triple_helper;per-path;Lfor.cond2%1%bbentry_L9%1%bbentry;(epsilon).: 7.84637s (num_starts 43; 0.1825s/start)
expr_do_simplify_using_lhs_set_and_precond.: 8.18753s (num_starts 8236; 0.0010s/start)
check_wfconds_on_edge.: 8.22923s (num_starts 43; 0.1914s/start)
check_equivalence_proof.: 8.24425s (num_starts 1; 8.2442s/start)
add_fresh_counterexample_at_pc_and_propagate.: 9.7203s (num_starts 239; 0.0407s/start)
invariant_inference_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L0%1%allocaI1.: 11.0673s (num_starts 4; 2.7668s/start)
decide_hoare_triple.: 11.4436s (num_starts 52; 0.2201s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 11.9317s (num_starts 625; 0.0191s/start)
dst_edge_composition_proves_false.: 13.0266s (num_starts 25; 0.5211s/start)
get_next_dst_edge_composition_to_correlate.: 13.4017s (num_starts 17; 0.7883s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 14.0547s (num_starts 236; 0.0596s/start)
tfg_relax_pointsto_vals_on_edge.: 14.3273s (num_starts 448; 0.0320s/start)
check_preds_on_edge_compositions.: 14.8128s (num_starts 48; 0.3086s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 24.4588s (num_starts 152; 0.1609s/start)
decide_hoare_triple_helper;-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 26.5777s (num_starts 240; 0.1107s/start)
decide_hoare_triple_helper;per-query-type;linear.: 32.8724s (num_starts 604; 0.0544s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 35.7491s (num_starts 7; 5.1070s/start)
decide_hoare_triple_with_alias_cons.ce.: 39.1003s (num_starts 1419; 0.0276s/start)
graph_ec_apply_trans_funs_helper.1.: 45.1363s (num_starts 40818; 0.0011s/start)
tfg_get_preimage_for_expr_across_edge_composition.computeWP_for_pred_across_ec.: 45.5022s (num_starts 40655; 0.0011s/start)
query:smt.: 48.2932s (num_starts 668; 0.0723s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 51.1811s (num_starts 427; 0.1199s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 52.0461s (num_starts 63015; 0.0008s/start)
graph_ec_apply_trans_funs_helper.: 52.052s (num_starts 65261; 0.0008s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 52.1524s (num_starts 65261; 0.0008s/start)
computeWP_for_pred_across_ec.: 52.1915s (num_starts 63015; 0.0008s/start)
solver_provable.: 57.8266s (num_starts 773; 0.0748s/start)
solver_satisfiable-cache-miss.: 58.2925s (num_starts 668; 0.0873s/start)
solver_satisfiable.: 58.2981s (num_starts 774; 0.0753s/start)
expr_is_provable.: 58.9018s (num_starts 773; 0.0762s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 61.766s (num_starts 773; 0.0799s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 64.686s (num_starts 773; 0.0837s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 64.7862s (num_starts 773; 0.0838s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 67.0732s (num_starts 773; 0.0868s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 68.3943s (num_starts 773; 0.0885s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 68.4127s (num_starts 773; 0.0885s/start)
is_expr_equal_using_lhs_set_and_precond.: 68.4294s (num_starts 773; 0.0885s/start)
prove.: 68.4449s (num_starts 773; 0.0885s/start)
prove_spawn_and_join_helper.: 68.4493s (num_starts 773; 0.0886s/start)
prove_spawn_and_join.: 73.3547s (num_starts 773; 0.0949s/start)
prove_wrapper.proof_query_not_trivial.: 73.9686s (num_starts 773; 0.0957s/start)
prove_wrapper.: 74.706s (num_starts 1682; 0.0444s/start)
decide_hoare_triple_check_ub.: 80.5598s (num_starts 1682; 0.0479s/start)
decide_hoare_triple_helper.: 83.3536s (num_starts 1682; 0.0496s/start)
corr_graph::add_edge().: 99.0391s (num_starts 70; 1.4148s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 100.048s (num_starts 56; 1.7866s/start)
corr_graph_add_correlation.: 104.55s (num_starts 56; 1.8670s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 104.555s (num_starts 56; 1.8671s/start)
update_invariant_state_for_edges.: 113.324s (num_starts 21; 5.3964s/start)
cg_check_new_cg_ec.: 113.324s (num_starts 21; 5.3964s/start)
correl_entry_apply.: 113.326s (num_starts 21; 5.3965s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 119.811s (num_starts 166; 0.7218s/start)
decide_hoare_triple_with_alias_cons.: 122.481s (num_starts 1682; 0.0728s/start)
expandProductCFG.: 127.132s (num_starts 22; 5.7787s/start)
bestFirstSearch.: 232.44s (num_starts 1; 232.4400s/start)
Time taken for equivalence check.: 245.972s (num_starts 1; 245.9720s/start)

counters:
# of Paths Prunned through CE propagation.: 32
# of assume sat failures for cg-edge-assume-alloca-ptr-eq.: 21
# of assume sat failures for cg-edge-assume-unknown.: 51
# of assume sat failures for undef-behavioursome.edge.L22%1%d=>L22%1%spver.: 6
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 32
# of paths enumerated.: 207
# of paths expanded.: 21
# of queries to linear solver.: 435
# of smt-solver-queries.: 668
L0%0%d=>L9%1%bbentry-src_ecs.: 54
L0%0%d=>L9%1%bbentry-src_to_pcs.: 3
L9%1%bbentry=>E0%0%d-src_ecs.: 3
L9%1%bbentry=>E0%0%d-src_to_pcs.: 1
L9%1%bbentry=>L9%1%bbentry-src_ecs.: 4
L9%1%bbentry=>L9%1%bbentry-src_to_pcs.: 1
Memory Fuzing CE.: 78
num-backtrackings.: 13
removed-siblings.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.abstract-memlabel-asserts.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L15%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 16
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.0.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 12
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 12
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 12
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.1.L9%1%bbentry.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.exreg.0.2.L11%1%d.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 0
smallest_point_cover_xfer.dst-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-ineq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 4
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 46
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 98
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 13
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 18
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 2
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 2
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 9
smallest_point_cover_xfer.expr-group-bvs.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 70
smallest_point_cover_xfer.expr-group-bvs.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.expr-group-bvs.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 45
smallest_point_cover_xfer.expr-group-bvs.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 11
smallest_point_cover_xfer.expr-group-bvs.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 18
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.L0%0%d_L0%0%d.prove_queries.: 30
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 12
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 10
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 13
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 5
smallest_point_cover_xfer.expr-group-region_agrees_with_memlabel.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.local-eq-lsprel-guess.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.local-eq-lsprel-guess.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-eq-lsprel-guess.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.local-sizes-are-equal.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 6
smallest_point_cover_xfer.local-sizes-are-equal.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.local-sizes-are-equal.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.local-sizes-are-equal.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 0
smallest_point_cover_xfer.locals-ub-upper-bound.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.mem-allocs-equality.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L7%1%allocaI2.iters.: 1
smallest_point_cover_xfer.mem-allocs-equality.from.Lentry%1%allocaI4_L7%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.mem-allocs-equality.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.mem-allocs-equality.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.mem-allocs-equality.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memlabel-is-absent.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.memlabel-is-absent.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.memlabel-is-absent.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memlabel-is-absent.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.memlabel-is-absent.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L7%1%allocaI2.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lentry%1%allocaI4_L7%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--heap.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.L0%0%d_L0%0%d.iters.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.L0%0%d_L0%0%d.prove_queries.: 5
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI4_L7%1%allocaI2.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--local./*___y___main__x__=Lentry%1%d=/.from.Lentry%1%allocaI4_L7%1%allocaI2.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L7%1%allocaI2.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lentry%1%allocaI4_L7%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--rodata.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI4_L7%1%allocaI2.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lentry%1%allocaI4_L7%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.1.0.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L7%1%allocaI2.iters.: 1
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lentry%1%allocaI4_L7%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.memory-equality-memlabel-mem--symbol.2.0.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.ml-lb-addr-eq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.ml-lb-addr-eq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-ub-eq.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.ml-lb-ub-eq.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 6
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.ml-lb-ub-eq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-ub-ineq.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.ml-lb-ub-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 6
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.ml-lb-ub-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.nonarg-locals-iscontiguous.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 4
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.nonarg-locals-isprobably-contiguous.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.sp-below-isp.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 4
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L1%1%allocaI1.iters.: 1
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L1%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L3%1%allocaI1.iters.: 1
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L3%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L4%1%allocaI1.iters.: 1
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L4%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L6%1%allocaI1.iters.: 1
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L6%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 6
smallest_point_cover_xfer.sp-below-isp.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 6
smallest_point_cover_xfer.sp-below-isp.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 8
smallest_point_cover_xfer.sp-below-isp.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.sp-below-isp.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 4
smallest_point_cover_xfer.sp-below-isp.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.sp-ml-lb-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.iters.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L0%1%allocaI1.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L7%1%allocaI1.iters.: 1
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI3_L7%1%allocaI1.prove_queries.: 1
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 0
smallest_point_cover_xfer.sp-ml-lb-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.iters.: 9
smallest_point_cover_xfer.src-branches-const-ineq.from.Lentry%1%allocaI4_L0%1%allocaI2.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.iters.: 16
smallest_point_cover_xfer.src-branches-const-ineq.from.Lfor.cond2%1%bbentry_L15%1%bbentry.prove_queries.: 42
smallest_point_cover_xfer.src-branches-const-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.iters.: 8
smallest_point_cover_xfer.src-branches-const-ineq.from.Lfor.cond2%1%bbentry_L9%1%bbentry.prove_queries.: 18
smt-queries-cache-hits.: 106
smt-queries-cvc4-sat.: 39
smt-queries-yices-sat.: 46
smt-queries-z3-sat.: 196
total-correlation-possibilities.: 111
total-correlation-possibilities-mod-lsprels.: 66
total-correlations-explored.: 22

flags:
dst-aloc.: 24
dst-edges.: 33
dst-nodes.: 31
dst-sp-updates.: 10
final-CG-alloc-correlations.: 1
final-CG-counterexamples-generated-at-Lentry%1%allocaI3_L0%1%allocaI1.: 11
final-CG-counterexamples-generated-at-Lentry%1%allocaI4_L0%1%allocaI2.: 9
final-CG-counterexamples-generated-at-Lfor.cond2%1%bbentry_L9%1%bbentry.: 12
final-CG-counterexamples-total-at-Lentry%1%allocaI3_L0%1%allocaI1.: 11
final-CG-counterexamples-total-at-Lentry%1%allocaI4_L0%1%allocaI2.: 11
final-CG-counterexamples-total-at-Lfor.cond2%1%bbentry_L9%1%bbentry.: 50
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 5
final-CG-num-invariants.: 96
final-CG-super-edges.: 1
src-allocation-stmts.: 1
src-edges.: 23
src-nodes.: 19
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 33.34
final-CG-time-to-total-time-ratio.: 0.14
query-time-to-total-time-ratio.: 0.18

Context stats:
exprs: count: 212663
sorts: count: 179
num_proof_queries: 773
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	404365
	        hit ratio:	0.983456
m_simplify_solver:
	----------- total:	61916
	        hit ratio:	0.746834
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	14999
	        hit ratio:	0.779985
m_z3_solver_substitution:
	----------- total:	15666
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	15675
	        hit ratio:	0
m_is_expr_not_equal_syntactic:
	----------- total:	13
	        hit ratio:	0.923077
m_expr_size:
	----------- total:	133122
	        hit ratio:	0.865492
m_contains_only_constants_or_sp_versions:
	----------- total:	62
	        hit ratio:	0.725806
m_expr_evaluates_to_constant_visitor:
	----------- total:	7596386
	        hit ratio:	0.990857

z3_solver expr_query_cache entry size: 668
	----------- total:	774
	             hits:	106
	        hit ratio:	0.136951
histogram (time taken by solver in ms):
[ 10.4450,  16.3027) (avg.  14.1547)     : 29
[ 16.3027,  25.4456) (avg.  20.8603)     : 123
[ 25.4456,  39.7159) (avg.  32.8290)     : 74
[ 39.7159,  61.9893) (avg.  46.3727)     : 209
[ 61.9893,  96.7540) (avg.  80.1702)     : 48
[ 96.7540, 151.0153) (avg. 117.1813)     : 110
[151.0153, 235.7073) (avg. 183.5347)     : 60
[235.7073, 367.8960) (avg. 274.1034)     : 9
[367.8960, 574.2184) (avg. 415.1306)     : 5
[574.2184, 896.2500) (avg. 895.2500)     : 1
histogram (number of quantifiers in query)
[ 0,  2) (avg.  1)                       : 249
[ 2,  4) (avg.  3)                       : 221
[ 4,  6) (avg.  0)                       : 0
[ 6,  8) (avg.  7)                       : 184
[ 8, 10) (avg.  8)                       : 9
[10, 12) (avg. 10)                       : 5
[12, 14) (avg.  0)                       : 0
[14, 16) (avg.  0)                       : 0
[16, 18) (avg.  0)                       : 0
[18, 20) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[ 201,  306) (avg.  249)                 : 2
[ 306,  410) (avg.    0)                 : 0
[ 410,  515) (avg.    0)                 : 0
[ 515,  619) (avg.  593)                 : 179
[ 619,  724) (avg.  689)                 : 172
[ 724,  828) (avg.  783)                 : 87
[ 828,  933) (avg.  890)                 : 94
[ 933, 1037) (avg. 1005)                 : 63
[1037, 1142) (avg. 1058)                 : 64
[1142, 1246) (avg. 1204)                 : 7
Top 10 highest time taking queries:
1. [0.895s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.56.from_pcLentry%1%allocaI3_L1%1%allocaI1.cond_apply_set_elem0_of_1.0
2. [0.474s] SOLVER_RES_TRUE memlabel_assertions_sat.0
3. [0.439s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.61.from_pcLentry%1%allocaI3_L4%1%allocaI1.cond_apply_set_elem0_of_1.0
4. [0.412s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.64.from_pcLentry%1%allocaI3_L6%1%allocaI1.cond_apply_set_elem0_of_1.0
5. [0.380s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.60.from_pcLentry%1%allocaI3_L3%1%allocaI1.cond_apply_set_elem0_of_1.0
6. [0.372s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.exit.boolbv.llvm-indir_tgt.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.cond_apply_set_elem0_of_1.1
7. [0.340s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.exit.boolbv.llvm-indir_tgt.from_pcLfor.cond2%1%bbentry_L9%1%bbentry.cond_apply_set_elem0_of_1.0
8. [0.297s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.Lfor.cond2%1%bbentry_L9%1%bbentry.dstToPC.E0%0%d.from_pcLfor.cond2%1%bbentry_L.7
9. [0.275s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.false-predicate.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.5
10. [0.271s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.Lfor.cond2%1%bbentry_L9%1%bbentry.dstToPC.E0%0%d.from_pcLfor.cond2%1%bbentry_L.6

Could not ascertain equivalence for function main
<ERR>Could not ascertain equivalence for function main</ERR>

tfg_edge_expr_wp_fn: num_starts 28933 time spent: 0:0:1 [1.426824s total; 0.000049 per start]
tfg_computeWP: num_starts 451340 time spent: 0:0:46 [46.600684s total; 0.000103 per start]
tfg_get_simplified_to_state_for_edge: num_starts 556167 time spent: 0:0:0 [0.809737s total; 0.000001 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 119032 time spent: 0:0:0 [0.161937s total; 0.000001 per start]
tfg_get_simplified_assumes_for_edge: num_starts 67963 time spent: 0:0:0 [0.083984s total; 0.000001 per start]
add_nodeces_at_pc_and_propagate: num_starts 263 time spent: 0:0:12 [12.895983s total; 0.049034 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 140 time spent: 0:0:7 [7.805865s total; 0.055756 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 7694 time spent: 0:0:3 [3.211961s total; 0.000417 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 1707 time spent: 0:0:1 [1.414429s total; 0.000829 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 6577 time spent: 0:0:2 [2.011473s total; 0.000306 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 64272 time spent: 0:0:3 [3.283732s total; 0.000051 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 6583 time spent: 0:0:0 [0.650959s total; 0.000099 per start]
tfg_graph_get_vars_written_on_edge: num_starts 6577 time spent: 0:0:0 [0.219585s total; 0.000033 per start]
cg_with_rank_add_CE_at_pc: num_starts 618 time spent: 0:0:10 [10.538476s total; 0.017053 per start]
graph_with_ce_add_CE_at_pc: num_starts 457 time spent: 0:0:0 [0.019424s total; 0.000043 per start]
graph_with_guessing_add_CE_at_pc: num_starts 618 time spent: 0:0:10 [10.517858s total; 0.017019 per start]
point_set_add_point_using_CE: num_starts 7393 time spent: 0:0:3 [3.099366s total; 0.000419 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 7393 time spent: 0:0:3 [3.115741s total; 0.000421 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 446 time spent: 0:0:10 [10.257709s total; 0.022999 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 446 time spent: 0:0:7 [7.111272s total; 0.015945 per start]
expr_label_memlabels_using_memlabel_map: num_starts 170301 time spent: 0:0:2 [2.433889s total; 0.000014 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 20422 time spent: 0:0:0 [0.935832s total; 0.000046 per start]
expr_simplify_solver: num_starts 64208 time spent: 0:0:4 [4.094614s total; 0.000064 per start]
expr_simplify_syntactic: num_starts 64208 time spent: 0:0:3 [3.469287s total; 0.000054 per start]
expr_simplify_select_on_store: num_starts 1914 time spent: 0:0:1 [1.439158s total; 0.000752 per start]
expr_simplify_store_on_store: num_starts 791 time spent: 0:0:0 [0.220934s total; 0.000279 per start]
expr_simplify_using_lhs_set_helper: num_starts 8633 time spent: 0:0:8 [8.550947s total; 0.000990 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 109220 time spent: 0:0:8 [8.466338s total; 0.000078 per start]
expr_evaluates_to_constant: num_starts 7486060 time spent: 0:0:6 [6.928783s total; 0.000001 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 70907 time spent: 0:0:0 [0.144061s total; 0.000002 per start]
expr_simplify_eq: num_starts 3671 time spent: 0:0:0 [0.038634s total; 0.000011 per start]
expr_simplify_iff: num_starts 100 time spent: 0:0:0 [0.000042s total; 0.000000 per start]
expr_simplify_or: num_starts 2228 time spent: 0:0:0 [0.001953s total; 0.000001 per start]
expr_simplify_and: num_starts 3517 time spent: 0:0:0 [0.016715s total; 0.000005 per start]
expr_simplify_andnot1: num_starts 2148 time spent: 0:0:0 [0.025052s total; 0.000012 per start]
expr_simplify_andnot2: num_starts 515 time spent: 0:0:0 [0.004716s total; 0.000009 per start]
expr_simplify_not: num_starts 1292 time spent: 0:0:0 [0.001874s total; 0.000001 per start]
expr_simplify_implies: num_starts 126 time spent: 0:0:0 [0.000815s total; 0.000006 per start]
expr_simplify_ite: num_starts 2663 time spent: 0:0:0 [0.092118s total; 0.000035 per start]
canonicalize_expr_tree: num_starts 16281 time spent: 0:0:0 [0.418295s total; 0.000026 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1636 time spent: 0:0:0 [0.006002s total; 0.000004 per start]
expr_simplify_select_on_store_visit_function: num_starts 2266 time spent: 0:0:1 [1.404657s total; 0.000620 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 211 time spent: 0:0:0 [0.120734s total; 0.000572 per start]
memlabel_contains_only_readonly_symbols: num_starts 6476 time spent: 0:0:0 [0.000959s total; 0.000000 per start]
memlabels_are_independent: num_starts 2303 time spent: 0:0:0 [0.006138s total; 0.000003 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 146 time spent: 0:0:0 [0.054975s total; 0.000377 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 498 time spent: 0:0:0 [0.135147s total; 0.000271 per start]
is_overlapping_atoms_pair_syntactic: num_starts 498 time spent: 0:0:0 [0.098010s total; 0.000197 per start]
is_overlapping_considering_type_constraints: num_starts 146 time spent: 0:0:0 [0.002458s total; 0.000017 per start]
find_offset_wrt_typed_variable_pointer: num_starts 154 time spent: 0:0:0 [0.002440s total; 0.000016 per start]
is_gep_inbounds_offset: num_starts 154 time spent: 0:0:0 [0.001837s total; 0.000012 per start]
get_arithmetic_addsub_atoms: num_starts 28231118 time spent: 0:0:7 [7.495135s total; 0.000000 per start]
expr_is_variable_start: num_starts 213 time spent: 0:0:0 [0.000066s total; 0.000000 per start]
insn_md_assemble: num_starts 48 time spent: 0:0:0 [0.000079s total; 0.000002 per start]
expr_linear_relation_holds_visit: num_starts 33316 time spent: 0:0:0 [0.191442s total; 0.000006 per start]
expr_is_consts_struct_constant: num_starts 52788 time spent: 0:0:0 [0.020200s total; 0.000000 per start]
expr_do_simplify_helper: num_starts 406703 time spent: 0:0:8 [8.273337s total; 0.000020 per start]
expr_do_simplify_helper_cache: num_starts 406703 time spent: 0:0:0 [0.363835s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 9257 time spent: 0:0:0 [0.009172s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 9257 time spent: 0:0:0 [0.020268s total; 0.000002 per start]
evaluate_expr_and_check_bounds: num_starts 65986 time spent: 0:0:4 [4.209862s total; 0.000064 per start]
combo_dfa_xfer_and_meet: num_starts 177 time spent: 0:0:2 [2.427635s total; 0.013715 per start]
alias_val_xfer_and_meet: num_starts 177 time spent: 0:0:0 [0.943807s total; 0.005332 per start]
get_sprel_map_from_avail_exprs: num_starts 298 time spent: 0:0:0 [0.298470s total; 0.001002 per start]
update_memlabels_for_memslot_locs: num_starts 140 time spent: 0:0:0 [0.168116s total; 0.001201 per start]
populate_gen_and_kill_sets_for_edge: num_starts 1250 time spent: 0:0:0 [0.951374s total; 0.000761 per start]
compute_simplified_loc_exprs_for_edge: num_starts 2662 time spent: 0:0:2 [2.743116s total; 0.001030 per start]
compute_locs_definitely_written_on_edge: num_starts 1250 time spent: 0:0:0 [0.015348s total; 0.000012 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 2356 time spent: 0:0:0 [0.661856s total; 0.000281 per start]
edge_update_memlabel_map_for_mlvars: num_starts 625 time spent: 0:0:0 [0.112581s total; 0.000180 per start]
add_new_locs_based_on_edge: num_starts 177 time spent: 0:0:0 [0.426342s total; 0.002409 per start]
alias_val_meet: num_starts 625 time spent: 0:0:0 [0.733811s total; 0.001174 per start]
expand_locset_to_include_slots_for_memmask: num_starts 3261 time spent: 0:0:0 [0.091916s total; 0.000028 per start]
total: num_starts 1 time spent: 0:5:5 [305.758443s total; 305.758443 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 250.74s.
ftmap_run_pointsto_analysis.: 4.38439s (num_starts 2; 2.1922s/start)s.
EQ Time after pointsto analysis: 246.351s.
EQ Time after pointsto analysis and smt_query: 171.645s.
EQ Time after pointsto analysis and smt_query and bv-solve: 169.899s.
Equivalence proof not found after an exhaustive search.
