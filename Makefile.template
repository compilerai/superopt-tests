include $(SRCDIR)/Make.conf                  # compiler paths and flags
include $(SRCDIR)/Makefile.common  # build rules

# set VPATH path for targets and src files
#VPATH = $(SRCDIR)/<dir>

EQCHECKER_BC32_O0_PROGS = $(addsuffix .bc32.eqchecker.O0, $(PROGS_EQCHECKER))
EQCHECKER_BC32_O2_PROGS = $(addsuffix .bc32.eqchecker.O2, $(PROGS_EQCHECKER))
EQCHECKER_BC32_O3_PROGS = $(addsuffix .bc32.eqchecker.O3, $(PROGS_EQCHECKER))
EQCHECKER_BC32_O3cg_PROGS = $(addsuffix .bc32.eqchecker.O3.cg, $(PROGS_EQCHECKER))

EQCHECKER_BC64_O0_PROGS = $(addsuffix .bc64.eqchecker.O0, $(PROGS_EQCHECKER))
EQCHECKER_BC64_O2_PROGS = $(addsuffix .bc64.eqchecker.O2, $(PROGS_EQCHECKER))
EQCHECKER_BC64_O3_PROGS = $(addsuffix .bc64.eqchecker.O3, $(PROGS_EQCHECKER))
EQCHECKER_BC64_O3cg_PROGS = $(addsuffix .bc64.eqchecker.O3.cg, $(PROGS_EQCHECKER))

EQCHECKER_I386_GCC_O0_PROGS = $(addsuffix .gcc.eqchecker.O0.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_GCC_O1_PROGS = $(addsuffix .gcc.eqchecker.O1.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_GCC_O2_PROGS = $(addsuffix .gcc.eqchecker.O2.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_GCC_O3_PROGS = $(addsuffix .gcc.eqchecker.O3.i386.s, $(PROGS_EQCHECKER))

EQCHECKER_X64_GCC_O0_PROGS = $(addsuffix .gcc.eqchecker.O0.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_GCC_O1_PROGS = $(addsuffix .gcc.eqchecker.O1.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_GCC_O2_PROGS = $(addsuffix .gcc.eqchecker.O2.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_GCC_O3_PROGS = $(addsuffix .gcc.eqchecker.O3.x64.s, $(PROGS_EQCHECKER))

EQCHECKER_I386_CLANG_O0_PROGS = $(addsuffix .clang.eqchecker.O0.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_CLANG_O1_PROGS = $(addsuffix .clang.eqchecker.O1.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_CLANG_O2_PROGS = $(addsuffix .clang.eqchecker.O2.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_CLANG_O3_PROGS = $(addsuffix .clang.eqchecker.O3.i386.s, $(PROGS_EQCHECKER))

EQCHECKER_I386_ACK_O1_PROGS = $(addsuffix .ack.O1.i386, $(PROGS_EQCHECKER))
EQCHECKER_I386_ACK_O2_PROGS = $(addsuffix .ack.O2.i386, $(PROGS_EQCHECKER))

EQCHECKER_X64_CLANG_O0_PROGS = $(addsuffix .clang.eqchecker.O0.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_CLANG_O1_PROGS = $(addsuffix .clang.eqchecker.O1.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_CLANG_O2_PROGS = $(addsuffix .clang.eqchecker.O2.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_CLANG_O3_PROGS = $(addsuffix .clang.eqchecker.O3.x64.s, $(PROGS_EQCHECKER))

EQCHECKER_I386_ICC_O0_PROGS = $(addsuffix .icc.eqchecker.O0.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_ICC_O1_PROGS = $(addsuffix .icc.eqchecker.O1.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_ICC_O2_PROGS = $(addsuffix .icc.eqchecker.O2.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_ICC_O3_PROGS = $(addsuffix .icc.eqchecker.O3.i386.s, $(PROGS_EQCHECKER))

EQCHECKER_X64_ICC_O0_PROGS = $(addsuffix .icc.eqchecker.O0.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_ICC_O1_PROGS = $(addsuffix .icc.eqchecker.O1.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_ICC_O2_PROGS = $(addsuffix .icc.eqchecker.O2.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_ICC_O3_PROGS = $(addsuffix .icc.eqchecker.O3.x64.s, $(PROGS_EQCHECKER))

EQCHECKER_I386_ICX_O0_PROGS = $(addsuffix .icx.eqchecker.O0.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_ICX_O1_PROGS = $(addsuffix .icx.eqchecker.O1.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_ICX_O2_PROGS = $(addsuffix .icx.eqchecker.O2.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_ICX_O3_PROGS = $(addsuffix .icx.eqchecker.O3.i386.s, $(PROGS_EQCHECKER))

EQCHECKER_X64_ICX_O0_PROGS = $(addsuffix .icx.eqchecker.O0.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_ICX_O1_PROGS = $(addsuffix .icx.eqchecker.O1.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_ICX_O2_PROGS = $(addsuffix .icx.eqchecker.O2.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_ICX_O3_PROGS = $(addsuffix .icx.eqchecker.O3.x64.s, $(PROGS_EQCHECKER))

EQCHECKER_I386_CCOMP_O2_PROGS = $(addsuffix .ccomp.eqchecker.O2.i386, $(PROGS_EQCHECKER))

EQCHECKER_I386_GCC_O3_XML_FILES = $(addsuffix .gcc.i386.O3.xml, $(PROGS_EQCHECKER))
EQCHECKER_I386_CLANG_O3_XML_FILES = $(addsuffix .clang.i386.O3.xml, $(PROGS_EQCHECKER))
EQCHECKER_I386_ICC_O3_XML_FILES = $(addsuffix .icc.i386.O3.xml, $(PROGS_EQCHECKER))
EQCHECKER_I386_ICX_O3_XML_FILES = $(addsuffix .icx.i386.O3.xml, $(PROGS_EQCHECKER))

EQCHECKER_X64_GCC_O3_XML_FILES = $(addsuffix .gcc.x64.O3.xml, $(PROGS_EQCHECKER))
EQCHECKER_X64_CLANG_O3_XML_FILES = $(addsuffix .clang.x64.O3.xml, $(PROGS_EQCHECKER))
EQCHECKER_X64_ICX_O3_XML_FILES = $(addsuffix .icx.x64.O3.xml, $(PROGS_EQCHECKER))

PROGS_LL_BC = $(addsuffix .bc, $(PROGS_LL))

BC_PROGS = \
  $(EQCHECKER_BC32_O0_PROGS) \
  $(EQCHECKER_BC32_O3_PROGS) \
  $(EQCHECKER_BC64_O0_PROGS) \
  $(EQCHECKER_BC64_O3_PROGS)
BC_PROGS_ASM = $(addsuffix .ll, $(BC_PROGS))

EQCHECKER_PROGS = \
  $(BC_PROGS) \
  $(EQCHECKER_I386_GCC_O0_PROGS) \
  $(EQCHECKER_I386_GCC_O1_PROGS) \
  $(EQCHECKER_I386_GCC_O3_PROGS) \
  $(EQCHECKER_I386_CLANG_O0_PROGS) \
  $(EQCHECKER_I386_CLANG_O1_PROGS) \
  $(EQCHECKER_I386_CLANG_O2_PROGS) \
  $(EQCHECKER_I386_CLANG_O3_PROGS) \
  $(EQCHECKER_I386_ICC_O0_PROGS) \
  $(EQCHECKER_I386_ICC_O3_PROGS) \
  $(EQCHECKER_I386_ICX_O0_PROGS) \
  $(EQCHECKER_I386_ICX_O3_PROGS) \
  $(EQCHECKER_X64_GCC_O0_PROGS) \
  $(EQCHECKER_X64_GCC_O3_PROGS) \
  $(EQCHECKER_X64_CLANG_O0_PROGS) \
  $(EQCHECKER_X64_CLANG_O3_PROGS) \
  $(EQCHECKER_X64_ICC_O0_PROGS) \
  $(EQCHECKER_X64_ICC_O3_PROGS) \
  $(EQCHECKER_X64_ICX_O0_PROGS) \
  $(EQCHECKER_X64_ICX_O3_PROGS) \

ACK_EQCHECKER_PROGS = \
  $(EQCHECKER_I386_ACK_O1_PROGS) \
  $(EQCHECKER_I386_ACK_O2_PROGS)

XML_FILES = \
  $(EQCHECKER_I386_GCC_O3_XML_FILES) \
  $(EQCHECKER_I386_CLANG_O3_XML_FILES) \
  $(EQCHECKER_I386_ICC_O3_XML_FILES) \
  $(EQCHECKER_I386_ICX_O3_XML_FILES) \
  $(EQCHECKER_X64_GCC_O3_XML_FILES) \
  $(EQCHECKER_X64_CLANG_O3_XML_FILES) \
  $(EQCHECKER_X64_ICC_O3_XML_FILES) \
  $(EQCHECKER_X64_ICX_O3_XML_FILES)

ALL_PROGS = $(EQCHECKER_PROGS) $(BC_PROGS_ASM) $(PROGS_LL_BC) $(XML_FILES) $(SRC_LN_FILES)

# targets

all: $(ALL_PROGS)
	# HACK for current build
	$(foreach t,$(BC_O0_PROGS),sed -i 's/immarg//g' $(t).s;)

ack-progs: $(ACK_EQCHECKER_PROGS)

clean:
	rm -f *.o *.tmp $(ALL_PROGS)

eqtest_%.helper:: $(ALL_PROGS) $(SRCDIR)/Makefile.template $(SRCDIR)/scripts/gen_eqtest_cmds.pl $(VPATH)/Makefile
	perl $(SRCDIR)/scripts/gen_eqtest_cmds.pl $(SUPEROPT_PROJECT_DIR) $(VPATH) $(ARCH) $(shell echo $(CUR_COMPILER) | tr A-Z a-z) $(ARCH_OPT_SUFFIX) "extraflags@$(EXTRA_FLAGS)" unroll1 $(UNROLL1_$(CUR_COMPILER)) unroll2 $(UNROLL2_$(CUR_COMPILER)) unroll4 $(UNROLL4_$(CUR_COMPILER)) unroll8 $(UNROLL8_$(CUR_COMPILER)) unroll16 $(UNROLL16_$(CUR_COMPILER)) unroll32 $(UNROLL32_$(CUR_COMPILER)) unroll64 $(UNROLL64_$(CUR_COMPILER)) > $@ #eqtest_$(ARCH)_chaperon_commands

eqtest_%_gcc.helper:: CUR_COMPILER=GCC
eqtest_%_gPP.helper:: CUR_COMPILER=GPP

eqtest_%_clang.helper:: CUR_COMPILER=CLANG
eqtest_%_clangPP.helper:: CUR_COMPILER=CLANGPP

eqtest_%_icc.helper:: CUR_COMPILER=ICC
eqtest_%_icpc.helper:: CUR_COMPILER=ICPC

eqtest_%_icx.helper:: CUR_COMPILER=ICX
eqtest_%_icpx.helper:: CUR_COMPILER=ICPX

eqtest_%_ack.helper:: CUR_COMPILER=ACK
eqtest_%_ack.helper:: ARCH_OPT_SUFFIX=.O2.i386

eqtest_%_ack.O1.helper:: CUR_COMPILER=ACK
eqtest_%_ack.O1.helper:: ARCH_OPT_SUFFIX=.O1.i386

eqtest_%_srcdst.helper:: CUR_COMPILER=SRCDST
eqtest_%_srcdst.helper:: ARCH_OPT_SUFFIX=notused

eqtest_i386:: ARCH=i386
eqtest_i386:: ARCH_OPT_SUFFIX=.eqchecker.O3.i386.s

eqtest_x64:: ARCH=x64
eqtest_x64:: ARCH_OPT_SUFFIX=.eqchecker.O3.x64.s

eqtest_ll:: ARCH=x64 #we use the x64 build for llvm-to-llvm checks
eqtest_ll:: ARCH_OPT_SUFFIX=.ll

eqtest_i386_O0:: ARCH=i386
eqtest_i386_O0:: ARCH_OPT_SUFFIX=.eqchecker.O0.i386.s

eqtest_i386_O1:: ARCH=i386
eqtest_i386_O1:: ARCH_OPT_SUFFIX=.eqchecker.O1.i386.s

eqtest_i386_O2:: ARCH=i386
eqtest_i386_O2:: ARCH_OPT_SUFFIX=.eqchecker.O2.i386.s

eqtest_i386 eqtest_x64 eqtest_ll eqtest_i386_O0 eqtest_i386_O1 eqtest_i386_O2: eqtest_%: eqtest_%_gcc.helper eqtest_%_gPP.helper eqtest_%_clang.helper eqtest_%_clangPP.helper eqtest_%_srcdst.helper eqtest_%_ack.helper eqtest_%_ack.O1.helper eqtest_%_icx.helper eqtest_%_icpx.helper eqtest_%_icc.helper eqtest_%_icpc.helper
	cat $^ > $@

.DEFAULT_GOAL := all

.PHONY: all clean eqtest_i386 eqtest_x64 eqtest_i386_O1
