include $(SRCDIR)/Make.conf                  # compiler paths and flags
include $(SRCDIR)/Makefile.common  # build rules

# set VPATH path for targets and src files
#VPATH = $(SRCDIR)/<dir>

BC_O0_SUFFIX := bc.eqchecker.O0
GCC_I386_O3_SUFFIX := gcc.eqchecker.O3.i386.s
CLANG_I386_O3_SUFFIX := clang.eqchecker.O3.i386.s
ICC_I386_O3_SUFFIX := icc.eqchecker.O3.i386.s
GCC_X64_O3_SUFFIX := gcc.eqchecker.O3.x64.s
CLANG_X64_O3_SUFFIX := clang.eqchecker.O3.x64.s
ICC_X64_O3_SUFFIX := icc.eqchecker.O3.x64.s

# make available to gentest.sh and runtest.sh
export BC_O0_SUFFIX
export GCC_I386_O3_SUFFIX
export CLANG_I386_O3_SUFFIX
export ICC_I386_O3_SUFFIX
export GCC_X64_O3_SUFFIX
export CLANG_X64_O3_SUFFIX
export ICC_X64_O3_SUFFIX

EQCHECKER_BC_O0_PROGS = $(addsuffix .$(BC_O0_SUFFIX), $(PROGS_EQCHECKER))
EQCHECKER_BC_O2_PROGS = $(addsuffix .bc.eqchecker.O2, $(PROGS_EQCHECKER))
EQCHECKER_BC_O3_PROGS = $(addsuffix .bc.eqchecker.O3, $(PROGS_EQCHECKER))
EQCHECKER_BC_O3cg_PROGS = $(addsuffix .bc.eqchecker.O3.cg, $(PROGS_EQCHECKER))

EQCHECKER_I386_GCC_O0_PROGS = $(addsuffix .gcc.eqchecker.O0.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_GCC_O2_PROGS = $(addsuffix .gcc.eqchecker.O2.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_GCC_O3_PROGS = $(addsuffix .$(GCC_I386_O3_SUFFIX), $(PROGS_EQCHECKER))

EQCHECKER_X64_GCC_O0_PROGS = $(addsuffix .gcc.eqchecker.O0.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_GCC_O2_PROGS = $(addsuffix .gcc.eqchecker.O2.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_GCC_O3_PROGS = $(addsuffix .$(GCC_X64_O3_SUFFIX), $(PROGS_EQCHECKER))

EQCHECKER_I386_CLANG_O0_PROGS = $(addsuffix .clang.eqchecker.O0.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_CLANG_O2_PROGS = $(addsuffix .clang.eqchecker.O2.i386.s, $(PROGS_EQCHECKER))
EQCHECKER_I386_CLANG_O3_PROGS = $(addsuffix .$(CLANG_I386_O3_SUFFIX), $(PROGS_EQCHECKER))

EQCHECKER_X64_CLANG_O0_PROGS = $(addsuffix .clang.eqchecker.O0.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_CLANG_O2_PROGS = $(addsuffix .clang.eqchecker.O2.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_CLANG_O3_PROGS = $(addsuffix .$(CLANG_X64_O3_SUFFIX), $(PROGS_EQCHECKER))

EQCHECKER_X64_ICC_O0_PROGS = $(addsuffix .icc.eqchecker.O0.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_ICC_O2_PROGS = $(addsuffix .icc.eqchecker.O2.x64.s, $(PROGS_EQCHECKER))
EQCHECKER_X64_ICC_O3_PROGS = $(addsuffix .$(ICC_X64_O3_SUFFIX), $(PROGS_EQCHECKER))

EQCHECKER_I386_CCOMP_O2_PROGS = $(addsuffix .ccomp.eqchecker.O2.i386, $(PROGS_EQCHECKER))

EQCHECKER_I386_GCC_O3_XML_FILES = $(addsuffix .gcc.i386.O3.xml, $(PROGS_EQCHECKER))
EQCHECKER_I386_CLANG_O3_XML_FILES = $(addsuffix .clang.i386.O3.xml, $(PROGS_EQCHECKER))
EQCHECKER_I386_ICC_O3_XML_FILES = $(addsuffix .icc.i386.O3.xml, $(PROGS_EQCHECKER))

EQCHECKER_X64_GCC_O3_XML_FILES = $(addsuffix .gcc.x64.O3.xml, $(PROGS_EQCHECKER))
EQCHECKER_X64_CLANG_O3_XML_FILES = $(addsuffix .clang.x64.O3.xml, $(PROGS_EQCHECKER))
EQCHECKER_X64_ICC_O3_XML_FILES = $(addsuffix .icc.x64.O3.xml, $(PROGS_EQCHECKER))

BC_PROGS = \
  $(EQCHECKER_BC_O0_PROGS) \
  $(EQCHECKER_BC_O3_PROGS)
BC_PROGS_ASM = $(addsuffix .ll, $(BC_PROGS))

EQCHECKER_PROGS = \
  $(BC_PROGS) \
  $(EQCHECKER_I386_GCC_O0_PROGS) \
  $(EQCHECKER_I386_GCC_O3_PROGS) \
  $(EQCHECKER_I386_CLANG_O0_PROGS) \
  $(EQCHECKER_I386_CLANG_O3_PROGS) \
  $(EQCHECKER_X64_GCC_O0_PROGS) \
  #$(EQCHECKER_X64_GCC_O3_PROGS) \
  #$(EQCHECKER_X64_CLANG_O0_PROGS) \
  #$(EQCHECKER_X64_CLANG_O3_PROGS) \

XML_FILES = \
  $(EQCHECKER_I386_GCC_O3_XML_FILES) \
  $(EQCHECKER_I386_CLANG_O3_XML_FILES) \
  $(EQCHECKER_X64_GCC_O3_XML_FILES) \
  $(EQCHECKER_X64_CLANG_O3_XML_FILES)


ALL_PROGS = $(EQCHECKER_PROGS) $(BC_PROGS_ASM) $(XML_FILES)

# targets

all: $(ALL_PROGS)
	# HACK for current build
	$(foreach t,$(BC_O0_PROGS),sed -i 's/immarg//g' $(t).s;)

clean:
	rm -f *.o *.tmp $(ALL_PROGS)

gentest:
	bash $(VPATH)/gentest.sh

runtest:
	cp $(VPATH)/*eq_funcs* -t .
	bash $(VPATH)/runtest.sh

.DEFAULT_GOAL := all

.PHONY: all clean gentest runtest

