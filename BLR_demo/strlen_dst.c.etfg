=FunctionTFGMap
=FunctionTFGs
=FunctionTFGMap Entry: {strlen}
=TFG_SSA:
=TFG_LLVM src.llvm.strlen:
=TFG:
=Nodes: L0%0%d Lentry%1%d Lentry%1%intermediateVal0 Lentry%1%intermediateVal1 Lentry%1%intermediateVal2 Lentry%1%intermediateVal3 Lentry%1%ghostItervar0 Lentry%1%ghostItervar1 Lfor.body%1%d Lfor.body%1%intermediateVal0 Lfor.body%1%intermediateVal1 Lfor.cond%1%bbentry Lfor.cond%1%d Lfor.cond%1%intermediateVal0 Lfor.cond%2%d Lfor.cond%3%d Lfor.cond%3%intermediateVal0 Lfor.cond%3%intermediateVal1 Lfor.cond%3%intermediateVal2 Lfor.cond%3%intermediateVal3 Lfor.end%1%d Lfor.end%2%d Lfor.end%3%d Lfor.end%4%d Lfor.inc%1%d Lfor.inc%1%intermediateVal0 Lfor.inc%1%intermediateVal1 Lfor.inc%2%d Lfor.inc%2%intermediateVal0 Lfor.inc%2%intermediateVal1 Lfor.inc%2%intermediateVal2 Lfor.inc%2%intermediateVal3 Lfor.inc%2%ghostItervar0 Lfor.inc%2%ghostItervar1 E0%0%d
=Edges:
L0%0%d => Lentry%1%d
Lentry%1%d => Lentry%1%intermediateVal0
Lentry%1%intermediateVal0 => Lentry%1%intermediateVal1
Lentry%1%intermediateVal1 => Lentry%1%intermediateVal2
Lentry%1%intermediateVal2 => Lentry%1%intermediateVal3
Lentry%1%intermediateVal3 => Lentry%1%ghostItervar0
Lentry%1%ghostItervar0 => Lentry%1%ghostItervar1
Lentry%1%ghostItervar1 => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%1%d
Lfor.cond%1%d => Lfor.cond%1%intermediateVal0
Lfor.cond%1%intermediateVal0 => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.cond%3%d
Lfor.cond%3%d => Lfor.cond%3%intermediateVal2
Lfor.cond%3%d => Lfor.cond%3%intermediateVal0
Lfor.cond%3%intermediateVal0 => Lfor.cond%3%intermediateVal1
Lfor.cond%3%intermediateVal1 => Lfor.body%1%d
Lfor.cond%3%intermediateVal2 => Lfor.cond%3%intermediateVal3
Lfor.cond%3%intermediateVal3 => Lfor.end%1%d
Lfor.body%1%d => Lfor.body%1%intermediateVal0
Lfor.body%1%intermediateVal0 => Lfor.body%1%intermediateVal1
Lfor.body%1%intermediateVal1 => Lfor.inc%1%d
Lfor.inc%1%d => Lfor.inc%1%intermediateVal0
Lfor.inc%1%intermediateVal0 => Lfor.inc%1%intermediateVal1
Lfor.inc%1%intermediateVal1 => Lfor.inc%2%d
Lfor.inc%2%d => Lfor.inc%2%intermediateVal0
Lfor.inc%2%intermediateVal0 => Lfor.inc%2%intermediateVal1
Lfor.inc%2%intermediateVal1 => Lfor.inc%2%intermediateVal2
Lfor.inc%2%intermediateVal2 => Lfor.inc%2%intermediateVal3
Lfor.inc%2%intermediateVal3 => Lfor.inc%2%ghostItervar0
Lfor.inc%2%ghostItervar0 => Lfor.inc%2%ghostItervar1
Lfor.inc%2%ghostItervar1 => Lfor.cond%1%bbentry (backedge) 
Lfor.end%1%d => Lfor.end%2%d
Lfor.end%2%d => Lfor.end%3%d
Lfor.end%3%d => Lfor.end%4%d
Lfor.end%4%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%intermediateVal0
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%intermediateVal1
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%intermediateVal2
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%intermediateVal3
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%ghostItervar0
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%ghostItervar1
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal0
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal1
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%intermediateVal0
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%3%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%3%intermediateVal0
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%3%intermediateVal1
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%3%intermediateVal2
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%3%intermediateVal3
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%2%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%3%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%4%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc%1%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc%1%intermediateVal0
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc%1%intermediateVal1
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc%2%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc%2%intermediateVal0
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc%2%intermediateVal1
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc%2%intermediateVal2
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc%2%intermediateVal3
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc%2%ghostItervar0
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc%2%ghostItervar1
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for src.llvm-mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for src.llvm-mem.alloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: strlen
=Input: llvm-method-arg.0
=arg addr
1 : input.src.local./strlen__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.src.llvm-%s : BV:32
=arg end
=Node outputs: E0%0%d
=Output: symbol.1.0
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: heap
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.src.llvm-%sub.ptr.sub : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : strlen : 16 : 1 : 0
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : src.llvm-%s : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {strlen}
=memlabel_map.0 for call-context {strlen}
mlvar.src.llvm.strlen.0 : memlabel-mem-no-straddle-symbol.1.0-heap-arg.0
=Edge: L0%0%d => Lentry%1%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.cur_rounding_mode
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=src.local_alloc_count
1 : input.src.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.src.llvm-%s : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:start_pc_edge
tfg_edge_comment end

=Edge: Lentry%1%d => Lentry%1%intermediateVal0
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  br label %for.cond, !dbg !20
tfg_edge_comment end

=Edge: Lentry%1%intermediateVal0 => Lentry%1%intermediateVal1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%p.0.phi.tmpvar.entry
1 : input.src.llvm-%s : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:  %p.0 = phi i8* [ %s, %entry ], [ %incdec.ptr, %for.inc ], !dbg !22
tfg_edge_comment end

=Edge: Lentry%1%intermediateVal1 => Lentry%1%intermediateVal2
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  br label %for.cond, !dbg !20
tfg_edge_comment end

=Edge: Lentry%1%intermediateVal2 => Lentry%1%intermediateVal3
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%p.0
1 : input.src.llvm-%s : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  br label %for.cond, !dbg !20
tfg_edge_comment end

=Edge: Lentry%1%intermediateVal3 => Lentry%1%ghostItervar0
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  br label %for.cond, !dbg !20
tfg_edge_comment end

=Edge: Lentry%1%ghostItervar0 => Lentry%1%ghostItervar1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-ghostvar.itervar.1
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:ghost_var.itervar.firstedge
tfg_edge_comment end

=Edge: Lentry%1%ghostItervar1 => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:ghost_var.itervar.secondedge
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%1%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:bb_entry
tfg_edge_comment end

=Edge: Lfor.cond%1%d => Lfor.cond%1%intermediateVal0
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%0
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.src.llvm.strlen.0 : MEMLABEL
4 : input.src.llvm-%p.0 : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:8
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.src.llvm-%p.0 : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:  %0 = load i8, i8* %p.0, align 1, !dbg !23
tfg_edge_comment end

=Edge: Lfor.cond%1%intermediateVal0 => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.src.llvm-%p.0 : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:  %0 = load i8, i8* %p.0, align 1, !dbg !23
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.cond%3%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%tobool
1 : input.src.llvm-%0 : BV:8
2 : 0 { 0x0 } : BV:8
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:  %tobool = icmp ne i8 %0, 0, !dbg !25
tfg_edge_comment end

=Edge: Lfor.cond%3%d => Lfor.cond%3%intermediateVal2
=Edge.EdgeCond: 
1 : input.src.llvm-%tobool : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:  br i1 %tobool, label %for.body, label %for.end, !dbg !25
tfg_edge_comment end

=Edge: Lfor.cond%3%d => Lfor.cond%3%intermediateVal0
=Edge.EdgeCond: 
1 : input.src.llvm-%tobool : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:  br i1 %tobool, label %for.body, label %for.end, !dbg !25
tfg_edge_comment end

=Edge: Lfor.cond%3%intermediateVal0 => Lfor.cond%3%intermediateVal1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:  br i1 %tobool, label %for.body, label %for.end, !dbg !25
tfg_edge_comment end

=Edge: Lfor.cond%3%intermediateVal1 => Lfor.body%1%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:  br i1 %tobool, label %for.body, label %for.end, !dbg !25
tfg_edge_comment end

=Edge: Lfor.cond%3%intermediateVal2 => Lfor.cond%3%intermediateVal3
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:  br i1 %tobool, label %for.body, label %for.end, !dbg !25
tfg_edge_comment end

=Edge: Lfor.cond%3%intermediateVal3 => Lfor.end%1%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:  br i1 %tobool, label %for.body, label %for.end, !dbg !25
tfg_edge_comment end

=Edge: Lfor.body%1%d => Lfor.body%1%intermediateVal0
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  br label %for.inc, !dbg !25
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal0 => Lfor.body%1%intermediateVal1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  br label %for.inc, !dbg !25
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal1 => Lfor.inc%1%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  br label %for.inc, !dbg !25
tfg_edge_comment end

=Edge: Lfor.inc%1%d => Lfor.inc%1%intermediateVal0
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : bvmul(1, 1) : BV:32
=src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvmul(2, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.src.llvm-%p.0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvmul(3, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(1, 5) : BV:32
7 : isgepoffset(6, 4) : BOOL
=EdgeAssume.1
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : bvzero_ext(1, 4) : BV:64
7 : bvmul(5, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 4) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 2) : BOOL
13 : ite(3, 11, 12) : BOOL
14 : 1 { 0x1 +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:  %incdec.ptr = getelementptr inbounds i8, i8* %p.0, i32 1, !dbg !26
tfg_edge_comment end

=Edge: Lfor.inc%1%intermediateVal0 => Lfor.inc%1%intermediateVal1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset
1 : input.src.llvm-%p.0 : BV:32
2 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  %incdec.ptr = getelementptr inbounds i8, i8* %p.0, i32 1, !dbg !26
tfg_edge_comment end

=Edge: Lfor.inc%1%intermediateVal1 => Lfor.inc%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%incdec.ptr
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  %incdec.ptr = getelementptr inbounds i8, i8* %p.0, i32 1, !dbg !26
tfg_edge_comment end

=Edge: Lfor.inc%2%d => Lfor.inc%2%intermediateVal0
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:  br label %for.cond, !dbg !27, !llvm.loop !28
tfg_edge_comment end

=Edge: Lfor.inc%2%intermediateVal0 => Lfor.inc%2%intermediateVal1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%p.0.phi.tmpvar.for.inc
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:  %p.0 = phi i8* [ %s, %entry ], [ %incdec.ptr, %for.inc ], !dbg !22
tfg_edge_comment end

=Edge: Lfor.inc%2%intermediateVal1 => Lfor.inc%2%intermediateVal2
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:  br label %for.cond, !dbg !27, !llvm.loop !28
tfg_edge_comment end

=Edge: Lfor.inc%2%intermediateVal2 => Lfor.inc%2%intermediateVal3
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%p.0
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:  br label %for.cond, !dbg !27, !llvm.loop !28
tfg_edge_comment end

=Edge: Lfor.inc%2%intermediateVal3 => Lfor.inc%2%ghostItervar0
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:  br label %for.cond, !dbg !27, !llvm.loop !28
tfg_edge_comment end

=Edge: Lfor.inc%2%ghostItervar0 => Lfor.inc%2%ghostItervar1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-ghostvar.itervar.1
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:ghost_var.itervar.firstedge
tfg_edge_comment end

=Edge: Lfor.inc%2%ghostItervar1 => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:ghost_var.itervar.secondedge
tfg_edge_comment end

=Edge: Lfor.end%1%d => Lfor.end%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%sub.ptr.lhs.cast
1 : input.src.llvm-%p.0 : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  %sub.ptr.lhs.cast = ptrtoint i8* %p.0 to i32, !dbg !30
tfg_edge_comment end

=Edge: Lfor.end%2%d => Lfor.end%3%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%sub.ptr.rhs.cast
1 : input.src.llvm-%s : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:  %sub.ptr.rhs.cast = ptrtoint i8* %s to i32, !dbg !30
tfg_edge_comment end

=Edge: Lfor.end%3%d => Lfor.end%4%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%sub.ptr.sub
1 : input.src.llvm-%p.0 : BV:32
2 : input.src.llvm-%s : BV:32
3 : bvsub(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !30
tfg_edge_comment end

=Edge: Lfor.end%4%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.llvm-%ret-reg
1 : input.src.llvm-%sub.ptr.sub : BV:32
=src.llvm-%hidden-reg
1 : input.src.llvm-%hidden-reg : BV:32
2 : input.src.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.src.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.src.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.src.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=src.llvm-indir_tgt
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:  ret i32 %sub.ptr.sub, !dbg !31
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.src.local./strlen__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.src.llvm-%s : BV:32
=predicate done
=graph_with_precondition_done

=Locs in src.llvm.strlen
=Loc 1 in src.llvm.strlen.
REGMEM
src.llvm-%p.0.phi.tmpvar.entry
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=Loc 2 in src.llvm.strlen.
REGMEM
src.llvm-%s
1 : input.src.llvm-%s : BV:32
=Loc 3 in src.llvm.strlen.
REGMEM
src.llvm-%p.0
1 : input.src.llvm-%p.0 : BV:32
=Loc 4 in src.llvm.strlen.
REGMEM
src.llvm-%0
1 : input.src.llvm-%0 : BV:8
=Loc 5 in src.llvm.strlen.
REGMEM
src.llvm-%tobool
1 : input.src.llvm-%tobool : BOOL
=Loc 6 in src.llvm.strlen.
REGMEM
src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=Loc 7 in src.llvm.strlen.
REGMEM
src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=Loc 8 in src.llvm.strlen.
REGMEM
src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=Loc 9 in src.llvm.strlen.
REGMEM
src.llvm-%incdec.ptr
1 : input.src.llvm-%incdec.ptr : BV:32
=Loc 10 in src.llvm.strlen.
REGMEM
src.llvm-%p.0.phi.tmpvar.for.inc
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=Loc 11 in src.llvm.strlen.
REGMEM
src.llvm-%sub.ptr.lhs.cast
1 : input.src.llvm-%sub.ptr.lhs.cast : BV:32
=Loc 12 in src.llvm.strlen.
REGMEM
src.llvm-%sub.ptr.rhs.cast
1 : input.src.llvm-%sub.ptr.rhs.cast : BV:32
=Loc 13 in src.llvm.strlen.
REGMEM
src.llvm-%sub.ptr.sub
1 : input.src.llvm-%sub.ptr.sub : BV:32
=Loc 14 in src.llvm.strlen.
REGMEM
src.llvm-%hidden-reg
1 : input.src.llvm-%hidden-reg : BV:32
=Loc 15 in src.llvm.strlen.
REGMEM
src.llvm-%ret-reg
1 : input.src.llvm-%ret-reg : BV:32
=Loc 16 in src.llvm.strlen.
REGMEM
src.llvm-callee-save.0
1 : input.src.llvm-callee-save.0 : BV:32
=Loc 17 in src.llvm.strlen.
REGMEM
src.llvm-callee-save.1
1 : input.src.llvm-callee-save.1 : BV:32
=Loc 18 in src.llvm.strlen.
REGMEM
src.llvm-callee-save.2
1 : input.src.llvm-callee-save.2 : BV:32
=Loc 19 in src.llvm.strlen.
REGMEM
src.llvm-callee-save.3
1 : input.src.llvm-callee-save.3 : BV:32
=Loc 20 in src.llvm.strlen.
REGMEM
src.llvm-indir_tgt
1 : input.src.llvm-indir_tgt : BV:32
=Loc 21 in src.llvm.strlen.
REGMEM
src.llvm-ghostvar.itervar.1
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=Loc 22 in src.llvm.strlen.
REGMEM
src.local_alloc_count
1 : input.src.local_alloc_count : COUNT
=Loc 23 in src.llvm.strlen.
REGMEM
src.local_alloc_count.=L0%0%d=
1 : input.src.local_alloc_count.=L0%0%d= : COUNT
=Loc 24 in src.llvm.strlen.
REGMEM
src.local./strlen__x__=L0%0%argnum0=/
1 : input.src.local./strlen__x__=L0%0%argnum0=/ : BV:32
=Loc 25 in src.llvm.strlen.
REGMEM
src.cur_rounding_mode
1 : input.src.cur_rounding_mode : ROUNDING_MODE
=Loc 26 in src.llvm.strlen.
MASKED
=mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./strlen__x__=L0%0%argnum0=/
=Loc 27 in src.llvm.strlen.
MASKED
=mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--symbol.1.0
=Loc 28 in src.llvm.strlen.
MASKED
=mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 29 in src.llvm.strlen.
MASKED
=mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--esp
=Loc 30 in src.llvm.strlen.
MASKED
=mem
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Locs end
=Liveness in src.llvm.strlen
=live locs at L0%0%d
2, 27, 28, 30
=live locs at Lentry%1%d
2, 27, 28, 30
=live locs at Lentry%1%intermediateVal0
2, 27, 28, 30
=live locs at Lentry%1%intermediateVal1
2, 27, 28, 30
=live locs at Lentry%1%intermediateVal2
2, 27, 28, 30
=live locs at Lentry%1%intermediateVal3
2, 3, 27, 28, 30
=live locs at Lentry%1%ghostItervar0
2, 3, 27, 28, 30
=live locs at Lentry%1%ghostItervar1
2, 3, 27, 28, 30
=live locs at Lfor.body%1%d
2, 3, 27, 28, 30
=live locs at Lfor.body%1%intermediateVal0
2, 3, 27, 28, 30
=live locs at Lfor.body%1%intermediateVal1
2, 3, 27, 28, 30
=live locs at Lfor.cond%1%bbentry
2, 3, 27, 28, 30
=live locs at Lfor.cond%1%d
2, 3, 27, 28, 30
=live locs at Lfor.cond%1%intermediateVal0
2, 3, 4, 27, 28, 30
=live locs at Lfor.cond%2%d
2, 3, 4, 27, 28, 30
=live locs at Lfor.cond%3%d
2, 3, 5, 27, 28, 30
=live locs at Lfor.cond%3%intermediateVal0
2, 3, 27, 28, 30
=live locs at Lfor.cond%3%intermediateVal1
2, 3, 27, 28, 30
=live locs at Lfor.cond%3%intermediateVal2
2, 3, 27, 28
=live locs at Lfor.cond%3%intermediateVal3
2, 3, 27, 28
=live locs at Lfor.end%1%d
2, 3, 27, 28
=live locs at Lfor.end%2%d
2, 3, 27, 28
=live locs at Lfor.end%3%d
2, 3, 27, 28
=live locs at Lfor.end%4%d
13, 27, 28
=live locs at Lfor.inc%1%d
2, 3, 27, 28, 30
=live locs at Lfor.inc%1%intermediateVal0
2, 3, 27, 28, 30
=live locs at Lfor.inc%1%intermediateVal1
2, 8, 27, 28, 30
=live locs at Lfor.inc%2%d
2, 8, 27, 28, 30
=live locs at Lfor.inc%2%intermediateVal0
2, 8, 27, 28, 30
=live locs at Lfor.inc%2%intermediateVal1
2, 8, 27, 28, 30
=live locs at Lfor.inc%2%intermediateVal2
2, 8, 27, 28, 30
=live locs at Lfor.inc%2%intermediateVal3
2, 3, 27, 28, 30
=live locs at Lfor.inc%2%ghostItervar0
2, 3, 27, 28, 30
=live locs at Lfor.inc%2%ghostItervar1
2, 3, 27, 28, 30
=live locs at E0%0%d
13, 27, 28

=Definedness in src.llvm.strlen
=loc definedness at L0%0%d
2, 24, 26, 27, 28, 30
=loc definedness at Lentry%1%d
2, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lentry%1%intermediateVal0
2, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lentry%1%intermediateVal1
1, 2, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lentry%1%intermediateVal2
1, 2, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lentry%1%intermediateVal3
1, 2, 3, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lentry%1%ghostItervar0
1, 2, 3, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lentry%1%ghostItervar1
1, 2, 3, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.body%1%d
1, 2, 3, 4, 5, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.body%1%intermediateVal0
1, 2, 3, 4, 5, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.body%1%intermediateVal1
1, 2, 3, 4, 5, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.cond%1%bbentry
1, 2, 3, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.cond%1%d
1, 2, 3, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.cond%1%intermediateVal0
1, 2, 3, 4, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.cond%2%d
1, 2, 3, 4, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.cond%3%d
1, 2, 3, 4, 5, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.cond%3%intermediateVal0
1, 2, 3, 4, 5, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.cond%3%intermediateVal1
1, 2, 3, 4, 5, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.cond%3%intermediateVal2
1, 2, 3, 4, 5, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.cond%3%intermediateVal3
1, 2, 3, 4, 5, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.end%1%d
1, 2, 3, 4, 5, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.end%2%d
1, 2, 3, 4, 5, 11, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.end%3%d
1, 2, 3, 4, 5, 11, 12, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.end%4%d
1, 2, 3, 4, 5, 11, 12, 13, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.inc%1%d
1, 2, 3, 4, 5, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.inc%1%intermediateVal0
1, 2, 3, 4, 5, 6, 7, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.inc%1%intermediateVal1
1, 2, 3, 4, 5, 6, 7, 8, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.inc%2%d
1, 2, 3, 4, 5, 6, 7, 8, 9, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.inc%2%intermediateVal0
1, 2, 3, 4, 5, 6, 7, 8, 9, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.inc%2%intermediateVal1
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.inc%2%intermediateVal2
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.inc%2%intermediateVal3
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.inc%2%ghostItervar0
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at Lfor.inc%2%ghostItervar1
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 22, 24, 25, 26, 27, 28, 30
=loc definedness at E0%0%d
1, 2, 3, 4, 5, 11, 12, 13, 14, 15, 20, 21, 22, 24, 25, 26, 27, 28, 30
=var definedness at L0%0%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.local./strlen__x__=L0%0%argnum0=/
=var definedness at Lentry%1%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.local./strlen__x__=L0%0%argnum0=/ input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lentry%1%intermediateVal0
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.local./strlen__x__=L0%0%argnum0=/ input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lentry%1%intermediateVal1
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.local./strlen__x__=L0%0%argnum0=/ input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lentry%1%intermediateVal2
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.local./strlen__x__=L0%0%argnum0=/ input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lentry%1%intermediateVal3
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.local./strlen__x__=L0%0%argnum0=/ input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lentry%1%ghostItervar0
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.local./strlen__x__=L0%0%argnum0=/ input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lentry%1%ghostItervar1
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.body%1%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.body%1%intermediateVal0
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.body%1%intermediateVal1
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.cond%1%bbentry
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.cond%1%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.cond%1%intermediateVal0
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.cond%2%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.cond%3%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.cond%3%intermediateVal0
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.cond%3%intermediateVal1
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.cond%3%intermediateVal2
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.cond%3%intermediateVal3
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.end%1%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.end%2%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%sub.ptr.lhs.cast input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.end%3%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%sub.ptr.lhs.cast input.src.llvm-%sub.ptr.rhs.cast input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.end%4%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%sub.ptr.lhs.cast input.src.llvm-%sub.ptr.rhs.cast input.src.llvm-%sub.ptr.sub input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.inc%1%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.inc%1%intermediateVal0
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.inc%1%intermediateVal1
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.inc%2%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset input.src.llvm-%incdec.ptr input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.inc%2%intermediateVal0
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset input.src.llvm-%incdec.ptr input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.inc%2%intermediateVal1
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset input.src.llvm-%incdec.ptr input.src.llvm-%p.0.phi.tmpvar.for.inc input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.inc%2%intermediateVal2
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset input.src.llvm-%incdec.ptr input.src.llvm-%p.0.phi.tmpvar.for.inc input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.inc%2%intermediateVal3
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset input.src.llvm-%incdec.ptr input.src.llvm-%p.0.phi.tmpvar.for.inc input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.inc%2%ghostItervar0
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset input.src.llvm-%incdec.ptr input.src.llvm-%p.0.phi.tmpvar.for.inc input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at Lfor.inc%2%ghostItervar1
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset input.src.llvm-%incdec.ptr input.src.llvm-%p.0.phi.tmpvar.for.inc input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset input.src.local_alloc_count input.src.cur_rounding_mode
=var definedness at E0%0%d
 input.src.llvm-%s input.src.llvm-mem input.src.llvm-mem.alloc input.src.llvm-%p.0.phi.tmpvar.entry input.src.llvm-%p.0 input.src.llvm-%0 input.src.llvm-%tobool input.src.llvm-%sub.ptr.lhs.cast input.src.llvm-%sub.ptr.rhs.cast input.src.llvm-%sub.ptr.sub input.src.llvm-%hidden-reg input.src.local./strlen__x__=L0%0%argnum0=/ input.src.llvm-ghostvar.itervar.1 input.src.llvm-%ret-reg input.src.llvm-indir_tgt input.src.local_alloc_count input.src.cur_rounding_mode

=Branch affecting variable locs in src.llvm.strlen
=branch affecting variable locs at L0%0%d
2, 27, 28, 30
=branch affecting variable locs at Lentry%1%d
2, 27, 28, 30
=branch affecting variable locs at Lentry%1%intermediateVal0
2, 27, 28, 30
=branch affecting variable locs at Lentry%1%intermediateVal1
1, 27, 28, 30
=branch affecting variable locs at Lentry%1%intermediateVal2
1, 27, 28, 30
=branch affecting variable locs at Lentry%1%intermediateVal3
3, 27, 28, 30
=branch affecting variable locs at Lentry%1%ghostItervar0
3, 27, 28, 30
=branch affecting variable locs at Lentry%1%ghostItervar1
3, 27, 28, 30
=branch affecting variable locs at Lfor.body%1%d
3, 27, 28, 30
=branch affecting variable locs at Lfor.body%1%intermediateVal0
3, 27, 28, 30
=branch affecting variable locs at Lfor.body%1%intermediateVal1
3, 27, 28, 30
=branch affecting variable locs at Lfor.cond%1%bbentry
3, 27, 28, 30
=branch affecting variable locs at Lfor.cond%1%d
3, 27, 28, 30
=branch affecting variable locs at Lfor.cond%1%intermediateVal0
3, 4, 27, 28, 30
=branch affecting variable locs at Lfor.cond%2%d
3, 4, 27, 28, 30
=branch affecting variable locs at Lfor.cond%3%d
3, 5, 27, 28, 30
=branch affecting variable locs at Lfor.cond%3%intermediateVal0
3, 27, 28, 30
=branch affecting variable locs at Lfor.cond%3%intermediateVal1
3, 27, 28, 30
=branch affecting variable locs at Lfor.cond%3%intermediateVal2

=branch affecting variable locs at Lfor.cond%3%intermediateVal3

=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at Lfor.end%2%d

=branch affecting variable locs at Lfor.end%3%d

=branch affecting variable locs at Lfor.end%4%d

=branch affecting variable locs at Lfor.inc%1%d
3, 27, 28, 30
=branch affecting variable locs at Lfor.inc%1%intermediateVal0
3, 27, 28, 30
=branch affecting variable locs at Lfor.inc%1%intermediateVal1
8, 27, 28, 30
=branch affecting variable locs at Lfor.inc%2%d
9, 27, 28, 30
=branch affecting variable locs at Lfor.inc%2%intermediateVal0
9, 27, 28, 30
=branch affecting variable locs at Lfor.inc%2%intermediateVal1
10, 27, 28, 30
=branch affecting variable locs at Lfor.inc%2%intermediateVal2
10, 27, 28, 30
=branch affecting variable locs at Lfor.inc%2%intermediateVal3
3, 27, 28, 30
=branch affecting variable locs at Lfor.inc%2%ghostItervar0
3, 27, 28, 30
=branch affecting variable locs at Lfor.inc%2%ghostItervar1
3, 27, 28, 30
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.llvm.strlen
=relevant memlabels
memlabel-mem--local./strlen__x__=L0%0%argnum0=/
memlabel-mem--symbol.1.0
memlabel-mem--heap
memlabel-mem--esp
memlabel-mem--arg.0
=relevant memlabels done
=graph_with_locs_done
=graph_with_simplified_assets
=graph_with_simplified_assets.loc_to_expr_map at L0%0%d=>Lentry%1%d
=graph_with_simplified_assets.loc_to_expr_map at L0%0%d=>Lentry%1%d for loc_id 22 {input.src.local_alloc_count }
1 : input.src.local_alloc_count.=L0%0%d= : COUNT
=graph_with_simplified_assets.loc_to_expr_map at L0%0%d=>Lentry%1%d for loc_id 25 {input.src.cur_rounding_mode }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_simplified_assets.loc_to_expr_map at L0%0%d=>Lentry%1%d done
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%d=>Lentry%1%intermediateVal0
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%d=>Lentry%1%intermediateVal0 done
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1 for loc_id 1 {input.src.llvm-%p.0.phi.tmpvar.entry }
1 : input.src.llvm-%s : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1 done
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%1%intermediateVal2
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%intermediateVal1=>Lentry%1%intermediateVal2 done
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3 for loc_id 3 {input.src.llvm-%p.0 }
1 : input.src.llvm-%s : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3 done
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%intermediateVal3=>Lentry%1%ghostItervar0
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%intermediateVal3=>Lentry%1%ghostItervar0 done
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1 for loc_id 21 {input.src.llvm-ghostvar.itervar.1 }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1 done
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%ghostItervar1=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.loc_to_expr_map at Lentry%1%ghostItervar1=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.body%1%d=>Lfor.body%1%intermediateVal0
=graph_with_simplified_assets.loc_to_expr_map at Lfor.body%1%d=>Lfor.body%1%intermediateVal0 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.body%1%intermediateVal1
=graph_with_simplified_assets.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.body%1%intermediateVal1 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.inc%1%d
=graph_with_simplified_assets.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.inc%1%d done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%1%d
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%1%d done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0 for loc_id 4 {input.src.llvm-%0 }
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1.0-heap-arg.0 : MEMLABEL
4 : input.src.llvm-%p.0 : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:8
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%1%intermediateVal0=>Lfor.cond%2%d
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%1%intermediateVal0=>Lfor.cond%2%d done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%2%d=>Lfor.cond%3%d
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%2%d=>Lfor.cond%3%d for loc_id 5 {input.src.llvm-%tobool }
1 : 0 { 0x0 } : BV:8
2 : input.src.llvm-%0 : BV:8
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%2%d=>Lfor.cond%3%d done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%3%d=>Lfor.cond%3%intermediateVal0
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%3%d=>Lfor.cond%3%intermediateVal0 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%3%d=>Lfor.cond%3%intermediateVal2
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%3%d=>Lfor.cond%3%intermediateVal2 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%3%intermediateVal0=>Lfor.cond%3%intermediateVal1
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%3%intermediateVal0=>Lfor.cond%3%intermediateVal1 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%3%intermediateVal1=>Lfor.body%1%d
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%3%intermediateVal1=>Lfor.body%1%d done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%3%intermediateVal2=>Lfor.cond%3%intermediateVal3
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%3%intermediateVal2=>Lfor.cond%3%intermediateVal3 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%3%intermediateVal3=>Lfor.end%1%d
=graph_with_simplified_assets.loc_to_expr_map at Lfor.cond%3%intermediateVal3=>Lfor.end%1%d done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%1%d=>Lfor.end%2%d
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%1%d=>Lfor.end%2%d for loc_id 11 {input.src.llvm-%sub.ptr.lhs.cast }
1 : input.src.llvm-%p.0 : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%1%d=>Lfor.end%2%d done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%2%d=>Lfor.end%3%d
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%2%d=>Lfor.end%3%d for loc_id 12 {input.src.llvm-%sub.ptr.rhs.cast }
1 : input.src.llvm-%s : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%2%d=>Lfor.end%3%d done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%3%d=>Lfor.end%4%d
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%3%d=>Lfor.end%4%d for loc_id 13 {input.src.llvm-%sub.ptr.sub }
1 : input.src.llvm-%p.0 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.src.llvm-%s : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%3%d=>Lfor.end%4%d done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%4%d=>E0%0%d
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%4%d=>E0%0%d for loc_id 14 {input.src.llvm-%hidden-reg }
1 : input.src.llvm-callee-save.0 : BV:32
2 : input.src.llvm-%hidden-reg : BV:32
3 : input.src.llvm-callee-save.1 : BV:32
4 : input.src.llvm-callee-save.2 : BV:32
5 : input.src.llvm-callee-save.3 : BV:32
6 : bvxor(1, 2, 3, 4, 5) : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%4%d=>E0%0%d for loc_id 15 {input.src.llvm-%ret-reg }
1 : input.src.llvm-%sub.ptr.sub : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%4%d=>E0%0%d for loc_id 20 {input.src.llvm-indir_tgt }
1 : retaddr_const : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.end%4%d=>E0%0%d done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0 for loc_id 6 {input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0 for loc_id 7 {input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1 for loc_id 8 {input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.llvm-%p.0 : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d for loc_id 9 {input.src.llvm-%incdec.ptr }
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%d=>Lfor.inc%2%intermediateVal0
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%d=>Lfor.inc%2%intermediateVal0 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1 for loc_id 10 {input.src.llvm-%p.0.phi.tmpvar.for.inc }
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%intermediateVal1=>Lfor.inc%2%intermediateVal2
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%intermediateVal1=>Lfor.inc%2%intermediateVal2 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3 for loc_id 3 {input.src.llvm-%p.0 }
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%intermediateVal3=>Lfor.inc%2%ghostItervar0
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%intermediateVal3=>Lfor.inc%2%ghostItervar0 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1 for loc_id 21 {input.src.llvm-ghostvar.itervar.1 }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.llvm-ghostvar.itervar.1 : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1 done
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%ghostItervar1=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.loc_to_expr_map at Lfor.inc%2%ghostItervar1=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.loc_to_expr_map done
=graph_with_simplified_assets done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lentry%1%d:
vacuous mls at Lentry%1%intermediateVal0:
vacuous mls at Lentry%1%intermediateVal1:
vacuous mls at Lentry%1%intermediateVal2:
vacuous mls at Lentry%1%intermediateVal3:
vacuous mls at Lentry%1%ghostItervar0:
vacuous mls at Lentry%1%ghostItervar1:
vacuous mls at Lfor.body%1%d:
vacuous mls at Lfor.body%1%intermediateVal0:
vacuous mls at Lfor.body%1%intermediateVal1:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%1%d:
vacuous mls at Lfor.cond%1%intermediateVal0:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.cond%3%d:
vacuous mls at Lfor.cond%3%intermediateVal0:
vacuous mls at Lfor.cond%3%intermediateVal1:
vacuous mls at Lfor.cond%3%intermediateVal2:
vacuous mls at Lfor.cond%3%intermediateVal3:
vacuous mls at Lfor.end%1%d:
vacuous mls at Lfor.end%2%d:
vacuous mls at Lfor.end%3%d:
vacuous mls at Lfor.end%4%d:
vacuous mls at Lfor.inc%1%d:
vacuous mls at Lfor.inc%1%intermediateVal0:
vacuous mls at Lfor.inc%1%intermediateVal1:
vacuous mls at Lfor.inc%2%d:
vacuous mls at Lfor.inc%2%intermediateVal0:
vacuous mls at Lfor.inc%2%intermediateVal1:
vacuous mls at Lfor.inc%2%intermediateVal2:
vacuous mls at Lfor.inc%2%intermediateVal3:
vacuous mls at Lfor.inc%2%ghostItervar0:
vacuous mls at Lfor.inc%2%ghostItervar1:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls at L0%0%d:
discontiguous mls at Lentry%1%d:
discontiguous mls at Lentry%1%intermediateVal0:
discontiguous mls at Lentry%1%intermediateVal1:
discontiguous mls at Lentry%1%intermediateVal2:
discontiguous mls at Lentry%1%intermediateVal3:
discontiguous mls at Lentry%1%ghostItervar0:
discontiguous mls at Lentry%1%ghostItervar1:
discontiguous mls at Lfor.body%1%d:
discontiguous mls at Lfor.body%1%intermediateVal0:
discontiguous mls at Lfor.body%1%intermediateVal1:
discontiguous mls at Lfor.cond%1%bbentry:
discontiguous mls at Lfor.cond%1%d:
discontiguous mls at Lfor.cond%1%intermediateVal0:
discontiguous mls at Lfor.cond%2%d:
discontiguous mls at Lfor.cond%3%d:
discontiguous mls at Lfor.cond%3%intermediateVal0:
discontiguous mls at Lfor.cond%3%intermediateVal1:
discontiguous mls at Lfor.cond%3%intermediateVal2:
discontiguous mls at Lfor.cond%3%intermediateVal3:
discontiguous mls at Lfor.end%1%d:
discontiguous mls at Lfor.end%2%d:
discontiguous mls at Lfor.end%3%d:
discontiguous mls at Lfor.end%4%d:
discontiguous mls at Lfor.inc%1%d:
discontiguous mls at Lfor.inc%1%intermediateVal0:
discontiguous mls at Lfor.inc%1%intermediateVal1:
discontiguous mls at Lfor.inc%2%d:
discontiguous mls at Lfor.inc%2%intermediateVal0:
discontiguous mls at Lfor.inc%2%intermediateVal1:
discontiguous mls at Lfor.inc%2%intermediateVal2:
discontiguous mls at Lfor.inc%2%intermediateVal3:
discontiguous mls at Lfor.inc%2%ghostItervar0:
discontiguous mls at Lfor.inc%2%ghostItervar1:
discontiguous mls at E0%0%d:
=graph_with_ml_contiguity_info done

=Alias analysis results in src.llvm.strlen
=Alias analysis result in src.llvm.strlen at call-context {strlen}
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 1 (input.src.llvm-%p.0.phi.tmpvar.entry)
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, memlabel-mem--arg.0, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 2 (input.src.llvm-%s)
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, memlabel-mem--arg.0, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 3 (input.src.llvm-%p.0)
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, memlabel-mem--arg.0, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 4 (input.src.llvm-%0)
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 5 (input.src.llvm-%tobool)
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 6 (input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset)
lr_status
lr_status_linearly_related(; )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 7 (input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset)
lr_status
lr_status_linearly_related(; )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 8 (input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset)
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, memlabel-mem--arg.0, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 9 (input.src.llvm-%incdec.ptr)
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, memlabel-mem--arg.0, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 10 (input.src.llvm-%p.0.phi.tmpvar.for.inc)
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, memlabel-mem--arg.0, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 11 (input.src.llvm-%sub.ptr.lhs.cast)
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, memlabel-mem--arg.0, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 12 (input.src.llvm-%sub.ptr.rhs.cast)
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, memlabel-mem--arg.0, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 13 (input.src.llvm-%sub.ptr.sub)
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, memlabel-mem--arg.0, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 14 (input.src.llvm-%hidden-reg)
lr_status
lr_status_linearly_related(; )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 15 (input.src.llvm-%ret-reg)
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, memlabel-mem--arg.0, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 16 (input.src.llvm-callee-save.0)
lr_status
lr_status_top
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 17 (input.src.llvm-callee-save.1)
lr_status
lr_status_top
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 18 (input.src.llvm-callee-save.2)
lr_status
lr_status_top
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 19 (input.src.llvm-callee-save.3)
lr_status
lr_status_top
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 20 (input.src.llvm-indir_tgt)
lr_status
lr_status_linearly_related(; )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 21 (input.src.llvm-ghostvar.itervar.1)
lr_status
lr_status_linearly_related(; )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 22 (input.src.local_alloc_count)
lr_status
lr_status_linearly_related(; )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 23 (input.src.local_alloc_count.=L0%0%d=)
lr_status
lr_status_top
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 24 (input.src.local./strlen__x__=L0%0%argnum0=/)
lr_status
lr_status_top
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 25 (input.src.cur_rounding_mode)
lr_status
lr_status_linearly_related(; )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 26 (memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--local./strlen__x__=L0%0%argnum0=/))
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 27 (memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--symbol.1.0))
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 28 (memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--heap))
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 29 (memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--esp))
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, )
=Alias analysis result in src.llvm.strlen at call-context {strlen} for loc 30 (memmask(input.src.llvm-mem, input.src.llvm-mem.alloc, memlabel-mem--arg.0))
lr_status
lr_status_bottom(symbol.1.0, ; memlabel-mem--heap, )
=Alias analysis results in src.llvm.strlen done
=Available expressions in src.llvm.strlen
=avail_exprs begin
=loc 1
=loc_expr
140311 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.src.llvm-%s : BV:32
=avail_exprs_val.end
=loc 2
=loc_expr
140307 : input.src.llvm-%s : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 4
=loc_expr
140318 : input.src.llvm-%0 : BV:8
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1.0-heap-arg.0 : MEMLABEL
4 : input.src.llvm-%p.0 : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:8
=avail_exprs_val.end
=loc 5
=loc_expr
140321 : input.src.llvm-%tobool : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 } : BV:8
2 : input.src.llvm-%0 : BV:8
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=avail_exprs_val.end
=loc 6
=loc_expr
140338 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 7
=loc_expr
140313 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 8
=loc_expr
140340 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.llvm-%p.0 : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 9
=loc_expr
140341 : input.src.llvm-%incdec.ptr : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=avail_exprs_val.end
=loc 10
=loc_expr
140342 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.src.llvm-%incdec.ptr : BV:32
=avail_exprs_val.end
=loc 11
=loc_expr
140343 : input.src.llvm-%sub.ptr.lhs.cast : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.src.llvm-%p.0 : BV:32
=avail_exprs_val.end
=loc 12
=loc_expr
140344 : input.src.llvm-%sub.ptr.rhs.cast : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.src.llvm-%s : BV:32
=avail_exprs_val.end
=loc 13
=loc_expr
140346 : input.src.llvm-%sub.ptr.sub : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.src.llvm-%sub.ptr.lhs.cast : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.src.llvm-%sub.ptr.rhs.cast : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 15
=loc_expr
140316 : input.src.llvm-%ret-reg : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.src.llvm-%sub.ptr.sub : BV:32
=avail_exprs_val.end
=loc 16
=loc_expr
140347 : input.src.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 17
=loc_expr
140350 : input.src.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 18
=loc_expr
140352 : input.src.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 19
=loc_expr
140354 : input.src.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 20
=loc_expr
140367 : input.src.llvm-indir_tgt : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 22
=loc_expr
140368 : input.src.local_alloc_count : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.src.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 23
=loc_expr
140365 : input.src.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 24
=loc_expr
140356 : input.src.local./strlen__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 25
=loc_expr
140369 : input.src.cur_rounding_mode : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.llvm.strlen
=loc 6 expr
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=loc 6 spreled-expr
140272 : 1 { 0x1 +1.11e129 } : BV:32
=loc 7 expr
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=loc 7 spreled-expr
140272 : 1 { 0x1 +1.11e129 } : BV:32
=loc 20 expr
1 : input.src.llvm-indir_tgt : BV:32
=loc 20 spreled-expr
140267 : retaddr_const : BV:32
=loc 22 expr
1 : input.src.local_alloc_count : COUNT
=loc 22 spreled-expr
140365 : input.src.local_alloc_count.=L0%0%d= : COUNT
=loc 25 expr
1 : input.src.cur_rounding_mode : ROUNDING_MODE
=loc 25 spreled-expr
140306 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=max-memlabel-varnum
1
=String-contents:
=Nextpc-map:
=Nextpc-map done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%1%d
tfg.assumes_around_edge at L0%0%d=>Lentry%1%d assume #0
tfg.assumes_around_edge at L0%0%d=>Lentry%1%d assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lentry%1%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lentry%1%d assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lentry%1%d
=LhsExpr
140307 : input.src.llvm-%s : BV:32
140314 : 1 { 0x1 +1.0e1025 } : INT
140357 : islangaligned(140307, 140314) : BOOL
=RhsExpr
140310 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lentry%1%d done
tfg.assumes_around_edge at Lentry%1%d=>Lentry%1%intermediateVal0
tfg.assumes_around_edge at Lentry%1%d=>Lentry%1%intermediateVal0 done
tfg.assumes_around_edge at Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
tfg.assumes_around_edge at Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1 done
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%1%intermediateVal2
tfg.assumes_around_edge at Lentry%1%intermediateVal1=>Lentry%1%intermediateVal2 done
tfg.assumes_around_edge at Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
tfg.assumes_around_edge at Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3 done
tfg.assumes_around_edge at Lentry%1%intermediateVal3=>Lentry%1%ghostItervar0
tfg.assumes_around_edge at Lentry%1%intermediateVal3=>Lentry%1%ghostItervar0 done
tfg.assumes_around_edge at Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
tfg.assumes_around_edge at Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1 done
tfg.assumes_around_edge at Lentry%1%ghostItervar1=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lentry%1%ghostItervar1=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.body%1%intermediateVal0
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.body%1%intermediateVal0 done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.body%1%intermediateVal1
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.body%1%intermediateVal1 done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.inc%1%d
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.inc%1%d done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%1%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%1%d done
tfg.assumes_around_edge at Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
tfg.assumes_around_edge at Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0 assume #0
tfg.assumes_around_edge at Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0 assume #0.ec
tfg.assumes_around_edge at Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0 assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0 assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=LhsExpr
140312 : input.src.llvm-%p.0 : BV:32
140314 : 1 { 0x1 +1.0e1025 } : INT
140317 : islangaligned(140312, 140314) : BOOL
=RhsExpr
140310 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0 done
tfg.assumes_around_edge at Lfor.cond%1%intermediateVal0=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%intermediateVal0=>Lfor.cond%2%d assume #0
tfg.assumes_around_edge at Lfor.cond%1%intermediateVal0=>Lfor.cond%2%d assume #0.ec
tfg.assumes_around_edge at Lfor.cond%1%intermediateVal0=>Lfor.cond%2%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.cond%1%intermediateVal0=>Lfor.cond%2%d assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.cond%1%intermediateVal0=>Lfor.cond%2%d
=LhsExpr
140312 : input.src.llvm-%p.0 : BV:32
140314 : 1 { 0x1 +1.0e1025 } : INT
140317 : islangaligned(140312, 140314) : BOOL
=RhsExpr
140310 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.cond%1%intermediateVal0=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.cond%3%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.cond%3%d done
tfg.assumes_around_edge at Lfor.cond%3%d=>Lfor.cond%3%intermediateVal0
tfg.assumes_around_edge at Lfor.cond%3%d=>Lfor.cond%3%intermediateVal0 done
tfg.assumes_around_edge at Lfor.cond%3%d=>Lfor.cond%3%intermediateVal2
tfg.assumes_around_edge at Lfor.cond%3%d=>Lfor.cond%3%intermediateVal2 done
tfg.assumes_around_edge at Lfor.cond%3%intermediateVal0=>Lfor.cond%3%intermediateVal1
tfg.assumes_around_edge at Lfor.cond%3%intermediateVal0=>Lfor.cond%3%intermediateVal1 done
tfg.assumes_around_edge at Lfor.cond%3%intermediateVal1=>Lfor.body%1%d
tfg.assumes_around_edge at Lfor.cond%3%intermediateVal1=>Lfor.body%1%d done
tfg.assumes_around_edge at Lfor.cond%3%intermediateVal2=>Lfor.cond%3%intermediateVal3
tfg.assumes_around_edge at Lfor.cond%3%intermediateVal2=>Lfor.cond%3%intermediateVal3 done
tfg.assumes_around_edge at Lfor.cond%3%intermediateVal3=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%3%intermediateVal3=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>Lfor.end%2%d
tfg.assumes_around_edge at Lfor.end%1%d=>Lfor.end%2%d done
tfg.assumes_around_edge at Lfor.end%2%d=>Lfor.end%3%d
tfg.assumes_around_edge at Lfor.end%2%d=>Lfor.end%3%d done
tfg.assumes_around_edge at Lfor.end%3%d=>Lfor.end%4%d
tfg.assumes_around_edge at Lfor.end%3%d=>Lfor.end%4%d done
tfg.assumes_around_edge at Lfor.end%4%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%4%d=>E0%0%d done
tfg.assumes_around_edge at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
tfg.assumes_around_edge at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0 assume #0
tfg.assumes_around_edge at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0 assume #0.ec
tfg.assumes_around_edge at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0 assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0 assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=LhsExpr
140310 : 1 { 0x1 } : BOOL
=RhsExpr
140310 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0 assume #1
tfg.assumes_around_edge at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0 assume #1.ec
tfg.assumes_around_edge at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0 assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0 assume #1.pred
=Comment
undef-behaviour-gepoffset-assume.edge.Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=LhsExpr
140272 : 1 { 0x1 +1.11e129 } : BV:32
140312 : input.src.llvm-%p.0 : BV:32
140389 : bvadd(140272, 140312) : BV:32
140392 : isgepoffset(140389, 140272) : BOOL
=RhsExpr
140310 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0 done
tfg.assumes_around_edge at Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
tfg.assumes_around_edge at Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1 done
tfg.assumes_around_edge at Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
tfg.assumes_around_edge at Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d done
tfg.assumes_around_edge at Lfor.inc%2%d=>Lfor.inc%2%intermediateVal0
tfg.assumes_around_edge at Lfor.inc%2%d=>Lfor.inc%2%intermediateVal0 done
tfg.assumes_around_edge at Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
tfg.assumes_around_edge at Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1 done
tfg.assumes_around_edge at Lfor.inc%2%intermediateVal1=>Lfor.inc%2%intermediateVal2
tfg.assumes_around_edge at Lfor.inc%2%intermediateVal1=>Lfor.inc%2%intermediateVal2 done
tfg.assumes_around_edge at Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
tfg.assumes_around_edge at Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3 done
tfg.assumes_around_edge at Lfor.inc%2%intermediateVal3=>Lfor.inc%2%ghostItervar0
tfg.assumes_around_edge at Lfor.inc%2%intermediateVal3=>Lfor.inc%2%ghostItervar0 done
tfg.assumes_around_edge at Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
tfg.assumes_around_edge at Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1 done
tfg.assumes_around_edge at Lfor.inc%2%ghostItervar1=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.inc%2%ghostItervar1=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge done
=TFGdone
=suffixpaths for src.llvm.strlen
=suffixpaths for src.llvm.strlen done
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 6
=pc
Lfor.body%1%d
=linename
line 6
=pc
Lfor.cond%1%d
=linename
line 6
=pc
Lfor.cond%2%d
=linename
line 6
=pc
Lfor.cond%3%d
=linename
line 6
=pc
Lfor.end%1%d
=linename
line 7
=pc
Lfor.end%2%d
=linename
line 7
=pc
Lfor.end%3%d
=linename
line 7
=pc
Lfor.end%4%d
=linename
line 7
=pc
Lfor.inc%1%d
=linename
line 6
=pc
Lfor.inc%2%d
=linename
line 6
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 15
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.cond%3%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 11
=pc
Lfor.end%2%d
=column_name
 at column 11
=pc
Lfor.end%3%d
=column_name
 at column 11
=pc
Lfor.end%4%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 19
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 6 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 6 at column 3)
=pc
Lfor.cond%1%d
=line_and_column
(line 6 at column 15)
=pc
Lfor.cond%2%d
=line_and_column
(line 6 at column 3)
=pc
Lfor.cond%3%d
=line_and_column
(line 6 at column 3)
=pc
Lfor.end%1%d
=line_and_column
(line 7 at column 11)
=pc
Lfor.end%2%d
=line_and_column
(line 7 at column 11)
=pc
Lfor.end%3%d
=line_and_column
(line 7 at column 11)
=pc
Lfor.end%4%d
=line_and_column
(line 7 at column 3)
=pc
Lfor.inc%1%d
=line_and_column
(line 6 at column 19)
=pc
Lfor.inc%2%d
=line_and_column
(line 6 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.src.llvm-%s : L0%0%d : s
input.src.llvm-%p.0.phi.tmpvar.entry : L0%0%d : s
input.src.llvm-%p.0 : Lfor.cond%1%bbentry : p
input.src.llvm-%0 : L0%0%d : SRCMEM[input.src.llvm-%p.0]_1
input.src.llvm-%tobool : L0%0%d : not(input.src.llvm-%0 = 0)
input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : L0%0%d : 1
input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : L0%0%d : (1 + input.src.llvm-%p.0)
input.src.llvm-%incdec.ptr : Lfor.inc%2%bbentry : p
input.src.llvm-%p.0.phi.tmpvar.for.inc : L0%0%d : input.src.llvm-%incdec.ptr
input.src.llvm-%sub.ptr.lhs.cast : L0%0%d : input.src.llvm-%p.0
input.src.llvm-%sub.ptr.rhs.cast : L0%0%d : s
input.src.llvm-%sub.ptr.sub : L0%0%d : (input.src.llvm-%sub.ptr.lhs.cast - input.src.llvm-%sub.ptr.rhs.cast)
input.src.llvm-callee-save.0 : L0%0%d : input.src.llvm-callee-save.0
input.src.llvm-callee-save.1 : L0%0%d : input.src.llvm-callee-save.1
input.src.llvm-callee-save.2 : L0%0%d : input.src.llvm-callee-save.2
input.src.llvm-callee-save.3 : L0%0%d : input.src.llvm-callee-save.3
input.src.local./strlen__x__=L0%0%argnum0=/ : L0%0%d : input.src.local./strlen__x__=L0%0%argnum0=/
input.src.local_alloc_count.=L0%0%d= : L0%0%d : input.src.local_alloc_count.=L0%0%d=
input.src.llvm-%ret-reg : L0%0%d : input.src.llvm-%sub.ptr.sub
input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : L0%0%d : 1
input.src.llvm-indir_tgt : L0%0%d : return-address
input.src.local_alloc_count : L0%0%d : input.src.local_alloc_count.=L0%0%d=
input.src.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=src.llvm-%p.0
=src.llvm-%p.0 loop pc: Lfor.cond%1%d
=src.llvm-%p.0 val_scevb
=src.llvm-%p.0 val_scevb scev
=src.llvm-%p.0 val_scevb scev loop: Lfor.cond%1%d
=src.llvm-%p.0 val_scevb scev scev_overflow_flag: nuw
=src.llvm-%p.0 val_scevb scev scev_expr
1 : input.src.llvm-%s : BV32
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : nuw
=src.llvm-%p.0 val_scevb scev scev_expr done
=src.llvm-%p.0 val_scevb unsigned lower bound: 32:4294967295
=src.llvm-%p.0 val_scevb unsigned upper bound: 32:4294967295
=src.llvm-%p.0 val_scevb signed lower bound: 32:4294967295
=src.llvm-%p.0 val_scevb signed upper bound: 32:4294967295
=src.llvm-%p.0 atuse_scevb
=src.llvm-%p.0 atuse_scevb scev
=src.llvm-%p.0 atuse_scevb scev loop: Lfor.cond%1%d
=src.llvm-%p.0 atuse_scevb scev scev_overflow_flag: nuw
=src.llvm-%p.0 atuse_scevb scev scev_expr
1 : input.src.llvm-%s : BV32
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : nuw
=src.llvm-%p.0 atuse_scevb scev scev_expr done
=src.llvm-%p.0 atuse_scevb unsigned lower bound: 32:4294967295
=src.llvm-%p.0 atuse_scevb unsigned upper bound: 32:4294967295
=src.llvm-%p.0 atuse_scevb signed lower bound: 32:4294967295
=src.llvm-%p.0 atuse_scevb signed upper bound: 32:4294967295
=src.llvm-%p.0 atexit_scev
=src.llvm-%p.0 atexit_scev loop: Lfor.cond%1%d
=src.llvm-%p.0 atexit_scev scev_overflow_flag: nuw
=src.llvm-%p.0 atexit_scev scev_expr
1 : input.src.llvm-%s : BV32
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : nuw
=src.llvm-%p.0 atexit_scev scev_expr done
=src.llvm-%0
=src.llvm-%0 loop pc: Lfor.cond%1%d
=src.llvm-%0 val_scevb
=src.llvm-%0 val_scevb scev
=src.llvm-%0 val_scevb scev loop: L0%0%d
=src.llvm-%0 val_scevb scev scev_overflow_flag: 
=src.llvm-%0 val_scevb scev scev_expr
4 : input.src.llvm-%0 : BV8
=src.llvm-%0 val_scevb scev scev_expr done
=src.llvm-%0 val_scevb unsigned lower bound: 8:255
=src.llvm-%0 val_scevb unsigned upper bound: 8:255
=src.llvm-%0 val_scevb signed lower bound: 8:255
=src.llvm-%0 val_scevb signed upper bound: 8:255
=src.llvm-%0 atuse_scevb
=src.llvm-%0 atuse_scevb scev
=src.llvm-%0 atuse_scevb scev loop: L0%0%d
=src.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=src.llvm-%0 atuse_scevb scev scev_expr
4 : input.src.llvm-%0 : BV8
=src.llvm-%0 atuse_scevb scev scev_expr done
=src.llvm-%0 atuse_scevb unsigned lower bound: 8:255
=src.llvm-%0 atuse_scevb unsigned upper bound: 8:255
=src.llvm-%0 atuse_scevb signed lower bound: 8:255
=src.llvm-%0 atuse_scevb signed upper bound: 8:255
=src.llvm-%0 atexit_scev
=src.llvm-%0 atexit_scev loop: L0%0%d
=src.llvm-%0 atexit_scev scev_overflow_flag: 
=src.llvm-%0 atexit_scev scev_expr
4 : input.src.llvm-%0 : BV8
=src.llvm-%0 atexit_scev scev_expr done
=src.llvm-%incdec.ptr
=src.llvm-%incdec.ptr loop pc: Lfor.cond%1%d
=src.llvm-%incdec.ptr val_scevb
=src.llvm-%incdec.ptr val_scevb scev
=src.llvm-%incdec.ptr val_scevb scev loop: Lfor.cond%1%d
=src.llvm-%incdec.ptr val_scevb scev scev_overflow_flag: nw
=src.llvm-%incdec.ptr val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
1 : input.src.llvm-%s : BV32
5 : scev_op_add(2, 1) : loop L0%0%d : nsw
6 : scev_op_addrec(5, 2) : loop Lfor.cond%1%d : nw
=src.llvm-%incdec.ptr val_scevb scev scev_expr done
=src.llvm-%incdec.ptr val_scevb unsigned lower bound: 32:4294967295
=src.llvm-%incdec.ptr val_scevb unsigned upper bound: 32:4294967295
=src.llvm-%incdec.ptr val_scevb signed lower bound: 32:4294967295
=src.llvm-%incdec.ptr val_scevb signed upper bound: 32:4294967295
=src.llvm-%incdec.ptr atuse_scevb
=src.llvm-%incdec.ptr atuse_scevb scev
=src.llvm-%incdec.ptr atuse_scevb scev loop: Lfor.cond%1%d
=src.llvm-%incdec.ptr atuse_scevb scev scev_overflow_flag: nw
=src.llvm-%incdec.ptr atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
1 : input.src.llvm-%s : BV32
5 : scev_op_add(2, 1) : loop L0%0%d : nsw
6 : scev_op_addrec(5, 2) : loop Lfor.cond%1%d : nw
=src.llvm-%incdec.ptr atuse_scevb scev scev_expr done
=src.llvm-%incdec.ptr atuse_scevb unsigned lower bound: 32:4294967295
=src.llvm-%incdec.ptr atuse_scevb unsigned upper bound: 32:4294967295
=src.llvm-%incdec.ptr atuse_scevb signed lower bound: 32:4294967295
=src.llvm-%incdec.ptr atuse_scevb signed upper bound: 32:4294967295
=src.llvm-%incdec.ptr atexit_scev
=src.llvm-%incdec.ptr atexit_scev loop: Lfor.cond%1%d
=src.llvm-%incdec.ptr atexit_scev scev_overflow_flag: nw
=src.llvm-%incdec.ptr atexit_scev scev_expr
2 : 00000000000000000000000000000001b
1 : input.src.llvm-%s : BV32
5 : scev_op_add(2, 1) : loop L0%0%d : nsw
6 : scev_op_addrec(5, 2) : loop Lfor.cond%1%d : nw
=src.llvm-%incdec.ptr atexit_scev scev_expr done
=src.llvm-%sub.ptr.lhs.cast
=src.llvm-%sub.ptr.lhs.cast loop pc: L0%0%d
=src.llvm-%sub.ptr.lhs.cast val_scevb
=src.llvm-%sub.ptr.lhs.cast val_scevb scev
=src.llvm-%sub.ptr.lhs.cast val_scevb scev loop: L0%0%d
=src.llvm-%sub.ptr.lhs.cast val_scevb scev scev_overflow_flag: 
=src.llvm-%sub.ptr.lhs.cast val_scevb scev scev_expr
7 : input.src.llvm-%sub.ptr.lhs.cast : BV32
=src.llvm-%sub.ptr.lhs.cast val_scevb scev scev_expr done
=src.llvm-%sub.ptr.lhs.cast val_scevb unsigned lower bound: 32:4294967295
=src.llvm-%sub.ptr.lhs.cast val_scevb unsigned upper bound: 32:4294967295
=src.llvm-%sub.ptr.lhs.cast val_scevb signed lower bound: 32:4294967295
=src.llvm-%sub.ptr.lhs.cast val_scevb signed upper bound: 32:4294967295
=src.llvm-%sub.ptr.lhs.cast atuse_scevb
=src.llvm-%sub.ptr.lhs.cast atuse_scevb scev
=src.llvm-%sub.ptr.lhs.cast atuse_scevb scev loop: L0%0%d
=src.llvm-%sub.ptr.lhs.cast atuse_scevb scev scev_overflow_flag: 
=src.llvm-%sub.ptr.lhs.cast atuse_scevb scev scev_expr
7 : input.src.llvm-%sub.ptr.lhs.cast : BV32
=src.llvm-%sub.ptr.lhs.cast atuse_scevb scev scev_expr done
=src.llvm-%sub.ptr.lhs.cast atuse_scevb unsigned lower bound: 32:4294967295
=src.llvm-%sub.ptr.lhs.cast atuse_scevb unsigned upper bound: 32:4294967295
=src.llvm-%sub.ptr.lhs.cast atuse_scevb signed lower bound: 32:4294967295
=src.llvm-%sub.ptr.lhs.cast atuse_scevb signed upper bound: 32:4294967295
=src.llvm-%sub.ptr.lhs.cast atexit_scev nullptr
=src.llvm-%sub.ptr.rhs.cast
=src.llvm-%sub.ptr.rhs.cast loop pc: L0%0%d
=src.llvm-%sub.ptr.rhs.cast val_scevb
=src.llvm-%sub.ptr.rhs.cast val_scevb scev
=src.llvm-%sub.ptr.rhs.cast val_scevb scev loop: L0%0%d
=src.llvm-%sub.ptr.rhs.cast val_scevb scev scev_overflow_flag: 
=src.llvm-%sub.ptr.rhs.cast val_scevb scev scev_expr
8 : input.src.llvm-%sub.ptr.rhs.cast : BV32
=src.llvm-%sub.ptr.rhs.cast val_scevb scev scev_expr done
=src.llvm-%sub.ptr.rhs.cast val_scevb unsigned lower bound: 32:4294967295
=src.llvm-%sub.ptr.rhs.cast val_scevb unsigned upper bound: 32:4294967295
=src.llvm-%sub.ptr.rhs.cast val_scevb signed lower bound: 32:4294967295
=src.llvm-%sub.ptr.rhs.cast val_scevb signed upper bound: 32:4294967295
=src.llvm-%sub.ptr.rhs.cast atuse_scevb
=src.llvm-%sub.ptr.rhs.cast atuse_scevb scev
=src.llvm-%sub.ptr.rhs.cast atuse_scevb scev loop: L0%0%d
=src.llvm-%sub.ptr.rhs.cast atuse_scevb scev scev_overflow_flag: 
=src.llvm-%sub.ptr.rhs.cast atuse_scevb scev scev_expr
8 : input.src.llvm-%sub.ptr.rhs.cast : BV32
=src.llvm-%sub.ptr.rhs.cast atuse_scevb scev scev_expr done
=src.llvm-%sub.ptr.rhs.cast atuse_scevb unsigned lower bound: 32:4294967295
=src.llvm-%sub.ptr.rhs.cast atuse_scevb unsigned upper bound: 32:4294967295
=src.llvm-%sub.ptr.rhs.cast atuse_scevb signed lower bound: 32:4294967295
=src.llvm-%sub.ptr.rhs.cast atuse_scevb signed upper bound: 32:4294967295
=src.llvm-%sub.ptr.rhs.cast atexit_scev nullptr
=src.llvm-%sub.ptr.sub
=src.llvm-%sub.ptr.sub loop pc: L0%0%d
=src.llvm-%sub.ptr.sub val_scevb
=src.llvm-%sub.ptr.sub val_scevb scev
=src.llvm-%sub.ptr.sub val_scevb scev loop: L0%0%d
=src.llvm-%sub.ptr.sub val_scevb scev scev_overflow_flag: 
=src.llvm-%sub.ptr.sub val_scevb scev scev_expr
9 : 11111111111111111111111111111111b
8 : input.src.llvm-%sub.ptr.rhs.cast : BV32
10 : scev_op_mul(9, 8) : loop L0%0%d : 
7 : input.src.llvm-%sub.ptr.lhs.cast : BV32
11 : scev_op_add(10, 7) : loop L0%0%d : 
=src.llvm-%sub.ptr.sub val_scevb scev scev_expr done
=src.llvm-%sub.ptr.sub val_scevb unsigned lower bound: 32:4294967295
=src.llvm-%sub.ptr.sub val_scevb unsigned upper bound: 32:4294967295
=src.llvm-%sub.ptr.sub val_scevb signed lower bound: 32:4294967295
=src.llvm-%sub.ptr.sub val_scevb signed upper bound: 32:4294967295
=src.llvm-%sub.ptr.sub atuse_scevb
=src.llvm-%sub.ptr.sub atuse_scevb scev
=src.llvm-%sub.ptr.sub atuse_scevb scev loop: L0%0%d
=src.llvm-%sub.ptr.sub atuse_scevb scev scev_overflow_flag: 
=src.llvm-%sub.ptr.sub atuse_scevb scev scev_expr
9 : 11111111111111111111111111111111b
8 : input.src.llvm-%sub.ptr.rhs.cast : BV32
10 : scev_op_mul(9, 8) : loop L0%0%d : 
7 : input.src.llvm-%sub.ptr.lhs.cast : BV32
11 : scev_op_add(10, 7) : loop L0%0%d : 
=src.llvm-%sub.ptr.sub atuse_scevb scev scev_expr done
=src.llvm-%sub.ptr.sub atuse_scevb unsigned lower bound: 32:4294967295
=src.llvm-%sub.ptr.sub atuse_scevb unsigned upper bound: 32:4294967295
=src.llvm-%sub.ptr.sub atuse_scevb signed lower bound: 32:4294967295
=src.llvm-%sub.ptr.sub atuse_scevb signed upper bound: 32:4294967295
=src.llvm-%sub.ptr.sub atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%intermediateVal0
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%intermediateVal1
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%intermediateVal2
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%intermediateVal3
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%ghostItervar0
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%ghostItervar1
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 5 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal0
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal1
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%intermediateVal0
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%3%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%3%intermediateVal0
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%3%intermediateVal1
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%3%intermediateVal2
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%3%intermediateVal3
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%2%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-%sub.ptr.lhs.cast : BV:32
=reaching defns for expr 10 edges
  Lfor.end%1%d=>Lfor.end%2%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 12 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 13 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 16 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 16 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%3%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-%sub.ptr.lhs.cast : BV:32
=reaching defns for expr 10 edges
  Lfor.end%1%d=>Lfor.end%2%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-%sub.ptr.rhs.cast : BV:32
=reaching defns for expr 11 edges
  Lfor.end%2%d=>Lfor.end%3%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 12 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 14 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 16 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 17 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 17 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%4%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-%sub.ptr.lhs.cast : BV:32
=reaching defns for expr 10 edges
  Lfor.end%1%d=>Lfor.end%2%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-%sub.ptr.rhs.cast : BV:32
=reaching defns for expr 11 edges
  Lfor.end%2%d=>Lfor.end%3%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-%sub.ptr.sub : BV:32
=reaching defns for expr 12 edges
  Lfor.end%3%d=>Lfor.end%4%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 15 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 16 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 17 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 18 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 18 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc%1%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc%1%intermediateVal0
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc%1%intermediateVal1
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc%2%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc%2%intermediateVal0
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc%2%intermediateVal1
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc%2%intermediateVal2
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc%2%intermediateVal3
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc%2%ghostItervar0
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc%2%ghostItervar1
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 3 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 4 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 6 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 12 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.src.llvm-%s : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.src.llvm-%p.0.phi.tmpvar.entry : BV:32
=reaching defns for expr 1 edges
  Lentry%1%intermediateVal0=>Lentry%1%intermediateVal1
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.src.llvm-%p.0 : BV:32
=reaching defns for expr 2 edges
  Lentry%1%intermediateVal2=>Lentry%1%intermediateVal3
  Lfor.inc%2%intermediateVal2=>Lfor.inc%2%intermediateVal3
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.src.llvm-%ret-reg : BV:32
=reaching defns for expr 3 edges
  Lfor.end%4%d=>E0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.intermediate.gepoffset.1.offset : BV:32
=reaching defns for expr 4 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.src.llvm-%0 : BV:8
=reaching defns for expr 5 edges
  Lfor.cond%1%d=>Lfor.cond%1%intermediateVal0
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.src.llvm-%tobool : BOOL
=reaching defns for expr 6 edges
  Lfor.cond%2%d=>Lfor.cond%3%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.1.total_offset : BV:32
=reaching defns for expr 7 edges
  Lfor.inc%1%d=>Lfor.inc%1%intermediateVal0
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.src.llvm-%9d75678ba07a2a887aa6cddca1408f.gepoffset.2.total_offset : BV:32
=reaching defns for expr 8 edges
  Lfor.inc%1%intermediateVal0=>Lfor.inc%1%intermediateVal1
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.src.llvm-%incdec.ptr : BV:32
=reaching defns for expr 9 edges
  Lfor.inc%1%intermediateVal1=>Lfor.inc%2%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.src.llvm-%p.0.phi.tmpvar.for.inc : BV:32
=reaching defns for expr 10 edges
  Lfor.inc%2%intermediateVal0=>Lfor.inc%2%intermediateVal1
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.src.llvm-%sub.ptr.lhs.cast : BV:32
=reaching defns for expr 11 edges
  Lfor.end%1%d=>Lfor.end%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.src.llvm-%sub.ptr.rhs.cast : BV:32
=reaching defns for expr 12 edges
  Lfor.end%2%d=>Lfor.end%3%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.src.llvm-%sub.ptr.sub : BV:32
=reaching defns for expr 13 edges
  Lfor.end%3%d=>Lfor.end%4%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.src.llvm-%hidden-reg : BV:32
=reaching defns for expr 14 edges
  Lfor.end%4%d=>E0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--symbol.1.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 15 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 16 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1 : BV:32
=reaching defns for expr 17 edges
  Lentry%1%ghostItervar0=>Lentry%1%ghostItervar1
  Lfor.inc%2%ghostItervar0=>Lfor.inc%2%ghostItervar1
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.src.llvm-indir_tgt : BV:32
=reaching defns for expr 18 edges
  Lfor.end%4%d=>E0%0%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./strlen__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 19 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--esp : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 20 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.src.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.src.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 21 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 21 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=TFG_LLVM_done
=TFG_SSA_done
=FunctionTFGMap done
=llvm_header
; ModuleID = '/home/shubhani/superopt-project-ssa_perf_fixes/superopt-tests/build/BLR_demo/strlen_src.c.bc'
source_filename = "/home/shubhani/superopt-project-ssa_perf_fixes/superopt-tests/BLR_demo/strlen_src.c"
target datalayout = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-f64:32:64-f80:32-n8:16:32-S128"
target triple = "i386-unknown-linux-gnu"

=type_decls
=globals_with_initializers
=function_declarations
; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1
=FunctionSignatures
=FunctionSignature: llvm.dbg.declare
void (metadata arg0, metadata arg1, metadata arg2)
=FunctionSignature: llvm.dbg.value
void (metadata arg0, metadata arg1, metadata arg2)
=FunctionSignature: strlen
i32 (i8* %s)
=FunctionAttributes
=FunctionAttributesFor: llvm.dbg.declare
#1
=FunctionAttributesFor: llvm.dbg.value
#1
=FunctionAttributesFor: strlen
#0
=FunctionLinkage
=FunctionLinkageFor: llvm.dbg.declare

=FunctionLinkageFor: llvm.dbg.value

=FunctionLinkageFor: strlen

=Attributes
0 = noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false"
1 = nounwind readnone speculatable willreturn
=Metadata
!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6}
!llvm.ident = !{!7}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 12.0.0 (https://github.com/bsorav/llvm-project2 fbc599d0147c436382fe975c54bbb42a920092a2)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/shubhani/superopt-project-ssa_perf_fixes/superopt-tests/BLR_demo/strlen_src.c", directory: "/home/shubhani/superopt-project-ssa_perf_fixes/superopt-tests")
!2 = !{}
!3 = !{i32 1, !"NumRegisterParameters", i32 0}
!4 = !{i32 7, !"Dwarf Version", i32 4}
!5 = !{i32 2, !"Debug Info Version", i32 3}
!6 = !{i32 1, !"wchar_size", i32 4}
!7 = !{!"clang version 12.0.0 (https://github.com/bsorav/llvm-project2 fbc599d0147c436382fe975c54bbb42a920092a2)"}
