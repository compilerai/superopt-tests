define genrule_run_tests

# note that $@, $<, $^ and friends do not work with eval and call,
# so we $(1) and $(2) in their places

run_tests_$(1): run_tests_%: %.finished
	# @echo "Generating CSVs..."
	# @$(foreach t,$(2), if $(MAKE) -C $(BUILDDIR)/$(t) collect_csv; then :; else echo "ERROR: 'make collect_csv' failed for target" $(BUILDDIR)/$(t); exit 1; fi; mv $(BUILDDIR)/$(t)/*.csv .;)

# list of files containing commands -- make sure there are no spaces in filepaths
$(1).run.deps := $(BUILDDIR)/$(1)_cmds # $(BUILDDIR)/$(1)_clangv_Od

$(1).finished: %.finished: $$($(1).run.deps)
	@clear
	@echo "Running the eqchecks for suite $(1)..."
	@cat $$($(1).run.deps) | parallel --load "33%" | tee $(1).finished
	# for f in $$($(1).run.deps); do mv $${f} $${f}.finished; done # for some inexplicable reason, this doesn't work

# generate command files

$(BUILDDIR)/$(1)_cmds: $(BUILDDIR)/%_cmds: $(2)
	@$(foreach t,$(2), if $(MAKE) -C $(BUILDDIR)/$(t) cmds; then :; else echo "ERROR: 'make cmds' failed for target" $(BUILDDIR)/$(t); exit 1; fi;)
	@true > $(BUILDDIR)/$(1)_cmds
	@$(foreach t,$(2), if [ -f $(BUILDDIR)/$(t)/cmds ]; then cat $(BUILDDIR)/$(t)/cmds >> $(BUILDDIR)/$(1)_cmds; else echo "ERROR:" $(BUILDDIR)/$(t)/cmds "does not exist for target" $(t); rm $(BUILDDIR)/$(1)_cmds; exit 1; fi;)

$(BUILDDIR)/$(1)_clangv_Od: $(BUILDDIR)/%_clangv_Od: $(2)
	@$(foreach t,$(2), if $(MAKE) -C $(BUILDDIR)/$(t) clangv_Od; then :; else echo "ERROR: 'make clangv_Od' failed for target" $(BUILDDIR)/$(t); exit 1; fi;)
	@true > $(BUILDDIR)/$(1)_clangv_Od
	@$(foreach t,$(2), if [ -f $(BUILDDIR)/$(t)/clangv_Od ]; then cat $(BUILDDIR)/$(t)/clangv_Od >> $(BUILDDIR)/$(1)_clangv_Od; else echo "ERROR:" $(BUILDDIR)/$(t)/clangv_Od "does not exist for target" $(t); rm $(BUILDDIR)/$(1)_clangv_Od; exit 1; fi;)

endef

define add_suite
$(eval TARGETS += $(2))
$(eval $(call genrule_run_tests,$(1),$(2)))

endef
